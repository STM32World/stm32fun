
stm32world_trng.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800b958  0800b958  0000c958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb10  0800bb10  0000d158  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb10  0800bb10  0000cb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb18  0800bb18  0000d158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb18  0800bb18  0000cb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb1c  0800bb1c  0000cb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800bb20  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d158  2**0
                  CONTENTS
 10 .bss          00000f74  20000158  20000158  0000d158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010cc  200010cc  0000d158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d158  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bb4  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000433f  00000000  00000000  00026d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0002b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a0  00000000  00000000  0002c788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025aec  00000000  00000000  0002d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d718  00000000  00000000  00053414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4818  00000000  00000000  00070b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145344  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a1c  00000000  00000000  00145388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0014bda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b940 	.word	0x0800b940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	0800b940 	.word	0x0800b940

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d002      	beq.n	8000578 <_write+0x18>
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d111      	bne.n	800059c <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <_write+0x48>)
 8000584:	f004 faa6 	bl	8004ad4 <HAL_UART_Transmit>
 8000588:	4603      	mov	r3, r0
 800058a:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 800058c:	7dfb      	ldrb	r3, [r7, #23]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <_write+0x36>
            return len;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	e004      	b.n	80005a0 <_write+0x40>
        else
            return -1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800059a:	e001      	b.n	80005a0 <_write+0x40>
    }
    return -1;
 800059c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000274 	.word	0x20000274

080005ac <do_adc>:

void do_adc(uint16_t *buf) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

    uint32_t seed = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < BUFFER_SIZE; ++i) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	e012      	b.n	80005e4 <do_adc+0x38>
        seed |= (uint32_t)(buf[i] & 0x01); // Use only the least significant bit
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
        if (i != BUFFER_SIZE - 1) seed = seed << 1;
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	2b1f      	cmp	r3, #31
 80005d6:	d002      	beq.n	80005de <do_adc+0x32>
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < BUFFER_SIZE; ++i) {
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b1f      	cmp	r3, #31
 80005e8:	dde9      	ble.n	80005be <do_adc+0x12>
    }

    printf("New seed: 0x%08lx\n", seed);
 80005ea:	68f9      	ldr	r1, [r7, #12]
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <do_adc+0x54>)
 80005ee:	f00a fa57 	bl	800aaa0 <iprintf>
    srandom(seed);
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f00a f926 	bl	800a844 <srandom>

}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	0800b958 	.word	0x0800b958

08000604 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    do_adc(&buffer[BUFFER_SIZE]);
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <HAL_ADC_ConvCpltCallback+0x18>)
 800060e:	f7ff ffcd 	bl	80005ac <do_adc>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200002fc 	.word	0x200002fc

08000620 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    do_adc(&buffer[0]);
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800062a:	f7ff ffbf 	bl	80005ac <do_adc>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200002bc 	.word	0x200002bc

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b089      	sub	sp, #36	@ 0x24
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fc65 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f865 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f9cf 	bl	80009ec <MX_GPIO_Init>
  MX_DMA_Init();
 800064e:	f000 f9ad 	bl	80009ac <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000652:	f000 f981 	bl	8000958 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000656:	f009 fc07 	bl	8009e68 <MX_USB_DEVICE_Init>
  MX_RNG_Init();
 800065a:	f000 f917 	bl	800088c <MX_RNG_Init>
  MX_ADC3_Init();
 800065e:	f000 f8c3 	bl	80007e8 <MX_ADC3_Init>
  MX_TIM8_Init();
 8000662:	f000 f927 	bl	80008b4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  printf("\n\n\n\nStarting trng\n");
 8000666:	4822      	ldr	r0, [pc, #136]	@ (80006f0 <main+0xb4>)
 8000668:	f00a fa82 	bl	800ab70 <puts>

  HAL_TIM_Base_Start_IT(&htim8);
 800066c:	4821      	ldr	r0, [pc, #132]	@ (80006f4 <main+0xb8>)
 800066e:	f003 fee7 	bl	8004440 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&buffer, 2 * BUFFER_SIZE);
 8000672:	2240      	movs	r2, #64	@ 0x40
 8000674:	4920      	ldr	r1, [pc, #128]	@ (80006f8 <main+0xbc>)
 8000676:	4821      	ldr	r0, [pc, #132]	@ (80006fc <main+0xc0>)
 8000678:	f000 fd24 	bl	80010c4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t loop_cnt = 0, now = 0, next_tick = 1000;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000688:	613b      	str	r3, [r7, #16]

  while (1) {

      now = uwTick;
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <main+0xc4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	60fb      	str	r3, [r7, #12]

      if (now >= next_tick) {
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	429a      	cmp	r2, r3
 8000696:	d327      	bcc.n	80006e8 <main+0xac>

          uint32_t r1;

          if (HAL_RNG_GenerateRandomNumber(&hrng, &r1) != HAL_OK) {
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4619      	mov	r1, r3
 800069c:	4819      	ldr	r0, [pc, #100]	@ (8000704 <main+0xc8>)
 800069e:	f003 fe29 	bl	80042f4 <HAL_RNG_GenerateRandomNumber>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <main+0x72>
              printf("RNG Error\n");
 80006a8:	4817      	ldr	r0, [pc, #92]	@ (8000708 <main+0xcc>)
 80006aa:	f00a fa61 	bl	800ab70 <puts>
          }

          // To get the full 32 bit we only use the lower 16 bit but use it twice - RAND_MAX is 0x7fffffff
          uint32_t r2 = (uint32_t)( ((random() & 0xffff) << 16) | ( random() & 0xffff) );
 80006ae:	f00a f8f7 	bl	800a8a0 <random>
 80006b2:	4603      	mov	r3, r0
 80006b4:	041c      	lsls	r4, r3, #16
 80006b6:	f00a f8f3 	bl	800a8a0 <random>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29b      	uxth	r3, r3
 80006be:	4323      	orrs	r3, r4
 80006c0:	60bb      	str	r3, [r7, #8]

          printf("Tick %lu loop = %lu r1 = 0x%08lx r2 = 0x%08lx\n", now / 1000, loop_cnt, r1, r2);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4a11      	ldr	r2, [pc, #68]	@ (800070c <main+0xd0>)
 80006c6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ca:	0999      	lsrs	r1, r3, #6
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	4613      	mov	r3, r2
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	480e      	ldr	r0, [pc, #56]	@ (8000710 <main+0xd4>)
 80006d8:	f00a f9e2 	bl	800aaa0 <iprintf>

          loop_cnt = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
          next_tick = now + 1000;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006e6:	613b      	str	r3, [r7, #16]
      }

      ++loop_cnt;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	3301      	adds	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
      now = uwTick;
 80006ee:	e7cc      	b.n	800068a <main+0x4e>
 80006f0:	0800b96c 	.word	0x0800b96c
 80006f4:	2000022c 	.word	0x2000022c
 80006f8:	200002bc 	.word	0x200002bc
 80006fc:	20000174 	.word	0x20000174
 8000700:	20000340 	.word	0x20000340
 8000704:	2000021c 	.word	0x2000021c
 8000708:	0800b980 	.word	0x0800b980
 800070c:	10624dd3 	.word	0x10624dd3
 8000710:	0800b98c 	.word	0x0800b98c

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	@ 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	@ 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f00a fb04 	bl	800ad30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	@ (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	@ 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a21      	ldr	r2, [pc, #132]	@ (80007e4 <SystemClock_Config+0xd0>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000788:	23a8      	movs	r3, #168	@ 0xa8
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000790:	2307      	movs	r3, #7
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f003 f8eb 	bl	8003974 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a4:	f000 f958 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2105      	movs	r1, #5
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 fb4c 	bl	8003e64 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007d2:	f000 f941 	bl	8000a58 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	@ 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007fa:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <MX_ADC3_Init+0x9c>)
 80007fc:	4a22      	ldr	r2, [pc, #136]	@ (8000888 <MX_ADC3_Init+0xa0>)
 80007fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000800:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <MX_ADC3_Init+0x9c>)
 8000802:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000806:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000808:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_ADC3_Init+0x9c>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_ADC3_Init+0x9c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_ADC3_Init+0x9c>)
 8000816:	2200      	movs	r2, #0
 8000818:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_ADC3_Init+0x9c>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_ADC3_Init+0x9c>)
 8000824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_ADC3_Init+0x9c>)
 800082c:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_ADC3_Init+0x9c>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_ADC3_Init+0x9c>)
 800083a:	2201      	movs	r2, #1
 800083c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_ADC3_Init+0x9c>)
 8000840:	2201      	movs	r2, #1
 8000842:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_ADC3_Init+0x9c>)
 8000848:	2201      	movs	r2, #1
 800084a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800084c:	480d      	ldr	r0, [pc, #52]	@ (8000884 <MX_ADC3_Init+0x9c>)
 800084e:	f000 fbf5 	bl	800103c <HAL_ADC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8000858:	f000 f8fe 	bl	8000a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800085c:	2300      	movs	r3, #0
 800085e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_ADC3_Init+0x9c>)
 800086e:	f000 fd43 	bl	80012f8 <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000878:	f000 f8ee 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000174 	.word	0x20000174
 8000888:	40012200 	.word	0x40012200

0800088c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_RNG_Init+0x20>)
 8000892:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <MX_RNG_Init+0x24>)
 8000894:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_RNG_Init+0x20>)
 8000898:	f003 fd02 	bl	80042a0 <HAL_RNG_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80008a2:	f000 f8d9 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000021c 	.word	0x2000021c
 80008b0:	50060800 	.word	0x50060800

080008b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <MX_TIM8_Init+0x9c>)
 80008d2:	4a20      	ldr	r2, [pc, #128]	@ (8000954 <MX_TIM8_Init+0xa0>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2624;
 80008d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_TIM8_Init+0x9c>)
 80008d8:	f44f 6224 	mov.w	r2, #2624	@ 0xa40
 80008dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MX_TIM8_Init+0x9c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_TIM8_Init+0x9c>)
 80008e6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80008ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_TIM8_Init+0x9c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_TIM8_Init+0x9c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_TIM8_Init+0x9c>)
 80008fa:	2280      	movs	r2, #128	@ 0x80
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80008fe:	4814      	ldr	r0, [pc, #80]	@ (8000950 <MX_TIM8_Init+0x9c>)
 8000900:	f003 fd4e 	bl	80043a0 <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800090a:	f000 f8a5 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	4619      	mov	r1, r3
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <MX_TIM8_Init+0x9c>)
 800091c:	f003 fe00 	bl	8004520 <HAL_TIM_ConfigClockSource>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000926:	f000 f897 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800092a:	2320      	movs	r3, #32
 800092c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4806      	ldr	r0, [pc, #24]	@ (8000950 <MX_TIM8_Init+0x9c>)
 8000938:	f004 f800 	bl	800493c <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000942:	f000 f889 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000022c 	.word	0x2000022c
 8000954:	40010400 	.word	0x40010400

08000958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <MX_USART1_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000964:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000990:	f004 f850 	bl	8004a34 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f85d 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000274 	.word	0x20000274
 80009a8:	40011000 	.word	0x40011000

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_DMA_Init+0x3c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a0b      	ldr	r2, [pc, #44]	@ (80009e8 <MX_DMA_Init+0x3c>)
 80009bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_DMA_Init+0x3c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2038      	movs	r0, #56	@ 0x38
 80009d4:	f001 f80b 	bl	80019ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009d8:	2038      	movs	r0, #56	@ 0x38
 80009da:	f001 f824 	bl	8001a26 <HAL_NVIC_EnableIRQ>

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <MX_GPIO_Init+0x68>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a16      	ldr	r2, [pc, #88]	@ (8000a54 <MX_GPIO_Init+0x68>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_GPIO_Init+0x68>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <MX_GPIO_Init+0x68>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <MX_GPIO_Init+0x68>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <MX_GPIO_Init+0x68>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_GPIO_Init+0x68>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <MX_GPIO_Init+0x68>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_GPIO_Init+0x68>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	@ 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a2f      	ldr	r2, [pc, #188]	@ (8000b90 <HAL_ADC_MspInit+0xdc>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d158      	bne.n	8000b88 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b2e      	ldr	r3, [pc, #184]	@ (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a2d      	ldr	r2, [pc, #180]	@ (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000ae0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a26      	ldr	r2, [pc, #152]	@ (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b12:	2303      	movs	r3, #3
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481d      	ldr	r0, [pc, #116]	@ (8000b98 <HAL_ADC_MspInit+0xe4>)
 8000b22:	f001 fb0b 	bl	800213c <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba0 <HAL_ADC_MspInit+0xec>)
 8000b2a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b2e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b32:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b46:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b56:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b5e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b6c:	480b      	ldr	r0, [pc, #44]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b6e:	f000 ff75 	bl	8001a5c <HAL_DMA_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000b78:	f7ff ff6e 	bl	8000a58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a07      	ldr	r2, [pc, #28]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b80:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b82:	4a06      	ldr	r2, [pc, #24]	@ (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	@ 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40012200 	.word	0x40012200
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	200001bc 	.word	0x200001bc
 8000ba0:	40026410 	.word	0x40026410

08000ba4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000be0 <HAL_RNG_MspInit+0x3c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10d      	bne.n	8000bd2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <HAL_RNG_MspInit+0x40>)
 8000bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bbe:	4a09      	ldr	r2, [pc, #36]	@ (8000be4 <HAL_RNG_MspInit+0x40>)
 8000bc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc4:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bc6:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <HAL_RNG_MspInit+0x40>)
 8000bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	50060800 	.word	0x50060800
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d10d      	bne.n	8000c16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <HAL_TIM_Base_MspInit+0x40>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <HAL_TIM_Base_MspInit+0x40>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <HAL_TIM_Base_MspInit+0x40>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40010400 	.word	0x40010400
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	@ (8000cb0 <HAL_UART_MspInit+0x84>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12c      	bne.n	8000ca8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <HAL_UART_MspInit+0x8c>)
 8000ca4:	f001 fa4a 	bl	800213c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	@ 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d12:	f000 f94f 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <DMA2_Stream0_IRQHandler+0x10>)
 8000d22:	f000 ffa1 	bl	8001c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200001bc 	.word	0x200001bc

08000d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <OTG_FS_IRQHandler+0x10>)
 8000d36:	f001 fce1 	bl	80026fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000824 	.word	0x20000824

08000d44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return 1;
 8000d48:	2301      	movs	r3, #1
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_kill>:

int _kill(int pid, int sig)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d5e:	f00a f835 	bl	800adcc <__errno>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2216      	movs	r2, #22
 8000d66:	601a      	str	r2, [r3, #0]
  return -1;
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_exit>:

void _exit (int status)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ffe7 	bl	8000d54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d86:	bf00      	nop
 8000d88:	e7fd      	b.n	8000d86 <_exit+0x12>

08000d8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e00a      	b.n	8000db2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d9c:	f3af 8000 	nop.w
 8000da0:	4601      	mov	r1, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	60ba      	str	r2, [r7, #8]
 8000da8:	b2ca      	uxtb	r2, r1
 8000daa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dbf0      	blt.n	8000d9c <_read+0x12>
  }

  return len;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dec:	605a      	str	r2, [r3, #4]
  return 0;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_isatty>:

int _isatty(int file)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f009 ffb6 	bl	800adcc <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20020000 	.word	0x20020000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	2000033c 	.word	0x2000033c
 8000e94:	200010d0 	.word	0x200010d0

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	@ (8000efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f009 ff75 	bl	800add8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fba5 	bl	800063c <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000f00:	0800bb20 	.word	0x0800bb20
  ldr r2, =_sbss
 8000f04:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000f08:	200010cc 	.word	0x200010cc

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	@ (8000f50 <HAL_Init+0x40>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_Init+0x40>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	@ (8000f50 <HAL_Init+0x40>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 fd4d 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fd8e 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fd65 	bl	8001a42 <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f90:	f000 fd2d 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	@ (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000340 	.word	0x20000340

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000340 	.word	0x20000340

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e033      	b.n	80010ba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	d109      	bne.n	800106e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fd2a 	bl	8000ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	2b00      	cmp	r3, #0
 8001078:	d118      	bne.n	80010ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001082:	f023 0302 	bic.w	r3, r3, #2
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 fa54 	bl	800153c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Start_DMA+0x1e>
 80010de:	2302      	movs	r3, #2
 80010e0:	e0e9      	b.n	80012b6 <HAL_ADC_Start_DMA+0x1f2>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d018      	beq.n	800112a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001108:	4b6d      	ldr	r3, [pc, #436]	@ (80012c0 <HAL_ADC_Start_DMA+0x1fc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a6d      	ldr	r2, [pc, #436]	@ (80012c4 <HAL_ADC_Start_DMA+0x200>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9a      	lsrs	r2, r3, #18
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800111c:	e002      	b.n	8001124 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	3b01      	subs	r3, #1
 8001122:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f9      	bne.n	800111e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001138:	d107      	bne.n	800114a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001148:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	f040 80a1 	bne.w	800129c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001184:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001198:	d106      	bne.n	80011a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f023 0206 	bic.w	r2, r3, #6
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80011a6:	e002      	b.n	80011ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2200      	movs	r2, #0
 80011ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <HAL_ADC_Start_DMA+0x204>)
 80011b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011be:	4a43      	ldr	r2, [pc, #268]	@ (80012cc <HAL_ADC_Start_DMA+0x208>)
 80011c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c6:	4a42      	ldr	r2, [pc, #264]	@ (80012d0 <HAL_ADC_Start_DMA+0x20c>)
 80011c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ce:	4a41      	ldr	r2, [pc, #260]	@ (80012d4 <HAL_ADC_Start_DMA+0x210>)
 80011d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80011da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80011ea:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011fa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	334c      	adds	r3, #76	@ 0x4c
 8001206:	4619      	mov	r1, r3
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f000 fcd4 	bl	8001bb8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	2b00      	cmp	r3, #0
 800121a:	d12a      	bne.n	8001272 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a2d      	ldr	r2, [pc, #180]	@ (80012d8 <HAL_ADC_Start_DMA+0x214>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d015      	beq.n	8001252 <HAL_ADC_Start_DMA+0x18e>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a2c      	ldr	r2, [pc, #176]	@ (80012dc <HAL_ADC_Start_DMA+0x218>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d105      	bne.n	800123c <HAL_ADC_Start_DMA+0x178>
 8001230:	4b25      	ldr	r3, [pc, #148]	@ (80012c8 <HAL_ADC_Start_DMA+0x204>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00a      	beq.n	8001252 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a27      	ldr	r2, [pc, #156]	@ (80012e0 <HAL_ADC_Start_DMA+0x21c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d136      	bne.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
 8001246:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <HAL_ADC_Start_DMA+0x204>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d130      	bne.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d129      	bne.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	e020      	b.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <HAL_ADC_Start_DMA+0x214>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d11b      	bne.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d114      	bne.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	e00b      	b.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	f043 0210 	orr.w	r2, r3, #16
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000000 	.word	0x20000000
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	40012300 	.word	0x40012300
 80012cc:	08001735 	.word	0x08001735
 80012d0:	080017ef 	.word	0x080017ef
 80012d4:	0800180b 	.word	0x0800180b
 80012d8:	40012000 	.word	0x40012000
 80012dc:	40012100 	.word	0x40012100
 80012e0:	40012200 	.word	0x40012200

080012e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1c>
 8001310:	2302      	movs	r3, #2
 8001312:	e105      	b.n	8001520 <HAL_ADC_ConfigChannel+0x228>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b09      	cmp	r3, #9
 8001322:	d925      	bls.n	8001370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68d9      	ldr	r1, [r3, #12]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	3b1e      	subs	r3, #30
 800133a:	2207      	movs	r2, #7
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43da      	mvns	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	400a      	ands	r2, r1
 8001348:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68d9      	ldr	r1, [r3, #12]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	4603      	mov	r3, r0
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4403      	add	r3, r0
 8001362:	3b1e      	subs	r3, #30
 8001364:	409a      	lsls	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	e022      	b.n	80013b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6919      	ldr	r1, [r3, #16]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	2207      	movs	r2, #7
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6919      	ldr	r1, [r3, #16]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4403      	add	r3, r0
 80013ac:	409a      	lsls	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d824      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b05      	subs	r3, #5
 80013d0:	221f      	movs	r2, #31
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b05      	subs	r3, #5
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	635a      	str	r2, [r3, #52]	@ 0x34
 8001406:	e04c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b0c      	cmp	r3, #12
 800140e:	d824      	bhi.n	800145a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b23      	subs	r3, #35	@ 0x23
 8001422:	221f      	movs	r2, #31
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43da      	mvns	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	400a      	ands	r2, r1
 8001430:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b23      	subs	r3, #35	@ 0x23
 800144c:	fa00 f203 	lsl.w	r2, r0, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	631a      	str	r2, [r3, #48]	@ 0x30
 8001458:	e023      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b41      	subs	r3, #65	@ 0x41
 800146c:	221f      	movs	r2, #31
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b41      	subs	r3, #65	@ 0x41
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <HAL_ADC_ConfigChannel+0x234>)
 80014a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <HAL_ADC_ConfigChannel+0x238>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	@ (8001530 <HAL_ADC_ConfigChannel+0x238>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d123      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d003      	beq.n	80014de <HAL_ADC_ConfigChannel+0x1e6>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b11      	cmp	r3, #17
 80014dc:	d11b      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d111      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_ADC_ConfigChannel+0x23c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a10      	ldr	r2, [pc, #64]	@ (8001538 <HAL_ADC_ConfigChannel+0x240>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	0c9a      	lsrs	r2, r3, #18
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001508:	e002      	b.n	8001510 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3b01      	subs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40012300 	.word	0x40012300
 8001530:	40012000 	.word	0x40012000
 8001534:	20000000 	.word	0x20000000
 8001538:	431bde83 	.word	0x431bde83

0800153c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001544:	4b79      	ldr	r3, [pc, #484]	@ (800172c <ADC_Init+0x1f0>)
 8001546:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	431a      	orrs	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	021a      	lsls	r2, r3, #8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6899      	ldr	r1, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ce:	4a58      	ldr	r2, [pc, #352]	@ (8001730 <ADC_Init+0x1f4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d022      	beq.n	800161a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6899      	ldr	r1, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	e00f      	b.n	800163a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001638:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0202 	bic.w	r2, r2, #2
 8001648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e1b      	ldrb	r3, [r3, #24]
 8001654:	005a      	lsls	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01b      	beq.n	80016a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001676:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	3b01      	subs	r3, #1
 8001694:	035a      	lsls	r2, r3, #13
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	e007      	b.n	80016b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	051a      	lsls	r2, r3, #20
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016f2:	025a      	lsls	r2, r3, #9
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800170a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	029a      	lsls	r2, r3, #10
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40012300 	.word	0x40012300
 8001730:	0f000001 	.word	0x0f000001

08001734 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001740:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800174a:	2b00      	cmp	r3, #0
 800174c:	d13c      	bne.n	80017c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d12b      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800176c:	2b00      	cmp	r3, #0
 800176e:	d127      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001776:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001788:	2b00      	cmp	r3, #0
 800178a:	d119      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0220 	bic.w	r2, r2, #32
 800179a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7fe ff1f 	bl	8000604 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017c6:	e00e      	b.n	80017e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7ff fd85 	bl	80012e4 <HAL_ADC_ErrorCallback>
}
 80017da:	e004      	b.n	80017e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7fe ff0f 	bl	8000620 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001816:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2240      	movs	r2, #64	@ 0x40
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	f043 0204 	orr.w	r2, r3, #4
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff fd5a 	bl	80012e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	@ (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	@ (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff fab8 	bl	8000fdc <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e099      	b.n	8001bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a98:	e00f      	b.n	8001aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9a:	f7ff fa9f 	bl	8000fdc <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d908      	bls.n	8001aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e078      	b.n	8001bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e8      	bne.n	8001a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <HAL_DMA_Init+0x158>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d107      	bne.n	8001b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f023 0307 	bic.w	r3, r3, #7
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d117      	bne.n	8001b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fa6f 	bl	8002044 <DMA_CheckFifoParam>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2240      	movs	r2, #64	@ 0x40
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e016      	b.n	8001bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fa26 	bl	8001fd8 <DMA_CalcBaseAndBitshift>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b94:	223f      	movs	r2, #63	@ 0x3f
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	f010803f 	.word	0xf010803f

08001bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_DMA_Start_IT+0x26>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e040      	b.n	8001c60 <HAL_DMA_Start_IT+0xa8>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d12f      	bne.n	8001c52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f9b8 	bl	8001f7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c10:	223f      	movs	r2, #63	@ 0x3f
 8001c12:	409a      	lsls	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0216 	orr.w	r2, r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0208 	orr.w	r2, r2, #8
 8001c3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e005      	b.n	8001c5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c74:	4b8e      	ldr	r3, [pc, #568]	@ (8001eb0 <HAL_DMA_IRQHandler+0x248>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a8e      	ldr	r2, [pc, #568]	@ (8001eb4 <HAL_DMA_IRQHandler+0x24c>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0a9b      	lsrs	r3, r3, #10
 8001c80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c92:	2208      	movs	r2, #8
 8001c94:	409a      	lsls	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01a      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0204 	bic.w	r2, r2, #4
 8001cba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ccc:	f043 0201 	orr.w	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd8:	2201      	movs	r2, #1
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d012      	beq.n	8001d0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d02:	f043 0202 	orr.w	r2, r3, #2
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0e:	2204      	movs	r2, #4
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00b      	beq.n	8001d40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d38:	f043 0204 	orr.w	r2, r3, #4
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d44:	2210      	movs	r2, #16
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d043      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d03c      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d62:	2210      	movs	r2, #16
 8001d64:	409a      	lsls	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d018      	beq.n	8001daa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d108      	bne.n	8001d98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d024      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
 8001d96:	e01f      	b.n	8001dd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01b      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	4798      	blx	r3
 8001da8:	e016      	b.n	8001dd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0208 	bic.w	r2, r2, #8
 8001dc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ddc:	2220      	movs	r2, #32
 8001dde:	409a      	lsls	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 808f 	beq.w	8001f08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8087 	beq.w	8001f08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfe:	2220      	movs	r2, #32
 8001e00:	409a      	lsls	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d136      	bne.n	8001e80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0216 	bic.w	r2, r2, #22
 8001e20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d103      	bne.n	8001e42 <HAL_DMA_IRQHandler+0x1da>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0208 	bic.w	r2, r2, #8
 8001e50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e56:	223f      	movs	r2, #63	@ 0x3f
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d07e      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	4798      	blx	r3
        }
        return;
 8001e7e:	e079      	b.n	8001f74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d01d      	beq.n	8001eca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d031      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
 8001eac:	e02c      	b.n	8001f08 <HAL_DMA_IRQHandler+0x2a0>
 8001eae:	bf00      	nop
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d023      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
 8001ec8:	e01e      	b.n	8001f08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10f      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0210 	bic.w	r2, r2, #16
 8001ee6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d032      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d022      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2205      	movs	r2, #5
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	3301      	adds	r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d307      	bcc.n	8001f50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f2      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x2cc>
 8001f4e:	e000      	b.n	8001f52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	4798      	blx	r3
 8001f72:	e000      	b.n	8001f76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f74:	bf00      	nop
    }
  }
}
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b40      	cmp	r3, #64	@ 0x40
 8001fa8:	d108      	bne.n	8001fbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fba:	e007      	b.n	8001fcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	3b10      	subs	r3, #16
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <DMA_CalcBaseAndBitshift+0x64>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ff2:	4a13      	ldr	r2, [pc, #76]	@ (8002040 <DMA_CalcBaseAndBitshift+0x68>)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d909      	bls.n	800201a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800200e:	f023 0303 	bic.w	r3, r3, #3
 8002012:	1d1a      	adds	r2, r3, #4
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	659a      	str	r2, [r3, #88]	@ 0x58
 8002018:	e007      	b.n	800202a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	aaaaaaab 	.word	0xaaaaaaab
 8002040:	0800ba04 	.word	0x0800ba04

08002044 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002054:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d11f      	bne.n	800209e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d856      	bhi.n	8002112 <DMA_CheckFifoParam+0xce>
 8002064:	a201      	add	r2, pc, #4	@ (adr r2, 800206c <DMA_CheckFifoParam+0x28>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	0800207d 	.word	0x0800207d
 8002070:	0800208f 	.word	0x0800208f
 8002074:	0800207d 	.word	0x0800207d
 8002078:	08002113 	.word	0x08002113
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d046      	beq.n	8002116 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208c:	e043      	b.n	8002116 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002092:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002096:	d140      	bne.n	800211a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209c:	e03d      	b.n	800211a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020a6:	d121      	bne.n	80020ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d837      	bhi.n	800211e <DMA_CheckFifoParam+0xda>
 80020ae:	a201      	add	r2, pc, #4	@ (adr r2, 80020b4 <DMA_CheckFifoParam+0x70>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	080020c5 	.word	0x080020c5
 80020b8:	080020cb 	.word	0x080020cb
 80020bc:	080020c5 	.word	0x080020c5
 80020c0:	080020dd 	.word	0x080020dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
      break;
 80020c8:	e030      	b.n	800212c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d025      	beq.n	8002122 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020da:	e022      	b.n	8002122 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020e4:	d11f      	bne.n	8002126 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ea:	e01c      	b.n	8002126 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d903      	bls.n	80020fa <DMA_CheckFifoParam+0xb6>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d003      	beq.n	8002100 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020f8:	e018      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
      break;
 80020fe:	e015      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00e      	beq.n	800212a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
      break;
 8002110:	e00b      	b.n	800212a <DMA_CheckFifoParam+0xe6>
      break;
 8002112:	bf00      	nop
 8002114:	e00a      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;
 8002116:	bf00      	nop
 8002118:	e008      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
 800211c:	e006      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;
 800211e:	bf00      	nop
 8002120:	e004      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;
 8002122:	bf00      	nop
 8002124:	e002      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;   
 8002126:	bf00      	nop
 8002128:	e000      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
    }
  } 
  
  return status; 
 800212c:	7bfb      	ldrb	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	@ 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	e16b      	b.n	8002430 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	f040 815a 	bne.w	800242a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d005      	beq.n	800218e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	2b02      	cmp	r3, #2
 800218c:	d130      	bne.n	80021f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 0201 	and.w	r2, r3, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d017      	beq.n	800222c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d123      	bne.n	8002280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	69b9      	ldr	r1, [r7, #24]
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80b4 	beq.w	800242a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b60      	ldr	r3, [pc, #384]	@ (8002448 <HAL_GPIO_Init+0x30c>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002448 <HAL_GPIO_Init+0x30c>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002448 <HAL_GPIO_Init+0x30c>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022de:	4a5b      	ldr	r2, [pc, #364]	@ (800244c <HAL_GPIO_Init+0x310>)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_GPIO_Init+0x314>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d02b      	beq.n	8002362 <HAL_GPIO_Init+0x226>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a51      	ldr	r2, [pc, #324]	@ (8002454 <HAL_GPIO_Init+0x318>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d025      	beq.n	800235e <HAL_GPIO_Init+0x222>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a50      	ldr	r2, [pc, #320]	@ (8002458 <HAL_GPIO_Init+0x31c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01f      	beq.n	800235a <HAL_GPIO_Init+0x21e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4f      	ldr	r2, [pc, #316]	@ (800245c <HAL_GPIO_Init+0x320>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d019      	beq.n	8002356 <HAL_GPIO_Init+0x21a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4e      	ldr	r2, [pc, #312]	@ (8002460 <HAL_GPIO_Init+0x324>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_GPIO_Init+0x216>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4d      	ldr	r2, [pc, #308]	@ (8002464 <HAL_GPIO_Init+0x328>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00d      	beq.n	800234e <HAL_GPIO_Init+0x212>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4c      	ldr	r2, [pc, #304]	@ (8002468 <HAL_GPIO_Init+0x32c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <HAL_GPIO_Init+0x20e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4b      	ldr	r2, [pc, #300]	@ (800246c <HAL_GPIO_Init+0x330>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_GPIO_Init+0x20a>
 8002342:	2307      	movs	r3, #7
 8002344:	e00e      	b.n	8002364 <HAL_GPIO_Init+0x228>
 8002346:	2308      	movs	r3, #8
 8002348:	e00c      	b.n	8002364 <HAL_GPIO_Init+0x228>
 800234a:	2306      	movs	r3, #6
 800234c:	e00a      	b.n	8002364 <HAL_GPIO_Init+0x228>
 800234e:	2305      	movs	r3, #5
 8002350:	e008      	b.n	8002364 <HAL_GPIO_Init+0x228>
 8002352:	2304      	movs	r3, #4
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x228>
 8002356:	2303      	movs	r3, #3
 8002358:	e004      	b.n	8002364 <HAL_GPIO_Init+0x228>
 800235a:	2302      	movs	r3, #2
 800235c:	e002      	b.n	8002364 <HAL_GPIO_Init+0x228>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_GPIO_Init+0x228>
 8002362:	2300      	movs	r3, #0
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f002 0203 	and.w	r2, r2, #3
 800236a:	0092      	lsls	r2, r2, #2
 800236c:	4093      	lsls	r3, r2
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002374:	4935      	ldr	r1, [pc, #212]	@ (800244c <HAL_GPIO_Init+0x310>)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	3302      	adds	r3, #2
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002382:	4b3b      	ldr	r3, [pc, #236]	@ (8002470 <HAL_GPIO_Init+0x334>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023a6:	4a32      	ldr	r2, [pc, #200]	@ (8002470 <HAL_GPIO_Init+0x334>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ac:	4b30      	ldr	r3, [pc, #192]	@ (8002470 <HAL_GPIO_Init+0x334>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d0:	4a27      	ldr	r2, [pc, #156]	@ (8002470 <HAL_GPIO_Init+0x334>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023d6:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <HAL_GPIO_Init+0x334>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002470 <HAL_GPIO_Init+0x334>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002400:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <HAL_GPIO_Init+0x334>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002424:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <HAL_GPIO_Init+0x334>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3301      	adds	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	f67f ae90 	bls.w	8002158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40013800 	.word	0x40013800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40021000 	.word	0x40021000
 8002464:	40021400 	.word	0x40021400
 8002468:	40021800 	.word	0x40021800
 800246c:	40021c00 	.word	0x40021c00
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af02      	add	r7, sp, #8
 800247a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e101      	b.n	800268a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f007 fe9b 	bl	800a1dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2203      	movs	r2, #3
 80024aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024b4:	d102      	bne.n	80024bc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 ffda 	bl	800547a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7c1a      	ldrb	r2, [r3, #16]
 80024ce:	f88d 2000 	strb.w	r2, [sp]
 80024d2:	3304      	adds	r3, #4
 80024d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d6:	f002 feb9 	bl	800524c <USB_CoreInit>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0ce      	b.n	800268a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 ffd2 	bl	800549c <USB_SetCurrentMode>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0bf      	b.n	800268a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e04a      	b.n	80025a6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3315      	adds	r3, #21
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3314      	adds	r3, #20
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	b298      	uxth	r0, r3
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	332e      	adds	r3, #46	@ 0x2e
 800254c:	4602      	mov	r2, r0
 800254e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3318      	adds	r3, #24
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	331c      	adds	r3, #28
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3320      	adds	r3, #32
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	3324      	adds	r3, #36	@ 0x24
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	3301      	adds	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	791b      	ldrb	r3, [r3, #4]
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3af      	bcc.n	8002510 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e044      	b.n	8002640 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	3301      	adds	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	791b      	ldrb	r3, [r3, #4]
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3b5      	bcc.n	80025b6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7c1a      	ldrb	r2, [r3, #16]
 8002652:	f88d 2000 	strb.w	r2, [sp]
 8002656:	3304      	adds	r3, #4
 8002658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800265a:	f002 ff6b 	bl	8005534 <USB_DevInit>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e00c      	b.n	800268a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f003 ffb5 	bl	80065f2 <USB_DevDisconnect>

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_PCD_Start+0x1c>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e022      	b.n	80026f4 <HAL_PCD_Start+0x62>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d105      	bne.n	80026d6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 febc 	bl	8005458 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f003 ff63 	bl	80065b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b08d      	sub	sp, #52	@ 0x34
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f004 f821 	bl	800675a <USB_GetMode>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 848c 	bne.w	8003038 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f003 ff85 	bl	8006634 <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8482 	beq.w	8003036 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f003 ff72 	bl	8006634 <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b02      	cmp	r3, #2
 8002758:	d107      	bne.n	800276a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f002 0202 	and.w	r2, r2, #2
 8002768:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f003 ff60 	bl	8006634 <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b10      	cmp	r3, #16
 800277c:	d161      	bne.n	8002842 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0210 	bic.w	r2, r2, #16
 800278c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f003 020f 	and.w	r2, r3, #15
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	3304      	adds	r3, #4
 80027ac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	0c5b      	lsrs	r3, r3, #17
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d124      	bne.n	8002804 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d035      	beq.n	8002832 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	6a38      	ldr	r0, [r7, #32]
 80027da:	f003 fd97 	bl	800630c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ea:	441a      	add	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027fc:	441a      	add	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	e016      	b.n	8002832 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	0c5b      	lsrs	r3, r3, #17
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	2b06      	cmp	r3, #6
 800280e:	d110      	bne.n	8002832 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002816:	2208      	movs	r2, #8
 8002818:	4619      	mov	r1, r3
 800281a:	6a38      	ldr	r0, [r7, #32]
 800281c:	f003 fd76 	bl	800630c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800282c:	441a      	add	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0210 	orr.w	r2, r2, #16
 8002840:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fef4 	bl	8006634 <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002852:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002856:	f040 80a7 	bne.w	80029a8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f003 fef9 	bl	800665a <USB_ReadDevAllOutEpInterrupt>
 8002868:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800286a:	e099      	b.n	80029a0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 808e 	beq.w	8002994 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f003 ff1d 	bl	80066c2 <USB_ReadDevOutEPInterrupt>
 8002888:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00c      	beq.n	80028ae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028a0:	461a      	mov	r2, r3
 80028a2:	2301      	movs	r3, #1
 80028a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fed1 	bl	8003650 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00c      	beq.n	80028d2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028c4:	461a      	mov	r2, r3
 80028c6:	2308      	movs	r3, #8
 80028c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 ffa7 	bl	8003820 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e8:	461a      	mov	r2, r3
 80028ea:	2310      	movs	r3, #16
 80028ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d030      	beq.n	800295a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002900:	2b80      	cmp	r3, #128	@ 0x80
 8002902:	d109      	bne.n	8002918 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002916:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	3304      	adds	r3, #4
 800292c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	78db      	ldrb	r3, [r3, #3]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d108      	bne.n	8002948 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f007 fd50 	bl	800a3e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002954:	461a      	mov	r2, r3
 8002956:	2302      	movs	r3, #2
 8002958:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	2320      	movs	r3, #32
 8002974:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800298c:	461a      	mov	r2, r3
 800298e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002992:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	3301      	adds	r3, #1
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f47f af62 	bne.w	800286c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fe41 	bl	8006634 <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029bc:	f040 80db 	bne.w	8002b76 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 fe62 	bl	800668e <USB_ReadDevAllInEpInterrupt>
 80029ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80029d0:	e0cd      	b.n	8002b6e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80c2 	beq.w	8002b62 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 fe88 	bl	80066fe <USB_ReadDevInEPInterrupt>
 80029ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d057      	beq.n	8002aaa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	2201      	movs	r2, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69f9      	ldr	r1, [r7, #28]
 8002a16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	799b      	ldrb	r3, [r3, #6]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d132      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	3320      	adds	r3, #32
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4403      	add	r3, r0
 8002a58:	331c      	adds	r3, #28
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4419      	add	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4403      	add	r3, r0
 8002a6c:	3320      	adds	r3, #32
 8002a6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d113      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x3a2>
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3324      	adds	r3, #36	@ 0x24
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d108      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a96:	461a      	mov	r2, r3
 8002a98:	2101      	movs	r1, #1
 8002a9a:	f003 fe8f 	bl	80067bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f007 fc1a 	bl	800a2de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002adc:	461a      	mov	r2, r3
 8002ade:	2310      	movs	r3, #16
 8002ae0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af8:	461a      	mov	r2, r3
 8002afa:	2340      	movs	r3, #64	@ 0x40
 8002afc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d023      	beq.n	8002b50 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b0a:	6a38      	ldr	r0, [r7, #32]
 8002b0c:	f002 fe76 	bl	80057fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	3310      	adds	r3, #16
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	78db      	ldrb	r3, [r3, #3]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d108      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f007 fc67 	bl	800a40c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fcea 	bl	8003536 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f47f af2e 	bne.w	80029d2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 fd5a 	bl	8006634 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b8a:	d122      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d108      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fed1 	bl	800395c <HAL_PCDEx_LPM_Callback>
 8002bba:	e002      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f007 fc05 	bl	800a3cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 fd2c 	bl	8006634 <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002be6:	d112      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f007 fbc1 	bl	800a380 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c0c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fd0e 	bl	8006634 <USB_ReadInterrupts>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c22:	f040 80b7 	bne.w	8002d94 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2110      	movs	r1, #16
 8002c40:	4618      	mov	r0, r3
 8002c42:	f002 fddb 	bl	80057fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4a:	e046      	b.n	8002cda <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c70:	0151      	lsls	r1, r2, #5
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	440a      	add	r2, r1
 8002c76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c92:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ca4:	0151      	lsls	r1, r2, #5
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	440a      	add	r2, r1
 8002caa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cc4:	0151      	lsls	r1, r2, #5
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	440a      	add	r2, r1
 8002cca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cd2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	791b      	ldrb	r3, [r3, #4]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d3b2      	bcc.n	8002c4c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cf4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cf8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7bdb      	ldrb	r3, [r3, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d016      	beq.n	8002d30 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d12:	f043 030b 	orr.w	r3, r3, #11
 8002d16:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d28:	f043 030b 	orr.w	r3, r3, #11
 8002d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d2e:	e015      	b.n	8002d5c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d42:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d56:	f043 030b 	orr.w	r3, r3, #11
 8002d5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f003 fd1c 	bl	80067bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fc4b 	bl	8006634 <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da8:	d123      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 fce1 	bl	8006776 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 fd98 	bl	80058ee <USB_GetDevSpeed>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681c      	ldr	r4, [r3, #0]
 8002dca:	f001 fa35 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8002dce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f002 fa9c 	bl	8005314 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f007 faa6 	bl	800a32e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fc1c 	bl	8006634 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d10a      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f007 fa83 	bl	800a312 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f002 0208 	and.w	r2, r2, #8
 8002e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 fc07 	bl	8006634 <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e2c:	2b80      	cmp	r3, #128	@ 0x80
 8002e2e:	d123      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e40:	e014      	b.n	8002e6c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fb0a 	bl	800347a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	3301      	adds	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	791b      	ldrb	r3, [r3, #4]
 8002e70:	461a      	mov	r2, r3
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d3e4      	bcc.n	8002e42 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fbd9 	bl	8006634 <USB_ReadInterrupts>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e8c:	d13c      	bne.n	8002f08 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e8e:	2301      	movs	r3, #1
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e92:	e02b      	b.n	8002eec <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3318      	adds	r3, #24
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d115      	bne.n	8002ee6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002eba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da12      	bge.n	8002ee6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	3317      	adds	r3, #23
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 faca 	bl	800347a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	3301      	adds	r3, #1
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	791b      	ldrb	r3, [r3, #4]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d3cd      	bcc.n	8002e94 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 fb91 	bl	8006634 <USB_ReadInterrupts>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f1c:	d156      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f1e:	2301      	movs	r3, #1
 8002f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f22:	e045      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d12e      	bne.n	8002faa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da2b      	bge.n	8002faa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d121      	bne.n	8002faa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fa6:	6053      	str	r3, [r2, #4]
            break;
 8002fa8:	e008      	b.n	8002fbc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	3301      	adds	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	791b      	ldrb	r3, [r3, #4]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d3b3      	bcc.n	8002f24 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fb2f 	bl	8006634 <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f007 fa24 	bl	800a430 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 fb19 	bl	8006634 <USB_ReadInterrupts>
 8003002:	4603      	mov	r3, r0
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d115      	bne.n	8003038 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f007 fa14 	bl	800a44c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	e000      	b.n	8003038 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003036:	bf00      	nop
    }
  }
}
 8003038:	3734      	adds	r7, #52	@ 0x34
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}

0800303e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_PCD_SetAddress+0x1a>
 8003054:	2302      	movs	r3, #2
 8003056:	e012      	b.n	800307e <HAL_PCD_SetAddress+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f003 fa78 	bl	8006564 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	4608      	mov	r0, r1
 8003090:	4611      	mov	r1, r2
 8003092:	461a      	mov	r2, r3
 8003094:	4603      	mov	r3, r0
 8003096:	70fb      	strb	r3, [r7, #3]
 8003098:	460b      	mov	r3, r1
 800309a:	803b      	strh	r3, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da0f      	bge.n	80030cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 020f 	and.w	r2, r3, #15
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	3310      	adds	r3, #16
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	4413      	add	r3, r2
 80030c0:	3304      	adds	r3, #4
 80030c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	705a      	strb	r2, [r3, #1]
 80030ca:	e00f      	b.n	80030ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	f003 020f 	and.w	r2, r3, #15
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	3304      	adds	r3, #4
 80030e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030f8:	883b      	ldrh	r3, [r7, #0]
 80030fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	78ba      	ldrb	r2, [r7, #2]
 8003106:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d004      	beq.n	800311a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800311a:	78bb      	ldrb	r3, [r7, #2]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d102      	bne.n	8003126 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_PCD_EP_Open+0xae>
 8003130:	2302      	movs	r3, #2
 8003132:	e00e      	b.n	8003152 <HAL_PCD_EP_Open+0xcc>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68f9      	ldr	r1, [r7, #12]
 8003142:	4618      	mov	r0, r3
 8003144:	f002 fbf8 	bl	8005938 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003150:	7afb      	ldrb	r3, [r7, #11]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800316a:	2b00      	cmp	r3, #0
 800316c:	da0f      	bge.n	800318e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	3310      	adds	r3, #16
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	3304      	adds	r3, #4
 8003184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	705a      	strb	r2, [r3, #1]
 800318c:	e00f      	b.n	80031ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	f003 020f 	and.w	r2, r3, #15
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	4413      	add	r3, r2
 80031a4:	3304      	adds	r3, #4
 80031a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_PCD_EP_Close+0x6e>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e00e      	b.n	80031e6 <HAL_PCD_EP_Close+0x8c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68f9      	ldr	r1, [r7, #12]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f002 fc36 	bl	8005a48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	460b      	mov	r3, r1
 80031fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2200      	movs	r2, #0
 8003228:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2200      	movs	r2, #0
 800322e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	b2da      	uxtb	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	799b      	ldrb	r3, [r3, #6]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d102      	bne.n	800324a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	799b      	ldrb	r3, [r3, #6]
 8003252:	461a      	mov	r2, r3
 8003254:	6979      	ldr	r1, [r7, #20]
 8003256:	f002 fcd3 	bl	8005c00 <USB_EPStartXfer>

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 020f 	and.w	r2, r3, #15
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	460b      	mov	r3, r1
 80032a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a4:	7afb      	ldrb	r3, [r7, #11]
 80032a6:	f003 020f 	and.w	r2, r3, #15
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	3310      	adds	r3, #16
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	3304      	adds	r3, #4
 80032ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2200      	movs	r2, #0
 80032cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2201      	movs	r2, #1
 80032d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d4:	7afb      	ldrb	r3, [r7, #11]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	799b      	ldrb	r3, [r3, #6]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d102      	bne.n	80032ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	799b      	ldrb	r3, [r3, #6]
 80032f6:	461a      	mov	r2, r3
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	f002 fc81 	bl	8005c00 <USB_EPStartXfer>

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	7912      	ldrb	r2, [r2, #4]
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e04f      	b.n	80033c6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332a:	2b00      	cmp	r3, #0
 800332c:	da0f      	bge.n	800334e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	f003 020f 	and.w	r2, r3, #15
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	3310      	adds	r3, #16
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	3304      	adds	r3, #4
 8003344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	705a      	strb	r2, [r3, #1]
 800334c:	e00d      	b.n	800336a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	3304      	adds	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_PCD_EP_SetStall+0x82>
 8003386:	2302      	movs	r3, #2
 8003388:	e01d      	b.n	80033c6 <HAL_PCD_EP_SetStall+0xbe>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68f9      	ldr	r1, [r7, #12]
 8003398:	4618      	mov	r0, r3
 800339a:	f003 f80f 	bl	80063bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	7999      	ldrb	r1, [r3, #6]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033b6:	461a      	mov	r2, r3
 80033b8:	f003 fa00 	bl	80067bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	7912      	ldrb	r2, [r2, #4]
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e042      	b.n	8003472 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da0f      	bge.n	8003414 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 020f 	and.w	r2, r3, #15
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	3310      	adds	r3, #16
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	705a      	strb	r2, [r3, #1]
 8003412:	e00f      	b.n	8003434 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	f003 020f 	and.w	r2, r3, #15
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	3304      	adds	r3, #4
 800342c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_PCD_EP_ClrStall+0x86>
 8003450:	2302      	movs	r3, #2
 8003452:	e00e      	b.n	8003472 <HAL_PCD_EP_ClrStall+0xa4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68f9      	ldr	r1, [r7, #12]
 8003462:	4618      	mov	r0, r3
 8003464:	f003 f818 	bl	8006498 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348a:	2b00      	cmp	r3, #0
 800348c:	da0c      	bge.n	80034a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3310      	adds	r3, #16
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e00c      	b.n	80034c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f002 fe37 	bl	800613c <USB_EPStopXfer>
 80034ce:	4603      	mov	r3, r0
 80034d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034d2:	7afb      	ldrb	r3, [r7, #11]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_PCD_EP_Flush+0x1a>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e01b      	b.n	800352e <HAL_PCD_EP_Flush+0x52>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80034fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003502:	2b00      	cmp	r3, #0
 8003504:	da09      	bge.n	800351a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f002 f972 	bl	80057fc <USB_FlushTxFifo>
 8003518:	e004      	b.n	8003524 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 f99e 	bl	8005860 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b08a      	sub	sp, #40	@ 0x28
 800353a:	af02      	add	r7, sp, #8
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	3310      	adds	r3, #16
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	3304      	adds	r3, #4
 800355c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	429a      	cmp	r2, r3
 8003568:	d901      	bls.n	800356e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e06b      	b.n	8003646 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	429a      	cmp	r2, r3
 8003582:	d902      	bls.n	800358a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3303      	adds	r3, #3
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003592:	e02a      	b.n	80035ea <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d902      	bls.n	80035b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	3303      	adds	r3, #3
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68d9      	ldr	r1, [r3, #12]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	4603      	mov	r3, r0
 80035cc:	6978      	ldr	r0, [r7, #20]
 80035ce:	f002 fe5f 	bl	8006290 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	441a      	add	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	441a      	add	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d809      	bhi.n	8003614 <PCD_WriteEmptyTxFifo+0xde>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003608:	429a      	cmp	r2, r3
 800360a:	d203      	bcs.n	8003614 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1bf      	bne.n	8003594 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	429a      	cmp	r2, r3
 800361e:	d811      	bhi.n	8003644 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	2201      	movs	r2, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	43db      	mvns	r3, r3
 800363a:	6939      	ldr	r1, [r7, #16]
 800363c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003640:	4013      	ands	r3, r2
 8003642:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	333c      	adds	r3, #60	@ 0x3c
 8003668:	3304      	adds	r3, #4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	799b      	ldrb	r3, [r3, #6]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d17b      	bne.n	800377e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	4a61      	ldr	r2, [pc, #388]	@ (8003818 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f240 80b9 	bls.w	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80b3 	beq.w	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b2:	461a      	mov	r2, r3
 80036b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036b8:	6093      	str	r3, [r2, #8]
 80036ba:	e0a7      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d2:	461a      	mov	r2, r3
 80036d4:	2320      	movs	r3, #32
 80036d6:	6093      	str	r3, [r2, #8]
 80036d8:	e098      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 8093 	bne.w	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003818 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d90f      	bls.n	800370e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	e07e      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1a      	ldr	r2, [r3, #32]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	0159      	lsls	r1, r3, #5
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	440b      	add	r3, r1
 8003730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373a:	1ad2      	subs	r2, r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d114      	bne.n	8003770 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003758:	461a      	mov	r2, r3
 800375a:	2101      	movs	r1, #1
 800375c:	f003 f82e 	bl	80067bc <USB_EP0_OutStart>
 8003760:	e006      	b.n	8003770 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	441a      	add	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f006 fd96 	bl	800a2a8 <HAL_PCD_DataOutStageCallback>
 800377c:	e046      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	4a26      	ldr	r2, [pc, #152]	@ (800381c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d124      	bne.n	80037d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a2:	6093      	str	r3, [r2, #8]
 80037a4:	e032      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037bc:	461a      	mov	r2, r3
 80037be:	2320      	movs	r3, #32
 80037c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	4619      	mov	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f006 fd6d 	bl	800a2a8 <HAL_PCD_DataOutStageCallback>
 80037ce:	e01d      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d114      	bne.n	8003800 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d108      	bne.n	8003800 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037f8:	461a      	mov	r2, r3
 80037fa:	2100      	movs	r1, #0
 80037fc:	f002 ffde 	bl	80067bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f006 fd4e 	bl	800a2a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	4f54300a 	.word	0x4f54300a
 800381c:	4f54310a 	.word	0x4f54310a

08003820 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	333c      	adds	r3, #60	@ 0x3c
 8003838:	3304      	adds	r3, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a15      	ldr	r2, [pc, #84]	@ (80038a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d90e      	bls.n	8003874 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386c:	461a      	mov	r2, r3
 800386e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003872:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f006 fd05 	bl	800a284 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a0a      	ldr	r2, [pc, #40]	@ (80038a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d90c      	bls.n	800389c <PCD_EP_OutSetupPacket_int+0x7c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	799b      	ldrb	r3, [r3, #6]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d108      	bne.n	800389c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003894:	461a      	mov	r2, r3
 8003896:	2101      	movs	r1, #1
 8003898:	f002 ff90 	bl	80067bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	4f54300a 	.word	0x4f54300a

080038ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
 80038b8:	4613      	mov	r3, r2
 80038ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d107      	bne.n	80038da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038ca:	883b      	ldrh	r3, [r7, #0]
 80038cc:	0419      	lsls	r1, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038d8:	e028      	b.n	800392c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	e00d      	b.n	800390a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	3340      	adds	r3, #64	@ 0x40
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	4413      	add	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	3301      	adds	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	3b01      	subs	r3, #1
 8003910:	429a      	cmp	r2, r3
 8003912:	d3ec      	bcc.n	80038ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003914:	883b      	ldrh	r3, [r7, #0]
 8003916:	0418      	lsls	r0, r3, #16
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	3b01      	subs	r3, #1
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	4302      	orrs	r2, r0
 8003924:	3340      	adds	r3, #64	@ 0x40
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e267      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d075      	beq.n	8003a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003992:	4b88      	ldr	r3, [pc, #544]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b04      	cmp	r3, #4
 800399c:	d00c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b85      	ldr	r3, [pc, #532]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d112      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039aa:	4b82      	ldr	r3, [pc, #520]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	4b7e      	ldr	r3, [pc, #504]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d05b      	beq.n	8003a7c <HAL_RCC_OscConfig+0x108>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d157      	bne.n	8003a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e242      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d8:	d106      	bne.n	80039e8 <HAL_RCC_OscConfig+0x74>
 80039da:	4b76      	ldr	r3, [pc, #472]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a75      	ldr	r2, [pc, #468]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xb0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x98>
 80039f2:	4b70      	ldr	r3, [pc, #448]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6f      	ldr	r2, [pc, #444]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6c      	ldr	r2, [pc, #432]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xb0>
 8003a0c:	4b69      	ldr	r3, [pc, #420]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a68      	ldr	r2, [pc, #416]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b66      	ldr	r3, [pc, #408]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a65      	ldr	r2, [pc, #404]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fad6 	bl	8000fdc <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fd fad2 	bl	8000fdc <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	@ 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e207      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b5b      	ldr	r3, [pc, #364]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xc0>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fd fac2 	bl	8000fdc <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fabe 	bl	8000fdc <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	@ 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e1f3      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b51      	ldr	r3, [pc, #324]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0xe8>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b47      	ldr	r3, [pc, #284]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11c      	bne.n	8003adc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa2:	4b44      	ldr	r3, [pc, #272]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d116      	bne.n	8003adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	4b41      	ldr	r3, [pc, #260]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x152>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e1c7      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4937      	ldr	r1, [pc, #220]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	e03a      	b.n	8003b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d020      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae4:	4b34      	ldr	r3, [pc, #208]	@ (8003bb8 <HAL_RCC_OscConfig+0x244>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fd fa77 	bl	8000fdc <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af2:	f7fd fa73 	bl	8000fdc <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e1a8      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b28      	ldr	r3, [pc, #160]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4925      	ldr	r1, [pc, #148]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]
 8003b24:	e015      	b.n	8003b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b26:	4b24      	ldr	r3, [pc, #144]	@ (8003bb8 <HAL_RCC_OscConfig+0x244>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fa56 	bl	8000fdc <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fd fa52 	bl	8000fdc <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e187      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d036      	beq.n	8003bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b66:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <HAL_RCC_OscConfig+0x248>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fa36 	bl	8000fdc <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b74:	f7fd fa32 	bl	8000fdc <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e167      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x200>
 8003b92:	e01b      	b.n	8003bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b94:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <HAL_RCC_OscConfig+0x248>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9a:	f7fd fa1f 	bl	8000fdc <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	e00e      	b.n	8003bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fd fa1b 	bl	8000fdc <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d907      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e150      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	42470000 	.word	0x42470000
 8003bbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	4b88      	ldr	r3, [pc, #544]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ea      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8097 	beq.w	8003d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bde:	4b81      	ldr	r3, [pc, #516]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	4b7d      	ldr	r3, [pc, #500]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	4a7c      	ldr	r2, [pc, #496]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c06:	2301      	movs	r3, #1
 8003c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0a:	4b77      	ldr	r3, [pc, #476]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d118      	bne.n	8003c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c16:	4b74      	ldr	r3, [pc, #464]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a73      	ldr	r2, [pc, #460]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c22:	f7fd f9db 	bl	8000fdc <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2a:	f7fd f9d7 	bl	8000fdc <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e10c      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCC_OscConfig+0x2ea>
 8003c50:	4b64      	ldr	r3, [pc, #400]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c54:	4a63      	ldr	r2, [pc, #396]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5c:	e01c      	b.n	8003c98 <HAL_RCC_OscConfig+0x324>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x30c>
 8003c66:	4b5f      	ldr	r3, [pc, #380]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 0304 	orr.w	r3, r3, #4
 8003c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c72:	4b5c      	ldr	r3, [pc, #368]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c76:	4a5b      	ldr	r2, [pc, #364]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0x324>
 8003c80:	4b58      	ldr	r3, [pc, #352]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	4a57      	ldr	r2, [pc, #348]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8c:	4b55      	ldr	r3, [pc, #340]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c90:	4a54      	ldr	r2, [pc, #336]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f023 0304 	bic.w	r3, r3, #4
 8003c96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fd f99c 	bl	8000fdc <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fd f998 	bl	8000fdc <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0cb      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	4b49      	ldr	r3, [pc, #292]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ee      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x334>
 8003cca:	e014      	b.n	8003cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ccc:	f7fd f986 	bl	8000fdc <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fd f982 	bl	8000fdc <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0b5      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cea:	4b3e      	ldr	r3, [pc, #248]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ee      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b39      	ldr	r3, [pc, #228]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	4a38      	ldr	r2, [pc, #224]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80a1 	beq.w	8003e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d12:	4b34      	ldr	r3, [pc, #208]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d05c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d141      	bne.n	8003daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d26:	4b31      	ldr	r3, [pc, #196]	@ (8003dec <HAL_RCC_OscConfig+0x478>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd f956 	bl	8000fdc <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd f952 	bl	8000fdc <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e087      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	019b      	lsls	r3, r3, #6
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	491b      	ldr	r1, [pc, #108]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <HAL_RCC_OscConfig+0x478>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fd f92b 	bl	8000fdc <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fd f927 	bl	8000fdc <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e05c      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9c:	4b11      	ldr	r3, [pc, #68]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x416>
 8003da8:	e054      	b.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b10      	ldr	r3, [pc, #64]	@ (8003dec <HAL_RCC_OscConfig+0x478>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fd f914 	bl	8000fdc <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fd f910 	bl	8000fdc <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e045      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x444>
 8003dd6:	e03d      	b.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e038      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40007000 	.word	0x40007000
 8003dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e60 <HAL_RCC_OscConfig+0x4ec>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d028      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d121      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d11a      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e20:	4013      	ands	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d111      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800

08003e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0cc      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e78:	4b68      	ldr	r3, [pc, #416]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d90c      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b65      	ldr	r3, [pc, #404]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b63      	ldr	r3, [pc, #396]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0b8      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb8:	4b59      	ldr	r3, [pc, #356]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a58      	ldr	r2, [pc, #352]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ec2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed0:	4b53      	ldr	r3, [pc, #332]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a52      	ldr	r2, [pc, #328]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b50      	ldr	r3, [pc, #320]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	494d      	ldr	r1, [pc, #308]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d044      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b47      	ldr	r3, [pc, #284]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d119      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e07f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f22:	4b3f      	ldr	r3, [pc, #252]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e06f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f32:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e067      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f42:	4b37      	ldr	r3, [pc, #220]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f023 0203 	bic.w	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4934      	ldr	r1, [pc, #208]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f54:	f7fd f842 	bl	8000fdc <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5c:	f7fd f83e 	bl	8000fdc <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e04f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f72:	4b2b      	ldr	r3, [pc, #172]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 020c 	and.w	r2, r3, #12
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d1eb      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f84:	4b25      	ldr	r3, [pc, #148]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d20c      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b22      	ldr	r3, [pc, #136]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b20      	ldr	r3, [pc, #128]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e032      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b19      	ldr	r3, [pc, #100]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4916      	ldr	r1, [pc, #88]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd6:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	490e      	ldr	r1, [pc, #56]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fea:	f000 f821 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490a      	ldr	r1, [pc, #40]	@ (8004024 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8004002:	4a09      	ldr	r2, [pc, #36]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004006:	4b09      	ldr	r3, [pc, #36]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc ffa2 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023c00 	.word	0x40023c00
 8004020:	40023800 	.word	0x40023800
 8004024:	0800b9ec 	.word	0x0800b9ec
 8004028:	20000000 	.word	0x20000000
 800402c:	20000004 	.word	0x20000004

08004030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004034:	b094      	sub	sp, #80	@ 0x50
 8004036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004048:	4b79      	ldr	r3, [pc, #484]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d00d      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x40>
 8004054:	2b08      	cmp	r3, #8
 8004056:	f200 80e1 	bhi.w	800421c <HAL_RCC_GetSysClockFreq+0x1ec>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x34>
 800405e:	2b04      	cmp	r3, #4
 8004060:	d003      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x3a>
 8004062:	e0db      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004064:	4b73      	ldr	r3, [pc, #460]	@ (8004234 <HAL_RCC_GetSysClockFreq+0x204>)
 8004066:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004068:	e0db      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800406a:	4b72      	ldr	r3, [pc, #456]	@ (8004234 <HAL_RCC_GetSysClockFreq+0x204>)
 800406c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800406e:	e0d8      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004070:	4b6f      	ldr	r3, [pc, #444]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004078:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407a:	4b6d      	ldr	r3, [pc, #436]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d063      	beq.n	800414e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004086:	4b6a      	ldr	r3, [pc, #424]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	2200      	movs	r2, #0
 800408e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004090:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004098:	633b      	str	r3, [r7, #48]	@ 0x30
 800409a:	2300      	movs	r3, #0
 800409c:	637b      	str	r3, [r7, #52]	@ 0x34
 800409e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040a2:	4622      	mov	r2, r4
 80040a4:	462b      	mov	r3, r5
 80040a6:	f04f 0000 	mov.w	r0, #0
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	0159      	lsls	r1, r3, #5
 80040b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b4:	0150      	lsls	r0, r2, #5
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4621      	mov	r1, r4
 80040bc:	1a51      	subs	r1, r2, r1
 80040be:	6139      	str	r1, [r7, #16]
 80040c0:	4629      	mov	r1, r5
 80040c2:	eb63 0301 	sbc.w	r3, r3, r1
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040d4:	4659      	mov	r1, fp
 80040d6:	018b      	lsls	r3, r1, #6
 80040d8:	4651      	mov	r1, sl
 80040da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040de:	4651      	mov	r1, sl
 80040e0:	018a      	lsls	r2, r1, #6
 80040e2:	4651      	mov	r1, sl
 80040e4:	ebb2 0801 	subs.w	r8, r2, r1
 80040e8:	4659      	mov	r1, fp
 80040ea:	eb63 0901 	sbc.w	r9, r3, r1
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004102:	4690      	mov	r8, r2
 8004104:	4699      	mov	r9, r3
 8004106:	4623      	mov	r3, r4
 8004108:	eb18 0303 	adds.w	r3, r8, r3
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	462b      	mov	r3, r5
 8004110:	eb49 0303 	adc.w	r3, r9, r3
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004122:	4629      	mov	r1, r5
 8004124:	028b      	lsls	r3, r1, #10
 8004126:	4621      	mov	r1, r4
 8004128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800412c:	4621      	mov	r1, r4
 800412e:	028a      	lsls	r2, r1, #10
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004136:	2200      	movs	r2, #0
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800413a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800413c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004140:	f7fc f896 	bl	8000270 <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4613      	mov	r3, r2
 800414a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414c:	e058      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800414e:	4b38      	ldr	r3, [pc, #224]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	099b      	lsrs	r3, r3, #6
 8004154:	2200      	movs	r2, #0
 8004156:	4618      	mov	r0, r3
 8004158:	4611      	mov	r1, r2
 800415a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	2300      	movs	r3, #0
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
 8004164:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004168:	4642      	mov	r2, r8
 800416a:	464b      	mov	r3, r9
 800416c:	f04f 0000 	mov.w	r0, #0
 8004170:	f04f 0100 	mov.w	r1, #0
 8004174:	0159      	lsls	r1, r3, #5
 8004176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800417a:	0150      	lsls	r0, r2, #5
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4641      	mov	r1, r8
 8004182:	ebb2 0a01 	subs.w	sl, r2, r1
 8004186:	4649      	mov	r1, r9
 8004188:	eb63 0b01 	sbc.w	fp, r3, r1
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004198:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800419c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041a0:	ebb2 040a 	subs.w	r4, r2, sl
 80041a4:	eb63 050b 	sbc.w	r5, r3, fp
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	00eb      	lsls	r3, r5, #3
 80041b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b6:	00e2      	lsls	r2, r4, #3
 80041b8:	4614      	mov	r4, r2
 80041ba:	461d      	mov	r5, r3
 80041bc:	4643      	mov	r3, r8
 80041be:	18e3      	adds	r3, r4, r3
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	464b      	mov	r3, r9
 80041c4:	eb45 0303 	adc.w	r3, r5, r3
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041d6:	4629      	mov	r1, r5
 80041d8:	028b      	lsls	r3, r1, #10
 80041da:	4621      	mov	r1, r4
 80041dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041e0:	4621      	mov	r1, r4
 80041e2:	028a      	lsls	r2, r1, #10
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ea:	2200      	movs	r2, #0
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	61fa      	str	r2, [r7, #28]
 80041f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f4:	f7fc f83c 	bl	8000270 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4613      	mov	r3, r2
 80041fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004200:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	3301      	adds	r3, #1
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004210:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800421a:	e002      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800421c:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <HAL_RCC_GetSysClockFreq+0x204>)
 800421e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004224:	4618      	mov	r0, r3
 8004226:	3750      	adds	r7, #80	@ 0x50
 8004228:	46bd      	mov	sp, r7
 800422a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800
 8004234:	00f42400 	.word	0x00f42400

08004238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800423c:	4b03      	ldr	r3, [pc, #12]	@ (800424c <HAL_RCC_GetHCLKFreq+0x14>)
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000000 	.word	0x20000000

08004250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004254:	f7ff fff0 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	0a9b      	lsrs	r3, r3, #10
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4903      	ldr	r1, [pc, #12]	@ (8004274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40023800 	.word	0x40023800
 8004274:	0800b9fc 	.word	0x0800b9fc

08004278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800427c:	f7ff ffdc 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	0b5b      	lsrs	r3, r3, #13
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	4903      	ldr	r1, [pc, #12]	@ (800429c <HAL_RCC_GetPCLK2Freq+0x24>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40023800 	.word	0x40023800
 800429c:	0800b9fc 	.word	0x0800b9fc

080042a0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e01c      	b.n	80042ec <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	795b      	ldrb	r3, [r3, #5]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fc fc6e 	bl	8000ba4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0204 	orr.w	r2, r2, #4
 80042dc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	791b      	ldrb	r3, [r3, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_RNG_GenerateRandomNumber+0x1a>
 800430a:	2302      	movs	r3, #2
 800430c:	e044      	b.n	8004398 <HAL_RNG_GenerateRandomNumber+0xa4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	795b      	ldrb	r3, [r3, #5]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	d133      	bne.n	8004386 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004324:	f7fc fe5a 	bl	8000fdc <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800432a:	e018      	b.n	800435e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800432c:	f7fc fe56 	bl	8000fdc <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d911      	bls.n	800435e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d00a      	beq.n	800435e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e01c      	b.n	8004398 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d1df      	bne.n	800432c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	715a      	strb	r2, [r3, #5]
 8004384:	e004      	b.n	8004390 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2204      	movs	r2, #4
 800438a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	711a      	strb	r2, [r3, #4]

  return status;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e041      	b.n	8004436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc fc0e 	bl	8000be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 f966 	bl	80046b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e04e      	b.n	80044f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a23      	ldr	r2, [pc, #140]	@ (8004504 <HAL_TIM_Base_Start_IT+0xc4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d022      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004482:	d01d      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1f      	ldr	r2, [pc, #124]	@ (8004508 <HAL_TIM_Base_Start_IT+0xc8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d018      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1e      	ldr	r2, [pc, #120]	@ (800450c <HAL_TIM_Base_Start_IT+0xcc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1c      	ldr	r2, [pc, #112]	@ (8004510 <HAL_TIM_Base_Start_IT+0xd0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00e      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004514 <HAL_TIM_Base_Start_IT+0xd4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d009      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a19      	ldr	r2, [pc, #100]	@ (8004518 <HAL_TIM_Base_Start_IT+0xd8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a18      	ldr	r2, [pc, #96]	@ (800451c <HAL_TIM_Base_Start_IT+0xdc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d111      	bne.n	80044e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b06      	cmp	r3, #6
 80044d0:	d010      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e2:	e007      	b.n	80044f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800
 8004510:	40000c00 	.word	0x40000c00
 8004514:	40010400 	.word	0x40010400
 8004518:	40014000 	.word	0x40014000
 800451c:	40001800 	.word	0x40001800

08004520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_TIM_ConfigClockSource+0x1c>
 8004538:	2302      	movs	r3, #2
 800453a:	e0b4      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x186>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800455a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004574:	d03e      	beq.n	80045f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457a:	f200 8087 	bhi.w	800468c <HAL_TIM_ConfigClockSource+0x16c>
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004582:	f000 8086 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x172>
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458a:	d87f      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b70      	cmp	r3, #112	@ 0x70
 800458e:	d01a      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004590:	2b70      	cmp	r3, #112	@ 0x70
 8004592:	d87b      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b60      	cmp	r3, #96	@ 0x60
 8004596:	d050      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x11a>
 8004598:	2b60      	cmp	r3, #96	@ 0x60
 800459a:	d877      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 800459c:	2b50      	cmp	r3, #80	@ 0x50
 800459e:	d03c      	beq.n	800461a <HAL_TIM_ConfigClockSource+0xfa>
 80045a0:	2b50      	cmp	r3, #80	@ 0x50
 80045a2:	d873      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045a4:	2b40      	cmp	r3, #64	@ 0x40
 80045a6:	d058      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x13a>
 80045a8:	2b40      	cmp	r3, #64	@ 0x40
 80045aa:	d86f      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b30      	cmp	r3, #48	@ 0x30
 80045ae:	d064      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045b0:	2b30      	cmp	r3, #48	@ 0x30
 80045b2:	d86b      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d060      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d867      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05c      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d05a      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	e062      	b.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d6:	f000 f991 	bl	80048fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	609a      	str	r2, [r3, #8]
      break;
 80045f2:	e04f      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004604:	f000 f97a 	bl	80048fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004616:	609a      	str	r2, [r3, #8]
      break;
 8004618:	e03c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004626:	461a      	mov	r2, r3
 8004628:	f000 f8ee 	bl	8004808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2150      	movs	r1, #80	@ 0x50
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f947 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 8004638:	e02c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004646:	461a      	mov	r2, r3
 8004648:	f000 f90d 	bl	8004866 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2160      	movs	r1, #96	@ 0x60
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f937 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 8004658:	e01c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004666:	461a      	mov	r2, r3
 8004668:	f000 f8ce 	bl	8004808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2140      	movs	r1, #64	@ 0x40
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f927 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 8004678:	e00c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f000 f91e 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 800468a:	e003      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      break;
 8004690:	e000      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a46      	ldr	r2, [pc, #280]	@ (80047dc <TIM_Base_SetConfig+0x12c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d013      	beq.n	80046f0 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ce:	d00f      	beq.n	80046f0 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a43      	ldr	r2, [pc, #268]	@ (80047e0 <TIM_Base_SetConfig+0x130>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00b      	beq.n	80046f0 <TIM_Base_SetConfig+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a42      	ldr	r2, [pc, #264]	@ (80047e4 <TIM_Base_SetConfig+0x134>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d007      	beq.n	80046f0 <TIM_Base_SetConfig+0x40>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a41      	ldr	r2, [pc, #260]	@ (80047e8 <TIM_Base_SetConfig+0x138>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_Base_SetConfig+0x40>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a40      	ldr	r2, [pc, #256]	@ (80047ec <TIM_Base_SetConfig+0x13c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d108      	bne.n	8004702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a35      	ldr	r2, [pc, #212]	@ (80047dc <TIM_Base_SetConfig+0x12c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02b      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004710:	d027      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a32      	ldr	r2, [pc, #200]	@ (80047e0 <TIM_Base_SetConfig+0x130>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d023      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a31      	ldr	r2, [pc, #196]	@ (80047e4 <TIM_Base_SetConfig+0x134>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01f      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a30      	ldr	r2, [pc, #192]	@ (80047e8 <TIM_Base_SetConfig+0x138>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d01b      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2f      	ldr	r2, [pc, #188]	@ (80047ec <TIM_Base_SetConfig+0x13c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d017      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a2e      	ldr	r2, [pc, #184]	@ (80047f0 <TIM_Base_SetConfig+0x140>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2d      	ldr	r2, [pc, #180]	@ (80047f4 <TIM_Base_SetConfig+0x144>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00f      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a2c      	ldr	r2, [pc, #176]	@ (80047f8 <TIM_Base_SetConfig+0x148>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00b      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a2b      	ldr	r2, [pc, #172]	@ (80047fc <TIM_Base_SetConfig+0x14c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d007      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2a      	ldr	r2, [pc, #168]	@ (8004800 <TIM_Base_SetConfig+0x150>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a29      	ldr	r2, [pc, #164]	@ (8004804 <TIM_Base_SetConfig+0x154>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d108      	bne.n	8004774 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a10      	ldr	r2, [pc, #64]	@ (80047dc <TIM_Base_SetConfig+0x12c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_Base_SetConfig+0xf8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a12      	ldr	r2, [pc, #72]	@ (80047ec <TIM_Base_SetConfig+0x13c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d103      	bne.n	80047b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f023 0201 	bic.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	611a      	str	r2, [r3, #16]
  }
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40010400 	.word	0x40010400
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800
 80047fc:	40001800 	.word	0x40001800
 8004800:	40001c00 	.word	0x40001c00
 8004804:	40002000 	.word	0x40002000

08004808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f023 0201 	bic.w	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 030a 	bic.w	r3, r3, #10
 8004844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004866:	b480      	push	{r7}
 8004868:	b087      	sub	sp, #28
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f023 0210 	bic.w	r2, r3, #16
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	031b      	lsls	r3, r3, #12
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f043 0307 	orr.w	r3, r3, #7
 80048e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	021a      	lsls	r2, r3, #8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	431a      	orrs	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	609a      	str	r2, [r3, #8]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004950:	2302      	movs	r3, #2
 8004952:	e05a      	b.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a21      	ldr	r2, [pc, #132]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a0:	d01d      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a18      	ldr	r2, [pc, #96]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a17      	ldr	r2, [pc, #92]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a15      	ldr	r2, [pc, #84]	@ (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10c      	bne.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40010400 	.word	0x40010400
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40001800 	.word	0x40001800

08004a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e042      	b.n	8004acc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc f8e6 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	@ 0x24
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f973 	bl	8004d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	@ 0x28
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d175      	bne.n	8004be0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_UART_Transmit+0x2c>
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e06e      	b.n	8004be2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2221      	movs	r2, #33	@ 0x21
 8004b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b12:	f7fc fa63 	bl	8000fdc <HAL_GetTick>
 8004b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	88fa      	ldrh	r2, [r7, #6]
 8004b22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2c:	d108      	bne.n	8004b40 <HAL_UART_Transmit+0x6c>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	e003      	b.n	8004b48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b48:	e02e      	b.n	8004ba8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2200      	movs	r2, #0
 8004b52:	2180      	movs	r1, #128	@ 0x80
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f848 	bl	8004bea <UART_WaitOnFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e03a      	b.n	8004be2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	3302      	adds	r3, #2
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	e007      	b.n	8004b9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	3301      	adds	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1cb      	bne.n	8004b4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2140      	movs	r1, #64	@ 0x40
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f814 	bl	8004bea <UART_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e006      	b.n	8004be2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	603b      	str	r3, [r7, #0]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfa:	e03b      	b.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c02:	d037      	beq.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c04:	f7fc f9ea 	bl	8000fdc <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	6a3a      	ldr	r2, [r7, #32]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d302      	bcc.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e03a      	b.n	8004c94 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d023      	beq.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b80      	cmp	r3, #128	@ 0x80
 8004c30:	d020      	beq.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b40      	cmp	r3, #64	@ 0x40
 8004c36:	d01d      	beq.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d116      	bne.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f81d 	bl	8004c9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2208      	movs	r2, #8
 8004c66:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e00f      	b.n	8004c94 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	bf0c      	ite	eq
 8004c84:	2301      	moveq	r3, #1
 8004c86:	2300      	movne	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d0b4      	beq.n	8004bfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b095      	sub	sp, #84	@ 0x54
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cc4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e5      	bne.n	8004ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3314      	adds	r3, #20
 8004cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3314      	adds	r3, #20
 8004cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e5      	bne.n	8004cd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d119      	bne.n	8004d48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f023 0310 	bic.w	r3, r3, #16
 8004d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d34:	61ba      	str	r2, [r7, #24]
 8004d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6979      	ldr	r1, [r7, #20]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	613b      	str	r3, [r7, #16]
   return(result);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e5      	bne.n	8004d14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d56:	bf00      	nop
 8004d58:	3754      	adds	r7, #84	@ 0x54
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d68:	b0c0      	sub	sp, #256	@ 0x100
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d80:	68d9      	ldr	r1, [r3, #12]
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	ea40 0301 	orr.w	r3, r0, r1
 8004d8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004dbc:	f021 010c 	bic.w	r1, r1, #12
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dde:	6999      	ldr	r1, [r3, #24]
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	ea40 0301 	orr.w	r3, r0, r1
 8004dea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b8f      	ldr	r3, [pc, #572]	@ (8005030 <UART_SetConfig+0x2cc>)
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d005      	beq.n	8004e04 <UART_SetConfig+0xa0>
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4b8d      	ldr	r3, [pc, #564]	@ (8005034 <UART_SetConfig+0x2d0>)
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d104      	bne.n	8004e0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e04:	f7ff fa38 	bl	8004278 <HAL_RCC_GetPCLK2Freq>
 8004e08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e0c:	e003      	b.n	8004e16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e0e:	f7ff fa1f 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 8004e12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e20:	f040 810c 	bne.w	800503c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e36:	4622      	mov	r2, r4
 8004e38:	462b      	mov	r3, r5
 8004e3a:	1891      	adds	r1, r2, r2
 8004e3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e3e:	415b      	adcs	r3, r3
 8004e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e46:	4621      	mov	r1, r4
 8004e48:	eb12 0801 	adds.w	r8, r2, r1
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	eb43 0901 	adc.w	r9, r3, r1
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e66:	4690      	mov	r8, r2
 8004e68:	4699      	mov	r9, r3
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	eb18 0303 	adds.w	r3, r8, r3
 8004e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e74:	462b      	mov	r3, r5
 8004e76:	eb49 0303 	adc.w	r3, r9, r3
 8004e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e92:	460b      	mov	r3, r1
 8004e94:	18db      	adds	r3, r3, r3
 8004e96:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e98:	4613      	mov	r3, r2
 8004e9a:	eb42 0303 	adc.w	r3, r2, r3
 8004e9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ea0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ea4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ea8:	f7fb f9e2 	bl	8000270 <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4b61      	ldr	r3, [pc, #388]	@ (8005038 <UART_SetConfig+0x2d4>)
 8004eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	011c      	lsls	r4, r3, #4
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ec4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ec8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004edc:	4641      	mov	r1, r8
 8004ede:	eb12 0a01 	adds.w	sl, r2, r1
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ef4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004efc:	4692      	mov	sl, r2
 8004efe:	469b      	mov	fp, r3
 8004f00:	4643      	mov	r3, r8
 8004f02:	eb1a 0303 	adds.w	r3, sl, r3
 8004f06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	18db      	adds	r3, r3, r3
 8004f2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f2e:	4613      	mov	r3, r2
 8004f30:	eb42 0303 	adc.w	r3, r2, r3
 8004f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f3e:	f7fb f997 	bl	8000270 <__aeabi_uldivmod>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4611      	mov	r1, r2
 8004f48:	4b3b      	ldr	r3, [pc, #236]	@ (8005038 <UART_SetConfig+0x2d4>)
 8004f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	2264      	movs	r2, #100	@ 0x64
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	1acb      	subs	r3, r1, r3
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f5e:	4b36      	ldr	r3, [pc, #216]	@ (8005038 <UART_SetConfig+0x2d4>)
 8004f60:	fba3 2302 	umull	r2, r3, r3, r2
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f6c:	441c      	add	r4, r3
 8004f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f80:	4642      	mov	r2, r8
 8004f82:	464b      	mov	r3, r9
 8004f84:	1891      	adds	r1, r2, r2
 8004f86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f88:	415b      	adcs	r3, r3
 8004f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f90:	4641      	mov	r1, r8
 8004f92:	1851      	adds	r1, r2, r1
 8004f94:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f96:	4649      	mov	r1, r9
 8004f98:	414b      	adcs	r3, r1
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fa8:	4659      	mov	r1, fp
 8004faa:	00cb      	lsls	r3, r1, #3
 8004fac:	4651      	mov	r1, sl
 8004fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fb2:	4651      	mov	r1, sl
 8004fb4:	00ca      	lsls	r2, r1, #3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4603      	mov	r3, r0
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	189b      	adds	r3, r3, r2
 8004fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fc4:	464b      	mov	r3, r9
 8004fc6:	460a      	mov	r2, r1
 8004fc8:	eb42 0303 	adc.w	r3, r2, r3
 8004fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fdc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fe0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	18db      	adds	r3, r3, r3
 8004fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fea:	4613      	mov	r3, r2
 8004fec:	eb42 0303 	adc.w	r3, r2, r3
 8004ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ff6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ffa:	f7fb f939 	bl	8000270 <__aeabi_uldivmod>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4b0d      	ldr	r3, [pc, #52]	@ (8005038 <UART_SetConfig+0x2d4>)
 8005004:	fba3 1302 	umull	r1, r3, r3, r2
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	2164      	movs	r1, #100	@ 0x64
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	3332      	adds	r3, #50	@ 0x32
 8005016:	4a08      	ldr	r2, [pc, #32]	@ (8005038 <UART_SetConfig+0x2d4>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	f003 0207 	and.w	r2, r3, #7
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4422      	add	r2, r4
 800502a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800502c:	e106      	b.n	800523c <UART_SetConfig+0x4d8>
 800502e:	bf00      	nop
 8005030:	40011000 	.word	0x40011000
 8005034:	40011400 	.word	0x40011400
 8005038:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800503c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005040:	2200      	movs	r2, #0
 8005042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005046:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800504a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800504e:	4642      	mov	r2, r8
 8005050:	464b      	mov	r3, r9
 8005052:	1891      	adds	r1, r2, r2
 8005054:	6239      	str	r1, [r7, #32]
 8005056:	415b      	adcs	r3, r3
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
 800505a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800505e:	4641      	mov	r1, r8
 8005060:	1854      	adds	r4, r2, r1
 8005062:	4649      	mov	r1, r9
 8005064:	eb43 0501 	adc.w	r5, r3, r1
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	00eb      	lsls	r3, r5, #3
 8005072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005076:	00e2      	lsls	r2, r4, #3
 8005078:	4614      	mov	r4, r2
 800507a:	461d      	mov	r5, r3
 800507c:	4643      	mov	r3, r8
 800507e:	18e3      	adds	r3, r4, r3
 8005080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005084:	464b      	mov	r3, r9
 8005086:	eb45 0303 	adc.w	r3, r5, r3
 800508a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800509a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050aa:	4629      	mov	r1, r5
 80050ac:	008b      	lsls	r3, r1, #2
 80050ae:	4621      	mov	r1, r4
 80050b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b4:	4621      	mov	r1, r4
 80050b6:	008a      	lsls	r2, r1, #2
 80050b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050bc:	f7fb f8d8 	bl	8000270 <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4b60      	ldr	r3, [pc, #384]	@ (8005248 <UART_SetConfig+0x4e4>)
 80050c6:	fba3 2302 	umull	r2, r3, r3, r2
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	011c      	lsls	r4, r3, #4
 80050ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050e0:	4642      	mov	r2, r8
 80050e2:	464b      	mov	r3, r9
 80050e4:	1891      	adds	r1, r2, r2
 80050e6:	61b9      	str	r1, [r7, #24]
 80050e8:	415b      	adcs	r3, r3
 80050ea:	61fb      	str	r3, [r7, #28]
 80050ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050f0:	4641      	mov	r1, r8
 80050f2:	1851      	adds	r1, r2, r1
 80050f4:	6139      	str	r1, [r7, #16]
 80050f6:	4649      	mov	r1, r9
 80050f8:	414b      	adcs	r3, r1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005108:	4659      	mov	r1, fp
 800510a:	00cb      	lsls	r3, r1, #3
 800510c:	4651      	mov	r1, sl
 800510e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005112:	4651      	mov	r1, sl
 8005114:	00ca      	lsls	r2, r1, #3
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	4603      	mov	r3, r0
 800511c:	4642      	mov	r2, r8
 800511e:	189b      	adds	r3, r3, r2
 8005120:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005124:	464b      	mov	r3, r9
 8005126:	460a      	mov	r2, r1
 8005128:	eb42 0303 	adc.w	r3, r2, r3
 800512c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	67bb      	str	r3, [r7, #120]	@ 0x78
 800513a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005148:	4649      	mov	r1, r9
 800514a:	008b      	lsls	r3, r1, #2
 800514c:	4641      	mov	r1, r8
 800514e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005152:	4641      	mov	r1, r8
 8005154:	008a      	lsls	r2, r1, #2
 8005156:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800515a:	f7fb f889 	bl	8000270 <__aeabi_uldivmod>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4611      	mov	r1, r2
 8005164:	4b38      	ldr	r3, [pc, #224]	@ (8005248 <UART_SetConfig+0x4e4>)
 8005166:	fba3 2301 	umull	r2, r3, r3, r1
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	2264      	movs	r2, #100	@ 0x64
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	1acb      	subs	r3, r1, r3
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	3332      	adds	r3, #50	@ 0x32
 8005178:	4a33      	ldr	r2, [pc, #204]	@ (8005248 <UART_SetConfig+0x4e4>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005184:	441c      	add	r4, r3
 8005186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800518a:	2200      	movs	r2, #0
 800518c:	673b      	str	r3, [r7, #112]	@ 0x70
 800518e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005190:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	1891      	adds	r1, r2, r2
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	415b      	adcs	r3, r3
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051a4:	4641      	mov	r1, r8
 80051a6:	1851      	adds	r1, r2, r1
 80051a8:	6039      	str	r1, [r7, #0]
 80051aa:	4649      	mov	r1, r9
 80051ac:	414b      	adcs	r3, r1
 80051ae:	607b      	str	r3, [r7, #4]
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051bc:	4659      	mov	r1, fp
 80051be:	00cb      	lsls	r3, r1, #3
 80051c0:	4651      	mov	r1, sl
 80051c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051c6:	4651      	mov	r1, sl
 80051c8:	00ca      	lsls	r2, r1, #3
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	4642      	mov	r2, r8
 80051d2:	189b      	adds	r3, r3, r2
 80051d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051d6:	464b      	mov	r3, r9
 80051d8:	460a      	mov	r2, r1
 80051da:	eb42 0303 	adc.w	r3, r2, r3
 80051de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80051ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051f8:	4649      	mov	r1, r9
 80051fa:	008b      	lsls	r3, r1, #2
 80051fc:	4641      	mov	r1, r8
 80051fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005202:	4641      	mov	r1, r8
 8005204:	008a      	lsls	r2, r1, #2
 8005206:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800520a:	f7fb f831 	bl	8000270 <__aeabi_uldivmod>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4b0d      	ldr	r3, [pc, #52]	@ (8005248 <UART_SetConfig+0x4e4>)
 8005214:	fba3 1302 	umull	r1, r3, r3, r2
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	2164      	movs	r1, #100	@ 0x64
 800521c:	fb01 f303 	mul.w	r3, r1, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	3332      	adds	r3, #50	@ 0x32
 8005226:	4a08      	ldr	r2, [pc, #32]	@ (8005248 <UART_SetConfig+0x4e4>)
 8005228:	fba2 2303 	umull	r2, r3, r2, r3
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	f003 020f 	and.w	r2, r3, #15
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4422      	add	r2, r4
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005242:	46bd      	mov	sp, r7
 8005244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005248:	51eb851f 	.word	0x51eb851f

0800524c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800524c:	b084      	sub	sp, #16
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	f107 001c 	add.w	r0, r7, #28
 800525a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800525e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005262:	2b01      	cmp	r3, #1
 8005264:	d123      	bne.n	80052ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800527a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800528e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005292:	2b01      	cmp	r3, #1
 8005294:	d105      	bne.n	80052a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 fae8 	bl	8006878 <USB_CoreReset>
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
 80052ac:	e01b      	b.n	80052e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fadc 	bl	8006878 <USB_CoreReset>
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80052d8:	e005      	b.n	80052e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052e6:	7fbb      	ldrb	r3, [r7, #30]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d10b      	bne.n	8005304 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f043 0206 	orr.w	r2, r3, #6
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005310:	b004      	add	sp, #16
 8005312:	4770      	bx	lr

08005314 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d165      	bne.n	80053f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a41      	ldr	r2, [pc, #260]	@ (8005430 <USB_SetTurnaroundTime+0x11c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d906      	bls.n	800533e <USB_SetTurnaroundTime+0x2a>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4a40      	ldr	r2, [pc, #256]	@ (8005434 <USB_SetTurnaroundTime+0x120>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d202      	bcs.n	800533e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005338:	230f      	movs	r3, #15
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e062      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4a3c      	ldr	r2, [pc, #240]	@ (8005434 <USB_SetTurnaroundTime+0x120>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d306      	bcc.n	8005354 <USB_SetTurnaroundTime+0x40>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a3b      	ldr	r2, [pc, #236]	@ (8005438 <USB_SetTurnaroundTime+0x124>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d202      	bcs.n	8005354 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800534e:	230e      	movs	r3, #14
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	e057      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4a38      	ldr	r2, [pc, #224]	@ (8005438 <USB_SetTurnaroundTime+0x124>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d306      	bcc.n	800536a <USB_SetTurnaroundTime+0x56>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a37      	ldr	r2, [pc, #220]	@ (800543c <USB_SetTurnaroundTime+0x128>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d202      	bcs.n	800536a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005364:	230d      	movs	r3, #13
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	e04c      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4a33      	ldr	r2, [pc, #204]	@ (800543c <USB_SetTurnaroundTime+0x128>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d306      	bcc.n	8005380 <USB_SetTurnaroundTime+0x6c>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4a32      	ldr	r2, [pc, #200]	@ (8005440 <USB_SetTurnaroundTime+0x12c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d802      	bhi.n	8005380 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800537a:	230c      	movs	r3, #12
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e041      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4a2f      	ldr	r2, [pc, #188]	@ (8005440 <USB_SetTurnaroundTime+0x12c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d906      	bls.n	8005396 <USB_SetTurnaroundTime+0x82>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4a2e      	ldr	r2, [pc, #184]	@ (8005444 <USB_SetTurnaroundTime+0x130>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d802      	bhi.n	8005396 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005390:	230b      	movs	r3, #11
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	e036      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4a2a      	ldr	r2, [pc, #168]	@ (8005444 <USB_SetTurnaroundTime+0x130>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d906      	bls.n	80053ac <USB_SetTurnaroundTime+0x98>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4a29      	ldr	r2, [pc, #164]	@ (8005448 <USB_SetTurnaroundTime+0x134>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d802      	bhi.n	80053ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053a6:	230a      	movs	r3, #10
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	e02b      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4a26      	ldr	r2, [pc, #152]	@ (8005448 <USB_SetTurnaroundTime+0x134>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d906      	bls.n	80053c2 <USB_SetTurnaroundTime+0xae>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a25      	ldr	r2, [pc, #148]	@ (800544c <USB_SetTurnaroundTime+0x138>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d202      	bcs.n	80053c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053bc:	2309      	movs	r3, #9
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e020      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4a21      	ldr	r2, [pc, #132]	@ (800544c <USB_SetTurnaroundTime+0x138>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d306      	bcc.n	80053d8 <USB_SetTurnaroundTime+0xc4>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4a20      	ldr	r2, [pc, #128]	@ (8005450 <USB_SetTurnaroundTime+0x13c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d802      	bhi.n	80053d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053d2:	2308      	movs	r3, #8
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e015      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <USB_SetTurnaroundTime+0x13c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d906      	bls.n	80053ee <USB_SetTurnaroundTime+0xda>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005454 <USB_SetTurnaroundTime+0x140>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d202      	bcs.n	80053ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053e8:	2307      	movs	r3, #7
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e00a      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053ee:	2306      	movs	r3, #6
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e007      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053fa:	2309      	movs	r3, #9
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e001      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005400:	2309      	movs	r3, #9
 8005402:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	00d8acbf 	.word	0x00d8acbf
 8005434:	00e4e1c0 	.word	0x00e4e1c0
 8005438:	00f42400 	.word	0x00f42400
 800543c:	01067380 	.word	0x01067380
 8005440:	011a499f 	.word	0x011a499f
 8005444:	01312cff 	.word	0x01312cff
 8005448:	014ca43f 	.word	0x014ca43f
 800544c:	016e3600 	.word	0x016e3600
 8005450:	01a6ab1f 	.word	0x01a6ab1f
 8005454:	01e84800 	.word	0x01e84800

08005458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f043 0201 	orr.w	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d115      	bne.n	80054ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054ca:	200a      	movs	r0, #10
 80054cc:	f7fb fd92 	bl	8000ff4 <HAL_Delay>
      ms += 10U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	330a      	adds	r3, #10
 80054d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 f93f 	bl	800675a <USB_GetMode>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d01e      	beq.n	8005520 <USB_SetCurrentMode+0x84>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80054e6:	d9f0      	bls.n	80054ca <USB_SetCurrentMode+0x2e>
 80054e8:	e01a      	b.n	8005520 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d115      	bne.n	800551c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054fc:	200a      	movs	r0, #10
 80054fe:	f7fb fd79 	bl	8000ff4 <HAL_Delay>
      ms += 10U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	330a      	adds	r3, #10
 8005506:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 f926 	bl	800675a <USB_GetMode>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <USB_SetCurrentMode+0x84>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2bc7      	cmp	r3, #199	@ 0xc7
 8005518:	d9f0      	bls.n	80054fc <USB_SetCurrentMode+0x60>
 800551a:	e001      	b.n	8005520 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e005      	b.n	800552c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2bc8      	cmp	r3, #200	@ 0xc8
 8005524:	d101      	bne.n	800552a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005534:	b084      	sub	sp, #16
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800554e:	2300      	movs	r3, #0
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	e009      	b.n	8005568 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	3340      	adds	r3, #64	@ 0x40
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	2200      	movs	r2, #0
 8005560:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	3301      	adds	r3, #1
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b0e      	cmp	r3, #14
 800556c:	d9f2      	bls.n	8005554 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800556e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005572:	2b00      	cmp	r3, #0
 8005574:	d11c      	bne.n	80055b0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005584:	f043 0302 	orr.w	r3, r3, #2
 8005588:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80055ae:	e00b      	b.n	80055c8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055ce:	461a      	mov	r2, r3
 80055d0:	2300      	movs	r3, #0
 80055d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d10d      	bne.n	80055f8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d104      	bne.n	80055ee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055e4:	2100      	movs	r1, #0
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f968 	bl	80058bc <USB_SetDevSpeed>
 80055ec:	e008      	b.n	8005600 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055ee:	2101      	movs	r1, #1
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f963 	bl	80058bc <USB_SetDevSpeed>
 80055f6:	e003      	b.n	8005600 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055f8:	2103      	movs	r1, #3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f95e 	bl	80058bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005600:	2110      	movs	r1, #16
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f8fa 	bl	80057fc <USB_FlushTxFifo>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f924 	bl	8005860 <USB_FlushRxFifo>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005628:	461a      	mov	r2, r3
 800562a:	2300      	movs	r3, #0
 800562c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005634:	461a      	mov	r2, r3
 8005636:	2300      	movs	r3, #0
 8005638:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005640:	461a      	mov	r2, r3
 8005642:	2300      	movs	r3, #0
 8005644:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	e043      	b.n	80056d4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800565e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005662:	d118      	bne.n	8005696 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005676:	461a      	mov	r2, r3
 8005678:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e013      	b.n	80056a8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568c:	461a      	mov	r2, r3
 800568e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	e008      	b.n	80056a8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a2:	461a      	mov	r2, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b4:	461a      	mov	r2, r3
 80056b6:	2300      	movs	r3, #0
 80056b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c6:	461a      	mov	r2, r3
 80056c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	3301      	adds	r3, #1
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056d8:	461a      	mov	r2, r3
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4293      	cmp	r3, r2
 80056de:	d3b5      	bcc.n	800564c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	e043      	b.n	800576e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056fc:	d118      	bne.n	8005730 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005710:	461a      	mov	r2, r3
 8005712:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	e013      	b.n	8005742 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	461a      	mov	r2, r3
 8005728:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e008      	b.n	8005742 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800573c:	461a      	mov	r2, r3
 800573e:	2300      	movs	r3, #0
 8005740:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800574e:	461a      	mov	r2, r3
 8005750:	2300      	movs	r3, #0
 8005752:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005760:	461a      	mov	r2, r3
 8005762:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005766:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	3301      	adds	r3, #1
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005772:	461a      	mov	r2, r3
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4293      	cmp	r3, r2
 8005778:	d3b5      	bcc.n	80056e6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800578c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800579a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800579c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f043 0210 	orr.w	r2, r3, #16
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <USB_DevInit+0x2c4>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f043 0208 	orr.w	r2, r3, #8
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d107      	bne.n	80057e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057f4:	b004      	add	sp, #16
 80057f6:	4770      	bx	lr
 80057f8:	803c3800 	.word	0x803c3800

080057fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3301      	adds	r3, #1
 800580e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005816:	d901      	bls.n	800581c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e01b      	b.n	8005854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	daf2      	bge.n	800580a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	019b      	lsls	r3, r3, #6
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005840:	d901      	bls.n	8005846 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e006      	b.n	8005854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b20      	cmp	r3, #32
 8005850:	d0f0      	beq.n	8005834 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3301      	adds	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005878:	d901      	bls.n	800587e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e018      	b.n	80058b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	daf2      	bge.n	800586c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2210      	movs	r2, #16
 800588e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800589c:	d901      	bls.n	80058a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e006      	b.n	80058b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d0f0      	beq.n	8005890 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058dc:	4313      	orrs	r3, r2
 80058de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b087      	sub	sp, #28
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0306 	and.w	r3, r3, #6
 8005906:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]
 8005912:	e00a      	b.n	800592a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d002      	beq.n	8005920 <USB_GetDevSpeed+0x32>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b06      	cmp	r3, #6
 800591e:	d102      	bne.n	8005926 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005920:	2302      	movs	r3, #2
 8005922:	75fb      	strb	r3, [r7, #23]
 8005924:	e001      	b.n	800592a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005926:	230f      	movs	r3, #15
 8005928:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d13a      	bne.n	80059ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	2101      	movs	r1, #1
 8005966:	fa01 f303 	lsl.w	r3, r1, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	68f9      	ldr	r1, [r7, #12]
 800596e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005972:	4313      	orrs	r3, r2
 8005974:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d155      	bne.n	8005a38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	791b      	ldrb	r3, [r3, #4]
 80059a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	059b      	lsls	r3, r3, #22
 80059ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059b0:	4313      	orrs	r3, r2
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e036      	b.n	8005a38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	2101      	movs	r1, #1
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d11a      	bne.n	8005a38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	791b      	ldrb	r3, [r3, #4]
 8005a1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d161      	bne.n	8005b28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a7a:	d11f      	bne.n	8005abc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ab6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005adc:	4013      	ands	r3, r2
 8005ade:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	43db      	mvns	r3, r3
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b00:	4013      	ands	r3, r2
 8005b02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	0159      	lsls	r1, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	440b      	add	r3, r1
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4b35      	ldr	r3, [pc, #212]	@ (8005bf8 <USB_DeactivateEndpoint+0x1b0>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	600b      	str	r3, [r1, #0]
 8005b26:	e060      	b.n	8005bea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b3e:	d11f      	bne.n	8005b80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	2101      	movs	r1, #1
 8005b92:	fa01 f303 	lsl.w	r3, r1, r3
 8005b96:	041b      	lsls	r3, r3, #16
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	68f9      	ldr	r1, [r7, #12]
 8005b9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	0159      	lsls	r1, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	440b      	add	r3, r1
 8005bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be2:	4619      	mov	r1, r3
 8005be4:	4b05      	ldr	r3, [pc, #20]	@ (8005bfc <USB_DeactivateEndpoint+0x1b4>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	ec337800 	.word	0xec337800
 8005bfc:	eff37800 	.word	0xeff37800

08005c00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	@ 0x28
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	f040 817f 	bne.w	8005f20 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d132      	bne.n	8005c90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c88:	0cdb      	lsrs	r3, r3, #19
 8005c8a:	04db      	lsls	r3, r3, #19
 8005c8c:	6113      	str	r3, [r2, #16]
 8005c8e:	e097      	b.n	8005dc0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005caa:	0cdb      	lsrs	r3, r3, #19
 8005cac:	04db      	lsls	r3, r3, #19
 8005cae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005cce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005cd2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d11a      	bne.n	8005d10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d903      	bls.n	8005cee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d0c:	6113      	str	r3, [r2, #16]
 8005d0e:	e044      	b.n	8005d9a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	4413      	add	r3, r2
 8005d1a:	1e5a      	subs	r2, r3, #1
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d24:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	8afb      	ldrh	r3, [r7, #22]
 8005d36:	04d9      	lsls	r1, r3, #19
 8005d38:	4ba4      	ldr	r3, [pc, #656]	@ (8005fcc <USB_EPStartXfer+0x3cc>)
 8005d3a:	400b      	ands	r3, r1
 8005d3c:	69b9      	ldr	r1, [r7, #24]
 8005d3e:	0148      	lsls	r0, r1, #5
 8005d40:	69f9      	ldr	r1, [r7, #28]
 8005d42:	4401      	add	r1, r0
 8005d44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	791b      	ldrb	r3, [r3, #4]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d122      	bne.n	8005d9a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d6e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005d72:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	8afb      	ldrh	r3, [r7, #22]
 8005d84:	075b      	lsls	r3, r3, #29
 8005d86:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005d8a:	69b9      	ldr	r1, [r7, #24]
 8005d8c:	0148      	lsls	r0, r1, #5
 8005d8e:	69f9      	ldr	r1, [r7, #28]
 8005d90:	4401      	add	r1, r0
 8005d92:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d96:	4313      	orrs	r3, r2
 8005d98:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005db0:	69b9      	ldr	r1, [r7, #24]
 8005db2:	0148      	lsls	r0, r1, #5
 8005db4:	69f9      	ldr	r1, [r7, #28]
 8005db6:	4401      	add	r1, r0
 8005db8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d14b      	bne.n	8005e5e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	791b      	ldrb	r3, [r3, #4]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d128      	bne.n	8005e3c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d110      	bne.n	8005e1c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	e00f      	b.n	8005e3c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e3a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	e166      	b.n	800612c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e7c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	791b      	ldrb	r3, [r3, #4]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d015      	beq.n	8005eb2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 814e 	beq.w	800612c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea6:	69f9      	ldr	r1, [r7, #28]
 8005ea8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005eac:	4313      	orrs	r3, r2
 8005eae:	634b      	str	r3, [r1, #52]	@ 0x34
 8005eb0:	e13c      	b.n	800612c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d110      	bne.n	8005ee4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005edc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e00f      	b.n	8005f04 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f02:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	68d9      	ldr	r1, [r3, #12]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	b298      	uxth	r0, r3
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	4603      	mov	r3, r0
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f9b9 	bl	8006290 <USB_WritePacket>
 8005f1e:	e105      	b.n	800612c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f3a:	0cdb      	lsrs	r3, r3, #19
 8005f3c:	04db      	lsls	r3, r3, #19
 8005f3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f62:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d132      	bne.n	8005fd0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f98:	69b9      	ldr	r1, [r7, #24]
 8005f9a:	0148      	lsls	r0, r1, #5
 8005f9c:	69f9      	ldr	r1, [r7, #28]
 8005f9e:	4401      	add	r1, r0
 8005fa0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fc6:	6113      	str	r3, [r2, #16]
 8005fc8:	e062      	b.n	8006090 <USB_EPStartXfer+0x490>
 8005fca:	bf00      	nop
 8005fcc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d123      	bne.n	8006020 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fee:	69b9      	ldr	r1, [r7, #24]
 8005ff0:	0148      	lsls	r0, r1, #5
 8005ff2:	69f9      	ldr	r1, [r7, #28]
 8005ff4:	4401      	add	r1, r0
 8005ff6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006018:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800601c:	6113      	str	r3, [r2, #16]
 800601e:	e037      	b.n	8006090 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	4413      	add	r3, r2
 800602a:	1e5a      	subs	r2, r3, #1
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	fbb2 f3f3 	udiv	r3, r2, r3
 8006034:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	8afa      	ldrh	r2, [r7, #22]
 800603c:	fb03 f202 	mul.w	r2, r3, r2
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	8afb      	ldrh	r3, [r7, #22]
 8006054:	04d9      	lsls	r1, r3, #19
 8006056:	4b38      	ldr	r3, [pc, #224]	@ (8006138 <USB_EPStartXfer+0x538>)
 8006058:	400b      	ands	r3, r1
 800605a:	69b9      	ldr	r1, [r7, #24]
 800605c:	0148      	lsls	r0, r1, #5
 800605e:	69f9      	ldr	r1, [r7, #28]
 8006060:	4401      	add	r1, r0
 8006062:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006066:	4313      	orrs	r3, r2
 8006068:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006080:	69b9      	ldr	r1, [r7, #24]
 8006082:	0148      	lsls	r0, r1, #5
 8006084:	69f9      	ldr	r1, [r7, #28]
 8006086:	4401      	add	r1, r0
 8006088:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800608c:	4313      	orrs	r3, r2
 800608e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d10d      	bne.n	80060b2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d009      	beq.n	80060b2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	68d9      	ldr	r1, [r3, #12]
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ae:	460a      	mov	r2, r1
 80060b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	791b      	ldrb	r3, [r3, #4]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d128      	bne.n	800610c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d110      	bne.n	80060ec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	e00f      	b.n	800610c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800610a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006126:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800612a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	1ff80000 	.word	0x1ff80000

0800613c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d14a      	bne.n	80061f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800616e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006172:	f040 8086 	bne.w	8006282 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	440a      	add	r2, r1
 8006190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006194:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006198:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3301      	adds	r3, #1
 80061c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d902      	bls.n	80061d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	75fb      	strb	r3, [r7, #23]
          break;
 80061d2:	e056      	b.n	8006282 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ec:	d0e7      	beq.n	80061be <USB_EPStopXfer+0x82>
 80061ee:	e048      	b.n	8006282 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006204:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006208:	d13b      	bne.n	8006282 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	7812      	ldrb	r2, [r2, #0]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006228:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800622c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	7812      	ldrb	r2, [r2, #0]
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	440a      	add	r2, r1
 8006248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800624c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006250:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3301      	adds	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800625e:	4293      	cmp	r3, r2
 8006260:	d902      	bls.n	8006268 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
          break;
 8006266:	e00c      	b.n	8006282 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800627c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006280:	d0e7      	beq.n	8006252 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
}
 8006284:	4618      	mov	r0, r3
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006290:	b480      	push	{r7}
 8006292:	b089      	sub	sp, #36	@ 0x24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4611      	mov	r1, r2
 800629c:	461a      	mov	r2, r3
 800629e:	460b      	mov	r3, r1
 80062a0:	71fb      	strb	r3, [r7, #7]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d123      	bne.n	80062fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062b6:	88bb      	ldrh	r3, [r7, #4]
 80062b8:	3303      	adds	r3, #3
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	61bb      	str	r3, [r7, #24]
 80062c2:	e018      	b.n	80062f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	031a      	lsls	r2, r3, #12
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d0:	461a      	mov	r2, r3
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3301      	adds	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3301      	adds	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	3301      	adds	r3, #1
 80062e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d3e2      	bcc.n	80062c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3724      	adds	r7, #36	@ 0x24
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800630c:	b480      	push	{r7}
 800630e:	b08b      	sub	sp, #44	@ 0x2c
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	089b      	lsrs	r3, r3, #2
 8006326:	b29b      	uxth	r3, r3
 8006328:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006332:	2300      	movs	r3, #0
 8006334:	623b      	str	r3, [r7, #32]
 8006336:	e014      	b.n	8006362 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	601a      	str	r2, [r3, #0]
    pDest++;
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	3301      	adds	r3, #1
 8006348:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	3301      	adds	r3, #1
 800634e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	3301      	adds	r3, #1
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	3301      	adds	r3, #1
 800635a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	3301      	adds	r3, #1
 8006360:	623b      	str	r3, [r7, #32]
 8006362:	6a3a      	ldr	r2, [r7, #32]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	429a      	cmp	r2, r3
 8006368:	d3e6      	bcc.n	8006338 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800636a:	8bfb      	ldrh	r3, [r7, #30]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01e      	beq.n	80063ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800637a:	461a      	mov	r2, r3
 800637c:	f107 0310 	add.w	r3, r7, #16
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
 8006390:	b2da      	uxtb	r2, r3
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	701a      	strb	r2, [r3, #0]
      i++;
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	3301      	adds	r3, #1
 800639a:	623b      	str	r3, [r7, #32]
      pDest++;
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	3301      	adds	r3, #1
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063a2:	8bfb      	ldrh	r3, [r7, #30]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063a8:	8bfb      	ldrh	r3, [r7, #30]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1ea      	bne.n	8006384 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	372c      	adds	r7, #44	@ 0x2c
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d12c      	bne.n	8006432 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	db12      	blt.n	8006410 <USB_EPSetStall+0x54>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00f      	beq.n	8006410 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800640a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800640e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	0151      	lsls	r1, r2, #5
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	440a      	add	r2, r1
 8006426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800642a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	e02b      	b.n	800648a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	db12      	blt.n	800646a <USB_EPSetStall+0xae>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00f      	beq.n	800646a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006464:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006468:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006488:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d128      	bne.n	8006506 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	791b      	ldrb	r3, [r3, #4]
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d003      	beq.n	80064e4 <USB_EPClearStall+0x4c>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	791b      	ldrb	r3, [r3, #4]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d138      	bne.n	8006556 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	e027      	b.n	8006556 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	440a      	add	r2, r1
 800651c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006520:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006524:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	791b      	ldrb	r3, [r3, #4]
 800652a:	2b03      	cmp	r3, #3
 800652c:	d003      	beq.n	8006536 <USB_EPClearStall+0x9e>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	791b      	ldrb	r3, [r3, #4]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d10f      	bne.n	8006556 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	440a      	add	r2, r1
 800654c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006554:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006582:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006586:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006598:	68f9      	ldr	r1, [r7, #12]
 800659a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800659e:	4313      	orrs	r3, r2
 80065a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065ca:	f023 0303 	bic.w	r3, r3, #3
 80065ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065de:	f023 0302 	bic.w	r3, r3, #2
 80065e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800660c:	f023 0303 	bic.w	r3, r3, #3
 8006610:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006620:	f043 0302 	orr.w	r3, r3, #2
 8006624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4013      	ands	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800664c:	68fb      	ldr	r3, [r7, #12]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	0c1b      	lsrs	r3, r3, #16
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	4013      	ands	r3, r2
 80066b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	b29b      	uxth	r3, r3
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4013      	ands	r3, r2
 80066ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066f0:	68bb      	ldr	r3, [r7, #8]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066fe:	b480      	push	{r7}
 8006700:	b087      	sub	sp, #28
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800671e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006720:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	fa22 f303 	lsr.w	r3, r2, r3
 800672e:	01db      	lsls	r3, r3, #7
 8006730:	b2db      	uxtb	r3, r3
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4013      	ands	r3, r2
 800674a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800674c:	68bb      	ldr	r3, [r7, #8]
}
 800674e:	4618      	mov	r0, r3
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f003 0301 	and.w	r3, r3, #1
}
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006790:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006794:	f023 0307 	bic.w	r3, r3, #7
 8006798:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	460b      	mov	r3, r1
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	333c      	adds	r3, #60	@ 0x3c
 80067d2:	3304      	adds	r3, #4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	4a26      	ldr	r2, [pc, #152]	@ (8006874 <USB_EP0_OutStart+0xb8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d90a      	bls.n	80067f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067f0:	d101      	bne.n	80067f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	e037      	b.n	8006866 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fc:	461a      	mov	r2, r3
 80067fe:	2300      	movs	r3, #0
 8006800:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006810:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006814:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006824:	f043 0318 	orr.w	r3, r3, #24
 8006828:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006838:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800683c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800683e:	7afb      	ldrb	r3, [r7, #11]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d10f      	bne.n	8006864 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800685e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	4f54300a 	.word	0x4f54300a

08006878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3301      	adds	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006890:	d901      	bls.n	8006896 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e01b      	b.n	80068ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	daf2      	bge.n	8006884 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f043 0201 	orr.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068ba:	d901      	bls.n	80068c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e006      	b.n	80068ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d0f0      	beq.n	80068ae <USB_CoreReset+0x36>

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80068e8:	f44f 701d 	mov.w	r0, #628	@ 0x274
 80068ec:	f003 ff66 	bl	800a7bc <USBD_static_malloc>
 80068f0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d109      	bne.n	800690c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	32b0      	adds	r2, #176	@ 0xb0
 8006902:	2100      	movs	r1, #0
 8006904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006908:	2302      	movs	r3, #2
 800690a:	e06e      	b.n	80069ea <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	32b0      	adds	r2, #176	@ 0xb0
 8006916:	68f9      	ldr	r1, [r7, #12]
 8006918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	32b0      	adds	r2, #176	@ 0xb0
 8006926:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	7c1b      	ldrb	r3, [r3, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d12b      	bne.n	8006990 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006938:	4b2e      	ldr	r3, [pc, #184]	@ (80069f4 <USBD_MSC_Init+0x118>)
 800693a:	7819      	ldrb	r1, [r3, #0]
 800693c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006940:	2202      	movs	r2, #2
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f003 fdf7 	bl	800a536 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006948:	4b2a      	ldr	r3, [pc, #168]	@ (80069f4 <USBD_MSC_Init+0x118>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f003 020f 	and.w	r2, r3, #15
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006960:	2201      	movs	r2, #1
 8006962:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006964:	4b24      	ldr	r3, [pc, #144]	@ (80069f8 <USBD_MSC_Init+0x11c>)
 8006966:	7819      	ldrb	r1, [r3, #0]
 8006968:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800696c:	2202      	movs	r2, #2
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f003 fde1 	bl	800a536 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8006974:	4b20      	ldr	r3, [pc, #128]	@ (80069f8 <USBD_MSC_Init+0x11c>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	f003 020f 	and.w	r2, r3, #15
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	3324      	adds	r3, #36	@ 0x24
 800698a:	2201      	movs	r2, #1
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	e028      	b.n	80069e2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006990:	4b18      	ldr	r3, [pc, #96]	@ (80069f4 <USBD_MSC_Init+0x118>)
 8006992:	7819      	ldrb	r1, [r3, #0]
 8006994:	2340      	movs	r3, #64	@ 0x40
 8006996:	2202      	movs	r2, #2
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f003 fdcc 	bl	800a536 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800699e:	4b15      	ldr	r3, [pc, #84]	@ (80069f4 <USBD_MSC_Init+0x118>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f003 020f 	and.w	r2, r3, #15
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80069b6:	2201      	movs	r2, #1
 80069b8:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80069ba:	4b0f      	ldr	r3, [pc, #60]	@ (80069f8 <USBD_MSC_Init+0x11c>)
 80069bc:	7819      	ldrb	r1, [r3, #0]
 80069be:	2340      	movs	r3, #64	@ 0x40
 80069c0:	2202      	movs	r2, #2
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f003 fdb7 	bl	800a536 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80069c8:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <USBD_MSC_Init+0x11c>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 020f 	and.w	r2, r3, #15
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	3324      	adds	r3, #36	@ 0x24
 80069de:	2201      	movs	r2, #1
 80069e0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa2c 	bl	8006e40 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	2000006f 	.word	0x2000006f
 80069f8:	2000006e 	.word	0x2000006e

080069fc <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8006a08:	4b26      	ldr	r3, [pc, #152]	@ (8006aa4 <USBD_MSC_DeInit+0xa8>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f003 fdb7 	bl	800a582 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8006a14:	4b23      	ldr	r3, [pc, #140]	@ (8006aa4 <USBD_MSC_DeInit+0xa8>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f003 020f 	and.w	r2, r3, #15
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8006a30:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa8 <USBD_MSC_DeInit+0xac>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f003 fda3 	bl	800a582 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8006a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa8 <USBD_MSC_DeInit+0xac>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	f003 020f 	and.w	r2, r3, #15
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	3324      	adds	r3, #36	@ 0x24
 8006a52:	2200      	movs	r2, #0
 8006a54:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	32b0      	adds	r2, #176	@ 0xb0
 8006a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d018      	beq.n	8006a9a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa67 	bl	8006f3c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	32b0      	adds	r2, #176	@ 0xb0
 8006a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f003 feab 	bl	800a7d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	32b0      	adds	r2, #176	@ 0xb0
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	2000006f 	.word	0x2000006f
 8006aa8:	2000006e 	.word	0x2000006e

08006aac <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	32b0      	adds	r2, #176	@ 0xb0
 8006ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e0e1      	b.n	8006c9c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d053      	beq.n	8006b8c <USBD_MSC_Setup+0xe0>
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	f040 80d1 	bne.w	8006c8c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	2bfe      	cmp	r3, #254	@ 0xfe
 8006af0:	d002      	beq.n	8006af8 <USBD_MSC_Setup+0x4c>
 8006af2:	2bff      	cmp	r3, #255	@ 0xff
 8006af4:	d02a      	beq.n	8006b4c <USBD_MSC_Setup+0xa0>
 8006af6:	e041      	b.n	8006b7c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	885b      	ldrh	r3, [r3, #2]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d11e      	bne.n	8006b3e <USBD_MSC_Setup+0x92>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	88db      	ldrh	r3, [r3, #6]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d11a      	bne.n	8006b3e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	da15      	bge.n	8006b3e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	33b0      	adds	r3, #176	@ 0xb0
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	4798      	blx	r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	461a      	mov	r2, r3
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2201      	movs	r2, #1
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f003 f933 	bl	8009da0 <USBD_CtlSendData>
 8006b3a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b3c:	e025      	b.n	8006b8a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f003 f8b0 	bl	8009ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b46:	2303      	movs	r3, #3
 8006b48:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4a:	e01e      	b.n	8006b8a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	885b      	ldrh	r3, [r3, #2]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10c      	bne.n	8006b6e <USBD_MSC_Setup+0xc2>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	88db      	ldrh	r3, [r3, #6]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d108      	bne.n	8006b6e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	db03      	blt.n	8006b6e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f9b4 	bl	8006ed4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b6c:	e00d      	b.n	8006b8a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f003 f898 	bl	8009ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b76:	2303      	movs	r3, #3
 8006b78:	75fb      	strb	r3, [r7, #23]
          break;
 8006b7a:	e006      	b.n	8006b8a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f003 f891 	bl	8009ca6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	75fb      	strb	r3, [r7, #23]
          break;
 8006b88:	bf00      	nop
      }
      break;
 8006b8a:	e086      	b.n	8006c9a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	2b0b      	cmp	r3, #11
 8006b92:	d872      	bhi.n	8006c7a <USBD_MSC_Setup+0x1ce>
 8006b94:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <USBD_MSC_Setup+0xf0>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bcd 	.word	0x08006bcd
 8006ba0:	08006c49 	.word	0x08006c49
 8006ba4:	08006c7b 	.word	0x08006c7b
 8006ba8:	08006c7b 	.word	0x08006c7b
 8006bac:	08006c7b 	.word	0x08006c7b
 8006bb0:	08006c7b 	.word	0x08006c7b
 8006bb4:	08006c7b 	.word	0x08006c7b
 8006bb8:	08006c7b 	.word	0x08006c7b
 8006bbc:	08006c7b 	.word	0x08006c7b
 8006bc0:	08006c7b 	.word	0x08006c7b
 8006bc4:	08006bf7 	.word	0x08006bf7
 8006bc8:	08006c21 	.word	0x08006c21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d107      	bne.n	8006be8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bd8:	f107 030e 	add.w	r3, r7, #14
 8006bdc:	2202      	movs	r2, #2
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f003 f8dd 	bl	8009da0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006be6:	e050      	b.n	8006c8a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f003 f85b 	bl	8009ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	75fb      	strb	r3, [r7, #23]
          break;
 8006bf4:	e049      	b.n	8006c8a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d107      	bne.n	8006c12 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3304      	adds	r3, #4
 8006c06:	2201      	movs	r2, #1
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f003 f8c8 	bl	8009da0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c10:	e03b      	b.n	8006c8a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f003 f846 	bl	8009ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c1e:	e034      	b.n	8006c8a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d106      	bne.n	8006c3a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	885b      	ldrh	r3, [r3, #2]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c38:	e027      	b.n	8006c8a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f003 f832 	bl	8009ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c42:	2303      	movs	r3, #3
 8006c44:	75fb      	strb	r3, [r7, #23]
          break;
 8006c46:	e020      	b.n	8006c8a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d119      	bne.n	8006c88 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	885b      	ldrh	r3, [r3, #2]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d115      	bne.n	8006c88 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	889b      	ldrh	r3, [r3, #4]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f003 fcab 	bl	800a5c0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	889b      	ldrh	r3, [r3, #4]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fb2e 	bl	80072d4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8006c78:	e006      	b.n	8006c88 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f003 f812 	bl	8009ca6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c82:	2303      	movs	r3, #3
 8006c84:	75fb      	strb	r3, [r7, #23]
          break;
 8006c86:	e000      	b.n	8006c8a <USBD_MSC_Setup+0x1de>
          break;
 8006c88:	bf00      	nop
      }
      break;
 8006c8a:	e006      	b.n	8006c9a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f003 f809 	bl	8009ca6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	75fb      	strb	r3, [r7, #23]
      break;
 8006c98:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f959 	bl	8006f6c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f983 	bl	8006fe0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006cec:	2181      	movs	r1, #129	@ 0x81
 8006cee:	4812      	ldr	r0, [pc, #72]	@ (8006d38 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006cf0:	f002 f9a4 	bl	800903c <USBD_GetEpDesc>
 8006cf4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	480f      	ldr	r0, [pc, #60]	@ (8006d38 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006cfa:	f002 f99f 	bl	800903c <USBD_GetEpDesc>
 8006cfe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d006      	beq.n	8006d14 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	711a      	strb	r2, [r3, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f042 0202 	orr.w	r2, r2, #2
 8006d12:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d006      	beq.n	8006d28 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	711a      	strb	r2, [r3, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f042 0202 	orr.w	r2, r2, #2
 8006d26:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006d2e:	4b02      	ldr	r3, [pc, #8]	@ (8006d38 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20000044 	.word	0x20000044

08006d3c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006d44:	2181      	movs	r1, #129	@ 0x81
 8006d46:	4812      	ldr	r0, [pc, #72]	@ (8006d90 <USBD_MSC_GetFSCfgDesc+0x54>)
 8006d48:	f002 f978 	bl	800903c <USBD_GetEpDesc>
 8006d4c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006d4e:	2101      	movs	r1, #1
 8006d50:	480f      	ldr	r0, [pc, #60]	@ (8006d90 <USBD_MSC_GetFSCfgDesc+0x54>)
 8006d52:	f002 f973 	bl	800903c <USBD_GetEpDesc>
 8006d56:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d006      	beq.n	8006d6c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d66:	711a      	strb	r2, [r3, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d006      	beq.n	8006d80 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d7a:	711a      	strb	r2, [r3, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006d86:	4b02      	ldr	r3, [pc, #8]	@ (8006d90 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20000044 	.word	0x20000044

08006d94 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006d9c:	2181      	movs	r1, #129	@ 0x81
 8006d9e:	4812      	ldr	r0, [pc, #72]	@ (8006de8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8006da0:	f002 f94c 	bl	800903c <USBD_GetEpDesc>
 8006da4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006da6:	2101      	movs	r1, #1
 8006da8:	480f      	ldr	r0, [pc, #60]	@ (8006de8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8006daa:	f002 f947 	bl	800903c <USBD_GetEpDesc>
 8006dae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d006      	beq.n	8006dc4 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dbe:	711a      	strb	r2, [r3, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d006      	beq.n	8006dd8 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dd2:	711a      	strb	r2, [r3, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006dde:	4b02      	ldr	r3, [pc, #8]	@ (8006de8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000044 	.word	0x20000044

08006dec <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	220a      	movs	r2, #10
 8006df8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006dfa:	4b03      	ldr	r3, [pc, #12]	@ (8006e08 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	20000064 	.word	0x20000064

08006e0c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e009      	b.n	8006e34 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	33b0      	adds	r3, #176	@ 0xb0
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	32b0      	adds	r2, #176	@ 0xb0
 8006e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d032      	beq.n	8006ec4 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	33b0      	adds	r3, #176	@ 0xb0
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2000      	movs	r0, #0
 8006e96:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8006e98:	4b0c      	ldr	r3, [pc, #48]	@ (8006ecc <MSC_BOT_Init+0x8c>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f003 fb8e 	bl	800a5c0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8006ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed0 <MSC_BOT_Init+0x90>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f003 fb88 	bl	800a5c0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006eb0:	4b06      	ldr	r3, [pc, #24]	@ (8006ecc <MSC_BOT_Init+0x8c>)
 8006eb2:	7819      	ldrb	r1, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8006eba:	231f      	movs	r3, #31
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f003 fc48 	bl	800a752 <USBD_LL_PrepareReceive>
 8006ec2:	e000      	b.n	8006ec6 <MSC_BOT_Init+0x86>
    return;
 8006ec4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	2000006f 	.word	0x2000006f
 8006ed0:	2000006e 	.word	0x2000006e

08006ed4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	32b0      	adds	r2, #176	@ 0xb0
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d01b      	beq.n	8006f2a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8006efe:	4b0d      	ldr	r3, [pc, #52]	@ (8006f34 <MSC_BOT_Reset+0x60>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f003 fb99 	bl	800a63c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8006f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f38 <MSC_BOT_Reset+0x64>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f003 fb93 	bl	800a63c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006f16:	4b08      	ldr	r3, [pc, #32]	@ (8006f38 <MSC_BOT_Reset+0x64>)
 8006f18:	7819      	ldrb	r1, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8006f20:	231f      	movs	r3, #31
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f003 fc15 	bl	800a752 <USBD_LL_PrepareReceive>
 8006f28:	e000      	b.n	8006f2c <MSC_BOT_Reset+0x58>
    return;
 8006f2a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	2000006e 	.word	0x2000006e
 8006f38:	2000006f 	.word	0x2000006f

08006f3c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32b0      	adds	r2, #176	@ 0xb0
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	721a      	strb	r2, [r3, #8]
  }
}
 8006f60:	bf00      	nop
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32b0      	adds	r2, #176	@ 0xb0
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d020      	beq.n	8006fd0 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	7a1b      	ldrb	r3, [r3, #8]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d005      	beq.n	8006fa2 <MSC_BOT_DataIn+0x36>
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	db1c      	blt.n	8006fd4 <MSC_BOT_DataIn+0x68>
 8006f9a:	3b03      	subs	r3, #3
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d819      	bhi.n	8006fd4 <MSC_BOT_DataIn+0x68>
 8006fa0:	e011      	b.n	8006fc6 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8006fae:	461a      	mov	r2, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f9c9 	bl	8007348 <SCSI_ProcessCmd>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	da0d      	bge.n	8006fd8 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f90c 	bl	80071dc <MSC_BOT_SendCSW>
      }
      break;
 8006fc4:	e008      	b.n	8006fd8 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f907 	bl	80071dc <MSC_BOT_SendCSW>
      break;
 8006fce:	e004      	b.n	8006fda <MSC_BOT_DataIn+0x6e>
    return;
 8006fd0:	bf00      	nop
 8006fd2:	e002      	b.n	8006fda <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8006fd4:	bf00      	nop
 8006fd6:	e000      	b.n	8006fda <MSC_BOT_DataIn+0x6e>
      break;
 8006fd8:	bf00      	nop
  }
}
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32b0      	adds	r2, #176	@ 0xb0
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d01c      	beq.n	800703c <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	7a1b      	ldrb	r3, [r3, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <MSC_BOT_DataOut+0x30>
 800700a:	2b01      	cmp	r3, #1
 800700c:	d004      	beq.n	8007018 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800700e:	e018      	b.n	8007042 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f819 	bl	8007048 <MSC_BOT_CBW_Decode>
      break;
 8007016:	e014      	b.n	8007042 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8007024:	461a      	mov	r2, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f98e 	bl	8007348 <SCSI_ProcessCmd>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	da06      	bge.n	8007040 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007032:	2101      	movs	r1, #1
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f8d1 	bl	80071dc <MSC_BOT_SendCSW>
      break;
 800703a:	e001      	b.n	8007040 <MSC_BOT_DataOut+0x60>
    return;
 800703c:	bf00      	nop
 800703e:	e000      	b.n	8007042 <MSC_BOT_DataOut+0x62>
      break;
 8007040:	bf00      	nop
  }
}
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	32b0      	adds	r2, #176	@ 0xb0
 800705a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d079      	beq.n	800715a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800707e:	4b3a      	ldr	r3, [pc, #232]	@ (8007168 <MSC_BOT_CBW_Decode+0x120>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f003 fb85 	bl	800a794 <USBD_LL_GetRxDataSize>
 800708a:	4603      	mov	r3, r0
 800708c:	2b1f      	cmp	r3, #31
 800708e:	d114      	bne.n	80070ba <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8007096:	4a35      	ldr	r2, [pc, #212]	@ (800716c <MSC_BOT_CBW_Decode+0x124>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d10e      	bne.n	80070ba <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d809      	bhi.n	80070ba <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	d90e      	bls.n	80070d8 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80070c0:	2320      	movs	r3, #32
 80070c2:	2205      	movs	r2, #5
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fe54 	bl	8007d72 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2202      	movs	r2, #2
 80070ce:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f8bd 	bl	8007250 <MSC_BOT_Abort>
 80070d6:	e043      	b.n	8007160 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80070e4:	461a      	mov	r2, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f92e 	bl	8007348 <SCSI_ProcessCmd>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	da0c      	bge.n	800710c <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	7a1b      	ldrb	r3, [r3, #8]
 80070f6:	2b05      	cmp	r3, #5
 80070f8:	d104      	bne.n	8007104 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80070fa:	2101      	movs	r1, #1
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f86d 	bl	80071dc <MSC_BOT_SendCSW>
 8007102:	e02d      	b.n	8007160 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f8a3 	bl	8007250 <MSC_BOT_Abort>
 800710a:	e029      	b.n	8007160 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	7a1b      	ldrb	r3, [r3, #8]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d024      	beq.n	800715e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007118:	2b01      	cmp	r3, #1
 800711a:	d020      	beq.n	800715e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007120:	2b03      	cmp	r3, #3
 8007122:	d01c      	beq.n	800715e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d009      	beq.n	8007140 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f103 0110 	add.w	r1, r3, #16
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	461a      	mov	r2, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f819 	bl	8007170 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800713e:	e00f      	b.n	8007160 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007148:	2100      	movs	r1, #0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f846 	bl	80071dc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007150:	e006      	b.n	8007160 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f87c 	bl	8007250 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007158:	e002      	b.n	8007160 <MSC_BOT_CBW_Decode+0x118>
    return;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800715e:	bf00      	nop
    }
  }
}
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	2000006f 	.word	0x2000006f
 800716c:	43425355 	.word	0x43425355

08007170 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	32b0      	adds	r2, #176	@ 0xb0
 8007186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01e      	beq.n	80071d0 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	4293      	cmp	r3, r2
 800719c:	bf28      	it	cs
 800719e:	4613      	movcs	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	1ad2      	subs	r2, r2, r3
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2204      	movs	r2, #4
 80071be:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80071c0:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <MSC_BOT_SendData+0x68>)
 80071c2:	7819      	ldrb	r1, [r3, #0]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f003 faa1 	bl	800a710 <USBD_LL_Transmit>
 80071ce:	e000      	b.n	80071d2 <MSC_BOT_SendData+0x62>
    return;
 80071d0:	bf00      	nop
}
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	2000006e 	.word	0x2000006e

080071dc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	32b0      	adds	r2, #176	@ 0xb0
 80071f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01d      	beq.n	800723a <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4a10      	ldr	r2, [pc, #64]	@ (8007244 <MSC_BOT_SendCSW+0x68>)
 8007202:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	78fa      	ldrb	r2, [r7, #3]
 800720a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8007214:	4b0c      	ldr	r3, [pc, #48]	@ (8007248 <MSC_BOT_SendCSW+0x6c>)
 8007216:	7819      	ldrb	r1, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800721e:	230d      	movs	r3, #13
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f003 fa75 	bl	800a710 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8007226:	4b09      	ldr	r3, [pc, #36]	@ (800724c <MSC_BOT_SendCSW+0x70>)
 8007228:	7819      	ldrb	r1, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8007230:	231f      	movs	r3, #31
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f003 fa8d 	bl	800a752 <USBD_LL_PrepareReceive>
 8007238:	e000      	b.n	800723c <MSC_BOT_SendCSW+0x60>
    return;
 800723a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	53425355 	.word	0x53425355
 8007248:	2000006e 	.word	0x2000006e
 800724c:	2000006f 	.word	0x2000006f

08007250 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	32b0      	adds	r2, #176	@ 0xb0
 8007262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007266:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d02a      	beq.n	80072c4 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10e      	bne.n	8007296 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800727e:	2b00      	cmp	r3, #0
 8007280:	d009      	beq.n	8007296 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007286:	2b00      	cmp	r3, #0
 8007288:	d105      	bne.n	8007296 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800728a:	4b10      	ldr	r3, [pc, #64]	@ (80072cc <MSC_BOT_Abort+0x7c>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f003 f9b4 	bl	800a5fe <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8007296:	4b0e      	ldr	r3, [pc, #56]	@ (80072d0 <MSC_BOT_Abort+0x80>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f003 f9ae 	bl	800a5fe <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	7a5b      	ldrb	r3, [r3, #9]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d10d      	bne.n	80072c6 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80072aa:	4b09      	ldr	r3, [pc, #36]	@ (80072d0 <MSC_BOT_Abort+0x80>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f003 f9a4 	bl	800a5fe <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80072b6:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <MSC_BOT_Abort+0x7c>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f003 f99e 	bl	800a5fe <USBD_LL_StallEP>
 80072c2:	e000      	b.n	80072c6 <MSC_BOT_Abort+0x76>
    return;
 80072c4:	bf00      	nop
  }
}
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	2000006f 	.word	0x2000006f
 80072d0:	2000006e 	.word	0x2000006e

080072d4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	32b0      	adds	r2, #176	@ 0xb0
 80072ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ee:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d01d      	beq.n	8007332 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	7a5b      	ldrb	r3, [r3, #9]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d10c      	bne.n	8007318 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80072fe:	4b10      	ldr	r3, [pc, #64]	@ (8007340 <MSC_BOT_CplClrFeature+0x6c>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f003 f97a 	bl	800a5fe <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800730a:	4b0e      	ldr	r3, [pc, #56]	@ (8007344 <MSC_BOT_CplClrFeature+0x70>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f003 f974 	bl	800a5fe <USBD_LL_StallEP>
 8007316:	e00f      	b.n	8007338 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800731c:	2b00      	cmp	r3, #0
 800731e:	da0a      	bge.n	8007336 <MSC_BOT_CplClrFeature+0x62>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	7a5b      	ldrb	r3, [r3, #9]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d006      	beq.n	8007336 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007328:	2101      	movs	r1, #1
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff ff56 	bl	80071dc <MSC_BOT_SendCSW>
 8007330:	e002      	b.n	8007338 <MSC_BOT_CplClrFeature+0x64>
    return;
 8007332:	bf00      	nop
 8007334:	e000      	b.n	8007338 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8007336:	bf00      	nop
  }
}
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	2000006e 	.word	0x2000006e
 8007344:	2000006f 	.word	0x2000006f

08007348 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	460b      	mov	r3, r1
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	32b0      	adds	r2, #176	@ 0xb0
 8007360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007364:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d102      	bne.n	8007372 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800736c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007370:	e168      	b.n	8007644 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2baa      	cmp	r3, #170	@ 0xaa
 8007378:	f000 8144 	beq.w	8007604 <SCSI_ProcessCmd+0x2bc>
 800737c:	2baa      	cmp	r3, #170	@ 0xaa
 800737e:	f300 8153 	bgt.w	8007628 <SCSI_ProcessCmd+0x2e0>
 8007382:	2ba8      	cmp	r3, #168	@ 0xa8
 8007384:	f000 812c 	beq.w	80075e0 <SCSI_ProcessCmd+0x298>
 8007388:	2ba8      	cmp	r3, #168	@ 0xa8
 800738a:	f300 814d 	bgt.w	8007628 <SCSI_ProcessCmd+0x2e0>
 800738e:	2b5a      	cmp	r3, #90	@ 0x5a
 8007390:	f300 80c0 	bgt.w	8007514 <SCSI_ProcessCmd+0x1cc>
 8007394:	2b00      	cmp	r3, #0
 8007396:	f2c0 8147 	blt.w	8007628 <SCSI_ProcessCmd+0x2e0>
 800739a:	2b5a      	cmp	r3, #90	@ 0x5a
 800739c:	f200 8144 	bhi.w	8007628 <SCSI_ProcessCmd+0x2e0>
 80073a0:	a201      	add	r2, pc, #4	@ (adr r2, 80073a8 <SCSI_ProcessCmd+0x60>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	0800751b 	.word	0x0800751b
 80073ac:	08007629 	.word	0x08007629
 80073b0:	08007629 	.word	0x08007629
 80073b4:	0800752d 	.word	0x0800752d
 80073b8:	08007629 	.word	0x08007629
 80073bc:	08007629 	.word	0x08007629
 80073c0:	08007629 	.word	0x08007629
 80073c4:	08007629 	.word	0x08007629
 80073c8:	08007629 	.word	0x08007629
 80073cc:	08007629 	.word	0x08007629
 80073d0:	08007629 	.word	0x08007629
 80073d4:	08007629 	.word	0x08007629
 80073d8:	08007629 	.word	0x08007629
 80073dc:	08007629 	.word	0x08007629
 80073e0:	08007629 	.word	0x08007629
 80073e4:	08007629 	.word	0x08007629
 80073e8:	08007629 	.word	0x08007629
 80073ec:	08007629 	.word	0x08007629
 80073f0:	0800753f 	.word	0x0800753f
 80073f4:	08007629 	.word	0x08007629
 80073f8:	08007629 	.word	0x08007629
 80073fc:	08007629 	.word	0x08007629
 8007400:	08007629 	.word	0x08007629
 8007404:	08007629 	.word	0x08007629
 8007408:	08007629 	.word	0x08007629
 800740c:	08007629 	.word	0x08007629
 8007410:	08007575 	.word	0x08007575
 8007414:	08007551 	.word	0x08007551
 8007418:	08007629 	.word	0x08007629
 800741c:	08007629 	.word	0x08007629
 8007420:	08007563 	.word	0x08007563
 8007424:	08007629 	.word	0x08007629
 8007428:	08007629 	.word	0x08007629
 800742c:	08007629 	.word	0x08007629
 8007430:	08007629 	.word	0x08007629
 8007434:	08007599 	.word	0x08007599
 8007438:	08007629 	.word	0x08007629
 800743c:	080075ab 	.word	0x080075ab
 8007440:	08007629 	.word	0x08007629
 8007444:	08007629 	.word	0x08007629
 8007448:	080075cf 	.word	0x080075cf
 800744c:	08007629 	.word	0x08007629
 8007450:	080075f3 	.word	0x080075f3
 8007454:	08007629 	.word	0x08007629
 8007458:	08007629 	.word	0x08007629
 800745c:	08007629 	.word	0x08007629
 8007460:	08007629 	.word	0x08007629
 8007464:	08007617 	.word	0x08007617
 8007468:	08007629 	.word	0x08007629
 800746c:	08007629 	.word	0x08007629
 8007470:	08007629 	.word	0x08007629
 8007474:	08007629 	.word	0x08007629
 8007478:	08007629 	.word	0x08007629
 800747c:	08007629 	.word	0x08007629
 8007480:	08007629 	.word	0x08007629
 8007484:	08007629 	.word	0x08007629
 8007488:	08007629 	.word	0x08007629
 800748c:	08007629 	.word	0x08007629
 8007490:	08007629 	.word	0x08007629
 8007494:	08007629 	.word	0x08007629
 8007498:	08007629 	.word	0x08007629
 800749c:	08007629 	.word	0x08007629
 80074a0:	08007629 	.word	0x08007629
 80074a4:	08007629 	.word	0x08007629
 80074a8:	08007629 	.word	0x08007629
 80074ac:	08007629 	.word	0x08007629
 80074b0:	08007629 	.word	0x08007629
 80074b4:	08007629 	.word	0x08007629
 80074b8:	08007629 	.word	0x08007629
 80074bc:	08007629 	.word	0x08007629
 80074c0:	08007629 	.word	0x08007629
 80074c4:	08007629 	.word	0x08007629
 80074c8:	08007629 	.word	0x08007629
 80074cc:	08007629 	.word	0x08007629
 80074d0:	08007629 	.word	0x08007629
 80074d4:	08007629 	.word	0x08007629
 80074d8:	08007629 	.word	0x08007629
 80074dc:	08007629 	.word	0x08007629
 80074e0:	08007629 	.word	0x08007629
 80074e4:	08007629 	.word	0x08007629
 80074e8:	08007629 	.word	0x08007629
 80074ec:	08007629 	.word	0x08007629
 80074f0:	08007629 	.word	0x08007629
 80074f4:	08007629 	.word	0x08007629
 80074f8:	08007629 	.word	0x08007629
 80074fc:	08007629 	.word	0x08007629
 8007500:	08007629 	.word	0x08007629
 8007504:	08007629 	.word	0x08007629
 8007508:	08007629 	.word	0x08007629
 800750c:	08007629 	.word	0x08007629
 8007510:	08007587 	.word	0x08007587
 8007514:	2b9e      	cmp	r3, #158	@ 0x9e
 8007516:	d051      	beq.n	80075bc <SCSI_ProcessCmd+0x274>
 8007518:	e086      	b.n	8007628 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	4619      	mov	r1, r3
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 f893 	bl	800764c <SCSI_TestUnitReady>
 8007526:	4603      	mov	r3, r0
 8007528:	75fb      	strb	r3, [r7, #23]
      break;
 800752a:	e089      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	4619      	mov	r1, r3
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 fb9a 	bl	8007c6c <SCSI_RequestSense>
 8007538:	4603      	mov	r3, r0
 800753a:	75fb      	strb	r3, [r7, #23]
      break;
 800753c:	e080      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800753e:	7afb      	ldrb	r3, [r7, #11]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	4619      	mov	r1, r3
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 f8db 	bl	8007700 <SCSI_Inquiry>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]
      break;
 800754e:	e077      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007550:	7afb      	ldrb	r3, [r7, #11]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	4619      	mov	r1, r3
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 fc56 	bl	8007e08 <SCSI_StartStopUnit>
 800755c:	4603      	mov	r3, r0
 800755e:	75fb      	strb	r3, [r7, #23]
      break;
 8007560:	e06e      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007562:	7afb      	ldrb	r3, [r7, #11]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	4619      	mov	r1, r3
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 fca2 	bl	8007eb2 <SCSI_AllowPreventRemovable>
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]
      break;
 8007572:	e065      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	4619      	mov	r1, r3
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 faea 	bl	8007b54 <SCSI_ModeSense6>
 8007580:	4603      	mov	r3, r0
 8007582:	75fb      	strb	r3, [r7, #23]
      break;
 8007584:	e05c      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007586:	7afb      	ldrb	r3, [r7, #11]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	4619      	mov	r1, r3
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 fb27 	bl	8007be0 <SCSI_ModeSense10>
 8007592:	4603      	mov	r3, r0
 8007594:	75fb      	strb	r3, [r7, #23]
      break;
 8007596:	e053      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007598:	7afb      	ldrb	r3, [r7, #11]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	4619      	mov	r1, r3
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fa5c 	bl	8007a5c <SCSI_ReadFormatCapacity>
 80075a4:	4603      	mov	r3, r0
 80075a6:	75fb      	strb	r3, [r7, #23]
      break;
 80075a8:	e04a      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80075aa:	7afb      	ldrb	r3, [r7, #11]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	4619      	mov	r1, r3
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f921 	bl	80077f8 <SCSI_ReadCapacity10>
 80075b6:	4603      	mov	r3, r0
 80075b8:	75fb      	strb	r3, [r7, #23]
      break;
 80075ba:	e041      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	4619      	mov	r1, r3
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f996 	bl	80078f4 <SCSI_ReadCapacity16>
 80075c8:	4603      	mov	r3, r0
 80075ca:	75fb      	strb	r3, [r7, #23]
      break;
 80075cc:	e038      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	4619      	mov	r1, r3
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fc99 	bl	8007f0c <SCSI_Read10>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]
      break;
 80075de:	e02f      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	4619      	mov	r1, r3
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 fd3a 	bl	8008060 <SCSI_Read12>
 80075ec:	4603      	mov	r3, r0
 80075ee:	75fb      	strb	r3, [r7, #23]
      break;
 80075f0:	e026      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80075f2:	7afb      	ldrb	r3, [r7, #11]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4619      	mov	r1, r3
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fde5 	bl	80081c8 <SCSI_Write10>
 80075fe:	4603      	mov	r3, r0
 8007600:	75fb      	strb	r3, [r7, #23]
      break;
 8007602:	e01d      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4619      	mov	r1, r3
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 feb2 	bl	8008374 <SCSI_Write12>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]
      break;
 8007614:	e014      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8007616:	7afb      	ldrb	r3, [r7, #11]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	4619      	mov	r1, r3
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 ff8f 	bl	8008540 <SCSI_Verify10>
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]
      break;
 8007626:	e00b      	b.n	8007640 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007628:	7af9      	ldrb	r1, [r7, #11]
 800762a:	2320      	movs	r3, #32
 800762c:	2205      	movs	r2, #5
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fb9f 	bl	8007d72 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2202      	movs	r2, #2
 8007638:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800763a:	23ff      	movs	r3, #255	@ 0xff
 800763c:	75fb      	strb	r3, [r7, #23]
      break;
 800763e:	bf00      	nop
  }

  return ret;
 8007640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	460b      	mov	r3, r1
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	32b0      	adds	r2, #176	@ 0xb0
 8007664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007668:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8007670:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007674:	e03f      	b.n	80076f6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007686:	2320      	movs	r3, #32
 8007688:	2205      	movs	r2, #5
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fb71 	bl	8007d72 <SCSI_SenseCode>

    return -1;
 8007690:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007694:	e02f      	b.n	80076f6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800769c:	2b02      	cmp	r3, #2
 800769e:	d10b      	bne.n	80076b8 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80076a0:	7af9      	ldrb	r1, [r7, #11]
 80076a2:	233a      	movs	r3, #58	@ 0x3a
 80076a4:	2202      	movs	r2, #2
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fb63 	bl	8007d72 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2205      	movs	r2, #5
 80076b0:	721a      	strb	r2, [r3, #8]
    return -1;
 80076b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076b6:	e01e      	b.n	80076f6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	33b0      	adds	r3, #176	@ 0xb0
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	7afa      	ldrb	r2, [r7, #11]
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00b      	beq.n	80076ee <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80076d6:	7af9      	ldrb	r1, [r7, #11]
 80076d8:	233a      	movs	r3, #58	@ 0x3a
 80076da:	2202      	movs	r2, #2
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fb48 	bl	8007d72 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2205      	movs	r2, #5
 80076e6:	721a      	strb	r2, [r3, #8]

    return -1;
 80076e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076ec:	e003      	b.n	80076f6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2200      	movs	r2, #0
 80076f2:	60da      	str	r2, [r3, #12]

  return 0;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	460b      	mov	r3, r1
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	32b0      	adds	r2, #176	@ 0xb0
 8007718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d102      	bne.n	800772a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8007724:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007728:	e05e      	b.n	80077e8 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800773a:	2320      	movs	r3, #32
 800773c:	2205      	movs	r2, #5
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fb17 	bl	8007d72 <SCSI_SenseCode>
    return -1;
 8007744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007748:	e04e      	b.n	80077e8 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3301      	adds	r3, #1
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d020      	beq.n	800779a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3302      	adds	r3, #2
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d105      	bne.n	800776e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007762:	2206      	movs	r2, #6
 8007764:	4922      	ldr	r1, [pc, #136]	@ (80077f0 <SCSI_Inquiry+0xf0>)
 8007766:	69b8      	ldr	r0, [r7, #24]
 8007768:	f001 f870 	bl	800884c <SCSI_UpdateBotData>
 800776c:	e03b      	b.n	80077e6 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3302      	adds	r3, #2
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b80      	cmp	r3, #128	@ 0x80
 8007776:	d105      	bne.n	8007784 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007778:	2208      	movs	r2, #8
 800777a:	491e      	ldr	r1, [pc, #120]	@ (80077f4 <SCSI_Inquiry+0xf4>)
 800777c:	69b8      	ldr	r0, [r7, #24]
 800777e:	f001 f865 	bl	800884c <SCSI_UpdateBotData>
 8007782:	e030      	b.n	80077e6 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800778a:	2324      	movs	r3, #36	@ 0x24
 800778c:	2205      	movs	r2, #5
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 faef 	bl	8007d72 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007798:	e026      	b.n	80077e8 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	33b0      	adds	r3, #176	@ 0xb0
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80077aa:	69d9      	ldr	r1, [r3, #28]
 80077ac:	7afa      	ldrb	r2, [r7, #11]
 80077ae:	4613      	mov	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80077b6:	440b      	add	r3, r1
 80077b8:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	3304      	adds	r3, #4
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	3305      	adds	r3, #5
 80077c2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	3304      	adds	r3, #4
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	8bfb      	ldrh	r3, [r7, #30]
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d303      	bcc.n	80077da <SCSI_Inquiry+0xda>
    {
      len = params[4];
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3304      	adds	r3, #4
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80077da:	8bfb      	ldrh	r3, [r7, #30]
 80077dc:	461a      	mov	r2, r3
 80077de:	6979      	ldr	r1, [r7, #20]
 80077e0:	69b8      	ldr	r0, [r7, #24]
 80077e2:	f001 f833 	bl	800884c <SCSI_UpdateBotData>
  }

  return 0;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3720      	adds	r7, #32
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000070 	.word	0x20000070
 80077f4:	20000078 	.word	0x20000078

080077f8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	460b      	mov	r3, r1
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	32b0      	adds	r2, #176	@ 0xb0
 8007810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007814:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800781c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007820:	e064      	b.n	80078ec <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	33b0      	adds	r3, #176	@ 0xb0
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8007840:	7af8      	ldrb	r0, [r7, #11]
 8007842:	4798      	blx	r3
 8007844:	4603      	mov	r3, r0
 8007846:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007848:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d104      	bne.n	800785a <SCSI_ReadCapacity10+0x62>
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007856:	2b02      	cmp	r3, #2
 8007858:	d108      	bne.n	800786c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800785a:	7af9      	ldrb	r1, [r7, #11]
 800785c:	233a      	movs	r3, #58	@ 0x3a
 800785e:	2202      	movs	r2, #2
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fa86 	bl	8007d72 <SCSI_SenseCode>
    return -1;
 8007866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800786a:	e03f      	b.n	80078ec <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007872:	3b01      	subs	r3, #1
 8007874:	0e1b      	lsrs	r3, r3, #24
 8007876:	b2da      	uxtb	r2, r3
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007882:	3b01      	subs	r3, #1
 8007884:	0c1b      	lsrs	r3, r3, #16
 8007886:	b2da      	uxtb	r2, r3
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007892:	3b01      	subs	r3, #1
 8007894:	0a1b      	lsrs	r3, r3, #8
 8007896:	b2da      	uxtb	r2, r3
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80078b2:	161b      	asrs	r3, r3, #24
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80078c0:	141b      	asrs	r3, r3, #16
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2208      	movs	r2, #8
 80078e8:	60da      	str	r2, [r3, #12]

  return 0;
 80078ea:	2300      	movs	r3, #0

}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	460b      	mov	r3, r1
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	32b0      	adds	r2, #176	@ 0xb0
 800790c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007910:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8007918:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800791c:	e09a      	b.n	8007a54 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	33b0      	adds	r3, #176	@ 0xb0
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800793c:	7af8      	ldrb	r0, [r7, #11]
 800793e:	4798      	blx	r3
 8007940:	4603      	mov	r3, r0
 8007942:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007944:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <SCSI_ReadCapacity16+0x62>
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007952:	2b02      	cmp	r3, #2
 8007954:	d108      	bne.n	8007968 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007956:	7af9      	ldrb	r1, [r7, #11]
 8007958:	233a      	movs	r3, #58	@ 0x3a
 800795a:	2202      	movs	r2, #2
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fa08 	bl	8007d72 <SCSI_SenseCode>
    return -1;
 8007962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007966:	e075      	b.n	8007a54 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	330a      	adds	r3, #10
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	330b      	adds	r3, #11
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007978:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	330c      	adds	r3, #12
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007982:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	320d      	adds	r2, #13
 8007988:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800798a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007990:	2300      	movs	r3, #0
 8007992:	61fb      	str	r3, [r7, #28]
 8007994:	e008      	b.n	80079a8 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	4413      	add	r3, r2
 800799c:	3310      	adds	r3, #16
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	3301      	adds	r3, #1
 80079a6:	61fb      	str	r3, [r7, #28]
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	69fa      	ldr	r2, [r7, #28]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d3f1      	bcc.n	8007996 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80079b8:	3b01      	subs	r3, #1
 80079ba:	0e1b      	lsrs	r3, r3, #24
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80079c8:	3b01      	subs	r3, #1
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80079d8:	3b01      	subs	r3, #1
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80079f8:	161b      	asrs	r3, r3, #24
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007a06:	141b      	asrs	r3, r3, #16
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007a14:	0a1b      	lsrs	r3, r3, #8
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	330a      	adds	r3, #10
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	330b      	adds	r3, #11
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007a3a:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	330c      	adds	r3, #12
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007a44:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	320d      	adds	r2, #13
 8007a4a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007a4c:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	60da      	str	r2, [r3, #12]

  return 0;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3720      	adds	r7, #32
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	460b      	mov	r3, r1
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	32b0      	adds	r2, #176	@ 0xb0
 8007a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a78:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8007a80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a84:	e061      	b.n	8007b4a <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	33b0      	adds	r3, #176	@ 0xb0
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f107 0214 	add.w	r2, r7, #20
 8007a9c:	f107 0110 	add.w	r1, r7, #16
 8007aa0:	7af8      	ldrb	r0, [r7, #11]
 8007aa2:	4798      	blx	r3
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <SCSI_ReadFormatCapacity+0x5e>
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d108      	bne.n	8007acc <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007aba:	7af9      	ldrb	r1, [r7, #11]
 8007abc:	233a      	movs	r3, #58	@ 0x3a
 8007abe:	2202      	movs	r2, #2
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f956 	bl	8007d72 <SCSI_SenseCode>
    return -1;
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007aca:	e03e      	b.n	8007b4a <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8007acc:	2300      	movs	r3, #0
 8007ace:	83fb      	strh	r3, [r7, #30]
 8007ad0:	e007      	b.n	8007ae2 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8007ad2:	8bfb      	ldrh	r3, [r7, #30]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	2200      	movs	r2, #0
 8007ada:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007adc:	8bfb      	ldrh	r3, [r7, #30]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	83fb      	strh	r3, [r7, #30]
 8007ae2:	8bfb      	ldrh	r3, [r7, #30]
 8007ae4:	2b0b      	cmp	r3, #11
 8007ae6:	d9f4      	bls.n	8007ad2 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	2208      	movs	r2, #8
 8007aec:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	0e1b      	lsrs	r3, r3, #24
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	0c1b      	lsrs	r3, r3, #16
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	0a1b      	lsrs	r3, r3, #8
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2202      	movs	r2, #2
 8007b22:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007b24:	8abb      	ldrh	r3, [r7, #20]
 8007b26:	141b      	asrs	r3, r3, #16
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007b2e:	8abb      	ldrh	r3, [r7, #20]
 8007b30:	0a1b      	lsrs	r3, r3, #8
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007b3a:	8abb      	ldrh	r3, [r7, #20]
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	220c      	movs	r2, #12
 8007b46:	60da      	str	r2, [r3, #12]

  return 0;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3720      	adds	r7, #32
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	32b0      	adds	r2, #176	@ 0xb0
 8007b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b70:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8007b72:	2304      	movs	r3, #4
 8007b74:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d102      	bne.n	8007b82 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8007b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b80:	e027      	b.n	8007bd2 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	33b0      	adds	r3, #176	@ 0xb0
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	7afa      	ldrb	r2, [r7, #11]
 8007b96:	4610      	mov	r0, r2
 8007b98:	4798      	blx	r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d006      	beq.n	8007bae <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8007ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8007bdc <SCSI_ModeSense6+0x88>)
 8007ba2:	789b      	ldrb	r3, [r3, #2]
 8007ba4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	4b0c      	ldr	r3, [pc, #48]	@ (8007bdc <SCSI_ModeSense6+0x88>)
 8007bac:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	8afb      	ldrh	r3, [r7, #22]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d303      	bcc.n	8007bc4 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007bc4:	8afb      	ldrh	r3, [r7, #22]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	4904      	ldr	r1, [pc, #16]	@ (8007bdc <SCSI_ModeSense6+0x88>)
 8007bca:	6938      	ldr	r0, [r7, #16]
 8007bcc:	f000 fe3e 	bl	800884c <SCSI_UpdateBotData>

  return 0;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000080 	.word	0x20000080

08007be0 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	460b      	mov	r3, r1
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	32b0      	adds	r2, #176	@ 0xb0
 8007bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8007bfe:	2308      	movs	r3, #8
 8007c00:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d102      	bne.n	8007c0e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8007c08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c0c:	e027      	b.n	8007c5e <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	33b0      	adds	r3, #176	@ 0xb0
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	7afa      	ldrb	r2, [r7, #11]
 8007c22:	4610      	mov	r0, r2
 8007c24:	4798      	blx	r3
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d006      	beq.n	8007c3a <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c68 <SCSI_ModeSense10+0x88>)
 8007c2e:	78db      	ldrb	r3, [r3, #3]
 8007c30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	4b0c      	ldr	r3, [pc, #48]	@ (8007c68 <SCSI_ModeSense10+0x88>)
 8007c38:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	8afb      	ldrh	r3, [r7, #22]
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d303      	bcc.n	8007c50 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8007c50:	8afb      	ldrh	r3, [r7, #22]
 8007c52:	461a      	mov	r2, r3
 8007c54:	4904      	ldr	r1, [pc, #16]	@ (8007c68 <SCSI_ModeSense10+0x88>)
 8007c56:	6938      	ldr	r0, [r7, #16]
 8007c58:	f000 fdf8 	bl	800884c <SCSI_UpdateBotData>

  return 0;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20000084 	.word	0x20000084

08007c6c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	460b      	mov	r3, r1
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	32b0      	adds	r2, #176	@ 0xb0
 8007c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c88:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d102      	bne.n	8007c96 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8007c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c94:	e069      	b.n	8007d6a <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007ca6:	2320      	movs	r3, #32
 8007ca8:	2205      	movs	r2, #5
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 f861 	bl	8007d72 <SCSI_SenseCode>
    return -1;
 8007cb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cb4:	e059      	b.n	8007d6a <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75fb      	strb	r3, [r7, #23]
 8007cba:	e007      	b.n	8007ccc <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	75fb      	strb	r3, [r7, #23]
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	2b11      	cmp	r3, #17
 8007cd0:	d9f4      	bls.n	8007cbc <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2270      	movs	r2, #112	@ 0x70
 8007cd6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	220c      	movs	r2, #12
 8007cdc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d02e      	beq.n	8007d4c <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	3248      	adds	r2, #72	@ 0x48
 8007cfa:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	3348      	adds	r3, #72	@ 0x48
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	4413      	add	r3, r2
 8007d10:	791a      	ldrb	r2, [r3, #4]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	3348      	adds	r3, #72	@ 0x48
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	4413      	add	r3, r2
 8007d24:	795a      	ldrb	r2, [r3, #5]
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007d30:	3301      	adds	r3, #1
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d103      	bne.n	8007d4c <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2212      	movs	r2, #18
 8007d50:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3304      	adds	r3, #4
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	2b12      	cmp	r3, #18
 8007d5a:	d805      	bhi.n	8007d68 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	4608      	mov	r0, r1
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	461a      	mov	r2, r3
 8007d80:	4603      	mov	r3, r0
 8007d82:	70fb      	strb	r3, [r7, #3]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70bb      	strb	r3, [r7, #2]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	32b0      	adds	r2, #176	@ 0xb0
 8007d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d02c      	beq.n	8007dfc <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007da8:	461a      	mov	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3248      	adds	r2, #72	@ 0x48
 8007dae:	78b9      	ldrb	r1, [r7, #2]
 8007db0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	3348      	adds	r3, #72	@ 0x48
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	787a      	ldrb	r2, [r7, #1]
 8007dc4:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	3348      	adds	r3, #72	@ 0x48
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007dde:	3301      	adds	r3, #1
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d105      	bne.n	8007dfe <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8007dfa:	e000      	b.n	8007dfe <SCSI_SenseCode+0x8c>
    return;
 8007dfc:	bf00      	nop
  }
}
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	460b      	mov	r3, r1
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	32b0      	adds	r2, #176	@ 0xb0
 8007e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e24:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8007e2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e30:	e03b      	b.n	8007eaa <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d10f      	bne.n	8007e5c <SCSI_StartStopUnit+0x54>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d108      	bne.n	8007e5c <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007e4a:	7af9      	ldrb	r1, [r7, #11]
 8007e4c:	2324      	movs	r3, #36	@ 0x24
 8007e4e:	2205      	movs	r2, #5
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff ff8e 	bl	8007d72 <SCSI_SenseCode>

    return -1;
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e5a:	e026      	b.n	8007eaa <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d104      	bne.n	8007e74 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8007e72:	e016      	b.n	8007ea2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3304      	adds	r3, #4
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d104      	bne.n	8007e8c <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8007e8a:	e00a      	b.n	8007ea2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d103      	bne.n	8007ea2 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	60da      	str	r2, [r3, #12]

  return 0;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b087      	sub	sp, #28
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	607a      	str	r2, [r7, #4]
 8007ebe:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	32b0      	adds	r2, #176	@ 0xb0
 8007eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ece:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d102      	bne.n	8007edc <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8007ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007eda:	e011      	b.n	8007f00 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d104      	bne.n	8007ef0 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8007eee:	e003      	b.n	8007ef8 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2200      	movs	r2, #0
 8007efc:	60da      	str	r2, [r3, #12]

  return 0;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	460b      	mov	r3, r1
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	32b0      	adds	r2, #176	@ 0xb0
 8007f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f28:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <SCSI_Read10+0x2a>
  {
    return -1;
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f34:	e090      	b.n	8008058 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	7a1b      	ldrb	r3, [r3, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f040 8082 	bne.w	8008044 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007f46:	b25b      	sxtb	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	db0a      	blt.n	8007f62 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007f52:	2320      	movs	r3, #32
 8007f54:	2205      	movs	r2, #5
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff ff0b 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 8007f5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f60:	e07a      	b.n	8008058 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d108      	bne.n	8007f7e <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f6c:	7af9      	ldrb	r1, [r7, #11]
 8007f6e:	233a      	movs	r3, #58	@ 0x3a
 8007f70:	2202      	movs	r2, #2
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7ff fefd 	bl	8007d72 <SCSI_SenseCode>

      return -1;
 8007f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f7c:	e06c      	b.n	8008058 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	33b0      	adds	r3, #176	@ 0xb0
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	7afa      	ldrb	r2, [r7, #11]
 8007f92:	4610      	mov	r0, r2
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d008      	beq.n	8007fae <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f9c:	7af9      	ldrb	r1, [r7, #11]
 8007f9e:	233a      	movs	r3, #58	@ 0x3a
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff fee5 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 8007fa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fac:	e054      	b.n	8008058 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3302      	adds	r3, #2
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3303      	adds	r3, #3
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007fbe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007fc8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	3205      	adds	r2, #5
 8007fce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007fd0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3307      	adds	r3, #7
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	3208      	adds	r2, #8
 8007fe4:	7812      	ldrb	r2, [r2, #0]
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007ffa:	7af9      	ldrb	r1, [r7, #11]
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 fadc 	bl	80085ba <SCSI_CheckAddressRange>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	da02      	bge.n	800800e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800800c:	e024      	b.n	8008058 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800801a:	6979      	ldr	r1, [r7, #20]
 800801c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	429a      	cmp	r2, r3
 8008026:	d00a      	beq.n	800803e <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800802e:	2320      	movs	r3, #32
 8008030:	2205      	movs	r2, #5
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f7ff fe9d 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 8008038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800803c:	e00c      	b.n	8008058 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2202      	movs	r2, #2
 8008042:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800804a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800804c:	7afb      	ldrb	r3, [r7, #11]
 800804e:	4619      	mov	r1, r3
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 fadf 	bl	8008614 <SCSI_ProcessRead>
 8008056:	4603      	mov	r3, r0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	460b      	mov	r3, r1
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	32b0      	adds	r2, #176	@ 0xb0
 8008078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <SCSI_Read12+0x2a>
  {
    return -1;
 8008084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008088:	e09a      	b.n	80081c0 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	7a1b      	ldrb	r3, [r3, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	f040 808c 	bne.w	80081ac <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800809a:	b25b      	sxtb	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	db0a      	blt.n	80080b6 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80080a6:	2320      	movs	r3, #32
 80080a8:	2205      	movs	r2, #5
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7ff fe61 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 80080b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080b4:	e084      	b.n	80081c0 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d108      	bne.n	80080d2 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80080c0:	7af9      	ldrb	r1, [r7, #11]
 80080c2:	233a      	movs	r3, #58	@ 0x3a
 80080c4:	2202      	movs	r2, #2
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff fe53 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 80080cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080d0:	e076      	b.n	80081c0 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	33b0      	adds	r3, #176	@ 0xb0
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	7afa      	ldrb	r2, [r7, #11]
 80080e6:	4610      	mov	r0, r2
 80080e8:	4798      	blx	r3
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d008      	beq.n	8008102 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80080f0:	7af9      	ldrb	r1, [r7, #11]
 80080f2:	233a      	movs	r3, #58	@ 0x3a
 80080f4:	2202      	movs	r2, #2
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f7ff fe3b 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 80080fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008100:	e05e      	b.n	80081c0 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3302      	adds	r3, #2
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3303      	adds	r3, #3
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008112:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800811c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	3205      	adds	r2, #5
 8008122:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008124:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3306      	adds	r3, #6
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3307      	adds	r3, #7
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800813c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3308      	adds	r3, #8
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008146:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	3209      	adds	r2, #9
 800814c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800814e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008162:	7af9      	ldrb	r1, [r7, #11]
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 fa28 	bl	80085ba <SCSI_CheckAddressRange>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	da02      	bge.n	8008176 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008170:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008174:	e024      	b.n	80081c0 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008182:	6979      	ldr	r1, [r7, #20]
 8008184:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8008188:	fb01 f303 	mul.w	r3, r1, r3
 800818c:	429a      	cmp	r2, r3
 800818e:	d00a      	beq.n	80081a6 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008196:	2320      	movs	r3, #32
 8008198:	2205      	movs	r2, #5
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fde9 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 80081a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081a4:	e00c      	b.n	80081c0 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2202      	movs	r2, #2
 80081aa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081b2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	4619      	mov	r1, r3
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 fa2b 	bl	8008614 <SCSI_ProcessRead>
 80081be:	4603      	mov	r3, r0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	460b      	mov	r3, r1
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	32b0      	adds	r2, #176	@ 0xb0
 80081e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <SCSI_Write10+0x2a>
  {
    return -1;
 80081ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081f0:	e0ba      	b.n	8008368 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	7a1b      	ldrb	r3, [r3, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f040 80b0 	bne.w	800835c <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10a      	bne.n	800821c <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800820c:	2320      	movs	r3, #32
 800820e:	2205      	movs	r2, #5
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f7ff fdae 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 8008216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800821a:	e0a5      	b.n	8008368 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8008222:	b25b      	sxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	da0a      	bge.n	800823e <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800822e:	2320      	movs	r3, #32
 8008230:	2205      	movs	r2, #5
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f7ff fd9d 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 8008238:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800823c:	e094      	b.n	8008368 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	33b0      	adds	r3, #176	@ 0xb0
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	7afa      	ldrb	r2, [r7, #11]
 8008252:	4610      	mov	r0, r2
 8008254:	4798      	blx	r3
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d008      	beq.n	800826e <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800825c:	7af9      	ldrb	r1, [r7, #11]
 800825e:	233a      	movs	r3, #58	@ 0x3a
 8008260:	2202      	movs	r2, #2
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f7ff fd85 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 8008268:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800826c:	e07c      	b.n	8008368 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	33b0      	adds	r3, #176	@ 0xb0
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	7afa      	ldrb	r2, [r7, #11]
 8008282:	4610      	mov	r0, r2
 8008284:	4798      	blx	r3
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d008      	beq.n	800829e <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800828c:	7af9      	ldrb	r1, [r7, #11]
 800828e:	2327      	movs	r3, #39	@ 0x27
 8008290:	2202      	movs	r2, #2
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f7ff fd6d 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 8008298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800829c:	e064      	b.n	8008368 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3302      	adds	r3, #2
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3303      	adds	r3, #3
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80082ae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3304      	adds	r3, #4
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80082b8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	3205      	adds	r2, #5
 80082be:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80082c0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3307      	adds	r3, #7
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	3208      	adds	r2, #8
 80082d4:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80082d6:	431a      	orrs	r2, r3
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80082ea:	7af9      	ldrb	r1, [r7, #11]
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f964 	bl	80085ba <SCSI_CheckAddressRange>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	da02      	bge.n	80082fe <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80082f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082fc:	e034      	b.n	8008368 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	429a      	cmp	r2, r3
 800831a:	d00a      	beq.n	8008332 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008322:	2320      	movs	r3, #32
 8008324:	2205      	movs	r2, #5
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7ff fd23 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 800832c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008330:	e01a      	b.n	8008368 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008338:	bf28      	it	cs
 800833a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800833e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2201      	movs	r2, #1
 8008344:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008346:	4b0a      	ldr	r3, [pc, #40]	@ (8008370 <SCSI_Write10+0x1a8>)
 8008348:	7819      	ldrb	r1, [r3, #0]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f103 0210 	add.w	r2, r3, #16
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f002 f9fd 	bl	800a752 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008358:	2300      	movs	r3, #0
 800835a:	e005      	b.n	8008368 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800835c:	7afb      	ldrb	r3, [r7, #11]
 800835e:	4619      	mov	r1, r3
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 f9dd 	bl	8008720 <SCSI_ProcessWrite>
 8008366:	4603      	mov	r3, r0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	2000006f 	.word	0x2000006f

08008374 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	460b      	mov	r3, r1
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	32b0      	adds	r2, #176	@ 0xb0
 800838c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008390:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <SCSI_Write12+0x2a>
  {
    return -1;
 8008398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800839c:	e0ca      	b.n	8008534 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	7a1b      	ldrb	r3, [r3, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f040 80c0 	bne.w	8008528 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10a      	bne.n	80083c8 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80083b8:	2320      	movs	r3, #32
 80083ba:	2205      	movs	r2, #5
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff fcd8 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 80083c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083c6:	e0b5      	b.n	8008534 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80083ce:	b25b      	sxtb	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	da0a      	bge.n	80083ea <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80083da:	2320      	movs	r3, #32
 80083dc:	2205      	movs	r2, #5
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff fcc7 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 80083e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083e8:	e0a4      	b.n	8008534 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	33b0      	adds	r3, #176	@ 0xb0
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	7afa      	ldrb	r2, [r7, #11]
 80083fe:	4610      	mov	r0, r2
 8008400:	4798      	blx	r3
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008408:	7af9      	ldrb	r1, [r7, #11]
 800840a:	233a      	movs	r3, #58	@ 0x3a
 800840c:	2202      	movs	r2, #2
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f7ff fcaf 	bl	8007d72 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2205      	movs	r2, #5
 8008418:	721a      	strb	r2, [r3, #8]
      return -1;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800841e:	e089      	b.n	8008534 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	33b0      	adds	r3, #176	@ 0xb0
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	7afa      	ldrb	r2, [r7, #11]
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800843e:	7af9      	ldrb	r1, [r7, #11]
 8008440:	2327      	movs	r3, #39	@ 0x27
 8008442:	2202      	movs	r2, #2
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f7ff fc94 	bl	8007d72 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2205      	movs	r2, #5
 800844e:	721a      	strb	r2, [r3, #8]
      return -1;
 8008450:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008454:	e06e      	b.n	8008534 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3302      	adds	r3, #2
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	3303      	adds	r3, #3
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008466:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008470:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	3205      	adds	r2, #5
 8008476:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008478:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3306      	adds	r3, #6
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3307      	adds	r3, #7
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008490:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3308      	adds	r3, #8
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800849a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	3209      	adds	r2, #9
 80084a0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80084a2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80084b6:	7af9      	ldrb	r1, [r7, #11]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 f87e 	bl	80085ba <SCSI_CheckAddressRange>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	da02      	bge.n	80084ca <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80084c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084c8:	e034      	b.n	8008534 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80084d6:	fb02 f303 	mul.w	r3, r2, r3
 80084da:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d00a      	beq.n	80084fe <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80084ee:	2320      	movs	r3, #32
 80084f0:	2205      	movs	r2, #5
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff fc3d 	bl	8007d72 <SCSI_SenseCode>
      return -1;
 80084f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084fc:	e01a      	b.n	8008534 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008504:	bf28      	it	cs
 8008506:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800850a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2201      	movs	r2, #1
 8008510:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008512:	4b0a      	ldr	r3, [pc, #40]	@ (800853c <SCSI_Write12+0x1c8>)
 8008514:	7819      	ldrb	r1, [r3, #0]
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f103 0210 	add.w	r2, r3, #16
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f002 f917 	bl	800a752 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008524:	2300      	movs	r3, #0
 8008526:	e005      	b.n	8008534 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	4619      	mov	r1, r3
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f8f7 	bl	8008720 <SCSI_ProcessWrite>
 8008532:	4603      	mov	r3, r0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	2000006f 	.word	0x2000006f

08008540 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	460b      	mov	r3, r1
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	32b0      	adds	r2, #176	@ 0xb0
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <SCSI_Verify10+0x2a>
  {
    return -1;
 8008564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008568:	e023      	b.n	80085b2 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3301      	adds	r3, #1
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d008      	beq.n	800858a <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008578:	7af9      	ldrb	r1, [r7, #11]
 800857a:	2324      	movs	r3, #36	@ 0x24
 800857c:	2205      	movs	r2, #5
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff fbf7 	bl	8007d72 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8008584:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008588:	e013      	b.n	80085b2 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008596:	7af9      	ldrb	r1, [r7, #11]
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f80e 	bl	80085ba <SCSI_CheckAddressRange>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	da02      	bge.n	80085aa <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80085a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085a8:	e003      	b.n	80085b2 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2200      	movs	r2, #0
 80085ae:	60da      	str	r2, [r3, #12]

  return 0;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
 80085c6:	460b      	mov	r3, r1
 80085c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	32b0      	adds	r2, #176	@ 0xb0
 80085d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 80085e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085e4:	e011      	b.n	800860a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	441a      	add	r2, r3
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d908      	bls.n	8008608 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80085f6:	7af9      	ldrb	r1, [r7, #11]
 80085f8:	2321      	movs	r3, #33	@ 0x21
 80085fa:	2205      	movs	r2, #5
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f7ff fbb8 	bl	8007d72 <SCSI_SenseCode>
    return -1;
 8008602:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008606:	e000      	b.n	800860a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008614:	b590      	push	{r4, r7, lr}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	32b0      	adds	r2, #176	@ 0xb0
 800862a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d102      	bne.n	800863c <SCSI_ProcessRead+0x28>
  {
    return -1;
 8008636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800863a:	e06a      	b.n	8008712 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8008648:	fb02 f303 	mul.w	r3, r2, r3
 800864c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008654:	bf28      	it	cs
 8008656:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800865a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	33b0      	adds	r3, #176	@ 0xb0
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	691c      	ldr	r4, [r3, #16]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f103 0110 	add.w	r1, r3, #16
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8008680:	4618      	mov	r0, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008688:	b29b      	uxth	r3, r3
 800868a:	78f8      	ldrb	r0, [r7, #3]
 800868c:	47a0      	blx	r4
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	da08      	bge.n	80086a6 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008694:	78f9      	ldrb	r1, [r7, #3]
 8008696:	2311      	movs	r3, #17
 8008698:	2204      	movs	r2, #4
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fb69 	bl	8007d72 <SCSI_SenseCode>
    return -1;
 80086a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086a4:	e035      	b.n	8008712 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80086a6:	4b1d      	ldr	r3, [pc, #116]	@ (800871c <SCSI_ProcessRead+0x108>)
 80086a8:	7819      	ldrb	r1, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f103 0210 	add.w	r2, r3, #16
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f002 f82c 	bl	800a710 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80086c4:	4619      	mov	r1, r3
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80086cc:	441a      	add	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80086e0:	4619      	mov	r1, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80086e8:	1ad2      	subs	r2, r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	1ad2      	subs	r2, r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008706:	2b00      	cmp	r3, #0
 8008708:	d102      	bne.n	8008710 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2203      	movs	r2, #3
 800870e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	bd90      	pop	{r4, r7, pc}
 800871a:	bf00      	nop
 800871c:	2000006e 	.word	0x2000006e

08008720 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008720:	b590      	push	{r4, r7, lr}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	32b0      	adds	r2, #176	@ 0xb0
 8008736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d102      	bne.n	8008748 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8008742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008746:	e07a      	b.n	800883e <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8008754:	fb02 f303 	mul.w	r3, r2, r3
 8008758:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008760:	bf28      	it	cs
 8008762:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008766:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	33b0      	adds	r3, #176	@ 0xb0
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	695c      	ldr	r4, [r3, #20]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f103 0110 	add.w	r1, r3, #16
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800878c:	4618      	mov	r0, r3
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8008794:	b29b      	uxth	r3, r3
 8008796:	78f8      	ldrb	r0, [r7, #3]
 8008798:	47a0      	blx	r4
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	da08      	bge.n	80087b2 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80087a0:	78f9      	ldrb	r1, [r7, #3]
 80087a2:	2303      	movs	r3, #3
 80087a4:	2204      	movs	r2, #4
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fae3 	bl	8007d72 <SCSI_SenseCode>
    return -1;
 80087ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087b0:	e045      	b.n	800883e <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80087be:	4619      	mov	r1, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80087c6:	441a      	add	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80087da:	4619      	mov	r1, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	fbb3 f3f1 	udiv	r3, r3, r1
 80087e2:	1ad2      	subs	r2, r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	1ad2      	subs	r2, r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008804:	2100      	movs	r1, #0
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7fe fce8 	bl	80071dc <MSC_BOT_SendCSW>
 800880c:	e016      	b.n	800883c <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008822:	bf28      	it	cs
 8008824:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008828:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800882a:	4b07      	ldr	r3, [pc, #28]	@ (8008848 <SCSI_ProcessWrite+0x128>)
 800882c:	7819      	ldrb	r1, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f103 0210 	add.w	r2, r3, #16
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f001 ff8b 	bl	800a752 <USBD_LL_PrepareReceive>
  }

  return 0;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	bd90      	pop	{r4, r7, pc}
 8008846:	bf00      	nop
 8008848:	2000006f 	.word	0x2000006f

0800884c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	4613      	mov	r3, r2
 8008858:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800885a:	88fb      	ldrh	r3, [r7, #6]
 800885c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d102      	bne.n	800886a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8008864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008868:	e013      	b.n	8008892 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800886a:	8afa      	ldrh	r2, [r7, #22]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008870:	e00b      	b.n	800888a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8008872:	8afb      	ldrh	r3, [r7, #22]
 8008874:	3b01      	subs	r3, #1
 8008876:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008878:	8afb      	ldrh	r3, [r7, #22]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	441a      	add	r2, r3
 800887e:	8afb      	ldrh	r3, [r7, #22]
 8008880:	7811      	ldrb	r1, [r2, #0]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4413      	add	r3, r2
 8008886:	460a      	mov	r2, r1
 8008888:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800888a:	8afb      	ldrh	r3, [r7, #22]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1f0      	bne.n	8008872 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	4613      	mov	r3, r2
 80088aa:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e01f      	b.n	80088f6 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d003      	beq.n	80088dc <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	79fa      	ldrb	r2, [r7, #7]
 80088e8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f001 fdbc 	bl	800a468 <USBD_LL_Init>
 80088f0:	4603      	mov	r3, r0
 80088f2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008912:	2303      	movs	r3, #3
 8008914:	e025      	b.n	8008962 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	32ae      	adds	r2, #174	@ 0xae
 8008928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00f      	beq.n	8008952 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	32ae      	adds	r2, #174	@ 0xae
 800893c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008942:	f107 020e 	add.w	r2, r7, #14
 8008946:	4610      	mov	r0, r2
 8008948:	4798      	blx	r3
 800894a:	4602      	mov	r2, r0
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 fdc4 	bl	800a500 <USBD_LL_Start>
 8008978:	4603      	mov	r3, r0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800898a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d009      	beq.n	80089c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	4611      	mov	r1, r2
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4798      	blx	r3
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	78fa      	ldrb	r2, [r7, #3]
 80089ea:	4611      	mov	r1, r2
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80089f6:	2303      	movs	r3, #3
 80089f8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f001 f90b 	bl	8009c32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a38:	f003 031f 	and.w	r3, r3, #31
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d01a      	beq.n	8008a76 <USBD_LL_SetupStage+0x72>
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d822      	bhi.n	8008a8a <USBD_LL_SetupStage+0x86>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <USBD_LL_SetupStage+0x4a>
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d00a      	beq.n	8008a62 <USBD_LL_SetupStage+0x5e>
 8008a4c:	e01d      	b.n	8008a8a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fb62 	bl	8009120 <USBD_StdDevReq>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a60:	e020      	b.n	8008aa4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fbca 	bl	8009204 <USBD_StdItfReq>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
      break;
 8008a74:	e016      	b.n	8008aa4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fc2c 	bl	80092dc <USBD_StdEPReq>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]
      break;
 8008a88:	e00c      	b.n	8008aa4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a90:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fdb0 	bl	800a5fe <USBD_LL_StallEP>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa2:	bf00      	nop
  }

  return ret;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d16e      	bne.n	8008ba4 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008acc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	f040 8098 	bne.w	8008c0a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d913      	bls.n	8008b0e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	68da      	ldr	r2, [r3, #12]
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	4293      	cmp	r3, r2
 8008afe:	bf28      	it	cs
 8008b00:	4613      	movcs	r3, r2
 8008b02:	461a      	mov	r2, r3
 8008b04:	6879      	ldr	r1, [r7, #4]
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f001 f976 	bl	8009df8 <USBD_CtlContinueRx>
 8008b0c:	e07d      	b.n	8008c0a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b14:	f003 031f 	and.w	r3, r3, #31
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d014      	beq.n	8008b46 <USBD_LL_DataOutStage+0x98>
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d81d      	bhi.n	8008b5c <USBD_LL_DataOutStage+0xae>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <USBD_LL_DataOutStage+0x7c>
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d003      	beq.n	8008b30 <USBD_LL_DataOutStage+0x82>
 8008b28:	e018      	b.n	8008b5c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	75bb      	strb	r3, [r7, #22]
            break;
 8008b2e:	e018      	b.n	8008b62 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	4619      	mov	r1, r3
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 fa64 	bl	8009008 <USBD_CoreFindIF>
 8008b40:	4603      	mov	r3, r0
 8008b42:	75bb      	strb	r3, [r7, #22]
            break;
 8008b44:	e00d      	b.n	8008b62 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	4619      	mov	r1, r3
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 fa66 	bl	8009022 <USBD_CoreFindEP>
 8008b56:	4603      	mov	r3, r0
 8008b58:	75bb      	strb	r3, [r7, #22]
            break;
 8008b5a:	e002      	b.n	8008b62 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	75bb      	strb	r3, [r7, #22]
            break;
 8008b60:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b62:	7dbb      	ldrb	r3, [r7, #22]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d119      	bne.n	8008b9c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d113      	bne.n	8008b9c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b74:	7dba      	ldrb	r2, [r7, #22]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	32ae      	adds	r2, #174	@ 0xae
 8008b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b84:	7dba      	ldrb	r2, [r7, #22]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b8c:	7dba      	ldrb	r2, [r7, #22]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	32ae      	adds	r2, #174	@ 0xae
 8008b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f001 f93c 	bl	8009e1a <USBD_CtlSendStatus>
 8008ba2:	e032      	b.n	8008c0a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ba4:	7afb      	ldrb	r3, [r7, #11]
 8008ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	4619      	mov	r1, r3
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 fa37 	bl	8009022 <USBD_CoreFindEP>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bb8:	7dbb      	ldrb	r3, [r7, #22]
 8008bba:	2bff      	cmp	r3, #255	@ 0xff
 8008bbc:	d025      	beq.n	8008c0a <USBD_LL_DataOutStage+0x15c>
 8008bbe:	7dbb      	ldrb	r3, [r7, #22]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d122      	bne.n	8008c0a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d117      	bne.n	8008c00 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008bd0:	7dba      	ldrb	r2, [r7, #22]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	32ae      	adds	r2, #174	@ 0xae
 8008bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00f      	beq.n	8008c00 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008be0:	7dba      	ldrb	r2, [r7, #22]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008be8:	7dba      	ldrb	r2, [r7, #22]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	32ae      	adds	r2, #174	@ 0xae
 8008bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	7afa      	ldrb	r2, [r7, #11]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	4798      	blx	r3
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	e000      	b.n	8008c0c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c22:	7afb      	ldrb	r3, [r7, #11]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d16f      	bne.n	8008d08 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3314      	adds	r3, #20
 8008c2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d15a      	bne.n	8008cee <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d914      	bls.n	8008c6e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	1ad2      	subs	r2, r2, r3
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	461a      	mov	r2, r3
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f001 f8bb 	bl	8009dd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c60:	2300      	movs	r3, #0
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f001 fd73 	bl	800a752 <USBD_LL_PrepareReceive>
 8008c6c:	e03f      	b.n	8008cee <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d11c      	bne.n	8008cb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d316      	bcc.n	8008cb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d20f      	bcs.n	8008cb4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c94:	2200      	movs	r2, #0
 8008c96:	2100      	movs	r1, #0
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f001 f89c 	bl	8009dd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2100      	movs	r1, #0
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f001 fd50 	bl	800a752 <USBD_LL_PrepareReceive>
 8008cb2:	e01c      	b.n	8008cee <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d10f      	bne.n	8008ce0 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d009      	beq.n	8008ce0 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ce0:	2180      	movs	r1, #128	@ 0x80
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f001 fc8b 	bl	800a5fe <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f001 f8a9 	bl	8009e40 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d03a      	beq.n	8008d6e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f7ff fe42 	bl	8008982 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008d06:	e032      	b.n	8008d6e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d08:	7afb      	ldrb	r3, [r7, #11]
 8008d0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	4619      	mov	r1, r3
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 f985 	bl	8009022 <USBD_CoreFindEP>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d1c:	7dfb      	ldrb	r3, [r7, #23]
 8008d1e:	2bff      	cmp	r3, #255	@ 0xff
 8008d20:	d025      	beq.n	8008d6e <USBD_LL_DataInStage+0x15a>
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d122      	bne.n	8008d6e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d11c      	bne.n	8008d6e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d34:	7dfa      	ldrb	r2, [r7, #23]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	32ae      	adds	r2, #174	@ 0xae
 8008d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d014      	beq.n	8008d6e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d44:	7dfa      	ldrb	r2, [r7, #23]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d4c:	7dfa      	ldrb	r2, [r7, #23]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	32ae      	adds	r2, #174	@ 0xae
 8008d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	7afa      	ldrb	r2, [r7, #11]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	4798      	blx	r3
 8008d60:	4603      	mov	r3, r0
 8008d62:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d64:	7dbb      	ldrb	r3, [r7, #22]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d6a:	7dbb      	ldrb	r3, [r7, #22]
 8008d6c:	e000      	b.n	8008d70 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d014      	beq.n	8008dde <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00e      	beq.n	8008dde <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6852      	ldr	r2, [r2, #4]
 8008dcc:	b2d2      	uxtb	r2, r2
 8008dce:	4611      	mov	r1, r2
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	4798      	blx	r3
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dde:	2340      	movs	r3, #64	@ 0x40
 8008de0:	2200      	movs	r2, #0
 8008de2:	2100      	movs	r1, #0
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f001 fba6 	bl	800a536 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2240      	movs	r2, #64	@ 0x40
 8008df6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dfa:	2340      	movs	r3, #64	@ 0x40
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2180      	movs	r1, #128	@ 0x80
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 fb98 	bl	800a536 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2240      	movs	r2, #64	@ 0x40
 8008e10:	621a      	str	r2, [r3, #32]

  return ret;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	78fa      	ldrb	r2, [r7, #3]
 8008e2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d006      	beq.n	8008e5e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2204      	movs	r2, #4
 8008e62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d106      	bne.n	8008e96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d110      	bne.n	8008eda <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	32ae      	adds	r2, #174	@ 0xae
 8008efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e01c      	b.n	8008f40 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d115      	bne.n	8008f3e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	32ae      	adds	r2, #174	@ 0xae
 8008f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00b      	beq.n	8008f3e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	32ae      	adds	r2, #174	@ 0xae
 8008f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	78fa      	ldrb	r2, [r7, #3]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	32ae      	adds	r2, #174	@ 0xae
 8008f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e01c      	b.n	8008fa4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b03      	cmp	r3, #3
 8008f74:	d115      	bne.n	8008fa2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	32ae      	adds	r2, #174	@ 0xae
 8008f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00b      	beq.n	8008fa2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	32ae      	adds	r2, #174	@ 0xae
 8008f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00e      	beq.n	8008ffe <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6852      	ldr	r2, [r2, #4]
 8008fec:	b2d2      	uxtb	r2, r2
 8008fee:	4611      	mov	r1, r2
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	4798      	blx	r3
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009014:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009016:	4618      	mov	r0, r3
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	460b      	mov	r3, r1
 800902c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800902e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009050:	2300      	movs	r3, #0
 8009052:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	885b      	ldrh	r3, [r3, #2]
 8009058:	b29b      	uxth	r3, r3
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	7812      	ldrb	r2, [r2, #0]
 800905e:	4293      	cmp	r3, r2
 8009060:	d91f      	bls.n	80090a2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009068:	e013      	b.n	8009092 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800906a:	f107 030a 	add.w	r3, r7, #10
 800906e:	4619      	mov	r1, r3
 8009070:	6978      	ldr	r0, [r7, #20]
 8009072:	f000 f81b 	bl	80090ac <USBD_GetNextDesc>
 8009076:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	785b      	ldrb	r3, [r3, #1]
 800907c:	2b05      	cmp	r3, #5
 800907e:	d108      	bne.n	8009092 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	789b      	ldrb	r3, [r3, #2]
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	429a      	cmp	r2, r3
 800908c:	d008      	beq.n	80090a0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	885b      	ldrh	r3, [r3, #2]
 8009096:	b29a      	uxth	r2, r3
 8009098:	897b      	ldrh	r3, [r7, #10]
 800909a:	429a      	cmp	r2, r3
 800909c:	d8e5      	bhi.n	800906a <USBD_GetEpDesc+0x2e>
 800909e:	e000      	b.n	80090a2 <USBD_GetEpDesc+0x66>
          break;
 80090a0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80090a2:	693b      	ldr	r3, [r7, #16]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	7812      	ldrb	r2, [r2, #0]
 80090c2:	4413      	add	r3, r2
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4413      	add	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090d6:	68fb      	ldr	r3, [r7, #12]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	3301      	adds	r3, #1
 80090fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009102:	8a3b      	ldrh	r3, [r7, #16]
 8009104:	021b      	lsls	r3, r3, #8
 8009106:	b21a      	sxth	r2, r3
 8009108:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800910c:	4313      	orrs	r3, r2
 800910e:	b21b      	sxth	r3, r3
 8009110:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009112:	89fb      	ldrh	r3, [r7, #14]
}
 8009114:	4618      	mov	r0, r3
 8009116:	371c      	adds	r7, #28
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009136:	2b40      	cmp	r3, #64	@ 0x40
 8009138:	d005      	beq.n	8009146 <USBD_StdDevReq+0x26>
 800913a:	2b40      	cmp	r3, #64	@ 0x40
 800913c:	d857      	bhi.n	80091ee <USBD_StdDevReq+0xce>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00f      	beq.n	8009162 <USBD_StdDevReq+0x42>
 8009142:	2b20      	cmp	r3, #32
 8009144:	d153      	bne.n	80091ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	32ae      	adds	r2, #174	@ 0xae
 8009150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	4798      	blx	r3
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]
      break;
 8009160:	e04a      	b.n	80091f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	2b09      	cmp	r3, #9
 8009168:	d83b      	bhi.n	80091e2 <USBD_StdDevReq+0xc2>
 800916a:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <USBD_StdDevReq+0x50>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	080091c5 	.word	0x080091c5
 8009174:	080091d9 	.word	0x080091d9
 8009178:	080091e3 	.word	0x080091e3
 800917c:	080091cf 	.word	0x080091cf
 8009180:	080091e3 	.word	0x080091e3
 8009184:	080091a3 	.word	0x080091a3
 8009188:	08009199 	.word	0x08009199
 800918c:	080091e3 	.word	0x080091e3
 8009190:	080091bb 	.word	0x080091bb
 8009194:	080091ad 	.word	0x080091ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fa3c 	bl	8009618 <USBD_GetDescriptor>
          break;
 80091a0:	e024      	b.n	80091ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fba1 	bl	80098ec <USBD_SetAddress>
          break;
 80091aa:	e01f      	b.n	80091ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fbe0 	bl	8009974 <USBD_SetConfig>
 80091b4:	4603      	mov	r3, r0
 80091b6:	73fb      	strb	r3, [r7, #15]
          break;
 80091b8:	e018      	b.n	80091ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fc83 	bl	8009ac8 <USBD_GetConfig>
          break;
 80091c2:	e013      	b.n	80091ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fcb4 	bl	8009b34 <USBD_GetStatus>
          break;
 80091cc:	e00e      	b.n	80091ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fce3 	bl	8009b9c <USBD_SetFeature>
          break;
 80091d6:	e009      	b.n	80091ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fd07 	bl	8009bee <USBD_ClrFeature>
          break;
 80091e0:	e004      	b.n	80091ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fd5e 	bl	8009ca6 <USBD_CtlError>
          break;
 80091ea:	bf00      	nop
      }
      break;
 80091ec:	e004      	b.n	80091f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fd58 	bl	8009ca6 <USBD_CtlError>
      break;
 80091f6:	bf00      	nop
  }

  return ret;
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop

08009204 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800921a:	2b40      	cmp	r3, #64	@ 0x40
 800921c:	d005      	beq.n	800922a <USBD_StdItfReq+0x26>
 800921e:	2b40      	cmp	r3, #64	@ 0x40
 8009220:	d852      	bhi.n	80092c8 <USBD_StdItfReq+0xc4>
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <USBD_StdItfReq+0x26>
 8009226:	2b20      	cmp	r3, #32
 8009228:	d14e      	bne.n	80092c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009230:	b2db      	uxtb	r3, r3
 8009232:	3b01      	subs	r3, #1
 8009234:	2b02      	cmp	r3, #2
 8009236:	d840      	bhi.n	80092ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	889b      	ldrh	r3, [r3, #4]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b01      	cmp	r3, #1
 8009240:	d836      	bhi.n	80092b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	889b      	ldrh	r3, [r3, #4]
 8009246:	b2db      	uxtb	r3, r3
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7ff fedc 	bl	8009008 <USBD_CoreFindIF>
 8009250:	4603      	mov	r3, r0
 8009252:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	2bff      	cmp	r3, #255	@ 0xff
 8009258:	d01d      	beq.n	8009296 <USBD_StdItfReq+0x92>
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d11a      	bne.n	8009296 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009260:	7bba      	ldrb	r2, [r7, #14]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	32ae      	adds	r2, #174	@ 0xae
 8009266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00f      	beq.n	8009290 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009270:	7bba      	ldrb	r2, [r7, #14]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009278:	7bba      	ldrb	r2, [r7, #14]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	32ae      	adds	r2, #174	@ 0xae
 800927e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
 800928a:	4603      	mov	r3, r0
 800928c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800928e:	e004      	b.n	800929a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009290:	2303      	movs	r3, #3
 8009292:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009294:	e001      	b.n	800929a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009296:	2303      	movs	r3, #3
 8009298:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	88db      	ldrh	r3, [r3, #6]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d110      	bne.n	80092c4 <USBD_StdItfReq+0xc0>
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10d      	bne.n	80092c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fdb6 	bl	8009e1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092ae:	e009      	b.n	80092c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fcf7 	bl	8009ca6 <USBD_CtlError>
          break;
 80092b8:	e004      	b.n	80092c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fcf2 	bl	8009ca6 <USBD_CtlError>
          break;
 80092c2:	e000      	b.n	80092c6 <USBD_StdItfReq+0xc2>
          break;
 80092c4:	bf00      	nop
      }
      break;
 80092c6:	e004      	b.n	80092d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fceb 	bl	8009ca6 <USBD_CtlError>
      break;
 80092d0:	bf00      	nop
  }

  return ret;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	889b      	ldrh	r3, [r3, #4]
 80092ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092f8:	2b40      	cmp	r3, #64	@ 0x40
 80092fa:	d007      	beq.n	800930c <USBD_StdEPReq+0x30>
 80092fc:	2b40      	cmp	r3, #64	@ 0x40
 80092fe:	f200 817f 	bhi.w	8009600 <USBD_StdEPReq+0x324>
 8009302:	2b00      	cmp	r3, #0
 8009304:	d02a      	beq.n	800935c <USBD_StdEPReq+0x80>
 8009306:	2b20      	cmp	r3, #32
 8009308:	f040 817a 	bne.w	8009600 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff fe86 	bl	8009022 <USBD_CoreFindEP>
 8009316:	4603      	mov	r3, r0
 8009318:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800931a:	7b7b      	ldrb	r3, [r7, #13]
 800931c:	2bff      	cmp	r3, #255	@ 0xff
 800931e:	f000 8174 	beq.w	800960a <USBD_StdEPReq+0x32e>
 8009322:	7b7b      	ldrb	r3, [r7, #13]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f040 8170 	bne.w	800960a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800932a:	7b7a      	ldrb	r2, [r7, #13]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009332:	7b7a      	ldrb	r2, [r7, #13]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	32ae      	adds	r2, #174	@ 0xae
 8009338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 8163 	beq.w	800960a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009344:	7b7a      	ldrb	r2, [r7, #13]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	32ae      	adds	r2, #174	@ 0xae
 800934a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
 8009356:	4603      	mov	r3, r0
 8009358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800935a:	e156      	b.n	800960a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	2b03      	cmp	r3, #3
 8009362:	d008      	beq.n	8009376 <USBD_StdEPReq+0x9a>
 8009364:	2b03      	cmp	r3, #3
 8009366:	f300 8145 	bgt.w	80095f4 <USBD_StdEPReq+0x318>
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 809b 	beq.w	80094a6 <USBD_StdEPReq+0x1ca>
 8009370:	2b01      	cmp	r3, #1
 8009372:	d03c      	beq.n	80093ee <USBD_StdEPReq+0x112>
 8009374:	e13e      	b.n	80095f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d002      	beq.n	8009388 <USBD_StdEPReq+0xac>
 8009382:	2b03      	cmp	r3, #3
 8009384:	d016      	beq.n	80093b4 <USBD_StdEPReq+0xd8>
 8009386:	e02c      	b.n	80093e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00d      	beq.n	80093aa <USBD_StdEPReq+0xce>
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b80      	cmp	r3, #128	@ 0x80
 8009392:	d00a      	beq.n	80093aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009394:	7bbb      	ldrb	r3, [r7, #14]
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 f930 	bl	800a5fe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800939e:	2180      	movs	r1, #128	@ 0x80
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 f92c 	bl	800a5fe <USBD_LL_StallEP>
 80093a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093a8:	e020      	b.n	80093ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fc7a 	bl	8009ca6 <USBD_CtlError>
              break;
 80093b2:	e01b      	b.n	80093ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	885b      	ldrh	r3, [r3, #2]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10e      	bne.n	80093da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00b      	beq.n	80093da <USBD_StdEPReq+0xfe>
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b80      	cmp	r3, #128	@ 0x80
 80093c6:	d008      	beq.n	80093da <USBD_StdEPReq+0xfe>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	88db      	ldrh	r3, [r3, #6]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d104      	bne.n	80093da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 f912 	bl	800a5fe <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fd1d 	bl	8009e1a <USBD_CtlSendStatus>

              break;
 80093e0:	e004      	b.n	80093ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fc5e 	bl	8009ca6 <USBD_CtlError>
              break;
 80093ea:	bf00      	nop
          }
          break;
 80093ec:	e107      	b.n	80095fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d002      	beq.n	8009400 <USBD_StdEPReq+0x124>
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d016      	beq.n	800942c <USBD_StdEPReq+0x150>
 80093fe:	e04b      	b.n	8009498 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00d      	beq.n	8009422 <USBD_StdEPReq+0x146>
 8009406:	7bbb      	ldrb	r3, [r7, #14]
 8009408:	2b80      	cmp	r3, #128	@ 0x80
 800940a:	d00a      	beq.n	8009422 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	4619      	mov	r1, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f001 f8f4 	bl	800a5fe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009416:	2180      	movs	r1, #128	@ 0x80
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 f8f0 	bl	800a5fe <USBD_LL_StallEP>
 800941e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009420:	e040      	b.n	80094a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fc3e 	bl	8009ca6 <USBD_CtlError>
              break;
 800942a:	e03b      	b.n	80094a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	885b      	ldrh	r3, [r3, #2]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d136      	bne.n	80094a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 f8fa 	bl	800a63c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fce6 	bl	8009e1a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	4619      	mov	r1, r3
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff fde5 	bl	8009022 <USBD_CoreFindEP>
 8009458:	4603      	mov	r3, r0
 800945a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800945c:	7b7b      	ldrb	r3, [r7, #13]
 800945e:	2bff      	cmp	r3, #255	@ 0xff
 8009460:	d01f      	beq.n	80094a2 <USBD_StdEPReq+0x1c6>
 8009462:	7b7b      	ldrb	r3, [r7, #13]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d11c      	bne.n	80094a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009468:	7b7a      	ldrb	r2, [r7, #13]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009470:	7b7a      	ldrb	r2, [r7, #13]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	32ae      	adds	r2, #174	@ 0xae
 8009476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d010      	beq.n	80094a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009480:	7b7a      	ldrb	r2, [r7, #13]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	32ae      	adds	r2, #174	@ 0xae
 8009486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	4798      	blx	r3
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009496:	e004      	b.n	80094a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fc03 	bl	8009ca6 <USBD_CtlError>
              break;
 80094a0:	e000      	b.n	80094a4 <USBD_StdEPReq+0x1c8>
              break;
 80094a2:	bf00      	nop
          }
          break;
 80094a4:	e0ab      	b.n	80095fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d002      	beq.n	80094b8 <USBD_StdEPReq+0x1dc>
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d032      	beq.n	800951c <USBD_StdEPReq+0x240>
 80094b6:	e097      	b.n	80095e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <USBD_StdEPReq+0x1f2>
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	2b80      	cmp	r3, #128	@ 0x80
 80094c2:	d004      	beq.n	80094ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fbed 	bl	8009ca6 <USBD_CtlError>
                break;
 80094cc:	e091      	b.n	80095f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	da0b      	bge.n	80094ee <USBD_StdEPReq+0x212>
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094dc:	4613      	mov	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	3310      	adds	r3, #16
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	4413      	add	r3, r2
 80094ea:	3304      	adds	r3, #4
 80094ec:	e00b      	b.n	8009506 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	4413      	add	r3, r2
 8009504:	3304      	adds	r3, #4
 8009506:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2200      	movs	r2, #0
 800950c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2202      	movs	r2, #2
 8009512:	4619      	mov	r1, r3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fc43 	bl	8009da0 <USBD_CtlSendData>
              break;
 800951a:	e06a      	b.n	80095f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800951c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009520:	2b00      	cmp	r3, #0
 8009522:	da11      	bge.n	8009548 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	f003 020f 	and.w	r2, r3, #15
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	440b      	add	r3, r1
 8009536:	3324      	adds	r3, #36	@ 0x24
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d117      	bne.n	800956e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fbb0 	bl	8009ca6 <USBD_CtlError>
                  break;
 8009546:	e054      	b.n	80095f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009548:	7bbb      	ldrb	r3, [r7, #14]
 800954a:	f003 020f 	and.w	r2, r3, #15
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fb9d 	bl	8009ca6 <USBD_CtlError>
                  break;
 800956c:	e041      	b.n	80095f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800956e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009572:	2b00      	cmp	r3, #0
 8009574:	da0b      	bge.n	800958e <USBD_StdEPReq+0x2b2>
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	3310      	adds	r3, #16
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	4413      	add	r3, r2
 800958a:	3304      	adds	r3, #4
 800958c:	e00b      	b.n	80095a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009594:	4613      	mov	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	4413      	add	r3, r2
 80095a4:	3304      	adds	r3, #4
 80095a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d002      	beq.n	80095b4 <USBD_StdEPReq+0x2d8>
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	2b80      	cmp	r3, #128	@ 0x80
 80095b2:	d103      	bne.n	80095bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	e00e      	b.n	80095da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 f85a 	bl	800a67a <USBD_LL_IsStallEP>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d003      	beq.n	80095d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2201      	movs	r2, #1
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	e002      	b.n	80095da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2200      	movs	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2202      	movs	r2, #2
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fbdd 	bl	8009da0 <USBD_CtlSendData>
              break;
 80095e6:	e004      	b.n	80095f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fb5b 	bl	8009ca6 <USBD_CtlError>
              break;
 80095f0:	bf00      	nop
          }
          break;
 80095f2:	e004      	b.n	80095fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fb55 	bl	8009ca6 <USBD_CtlError>
          break;
 80095fc:	bf00      	nop
      }
      break;
 80095fe:	e005      	b.n	800960c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fb4f 	bl	8009ca6 <USBD_CtlError>
      break;
 8009608:	e000      	b.n	800960c <USBD_StdEPReq+0x330>
      break;
 800960a:	bf00      	nop
  }

  return ret;
 800960c:	7bfb      	ldrb	r3, [r7, #15]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009622:	2300      	movs	r3, #0
 8009624:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	885b      	ldrh	r3, [r3, #2]
 8009632:	0a1b      	lsrs	r3, r3, #8
 8009634:	b29b      	uxth	r3, r3
 8009636:	3b01      	subs	r3, #1
 8009638:	2b06      	cmp	r3, #6
 800963a:	f200 8128 	bhi.w	800988e <USBD_GetDescriptor+0x276>
 800963e:	a201      	add	r2, pc, #4	@ (adr r2, 8009644 <USBD_GetDescriptor+0x2c>)
 8009640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009644:	08009661 	.word	0x08009661
 8009648:	08009679 	.word	0x08009679
 800964c:	080096b9 	.word	0x080096b9
 8009650:	0800988f 	.word	0x0800988f
 8009654:	0800988f 	.word	0x0800988f
 8009658:	0800982f 	.word	0x0800982f
 800965c:	0800985b 	.word	0x0800985b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	7c12      	ldrb	r2, [r2, #16]
 800966c:	f107 0108 	add.w	r1, r7, #8
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
 8009674:	60f8      	str	r0, [r7, #12]
      break;
 8009676:	e112      	b.n	800989e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	7c1b      	ldrb	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10d      	bne.n	800969c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009688:	f107 0208 	add.w	r2, r7, #8
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
 8009690:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3301      	adds	r3, #1
 8009696:	2202      	movs	r2, #2
 8009698:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800969a:	e100      	b.n	800989e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a4:	f107 0208 	add.w	r2, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3301      	adds	r3, #1
 80096b2:	2202      	movs	r2, #2
 80096b4:	701a      	strb	r2, [r3, #0]
      break;
 80096b6:	e0f2      	b.n	800989e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	885b      	ldrh	r3, [r3, #2]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b05      	cmp	r3, #5
 80096c0:	f200 80ac 	bhi.w	800981c <USBD_GetDescriptor+0x204>
 80096c4:	a201      	add	r2, pc, #4	@ (adr r2, 80096cc <USBD_GetDescriptor+0xb4>)
 80096c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ca:	bf00      	nop
 80096cc:	080096e5 	.word	0x080096e5
 80096d0:	08009719 	.word	0x08009719
 80096d4:	0800974d 	.word	0x0800974d
 80096d8:	08009781 	.word	0x08009781
 80096dc:	080097b5 	.word	0x080097b5
 80096e0:	080097e9 	.word	0x080097e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00b      	beq.n	8009708 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	7c12      	ldrb	r2, [r2, #16]
 80096fc:	f107 0108 	add.w	r1, r7, #8
 8009700:	4610      	mov	r0, r2
 8009702:	4798      	blx	r3
 8009704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009706:	e091      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 facb 	bl	8009ca6 <USBD_CtlError>
            err++;
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	3301      	adds	r3, #1
 8009714:	72fb      	strb	r3, [r7, #11]
          break;
 8009716:	e089      	b.n	800982c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00b      	beq.n	800973c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	7c12      	ldrb	r2, [r2, #16]
 8009730:	f107 0108 	add.w	r1, r7, #8
 8009734:	4610      	mov	r0, r2
 8009736:	4798      	blx	r3
 8009738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973a:	e077      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fab1 	bl	8009ca6 <USBD_CtlError>
            err++;
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	3301      	adds	r3, #1
 8009748:	72fb      	strb	r3, [r7, #11]
          break;
 800974a:	e06f      	b.n	800982c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00b      	beq.n	8009770 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	7c12      	ldrb	r2, [r2, #16]
 8009764:	f107 0108 	add.w	r1, r7, #8
 8009768:	4610      	mov	r0, r2
 800976a:	4798      	blx	r3
 800976c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976e:	e05d      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fa97 	bl	8009ca6 <USBD_CtlError>
            err++;
 8009778:	7afb      	ldrb	r3, [r7, #11]
 800977a:	3301      	adds	r3, #1
 800977c:	72fb      	strb	r3, [r7, #11]
          break;
 800977e:	e055      	b.n	800982c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	7c12      	ldrb	r2, [r2, #16]
 8009798:	f107 0108 	add.w	r1, r7, #8
 800979c:	4610      	mov	r0, r2
 800979e:	4798      	blx	r3
 80097a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a2:	e043      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa7d 	bl	8009ca6 <USBD_CtlError>
            err++;
 80097ac:	7afb      	ldrb	r3, [r7, #11]
 80097ae:	3301      	adds	r3, #1
 80097b0:	72fb      	strb	r3, [r7, #11]
          break;
 80097b2:	e03b      	b.n	800982c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	7c12      	ldrb	r2, [r2, #16]
 80097cc:	f107 0108 	add.w	r1, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d6:	e029      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa63 	bl	8009ca6 <USBD_CtlError>
            err++;
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	3301      	adds	r3, #1
 80097e4:	72fb      	strb	r3, [r7, #11]
          break;
 80097e6:	e021      	b.n	800982c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00b      	beq.n	800980c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	7c12      	ldrb	r2, [r2, #16]
 8009800:	f107 0108 	add.w	r1, r7, #8
 8009804:	4610      	mov	r0, r2
 8009806:	4798      	blx	r3
 8009808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980a:	e00f      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa49 	bl	8009ca6 <USBD_CtlError>
            err++;
 8009814:	7afb      	ldrb	r3, [r7, #11]
 8009816:	3301      	adds	r3, #1
 8009818:	72fb      	strb	r3, [r7, #11]
          break;
 800981a:	e007      	b.n	800982c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fa41 	bl	8009ca6 <USBD_CtlError>
          err++;
 8009824:	7afb      	ldrb	r3, [r7, #11]
 8009826:	3301      	adds	r3, #1
 8009828:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800982a:	bf00      	nop
      }
      break;
 800982c:	e037      	b.n	800989e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	7c1b      	ldrb	r3, [r3, #16]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800983c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800983e:	f107 0208 	add.w	r2, r7, #8
 8009842:	4610      	mov	r0, r2
 8009844:	4798      	blx	r3
 8009846:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009848:	e029      	b.n	800989e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fa2a 	bl	8009ca6 <USBD_CtlError>
        err++;
 8009852:	7afb      	ldrb	r3, [r7, #11]
 8009854:	3301      	adds	r3, #1
 8009856:	72fb      	strb	r3, [r7, #11]
      break;
 8009858:	e021      	b.n	800989e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	7c1b      	ldrb	r3, [r3, #16]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10d      	bne.n	800987e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800986a:	f107 0208 	add.w	r2, r7, #8
 800986e:	4610      	mov	r0, r2
 8009870:	4798      	blx	r3
 8009872:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3301      	adds	r3, #1
 8009878:	2207      	movs	r2, #7
 800987a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800987c:	e00f      	b.n	800989e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fa10 	bl	8009ca6 <USBD_CtlError>
        err++;
 8009886:	7afb      	ldrb	r3, [r7, #11]
 8009888:	3301      	adds	r3, #1
 800988a:	72fb      	strb	r3, [r7, #11]
      break;
 800988c:	e007      	b.n	800989e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fa08 	bl	8009ca6 <USBD_CtlError>
      err++;
 8009896:	7afb      	ldrb	r3, [r7, #11]
 8009898:	3301      	adds	r3, #1
 800989a:	72fb      	strb	r3, [r7, #11]
      break;
 800989c:	bf00      	nop
  }

  if (err != 0U)
 800989e:	7afb      	ldrb	r3, [r7, #11]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d11e      	bne.n	80098e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	88db      	ldrh	r3, [r3, #6]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d016      	beq.n	80098da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80098ac:	893b      	ldrh	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00e      	beq.n	80098d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	88da      	ldrh	r2, [r3, #6]
 80098b6:	893b      	ldrh	r3, [r7, #8]
 80098b8:	4293      	cmp	r3, r2
 80098ba:	bf28      	it	cs
 80098bc:	4613      	movcs	r3, r2
 80098be:	b29b      	uxth	r3, r3
 80098c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098c2:	893b      	ldrh	r3, [r7, #8]
 80098c4:	461a      	mov	r2, r3
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fa69 	bl	8009da0 <USBD_CtlSendData>
 80098ce:	e009      	b.n	80098e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f9e7 	bl	8009ca6 <USBD_CtlError>
 80098d8:	e004      	b.n	80098e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa9d 	bl	8009e1a <USBD_CtlSendStatus>
 80098e0:	e000      	b.n	80098e4 <USBD_GetDescriptor+0x2cc>
    return;
 80098e2:	bf00      	nop
  }
}
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop

080098ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	889b      	ldrh	r3, [r3, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d131      	bne.n	8009962 <USBD_SetAddress+0x76>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	88db      	ldrh	r3, [r3, #6]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d12d      	bne.n	8009962 <USBD_SetAddress+0x76>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	885b      	ldrh	r3, [r3, #2]
 800990a:	2b7f      	cmp	r3, #127	@ 0x7f
 800990c:	d829      	bhi.n	8009962 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	885b      	ldrh	r3, [r3, #2]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009918:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b03      	cmp	r3, #3
 8009924:	d104      	bne.n	8009930 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f9bc 	bl	8009ca6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992e:	e01d      	b.n	800996c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	7bfa      	ldrb	r2, [r7, #15]
 8009934:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fec8 	bl	800a6d2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa69 	bl	8009e1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d004      	beq.n	8009958 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2202      	movs	r2, #2
 8009952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009956:	e009      	b.n	800996c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009960:	e004      	b.n	800996c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f99e 	bl	8009ca6 <USBD_CtlError>
  }
}
 800996a:	bf00      	nop
 800996c:	bf00      	nop
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	885b      	ldrh	r3, [r3, #2]
 8009986:	b2da      	uxtb	r2, r3
 8009988:	4b4e      	ldr	r3, [pc, #312]	@ (8009ac4 <USBD_SetConfig+0x150>)
 800998a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800998c:	4b4d      	ldr	r3, [pc, #308]	@ (8009ac4 <USBD_SetConfig+0x150>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d905      	bls.n	80099a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f985 	bl	8009ca6 <USBD_CtlError>
    return USBD_FAIL;
 800999c:	2303      	movs	r3, #3
 800999e:	e08c      	b.n	8009aba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d002      	beq.n	80099b2 <USBD_SetConfig+0x3e>
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d029      	beq.n	8009a04 <USBD_SetConfig+0x90>
 80099b0:	e075      	b.n	8009a9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099b2:	4b44      	ldr	r3, [pc, #272]	@ (8009ac4 <USBD_SetConfig+0x150>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d020      	beq.n	80099fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80099ba:	4b42      	ldr	r3, [pc, #264]	@ (8009ac4 <USBD_SetConfig+0x150>)
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099c4:	4b3f      	ldr	r3, [pc, #252]	@ (8009ac4 <USBD_SetConfig+0x150>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fe ffe4 	bl	8008998 <USBD_SetClassConfig>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d008      	beq.n	80099ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f962 	bl	8009ca6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2202      	movs	r2, #2
 80099e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099ea:	e065      	b.n	8009ab8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fa14 	bl	8009e1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2203      	movs	r2, #3
 80099f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80099fa:	e05d      	b.n	8009ab8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fa0c 	bl	8009e1a <USBD_CtlSendStatus>
      break;
 8009a02:	e059      	b.n	8009ab8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a04:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d112      	bne.n	8009a32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2202      	movs	r2, #2
 8009a10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a14:	4b2b      	ldr	r3, [pc, #172]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a1e:	4b29      	ldr	r3, [pc, #164]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7fe ffd3 	bl	80089d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f9f5 	bl	8009e1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a30:	e042      	b.n	8009ab8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a32:	4b24      	ldr	r3, [pc, #144]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d02a      	beq.n	8009a96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7fe ffc1 	bl	80089d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a58:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7fe ff9a 	bl	8008998 <USBD_SetClassConfig>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00f      	beq.n	8009a8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f918 	bl	8009ca6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7fe ffa6 	bl	80089d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a8c:	e014      	b.n	8009ab8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f9c3 	bl	8009e1a <USBD_CtlSendStatus>
      break;
 8009a94:	e010      	b.n	8009ab8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f9bf 	bl	8009e1a <USBD_CtlSendStatus>
      break;
 8009a9c:	e00c      	b.n	8009ab8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f900 	bl	8009ca6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009aa6:	4b07      	ldr	r3, [pc, #28]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7fe ff8f 	bl	80089d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab6:	bf00      	nop
  }

  return ret;
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20000344 	.word	0x20000344

08009ac8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	88db      	ldrh	r3, [r3, #6]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d004      	beq.n	8009ae4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f8e2 	bl	8009ca6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ae2:	e023      	b.n	8009b2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	dc02      	bgt.n	8009af6 <USBD_GetConfig+0x2e>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	dc03      	bgt.n	8009afc <USBD_GetConfig+0x34>
 8009af4:	e015      	b.n	8009b22 <USBD_GetConfig+0x5a>
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d00b      	beq.n	8009b12 <USBD_GetConfig+0x4a>
 8009afa:	e012      	b.n	8009b22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3308      	adds	r3, #8
 8009b06:	2201      	movs	r2, #1
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f948 	bl	8009da0 <USBD_CtlSendData>
        break;
 8009b10:	e00c      	b.n	8009b2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3304      	adds	r3, #4
 8009b16:	2201      	movs	r2, #1
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f940 	bl	8009da0 <USBD_CtlSendData>
        break;
 8009b20:	e004      	b.n	8009b2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f8be 	bl	8009ca6 <USBD_CtlError>
        break;
 8009b2a:	bf00      	nop
}
 8009b2c:	bf00      	nop
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	3b01      	subs	r3, #1
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d81e      	bhi.n	8009b8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	88db      	ldrh	r3, [r3, #6]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d004      	beq.n	8009b5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f8a5 	bl	8009ca6 <USBD_CtlError>
        break;
 8009b5c:	e01a      	b.n	8009b94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d005      	beq.n	8009b7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f043 0202 	orr.w	r2, r3, #2
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	330c      	adds	r3, #12
 8009b7e:	2202      	movs	r2, #2
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f90c 	bl	8009da0 <USBD_CtlSendData>
      break;
 8009b88:	e004      	b.n	8009b94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f88a 	bl	8009ca6 <USBD_CtlError>
      break;
 8009b92:	bf00      	nop
  }
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d107      	bne.n	8009bbe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f92f 	bl	8009e1a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009bbc:	e013      	b.n	8009be6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	885b      	ldrh	r3, [r3, #2]
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d10b      	bne.n	8009bde <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	889b      	ldrh	r3, [r3, #4]
 8009bca:	0a1b      	lsrs	r3, r3, #8
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f91f 	bl	8009e1a <USBD_CtlSendStatus>
}
 8009bdc:	e003      	b.n	8009be6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f860 	bl	8009ca6 <USBD_CtlError>
}
 8009be6:	bf00      	nop
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d80b      	bhi.n	8009c1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	885b      	ldrh	r3, [r3, #2]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d10c      	bne.n	8009c28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f8ff 	bl	8009e1a <USBD_CtlSendStatus>
      }
      break;
 8009c1c:	e004      	b.n	8009c28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f840 	bl	8009ca6 <USBD_CtlError>
      break;
 8009c26:	e000      	b.n	8009c2a <USBD_ClrFeature+0x3c>
      break;
 8009c28:	bf00      	nop
  }
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	781a      	ldrb	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f7ff fa41 	bl	80090e4 <SWAPBYTE>
 8009c62:	4603      	mov	r3, r0
 8009c64:	461a      	mov	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3301      	adds	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7ff fa34 	bl	80090e4 <SWAPBYTE>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	461a      	mov	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3301      	adds	r3, #1
 8009c88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f7ff fa27 	bl	80090e4 <SWAPBYTE>
 8009c96:	4603      	mov	r3, r0
 8009c98:	461a      	mov	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	80da      	strh	r2, [r3, #6]
}
 8009c9e:	bf00      	nop
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cb0:	2180      	movs	r1, #128	@ 0x80
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fca3 	bl	800a5fe <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009cb8:	2100      	movs	r1, #0
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fc9f 	bl	800a5fe <USBD_LL_StallEP>
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d042      	beq.n	8009d64 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009ce2:	6938      	ldr	r0, [r7, #16]
 8009ce4:	f000 f842 	bl	8009d6c <USBD_GetLen>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	3301      	adds	r3, #1
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cf2:	d808      	bhi.n	8009d06 <USBD_GetString+0x3e>
 8009cf4:	6938      	ldr	r0, [r7, #16]
 8009cf6:	f000 f839 	bl	8009d6c <USBD_GetLen>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	005b      	lsls	r3, r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	e001      	b.n	8009d0a <USBD_GetString+0x42>
 8009d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	4413      	add	r3, r2
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7812      	ldrb	r2, [r2, #0]
 8009d18:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	4413      	add	r3, r2
 8009d26:	2203      	movs	r2, #3
 8009d28:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d30:	e013      	b.n	8009d5a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	4413      	add	r3, r2
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	7812      	ldrb	r2, [r2, #0]
 8009d3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	3301      	adds	r3, #1
 8009d42:	613b      	str	r3, [r7, #16]
    idx++;
 8009d44:	7dfb      	ldrb	r3, [r7, #23]
 8009d46:	3301      	adds	r3, #1
 8009d48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	4413      	add	r3, r2
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	3301      	adds	r3, #1
 8009d58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e7      	bne.n	8009d32 <USBD_GetString+0x6a>
 8009d62:	e000      	b.n	8009d66 <USBD_GetString+0x9e>
    return;
 8009d64:	bf00      	nop
  }
}
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d7c:	e005      	b.n	8009d8a <USBD_GetLen+0x1e>
  {
    len++;
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	3301      	adds	r3, #1
 8009d82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	3301      	adds	r3, #1
 8009d88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f5      	bne.n	8009d7e <USBD_GetLen+0x12>
  }

  return len;
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2202      	movs	r2, #2
 8009db0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 fca2 	bl	800a710 <USBD_LL_Transmit>

  return USBD_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	60f8      	str	r0, [r7, #12]
 8009dde:	60b9      	str	r1, [r7, #8]
 8009de0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	2100      	movs	r1, #0
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 fc91 	bl	800a710 <USBD_LL_Transmit>

  return USBD_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	2100      	movs	r1, #0
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f000 fca1 	bl	800a752 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2204      	movs	r2, #4
 8009e26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2100      	movs	r1, #0
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fc6d 	bl	800a710 <USBD_LL_Transmit>

  return USBD_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2205      	movs	r2, #5
 8009e4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e50:	2300      	movs	r3, #0
 8009e52:	2200      	movs	r2, #0
 8009e54:	2100      	movs	r1, #0
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fc7b 	bl	800a752 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	4912      	ldr	r1, [pc, #72]	@ (8009eb8 <MX_USB_DEVICE_Init+0x50>)
 8009e70:	4812      	ldr	r0, [pc, #72]	@ (8009ebc <MX_USB_DEVICE_Init+0x54>)
 8009e72:	f7fe fd14 	bl	800889e <USBD_Init>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e7c:	f7f6 fdec 	bl	8000a58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8009e80:	490f      	ldr	r1, [pc, #60]	@ (8009ec0 <MX_USB_DEVICE_Init+0x58>)
 8009e82:	480e      	ldr	r0, [pc, #56]	@ (8009ebc <MX_USB_DEVICE_Init+0x54>)
 8009e84:	f7fe fd3b 	bl	80088fe <USBD_RegisterClass>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e8e:	f7f6 fde3 	bl	8000a58 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8009e92:	490c      	ldr	r1, [pc, #48]	@ (8009ec4 <MX_USB_DEVICE_Init+0x5c>)
 8009e94:	4809      	ldr	r0, [pc, #36]	@ (8009ebc <MX_USB_DEVICE_Init+0x54>)
 8009e96:	f7fc ffb9 	bl	8006e0c <USBD_MSC_RegisterStorage>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ea0:	f7f6 fdda 	bl	8000a58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ea4:	4805      	ldr	r0, [pc, #20]	@ (8009ebc <MX_USB_DEVICE_Init+0x54>)
 8009ea6:	f7fe fd60 	bl	800896a <USBD_Start>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009eb0:	f7f6 fdd2 	bl	8000a58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009eb4:	bf00      	nop
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	2000008c 	.word	0x2000008c
 8009ebc:	20000348 	.word	0x20000348
 8009ec0:	2000000c 	.word	0x2000000c
 8009ec4:	200000dc 	.word	0x200000dc

08009ec8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	6039      	str	r1, [r7, #0]
 8009ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2212      	movs	r2, #18
 8009ed8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009eda:	4b03      	ldr	r3, [pc, #12]	@ (8009ee8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	200000a8 	.word	0x200000a8

08009eec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	6039      	str	r1, [r7, #0]
 8009ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2204      	movs	r2, #4
 8009efc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009efe:	4b03      	ldr	r3, [pc, #12]	@ (8009f0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	200000bc 	.word	0x200000bc

08009f10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d105      	bne.n	8009f2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	4907      	ldr	r1, [pc, #28]	@ (8009f44 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f26:	4808      	ldr	r0, [pc, #32]	@ (8009f48 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f28:	f7ff fece 	bl	8009cc8 <USBD_GetString>
 8009f2c:	e004      	b.n	8009f38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	4904      	ldr	r1, [pc, #16]	@ (8009f44 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f32:	4805      	ldr	r0, [pc, #20]	@ (8009f48 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f34:	f7ff fec8 	bl	8009cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f38:	4b02      	ldr	r3, [pc, #8]	@ (8009f44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	20000624 	.word	0x20000624
 8009f48:	0800b9bc 	.word	0x0800b9bc

08009f4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4603      	mov	r3, r0
 8009f54:	6039      	str	r1, [r7, #0]
 8009f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	4904      	ldr	r1, [pc, #16]	@ (8009f6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f5c:	4804      	ldr	r0, [pc, #16]	@ (8009f70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f5e:	f7ff feb3 	bl	8009cc8 <USBD_GetString>
  return USBD_StrDesc;
 8009f62:	4b02      	ldr	r3, [pc, #8]	@ (8009f6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20000624 	.word	0x20000624
 8009f70:	0800b9c4 	.word	0x0800b9c4

08009f74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	6039      	str	r1, [r7, #0]
 8009f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	221a      	movs	r2, #26
 8009f84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f86:	f000 f843 	bl	800a010 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f8a:	4b02      	ldr	r3, [pc, #8]	@ (8009f94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	200000c0 	.word	0x200000c0

08009f98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6039      	str	r1, [r7, #0]
 8009fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	4907      	ldr	r1, [pc, #28]	@ (8009fcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fae:	4808      	ldr	r0, [pc, #32]	@ (8009fd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fb0:	f7ff fe8a 	bl	8009cc8 <USBD_GetString>
 8009fb4:	e004      	b.n	8009fc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	4904      	ldr	r1, [pc, #16]	@ (8009fcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fba:	4805      	ldr	r0, [pc, #20]	@ (8009fd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fbc:	f7ff fe84 	bl	8009cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fc0:	4b02      	ldr	r3, [pc, #8]	@ (8009fcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20000624 	.word	0x20000624
 8009fd0:	0800b9d0 	.word	0x0800b9d0

08009fd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fe0:	79fb      	ldrb	r3, [r7, #7]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d105      	bne.n	8009ff2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	4907      	ldr	r1, [pc, #28]	@ (800a008 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fea:	4808      	ldr	r0, [pc, #32]	@ (800a00c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fec:	f7ff fe6c 	bl	8009cc8 <USBD_GetString>
 8009ff0:	e004      	b.n	8009ffc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	4904      	ldr	r1, [pc, #16]	@ (800a008 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ff6:	4805      	ldr	r0, [pc, #20]	@ (800a00c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ff8:	f7ff fe66 	bl	8009cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ffc:	4b02      	ldr	r3, [pc, #8]	@ (800a008 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	20000624 	.word	0x20000624
 800a00c:	0800b9dc 	.word	0x0800b9dc

0800a010 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a016:	4b0f      	ldr	r3, [pc, #60]	@ (800a054 <Get_SerialNum+0x44>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a01c:	4b0e      	ldr	r3, [pc, #56]	@ (800a058 <Get_SerialNum+0x48>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a022:	4b0e      	ldr	r3, [pc, #56]	@ (800a05c <Get_SerialNum+0x4c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4413      	add	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d009      	beq.n	800a04a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a036:	2208      	movs	r2, #8
 800a038:	4909      	ldr	r1, [pc, #36]	@ (800a060 <Get_SerialNum+0x50>)
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f000 f814 	bl	800a068 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a040:	2204      	movs	r2, #4
 800a042:	4908      	ldr	r1, [pc, #32]	@ (800a064 <Get_SerialNum+0x54>)
 800a044:	68b8      	ldr	r0, [r7, #8]
 800a046:	f000 f80f 	bl	800a068 <IntToUnicode>
  }
}
 800a04a:	bf00      	nop
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	1fff7a10 	.word	0x1fff7a10
 800a058:	1fff7a14 	.word	0x1fff7a14
 800a05c:	1fff7a18 	.word	0x1fff7a18
 800a060:	200000c2 	.word	0x200000c2
 800a064:	200000d2 	.word	0x200000d2

0800a068 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	4613      	mov	r3, r2
 800a074:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a07a:	2300      	movs	r3, #0
 800a07c:	75fb      	strb	r3, [r7, #23]
 800a07e:	e027      	b.n	800a0d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	0f1b      	lsrs	r3, r3, #28
 800a084:	2b09      	cmp	r3, #9
 800a086:	d80b      	bhi.n	800a0a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	0f1b      	lsrs	r3, r3, #28
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	4619      	mov	r1, r3
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	440b      	add	r3, r1
 800a098:	3230      	adds	r2, #48	@ 0x30
 800a09a:	b2d2      	uxtb	r2, r2
 800a09c:	701a      	strb	r2, [r3, #0]
 800a09e:	e00a      	b.n	800a0b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	0f1b      	lsrs	r3, r3, #28
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	440b      	add	r3, r1
 800a0b0:	3237      	adds	r2, #55	@ 0x37
 800a0b2:	b2d2      	uxtb	r2, r2
 800a0b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	011b      	lsls	r3, r3, #4
 800a0ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	75fb      	strb	r3, [r7, #23]
 800a0d0:	7dfa      	ldrb	r2, [r7, #23]
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d3d3      	bcc.n	800a080 <IntToUnicode+0x18>
  }
}
 800a0d8:	bf00      	nop
 800a0da:	bf00      	nop
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800a0f0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b085      	sub	sp, #20
 800a102:	af00      	add	r7, sp, #0
 800a104:	4603      	mov	r3, r0
 800a106:	60b9      	str	r1, [r7, #8]
 800a108:	607a      	str	r2, [r7, #4]
 800a10a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f04f 72a0 	mov.w	r2, #20971520	@ 0x1400000
 800a112:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a11a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800a11c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	4603      	mov	r3, r0
 800a132:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800a134:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a136:	4618      	mov	r0, r3
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	4603      	mov	r3, r0
 800a14a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800a14c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a14e:	4618      	mov	r0, r3
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800a15a:	b590      	push	{r4, r7, lr}
 800a15c:	b087      	sub	sp, #28
 800a15e:	af00      	add	r7, sp, #0
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	461a      	mov	r2, r3
 800a166:	4603      	mov	r3, r0
 800a168:	73fb      	strb	r3, [r7, #15]
 800a16a:	4613      	mov	r3, r2
 800a16c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

    //uint32_t r;

    for (int i = 0; i < STORAGE_BLK_SIZ / 4; ++i) {
 800a16e:	2300      	movs	r3, #0
 800a170:	617b      	str	r3, [r7, #20]
 800a172:	e012      	b.n	800a19a <STORAGE_Read_FS+0x40>
        //HAL_RNG_GenerateRandomNumber(&hrng, &r);
        //((uint32_t *)buf)[i] = r;
        ((uint32_t *)buf)[i] = (uint32_t)( ((random() & 0xffff) << 16) | ( random() & 0xffff) );
 800a174:	f000 fb94 	bl	800a8a0 <random>
 800a178:	4603      	mov	r3, r0
 800a17a:	041c      	lsls	r4, r3, #16
 800a17c:	f000 fb90 	bl	800a8a0 <random>
 800a180:	4603      	mov	r3, r0
 800a182:	b29b      	uxth	r3, r3
 800a184:	ea44 0103 	orr.w	r1, r4, r3
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	4413      	add	r3, r2
 800a190:	460a      	mov	r2, r1
 800a192:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STORAGE_BLK_SIZ / 4; ++i) {
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	3301      	adds	r3, #1
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a19e:	dde9      	ble.n	800a174 <STORAGE_Read_FS+0x1a>
    }

    return (USBD_OK);
 800a1a0:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	371c      	adds	r7, #28
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd90      	pop	{r4, r7, pc}

0800a1aa <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	b085      	sub	sp, #20
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73fb      	strb	r3, [r7, #15]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800a1be:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800a1d0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08a      	sub	sp, #40	@ 0x28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1e4:	f107 0314 	add.w	r3, r7, #20
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	605a      	str	r2, [r3, #4]
 800a1ee:	609a      	str	r2, [r3, #8]
 800a1f0:	60da      	str	r2, [r3, #12]
 800a1f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1fc:	d13a      	bne.n	800a274 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1fe:	2300      	movs	r3, #0
 800a200:	613b      	str	r3, [r7, #16]
 800a202:	4b1e      	ldr	r3, [pc, #120]	@ (800a27c <HAL_PCD_MspInit+0xa0>)
 800a204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a206:	4a1d      	ldr	r2, [pc, #116]	@ (800a27c <HAL_PCD_MspInit+0xa0>)
 800a208:	f043 0301 	orr.w	r3, r3, #1
 800a20c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a20e:	4b1b      	ldr	r3, [pc, #108]	@ (800a27c <HAL_PCD_MspInit+0xa0>)
 800a210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	613b      	str	r3, [r7, #16]
 800a218:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a21a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a21e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a220:	2302      	movs	r3, #2
 800a222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a224:	2300      	movs	r3, #0
 800a226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a228:	2303      	movs	r3, #3
 800a22a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a22c:	230a      	movs	r3, #10
 800a22e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a230:	f107 0314 	add.w	r3, r7, #20
 800a234:	4619      	mov	r1, r3
 800a236:	4812      	ldr	r0, [pc, #72]	@ (800a280 <HAL_PCD_MspInit+0xa4>)
 800a238:	f7f7 ff80 	bl	800213c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a23c:	4b0f      	ldr	r3, [pc, #60]	@ (800a27c <HAL_PCD_MspInit+0xa0>)
 800a23e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a240:	4a0e      	ldr	r2, [pc, #56]	@ (800a27c <HAL_PCD_MspInit+0xa0>)
 800a242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a246:	6353      	str	r3, [r2, #52]	@ 0x34
 800a248:	2300      	movs	r3, #0
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	4b0b      	ldr	r3, [pc, #44]	@ (800a27c <HAL_PCD_MspInit+0xa0>)
 800a24e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a250:	4a0a      	ldr	r2, [pc, #40]	@ (800a27c <HAL_PCD_MspInit+0xa0>)
 800a252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a256:	6453      	str	r3, [r2, #68]	@ 0x44
 800a258:	4b08      	ldr	r3, [pc, #32]	@ (800a27c <HAL_PCD_MspInit+0xa0>)
 800a25a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a25c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a264:	2200      	movs	r2, #0
 800a266:	2100      	movs	r1, #0
 800a268:	2043      	movs	r0, #67	@ 0x43
 800a26a:	f7f7 fbc0 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a26e:	2043      	movs	r0, #67	@ 0x43
 800a270:	f7f7 fbd9 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a274:	bf00      	nop
 800a276:	3728      	adds	r7, #40	@ 0x28
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	40023800 	.word	0x40023800
 800a280:	40020000 	.word	0x40020000

0800a284 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f7fe fbb2 	bl	8008a04 <USBD_LL_SetupStage>
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	440b      	add	r3, r1
 800a2c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	f7fe fbec 	bl	8008aae <USBD_LL_DataOutStage>
}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a2f0:	78fa      	ldrb	r2, [r7, #3]
 800a2f2:	6879      	ldr	r1, [r7, #4]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	4413      	add	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	440b      	add	r3, r1
 800a2fe:	3320      	adds	r3, #32
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	78fb      	ldrb	r3, [r7, #3]
 800a304:	4619      	mov	r1, r3
 800a306:	f7fe fc85 	bl	8008c14 <USBD_LL_DataInStage>
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe fdbf 	bl	8008ea4 <USBD_LL_SOF>
}
 800a326:	bf00      	nop
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b084      	sub	sp, #16
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a336:	2301      	movs	r3, #1
 800a338:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	79db      	ldrb	r3, [r3, #7]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d102      	bne.n	800a348 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
 800a346:	e008      	b.n	800a35a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	79db      	ldrb	r3, [r3, #7]
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d102      	bne.n	800a356 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a350:	2301      	movs	r3, #1
 800a352:	73fb      	strb	r3, [r7, #15]
 800a354:	e001      	b.n	800a35a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a356:	f7f6 fb7f 	bl	8000a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a360:	7bfa      	ldrb	r2, [r7, #15]
 800a362:	4611      	mov	r1, r2
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe fd59 	bl	8008e1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fd01 	bl	8008d78 <USBD_LL_Reset>
}
 800a376:	bf00      	nop
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe fd54 	bl	8008e3c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	6812      	ldr	r2, [r2, #0]
 800a3a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a3a6:	f043 0301 	orr.w	r3, r3, #1
 800a3aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	7adb      	ldrb	r3, [r3, #11]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d005      	beq.n	800a3c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3b4:	4b04      	ldr	r3, [pc, #16]	@ (800a3c8 <HAL_PCD_SuspendCallback+0x48>)
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	4a03      	ldr	r2, [pc, #12]	@ (800a3c8 <HAL_PCD_SuspendCallback+0x48>)
 800a3ba:	f043 0306 	orr.w	r3, r3, #6
 800a3be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	e000ed00 	.word	0xe000ed00

0800a3cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe fd4a 	bl	8008e74 <USBD_LL_Resume>
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3fa:	78fa      	ldrb	r2, [r7, #3]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe fda2 	bl	8008f48 <USBD_LL_IsoOUTIncomplete>
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a41e:	78fa      	ldrb	r2, [r7, #3]
 800a420:	4611      	mov	r1, r2
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe fd5e 	bl	8008ee4 <USBD_LL_IsoINIncomplete>
}
 800a428:	bf00      	nop
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe fdb4 	bl	8008fac <USBD_LL_DevConnected>
}
 800a444:	bf00      	nop
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fe fdb1 	bl	8008fc2 <USBD_LL_DevDisconnected>
}
 800a460:	bf00      	nop
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d13c      	bne.n	800a4f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a478:	4a20      	ldr	r2, [pc, #128]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a1e      	ldr	r2, [pc, #120]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a484:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a488:	4b1c      	ldr	r3, [pc, #112]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a48a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a48e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a490:	4b1a      	ldr	r3, [pc, #104]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a492:	2204      	movs	r2, #4
 800a494:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a496:	4b19      	ldr	r3, [pc, #100]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a498:	2202      	movs	r2, #2
 800a49a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a49c:	4b17      	ldr	r3, [pc, #92]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4a2:	4b16      	ldr	r3, [pc, #88]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a4a4:	2202      	movs	r2, #2
 800a4a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4a8:	4b14      	ldr	r3, [pc, #80]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a4ae:	4b13      	ldr	r3, [pc, #76]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a4b4:	4b11      	ldr	r3, [pc, #68]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a4ba:	4b10      	ldr	r3, [pc, #64]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a4c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a4c6:	480d      	ldr	r0, [pc, #52]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a4c8:	f7f7 ffd4 	bl	8002474 <HAL_PCD_Init>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a4d2:	f7f6 fac1 	bl	8000a58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a4d6:	2180      	movs	r1, #128	@ 0x80
 800a4d8:	4808      	ldr	r0, [pc, #32]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a4da:	f7f9 fa2e 	bl	800393a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a4de:	2240      	movs	r2, #64	@ 0x40
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	4806      	ldr	r0, [pc, #24]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a4e4:	f7f9 f9e2 	bl	80038ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a4e8:	2280      	movs	r2, #128	@ 0x80
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	4803      	ldr	r0, [pc, #12]	@ (800a4fc <USBD_LL_Init+0x94>)
 800a4ee:	f7f9 f9dd 	bl	80038ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	20000824 	.word	0x20000824

0800a500 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a516:	4618      	mov	r0, r3
 800a518:	f7f8 f8bb 	bl	8002692 <HAL_PCD_Start>
 800a51c:	4603      	mov	r3, r0
 800a51e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	4618      	mov	r0, r3
 800a524:	f000 f962 	bl	800a7ec <USBD_Get_USB_Status>
 800a528:	4603      	mov	r3, r0
 800a52a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a52c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	4608      	mov	r0, r1
 800a540:	4611      	mov	r1, r2
 800a542:	461a      	mov	r2, r3
 800a544:	4603      	mov	r3, r0
 800a546:	70fb      	strb	r3, [r7, #3]
 800a548:	460b      	mov	r3, r1
 800a54a:	70bb      	strb	r3, [r7, #2]
 800a54c:	4613      	mov	r3, r2
 800a54e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a55e:	78bb      	ldrb	r3, [r7, #2]
 800a560:	883a      	ldrh	r2, [r7, #0]
 800a562:	78f9      	ldrb	r1, [r7, #3]
 800a564:	f7f8 fd8f 	bl	8003086 <HAL_PCD_EP_Open>
 800a568:	4603      	mov	r3, r0
 800a56a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 f93c 	bl	800a7ec <USBD_Get_USB_Status>
 800a574:	4603      	mov	r3, r0
 800a576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a578:	7bbb      	ldrb	r3, [r7, #14]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	460b      	mov	r3, r1
 800a58c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a59c:	78fa      	ldrb	r2, [r7, #3]
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7f8 fdda 	bl	800315a <HAL_PCD_EP_Close>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 f91d 	bl	800a7ec <USBD_Get_USB_Status>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5da:	78fa      	ldrb	r2, [r7, #3]
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7f8 ff7c 	bl	80034dc <HAL_PCD_EP_Flush>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 f8fe 	bl	800a7ec <USBD_Get_USB_Status>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b084      	sub	sp, #16
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a618:	78fa      	ldrb	r2, [r7, #3]
 800a61a:	4611      	mov	r1, r2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7f8 fe73 	bl	8003308 <HAL_PCD_EP_SetStall>
 800a622:	4603      	mov	r3, r0
 800a624:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a626:	7bfb      	ldrb	r3, [r7, #15]
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 f8df 	bl	800a7ec <USBD_Get_USB_Status>
 800a62e:	4603      	mov	r3, r0
 800a630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a632:	7bbb      	ldrb	r3, [r7, #14]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a656:	78fa      	ldrb	r2, [r7, #3]
 800a658:	4611      	mov	r1, r2
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7f8 feb7 	bl	80033ce <HAL_PCD_EP_ClrStall>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	4618      	mov	r0, r3
 800a668:	f000 f8c0 	bl	800a7ec <USBD_Get_USB_Status>
 800a66c:	4603      	mov	r3, r0
 800a66e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a670:	7bbb      	ldrb	r3, [r7, #14]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b085      	sub	sp, #20
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	460b      	mov	r3, r1
 800a684:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a68c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a68e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a692:	2b00      	cmp	r3, #0
 800a694:	da0b      	bge.n	800a6ae <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a696:	78fb      	ldrb	r3, [r7, #3]
 800a698:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a69c:	68f9      	ldr	r1, [r7, #12]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	00db      	lsls	r3, r3, #3
 800a6a2:	4413      	add	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	3316      	adds	r3, #22
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	e00b      	b.n	800a6c6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6b4:	68f9      	ldr	r1, [r7, #12]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	00db      	lsls	r3, r3, #3
 800a6ba:	4413      	add	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	440b      	add	r3, r1
 800a6c0:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a6c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6ec:	78fa      	ldrb	r2, [r7, #3]
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7f8 fca4 	bl	800303e <HAL_PCD_SetAddress>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 f875 	bl	800a7ec <USBD_Get_USB_Status>
 800a702:	4603      	mov	r3, r0
 800a704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a706:	7bbb      	ldrb	r3, [r7, #14]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	607a      	str	r2, [r7, #4]
 800a71a:	603b      	str	r3, [r7, #0]
 800a71c:	460b      	mov	r3, r1
 800a71e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a72e:	7af9      	ldrb	r1, [r7, #11]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	f7f8 fdae 	bl	8003294 <HAL_PCD_EP_Transmit>
 800a738:	4603      	mov	r3, r0
 800a73a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f854 	bl	800a7ec <USBD_Get_USB_Status>
 800a744:	4603      	mov	r3, r0
 800a746:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a748:	7dbb      	ldrb	r3, [r7, #22]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3718      	adds	r7, #24
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b086      	sub	sp, #24
 800a756:	af00      	add	r7, sp, #0
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
 800a75e:	460b      	mov	r3, r1
 800a760:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a770:	7af9      	ldrb	r1, [r7, #11]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	f7f8 fd3a 	bl	80031ee <HAL_PCD_EP_Receive>
 800a77a:	4603      	mov	r3, r0
 800a77c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
 800a780:	4618      	mov	r0, r3
 800a782:	f000 f833 	bl	800a7ec <USBD_Get_USB_Status>
 800a786:	4603      	mov	r3, r0
 800a788:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a78a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7a6:	78fa      	ldrb	r2, [r7, #3]
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7f8 fd5a 	bl	8003264 <HAL_PCD_EP_GetRxCount>
 800a7b0:	4603      	mov	r3, r0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7c4:	4b03      	ldr	r3, [pc, #12]	@ (800a7d4 <USBD_static_malloc+0x18>)
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	20000d08 	.word	0x20000d08

0800a7d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]

}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	2b03      	cmp	r3, #3
 800a7fe:	d817      	bhi.n	800a830 <USBD_Get_USB_Status+0x44>
 800a800:	a201      	add	r2, pc, #4	@ (adr r2, 800a808 <USBD_Get_USB_Status+0x1c>)
 800a802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a806:	bf00      	nop
 800a808:	0800a819 	.word	0x0800a819
 800a80c:	0800a81f 	.word	0x0800a81f
 800a810:	0800a825 	.word	0x0800a825
 800a814:	0800a82b 	.word	0x0800a82b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	73fb      	strb	r3, [r7, #15]
    break;
 800a81c:	e00b      	b.n	800a836 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a81e:	2303      	movs	r3, #3
 800a820:	73fb      	strb	r3, [r7, #15]
    break;
 800a822:	e008      	b.n	800a836 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a824:	2301      	movs	r3, #1
 800a826:	73fb      	strb	r3, [r7, #15]
    break;
 800a828:	e005      	b.n	800a836 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a82a:	2303      	movs	r3, #3
 800a82c:	73fb      	strb	r3, [r7, #15]
    break;
 800a82e:	e002      	b.n	800a836 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a830:	2303      	movs	r3, #3
 800a832:	73fb      	strb	r3, [r7, #15]
    break;
 800a834:	bf00      	nop
  }
  return usb_status;
 800a836:	7bfb      	ldrb	r3, [r7, #15]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <srandom>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4b10      	ldr	r3, [pc, #64]	@ (800a888 <srandom+0x44>)
 800a848:	681d      	ldr	r5, [r3, #0]
 800a84a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a84c:	4604      	mov	r4, r0
 800a84e:	b9b3      	cbnz	r3, 800a87e <srandom+0x3a>
 800a850:	2018      	movs	r0, #24
 800a852:	f000 fb51 	bl	800aef8 <malloc>
 800a856:	4602      	mov	r2, r0
 800a858:	6328      	str	r0, [r5, #48]	@ 0x30
 800a85a:	b920      	cbnz	r0, 800a866 <srandom+0x22>
 800a85c:	4b0b      	ldr	r3, [pc, #44]	@ (800a88c <srandom+0x48>)
 800a85e:	480c      	ldr	r0, [pc, #48]	@ (800a890 <srandom+0x4c>)
 800a860:	2140      	movs	r1, #64	@ 0x40
 800a862:	f000 fae1 	bl	800ae28 <__assert_func>
 800a866:	490b      	ldr	r1, [pc, #44]	@ (800a894 <srandom+0x50>)
 800a868:	4b0b      	ldr	r3, [pc, #44]	@ (800a898 <srandom+0x54>)
 800a86a:	e9c0 1300 	strd	r1, r3, [r0]
 800a86e:	4b0b      	ldr	r3, [pc, #44]	@ (800a89c <srandom+0x58>)
 800a870:	6083      	str	r3, [r0, #8]
 800a872:	230b      	movs	r3, #11
 800a874:	8183      	strh	r3, [r0, #12]
 800a876:	2100      	movs	r1, #0
 800a878:	2001      	movs	r0, #1
 800a87a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a87e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a880:	2200      	movs	r2, #0
 800a882:	611c      	str	r4, [r3, #16]
 800a884:	615a      	str	r2, [r3, #20]
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	20000108 	.word	0x20000108
 800a88c:	0800ba30 	.word	0x0800ba30
 800a890:	0800ba47 	.word	0x0800ba47
 800a894:	abcd330e 	.word	0xabcd330e
 800a898:	e66d1234 	.word	0xe66d1234
 800a89c:	0005deec 	.word	0x0005deec

0800a8a0 <random>:
 800a8a0:	4b16      	ldr	r3, [pc, #88]	@ (800a8fc <random+0x5c>)
 800a8a2:	b510      	push	{r4, lr}
 800a8a4:	681c      	ldr	r4, [r3, #0]
 800a8a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a8a8:	b9b3      	cbnz	r3, 800a8d8 <random+0x38>
 800a8aa:	2018      	movs	r0, #24
 800a8ac:	f000 fb24 	bl	800aef8 <malloc>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	6320      	str	r0, [r4, #48]	@ 0x30
 800a8b4:	b920      	cbnz	r0, 800a8c0 <random+0x20>
 800a8b6:	4b12      	ldr	r3, [pc, #72]	@ (800a900 <random+0x60>)
 800a8b8:	4812      	ldr	r0, [pc, #72]	@ (800a904 <random+0x64>)
 800a8ba:	214c      	movs	r1, #76	@ 0x4c
 800a8bc:	f000 fab4 	bl	800ae28 <__assert_func>
 800a8c0:	4911      	ldr	r1, [pc, #68]	@ (800a908 <random+0x68>)
 800a8c2:	4b12      	ldr	r3, [pc, #72]	@ (800a90c <random+0x6c>)
 800a8c4:	e9c0 1300 	strd	r1, r3, [r0]
 800a8c8:	4b11      	ldr	r3, [pc, #68]	@ (800a910 <random+0x70>)
 800a8ca:	6083      	str	r3, [r0, #8]
 800a8cc:	230b      	movs	r3, #11
 800a8ce:	8183      	strh	r3, [r0, #12]
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a8d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a8da:	480e      	ldr	r0, [pc, #56]	@ (800a914 <random+0x74>)
 800a8dc:	690b      	ldr	r3, [r1, #16]
 800a8de:	694c      	ldr	r4, [r1, #20]
 800a8e0:	4a0d      	ldr	r2, [pc, #52]	@ (800a918 <random+0x78>)
 800a8e2:	4358      	muls	r0, r3
 800a8e4:	fb02 0004 	mla	r0, r2, r4, r0
 800a8e8:	fba3 3202 	umull	r3, r2, r3, r2
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	eb40 0002 	adc.w	r0, r0, r2
 800a8f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a8f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a8fa:	bd10      	pop	{r4, pc}
 800a8fc:	20000108 	.word	0x20000108
 800a900:	0800ba30 	.word	0x0800ba30
 800a904:	0800ba47 	.word	0x0800ba47
 800a908:	abcd330e 	.word	0xabcd330e
 800a90c:	e66d1234 	.word	0xe66d1234
 800a910:	0005deec 	.word	0x0005deec
 800a914:	5851f42d 	.word	0x5851f42d
 800a918:	4c957f2d 	.word	0x4c957f2d

0800a91c <std>:
 800a91c:	2300      	movs	r3, #0
 800a91e:	b510      	push	{r4, lr}
 800a920:	4604      	mov	r4, r0
 800a922:	e9c0 3300 	strd	r3, r3, [r0]
 800a926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a92a:	6083      	str	r3, [r0, #8]
 800a92c:	8181      	strh	r1, [r0, #12]
 800a92e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a930:	81c2      	strh	r2, [r0, #14]
 800a932:	6183      	str	r3, [r0, #24]
 800a934:	4619      	mov	r1, r3
 800a936:	2208      	movs	r2, #8
 800a938:	305c      	adds	r0, #92	@ 0x5c
 800a93a:	f000 f9f9 	bl	800ad30 <memset>
 800a93e:	4b0d      	ldr	r3, [pc, #52]	@ (800a974 <std+0x58>)
 800a940:	6263      	str	r3, [r4, #36]	@ 0x24
 800a942:	4b0d      	ldr	r3, [pc, #52]	@ (800a978 <std+0x5c>)
 800a944:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a946:	4b0d      	ldr	r3, [pc, #52]	@ (800a97c <std+0x60>)
 800a948:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a94a:	4b0d      	ldr	r3, [pc, #52]	@ (800a980 <std+0x64>)
 800a94c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a94e:	4b0d      	ldr	r3, [pc, #52]	@ (800a984 <std+0x68>)
 800a950:	6224      	str	r4, [r4, #32]
 800a952:	429c      	cmp	r4, r3
 800a954:	d006      	beq.n	800a964 <std+0x48>
 800a956:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a95a:	4294      	cmp	r4, r2
 800a95c:	d002      	beq.n	800a964 <std+0x48>
 800a95e:	33d0      	adds	r3, #208	@ 0xd0
 800a960:	429c      	cmp	r4, r3
 800a962:	d105      	bne.n	800a970 <std+0x54>
 800a964:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a96c:	f000 ba58 	b.w	800ae20 <__retarget_lock_init_recursive>
 800a970:	bd10      	pop	{r4, pc}
 800a972:	bf00      	nop
 800a974:	0800ab81 	.word	0x0800ab81
 800a978:	0800aba3 	.word	0x0800aba3
 800a97c:	0800abdb 	.word	0x0800abdb
 800a980:	0800abff 	.word	0x0800abff
 800a984:	20000f80 	.word	0x20000f80

0800a988 <stdio_exit_handler>:
 800a988:	4a02      	ldr	r2, [pc, #8]	@ (800a994 <stdio_exit_handler+0xc>)
 800a98a:	4903      	ldr	r1, [pc, #12]	@ (800a998 <stdio_exit_handler+0x10>)
 800a98c:	4803      	ldr	r0, [pc, #12]	@ (800a99c <stdio_exit_handler+0x14>)
 800a98e:	f000 b869 	b.w	800aa64 <_fwalk_sglue>
 800a992:	bf00      	nop
 800a994:	200000fc 	.word	0x200000fc
 800a998:	0800b70d 	.word	0x0800b70d
 800a99c:	2000010c 	.word	0x2000010c

0800a9a0 <cleanup_stdio>:
 800a9a0:	6841      	ldr	r1, [r0, #4]
 800a9a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d4 <cleanup_stdio+0x34>)
 800a9a4:	4299      	cmp	r1, r3
 800a9a6:	b510      	push	{r4, lr}
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	d001      	beq.n	800a9b0 <cleanup_stdio+0x10>
 800a9ac:	f000 feae 	bl	800b70c <_fflush_r>
 800a9b0:	68a1      	ldr	r1, [r4, #8]
 800a9b2:	4b09      	ldr	r3, [pc, #36]	@ (800a9d8 <cleanup_stdio+0x38>)
 800a9b4:	4299      	cmp	r1, r3
 800a9b6:	d002      	beq.n	800a9be <cleanup_stdio+0x1e>
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fea7 	bl	800b70c <_fflush_r>
 800a9be:	68e1      	ldr	r1, [r4, #12]
 800a9c0:	4b06      	ldr	r3, [pc, #24]	@ (800a9dc <cleanup_stdio+0x3c>)
 800a9c2:	4299      	cmp	r1, r3
 800a9c4:	d004      	beq.n	800a9d0 <cleanup_stdio+0x30>
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9cc:	f000 be9e 	b.w	800b70c <_fflush_r>
 800a9d0:	bd10      	pop	{r4, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000f80 	.word	0x20000f80
 800a9d8:	20000fe8 	.word	0x20000fe8
 800a9dc:	20001050 	.word	0x20001050

0800a9e0 <global_stdio_init.part.0>:
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	4b0b      	ldr	r3, [pc, #44]	@ (800aa10 <global_stdio_init.part.0+0x30>)
 800a9e4:	4c0b      	ldr	r4, [pc, #44]	@ (800aa14 <global_stdio_init.part.0+0x34>)
 800a9e6:	4a0c      	ldr	r2, [pc, #48]	@ (800aa18 <global_stdio_init.part.0+0x38>)
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	2104      	movs	r1, #4
 800a9f0:	f7ff ff94 	bl	800a91c <std>
 800a9f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	2109      	movs	r1, #9
 800a9fc:	f7ff ff8e 	bl	800a91c <std>
 800aa00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa04:	2202      	movs	r2, #2
 800aa06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa0a:	2112      	movs	r1, #18
 800aa0c:	f7ff bf86 	b.w	800a91c <std>
 800aa10:	200010b8 	.word	0x200010b8
 800aa14:	20000f80 	.word	0x20000f80
 800aa18:	0800a989 	.word	0x0800a989

0800aa1c <__sfp_lock_acquire>:
 800aa1c:	4801      	ldr	r0, [pc, #4]	@ (800aa24 <__sfp_lock_acquire+0x8>)
 800aa1e:	f000 ba00 	b.w	800ae22 <__retarget_lock_acquire_recursive>
 800aa22:	bf00      	nop
 800aa24:	200010c1 	.word	0x200010c1

0800aa28 <__sfp_lock_release>:
 800aa28:	4801      	ldr	r0, [pc, #4]	@ (800aa30 <__sfp_lock_release+0x8>)
 800aa2a:	f000 b9fb 	b.w	800ae24 <__retarget_lock_release_recursive>
 800aa2e:	bf00      	nop
 800aa30:	200010c1 	.word	0x200010c1

0800aa34 <__sinit>:
 800aa34:	b510      	push	{r4, lr}
 800aa36:	4604      	mov	r4, r0
 800aa38:	f7ff fff0 	bl	800aa1c <__sfp_lock_acquire>
 800aa3c:	6a23      	ldr	r3, [r4, #32]
 800aa3e:	b11b      	cbz	r3, 800aa48 <__sinit+0x14>
 800aa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa44:	f7ff bff0 	b.w	800aa28 <__sfp_lock_release>
 800aa48:	4b04      	ldr	r3, [pc, #16]	@ (800aa5c <__sinit+0x28>)
 800aa4a:	6223      	str	r3, [r4, #32]
 800aa4c:	4b04      	ldr	r3, [pc, #16]	@ (800aa60 <__sinit+0x2c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1f5      	bne.n	800aa40 <__sinit+0xc>
 800aa54:	f7ff ffc4 	bl	800a9e0 <global_stdio_init.part.0>
 800aa58:	e7f2      	b.n	800aa40 <__sinit+0xc>
 800aa5a:	bf00      	nop
 800aa5c:	0800a9a1 	.word	0x0800a9a1
 800aa60:	200010b8 	.word	0x200010b8

0800aa64 <_fwalk_sglue>:
 800aa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa68:	4607      	mov	r7, r0
 800aa6a:	4688      	mov	r8, r1
 800aa6c:	4614      	mov	r4, r2
 800aa6e:	2600      	movs	r6, #0
 800aa70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa74:	f1b9 0901 	subs.w	r9, r9, #1
 800aa78:	d505      	bpl.n	800aa86 <_fwalk_sglue+0x22>
 800aa7a:	6824      	ldr	r4, [r4, #0]
 800aa7c:	2c00      	cmp	r4, #0
 800aa7e:	d1f7      	bne.n	800aa70 <_fwalk_sglue+0xc>
 800aa80:	4630      	mov	r0, r6
 800aa82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa86:	89ab      	ldrh	r3, [r5, #12]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d907      	bls.n	800aa9c <_fwalk_sglue+0x38>
 800aa8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa90:	3301      	adds	r3, #1
 800aa92:	d003      	beq.n	800aa9c <_fwalk_sglue+0x38>
 800aa94:	4629      	mov	r1, r5
 800aa96:	4638      	mov	r0, r7
 800aa98:	47c0      	blx	r8
 800aa9a:	4306      	orrs	r6, r0
 800aa9c:	3568      	adds	r5, #104	@ 0x68
 800aa9e:	e7e9      	b.n	800aa74 <_fwalk_sglue+0x10>

0800aaa0 <iprintf>:
 800aaa0:	b40f      	push	{r0, r1, r2, r3}
 800aaa2:	b507      	push	{r0, r1, r2, lr}
 800aaa4:	4906      	ldr	r1, [pc, #24]	@ (800aac0 <iprintf+0x20>)
 800aaa6:	ab04      	add	r3, sp, #16
 800aaa8:	6808      	ldr	r0, [r1, #0]
 800aaaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaae:	6881      	ldr	r1, [r0, #8]
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	f000 fb01 	bl	800b0b8 <_vfiprintf_r>
 800aab6:	b003      	add	sp, #12
 800aab8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aabc:	b004      	add	sp, #16
 800aabe:	4770      	bx	lr
 800aac0:	20000108 	.word	0x20000108

0800aac4 <_puts_r>:
 800aac4:	6a03      	ldr	r3, [r0, #32]
 800aac6:	b570      	push	{r4, r5, r6, lr}
 800aac8:	6884      	ldr	r4, [r0, #8]
 800aaca:	4605      	mov	r5, r0
 800aacc:	460e      	mov	r6, r1
 800aace:	b90b      	cbnz	r3, 800aad4 <_puts_r+0x10>
 800aad0:	f7ff ffb0 	bl	800aa34 <__sinit>
 800aad4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aad6:	07db      	lsls	r3, r3, #31
 800aad8:	d405      	bmi.n	800aae6 <_puts_r+0x22>
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	0598      	lsls	r0, r3, #22
 800aade:	d402      	bmi.n	800aae6 <_puts_r+0x22>
 800aae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aae2:	f000 f99e 	bl	800ae22 <__retarget_lock_acquire_recursive>
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	0719      	lsls	r1, r3, #28
 800aaea:	d502      	bpl.n	800aaf2 <_puts_r+0x2e>
 800aaec:	6923      	ldr	r3, [r4, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d135      	bne.n	800ab5e <_puts_r+0x9a>
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f000 f8c5 	bl	800ac84 <__swsetup_r>
 800aafa:	b380      	cbz	r0, 800ab5e <_puts_r+0x9a>
 800aafc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ab00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab02:	07da      	lsls	r2, r3, #31
 800ab04:	d405      	bmi.n	800ab12 <_puts_r+0x4e>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	059b      	lsls	r3, r3, #22
 800ab0a:	d402      	bmi.n	800ab12 <_puts_r+0x4e>
 800ab0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab0e:	f000 f989 	bl	800ae24 <__retarget_lock_release_recursive>
 800ab12:	4628      	mov	r0, r5
 800ab14:	bd70      	pop	{r4, r5, r6, pc}
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	da04      	bge.n	800ab24 <_puts_r+0x60>
 800ab1a:	69a2      	ldr	r2, [r4, #24]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	dc17      	bgt.n	800ab50 <_puts_r+0x8c>
 800ab20:	290a      	cmp	r1, #10
 800ab22:	d015      	beq.n	800ab50 <_puts_r+0x8c>
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	6022      	str	r2, [r4, #0]
 800ab2a:	7019      	strb	r1, [r3, #0]
 800ab2c:	68a3      	ldr	r3, [r4, #8]
 800ab2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ab32:	3b01      	subs	r3, #1
 800ab34:	60a3      	str	r3, [r4, #8]
 800ab36:	2900      	cmp	r1, #0
 800ab38:	d1ed      	bne.n	800ab16 <_puts_r+0x52>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	da11      	bge.n	800ab62 <_puts_r+0x9e>
 800ab3e:	4622      	mov	r2, r4
 800ab40:	210a      	movs	r1, #10
 800ab42:	4628      	mov	r0, r5
 800ab44:	f000 f85f 	bl	800ac06 <__swbuf_r>
 800ab48:	3001      	adds	r0, #1
 800ab4a:	d0d7      	beq.n	800aafc <_puts_r+0x38>
 800ab4c:	250a      	movs	r5, #10
 800ab4e:	e7d7      	b.n	800ab00 <_puts_r+0x3c>
 800ab50:	4622      	mov	r2, r4
 800ab52:	4628      	mov	r0, r5
 800ab54:	f000 f857 	bl	800ac06 <__swbuf_r>
 800ab58:	3001      	adds	r0, #1
 800ab5a:	d1e7      	bne.n	800ab2c <_puts_r+0x68>
 800ab5c:	e7ce      	b.n	800aafc <_puts_r+0x38>
 800ab5e:	3e01      	subs	r6, #1
 800ab60:	e7e4      	b.n	800ab2c <_puts_r+0x68>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	1c5a      	adds	r2, r3, #1
 800ab66:	6022      	str	r2, [r4, #0]
 800ab68:	220a      	movs	r2, #10
 800ab6a:	701a      	strb	r2, [r3, #0]
 800ab6c:	e7ee      	b.n	800ab4c <_puts_r+0x88>
	...

0800ab70 <puts>:
 800ab70:	4b02      	ldr	r3, [pc, #8]	@ (800ab7c <puts+0xc>)
 800ab72:	4601      	mov	r1, r0
 800ab74:	6818      	ldr	r0, [r3, #0]
 800ab76:	f7ff bfa5 	b.w	800aac4 <_puts_r>
 800ab7a:	bf00      	nop
 800ab7c:	20000108 	.word	0x20000108

0800ab80 <__sread>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	460c      	mov	r4, r1
 800ab84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab88:	f000 f8fc 	bl	800ad84 <_read_r>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	bfab      	itete	ge
 800ab90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab92:	89a3      	ldrhlt	r3, [r4, #12]
 800ab94:	181b      	addge	r3, r3, r0
 800ab96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab9a:	bfac      	ite	ge
 800ab9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab9e:	81a3      	strhlt	r3, [r4, #12]
 800aba0:	bd10      	pop	{r4, pc}

0800aba2 <__swrite>:
 800aba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba6:	461f      	mov	r7, r3
 800aba8:	898b      	ldrh	r3, [r1, #12]
 800abaa:	05db      	lsls	r3, r3, #23
 800abac:	4605      	mov	r5, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	4616      	mov	r6, r2
 800abb2:	d505      	bpl.n	800abc0 <__swrite+0x1e>
 800abb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb8:	2302      	movs	r3, #2
 800abba:	2200      	movs	r2, #0
 800abbc:	f000 f8d0 	bl	800ad60 <_lseek_r>
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abca:	81a3      	strh	r3, [r4, #12]
 800abcc:	4632      	mov	r2, r6
 800abce:	463b      	mov	r3, r7
 800abd0:	4628      	mov	r0, r5
 800abd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abd6:	f000 b8e7 	b.w	800ada8 <_write_r>

0800abda <__sseek>:
 800abda:	b510      	push	{r4, lr}
 800abdc:	460c      	mov	r4, r1
 800abde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe2:	f000 f8bd 	bl	800ad60 <_lseek_r>
 800abe6:	1c43      	adds	r3, r0, #1
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	bf15      	itete	ne
 800abec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abf6:	81a3      	strheq	r3, [r4, #12]
 800abf8:	bf18      	it	ne
 800abfa:	81a3      	strhne	r3, [r4, #12]
 800abfc:	bd10      	pop	{r4, pc}

0800abfe <__sclose>:
 800abfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac02:	f000 b89d 	b.w	800ad40 <_close_r>

0800ac06 <__swbuf_r>:
 800ac06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac08:	460e      	mov	r6, r1
 800ac0a:	4614      	mov	r4, r2
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	b118      	cbz	r0, 800ac18 <__swbuf_r+0x12>
 800ac10:	6a03      	ldr	r3, [r0, #32]
 800ac12:	b90b      	cbnz	r3, 800ac18 <__swbuf_r+0x12>
 800ac14:	f7ff ff0e 	bl	800aa34 <__sinit>
 800ac18:	69a3      	ldr	r3, [r4, #24]
 800ac1a:	60a3      	str	r3, [r4, #8]
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	071a      	lsls	r2, r3, #28
 800ac20:	d501      	bpl.n	800ac26 <__swbuf_r+0x20>
 800ac22:	6923      	ldr	r3, [r4, #16]
 800ac24:	b943      	cbnz	r3, 800ac38 <__swbuf_r+0x32>
 800ac26:	4621      	mov	r1, r4
 800ac28:	4628      	mov	r0, r5
 800ac2a:	f000 f82b 	bl	800ac84 <__swsetup_r>
 800ac2e:	b118      	cbz	r0, 800ac38 <__swbuf_r+0x32>
 800ac30:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ac34:	4638      	mov	r0, r7
 800ac36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	6922      	ldr	r2, [r4, #16]
 800ac3c:	1a98      	subs	r0, r3, r2
 800ac3e:	6963      	ldr	r3, [r4, #20]
 800ac40:	b2f6      	uxtb	r6, r6
 800ac42:	4283      	cmp	r3, r0
 800ac44:	4637      	mov	r7, r6
 800ac46:	dc05      	bgt.n	800ac54 <__swbuf_r+0x4e>
 800ac48:	4621      	mov	r1, r4
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f000 fd5e 	bl	800b70c <_fflush_r>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d1ed      	bne.n	800ac30 <__swbuf_r+0x2a>
 800ac54:	68a3      	ldr	r3, [r4, #8]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	60a3      	str	r3, [r4, #8]
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	6022      	str	r2, [r4, #0]
 800ac60:	701e      	strb	r6, [r3, #0]
 800ac62:	6962      	ldr	r2, [r4, #20]
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d004      	beq.n	800ac74 <__swbuf_r+0x6e>
 800ac6a:	89a3      	ldrh	r3, [r4, #12]
 800ac6c:	07db      	lsls	r3, r3, #31
 800ac6e:	d5e1      	bpl.n	800ac34 <__swbuf_r+0x2e>
 800ac70:	2e0a      	cmp	r6, #10
 800ac72:	d1df      	bne.n	800ac34 <__swbuf_r+0x2e>
 800ac74:	4621      	mov	r1, r4
 800ac76:	4628      	mov	r0, r5
 800ac78:	f000 fd48 	bl	800b70c <_fflush_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d0d9      	beq.n	800ac34 <__swbuf_r+0x2e>
 800ac80:	e7d6      	b.n	800ac30 <__swbuf_r+0x2a>
	...

0800ac84 <__swsetup_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4b29      	ldr	r3, [pc, #164]	@ (800ad2c <__swsetup_r+0xa8>)
 800ac88:	4605      	mov	r5, r0
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	b118      	cbz	r0, 800ac98 <__swsetup_r+0x14>
 800ac90:	6a03      	ldr	r3, [r0, #32]
 800ac92:	b90b      	cbnz	r3, 800ac98 <__swsetup_r+0x14>
 800ac94:	f7ff fece 	bl	800aa34 <__sinit>
 800ac98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac9c:	0719      	lsls	r1, r3, #28
 800ac9e:	d422      	bmi.n	800ace6 <__swsetup_r+0x62>
 800aca0:	06da      	lsls	r2, r3, #27
 800aca2:	d407      	bmi.n	800acb4 <__swsetup_r+0x30>
 800aca4:	2209      	movs	r2, #9
 800aca6:	602a      	str	r2, [r5, #0]
 800aca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acac:	81a3      	strh	r3, [r4, #12]
 800acae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acb2:	e033      	b.n	800ad1c <__swsetup_r+0x98>
 800acb4:	0758      	lsls	r0, r3, #29
 800acb6:	d512      	bpl.n	800acde <__swsetup_r+0x5a>
 800acb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acba:	b141      	cbz	r1, 800acce <__swsetup_r+0x4a>
 800acbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acc0:	4299      	cmp	r1, r3
 800acc2:	d002      	beq.n	800acca <__swsetup_r+0x46>
 800acc4:	4628      	mov	r0, r5
 800acc6:	f000 f8cd 	bl	800ae64 <_free_r>
 800acca:	2300      	movs	r3, #0
 800accc:	6363      	str	r3, [r4, #52]	@ 0x34
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800acd4:	81a3      	strh	r3, [r4, #12]
 800acd6:	2300      	movs	r3, #0
 800acd8:	6063      	str	r3, [r4, #4]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f043 0308 	orr.w	r3, r3, #8
 800ace4:	81a3      	strh	r3, [r4, #12]
 800ace6:	6923      	ldr	r3, [r4, #16]
 800ace8:	b94b      	cbnz	r3, 800acfe <__swsetup_r+0x7a>
 800acea:	89a3      	ldrh	r3, [r4, #12]
 800acec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800acf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acf4:	d003      	beq.n	800acfe <__swsetup_r+0x7a>
 800acf6:	4621      	mov	r1, r4
 800acf8:	4628      	mov	r0, r5
 800acfa:	f000 fd67 	bl	800b7cc <__smakebuf_r>
 800acfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad02:	f013 0201 	ands.w	r2, r3, #1
 800ad06:	d00a      	beq.n	800ad1e <__swsetup_r+0x9a>
 800ad08:	2200      	movs	r2, #0
 800ad0a:	60a2      	str	r2, [r4, #8]
 800ad0c:	6962      	ldr	r2, [r4, #20]
 800ad0e:	4252      	negs	r2, r2
 800ad10:	61a2      	str	r2, [r4, #24]
 800ad12:	6922      	ldr	r2, [r4, #16]
 800ad14:	b942      	cbnz	r2, 800ad28 <__swsetup_r+0xa4>
 800ad16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad1a:	d1c5      	bne.n	800aca8 <__swsetup_r+0x24>
 800ad1c:	bd38      	pop	{r3, r4, r5, pc}
 800ad1e:	0799      	lsls	r1, r3, #30
 800ad20:	bf58      	it	pl
 800ad22:	6962      	ldrpl	r2, [r4, #20]
 800ad24:	60a2      	str	r2, [r4, #8]
 800ad26:	e7f4      	b.n	800ad12 <__swsetup_r+0x8e>
 800ad28:	2000      	movs	r0, #0
 800ad2a:	e7f7      	b.n	800ad1c <__swsetup_r+0x98>
 800ad2c:	20000108 	.word	0x20000108

0800ad30 <memset>:
 800ad30:	4402      	add	r2, r0
 800ad32:	4603      	mov	r3, r0
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d100      	bne.n	800ad3a <memset+0xa>
 800ad38:	4770      	bx	lr
 800ad3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad3e:	e7f9      	b.n	800ad34 <memset+0x4>

0800ad40 <_close_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d06      	ldr	r5, [pc, #24]	@ (800ad5c <_close_r+0x1c>)
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	f7f6 f83a 	bl	8000dc4 <_close>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_close_r+0x1a>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_close_r+0x1a>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	200010bc 	.word	0x200010bc

0800ad60 <_lseek_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d07      	ldr	r5, [pc, #28]	@ (800ad80 <_lseek_r+0x20>)
 800ad64:	4604      	mov	r4, r0
 800ad66:	4608      	mov	r0, r1
 800ad68:	4611      	mov	r1, r2
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	602a      	str	r2, [r5, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f7f6 f84f 	bl	8000e12 <_lseek>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_lseek_r+0x1e>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_lseek_r+0x1e>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	200010bc 	.word	0x200010bc

0800ad84 <_read_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d07      	ldr	r5, [pc, #28]	@ (800ada4 <_read_r+0x20>)
 800ad88:	4604      	mov	r4, r0
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	2200      	movs	r2, #0
 800ad90:	602a      	str	r2, [r5, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	f7f5 fff9 	bl	8000d8a <_read>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_read_r+0x1e>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_read_r+0x1e>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	200010bc 	.word	0x200010bc

0800ada8 <_write_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	@ (800adc8 <_write_r+0x20>)
 800adac:	4604      	mov	r4, r0
 800adae:	4608      	mov	r0, r1
 800adb0:	4611      	mov	r1, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	602a      	str	r2, [r5, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f7f5 fbd2 	bl	8000560 <_write>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_write_r+0x1e>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_write_r+0x1e>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	200010bc 	.word	0x200010bc

0800adcc <__errno>:
 800adcc:	4b01      	ldr	r3, [pc, #4]	@ (800add4 <__errno+0x8>)
 800adce:	6818      	ldr	r0, [r3, #0]
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	20000108 	.word	0x20000108

0800add8 <__libc_init_array>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	4d0d      	ldr	r5, [pc, #52]	@ (800ae10 <__libc_init_array+0x38>)
 800addc:	4c0d      	ldr	r4, [pc, #52]	@ (800ae14 <__libc_init_array+0x3c>)
 800adde:	1b64      	subs	r4, r4, r5
 800ade0:	10a4      	asrs	r4, r4, #2
 800ade2:	2600      	movs	r6, #0
 800ade4:	42a6      	cmp	r6, r4
 800ade6:	d109      	bne.n	800adfc <__libc_init_array+0x24>
 800ade8:	4d0b      	ldr	r5, [pc, #44]	@ (800ae18 <__libc_init_array+0x40>)
 800adea:	4c0c      	ldr	r4, [pc, #48]	@ (800ae1c <__libc_init_array+0x44>)
 800adec:	f000 fda8 	bl	800b940 <_init>
 800adf0:	1b64      	subs	r4, r4, r5
 800adf2:	10a4      	asrs	r4, r4, #2
 800adf4:	2600      	movs	r6, #0
 800adf6:	42a6      	cmp	r6, r4
 800adf8:	d105      	bne.n	800ae06 <__libc_init_array+0x2e>
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae00:	4798      	blx	r3
 800ae02:	3601      	adds	r6, #1
 800ae04:	e7ee      	b.n	800ade4 <__libc_init_array+0xc>
 800ae06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae0a:	4798      	blx	r3
 800ae0c:	3601      	adds	r6, #1
 800ae0e:	e7f2      	b.n	800adf6 <__libc_init_array+0x1e>
 800ae10:	0800bb18 	.word	0x0800bb18
 800ae14:	0800bb18 	.word	0x0800bb18
 800ae18:	0800bb18 	.word	0x0800bb18
 800ae1c:	0800bb1c 	.word	0x0800bb1c

0800ae20 <__retarget_lock_init_recursive>:
 800ae20:	4770      	bx	lr

0800ae22 <__retarget_lock_acquire_recursive>:
 800ae22:	4770      	bx	lr

0800ae24 <__retarget_lock_release_recursive>:
 800ae24:	4770      	bx	lr
	...

0800ae28 <__assert_func>:
 800ae28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae2a:	4614      	mov	r4, r2
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4b09      	ldr	r3, [pc, #36]	@ (800ae54 <__assert_func+0x2c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4605      	mov	r5, r0
 800ae34:	68d8      	ldr	r0, [r3, #12]
 800ae36:	b954      	cbnz	r4, 800ae4e <__assert_func+0x26>
 800ae38:	4b07      	ldr	r3, [pc, #28]	@ (800ae58 <__assert_func+0x30>)
 800ae3a:	461c      	mov	r4, r3
 800ae3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae40:	9100      	str	r1, [sp, #0]
 800ae42:	462b      	mov	r3, r5
 800ae44:	4905      	ldr	r1, [pc, #20]	@ (800ae5c <__assert_func+0x34>)
 800ae46:	f000 fc89 	bl	800b75c <fiprintf>
 800ae4a:	f000 fd2d 	bl	800b8a8 <abort>
 800ae4e:	4b04      	ldr	r3, [pc, #16]	@ (800ae60 <__assert_func+0x38>)
 800ae50:	e7f4      	b.n	800ae3c <__assert_func+0x14>
 800ae52:	bf00      	nop
 800ae54:	20000108 	.word	0x20000108
 800ae58:	0800badc 	.word	0x0800badc
 800ae5c:	0800baae 	.word	0x0800baae
 800ae60:	0800baa1 	.word	0x0800baa1

0800ae64 <_free_r>:
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	4605      	mov	r5, r0
 800ae68:	2900      	cmp	r1, #0
 800ae6a:	d041      	beq.n	800aef0 <_free_r+0x8c>
 800ae6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae70:	1f0c      	subs	r4, r1, #4
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	bfb8      	it	lt
 800ae76:	18e4      	addlt	r4, r4, r3
 800ae78:	f000 f8e8 	bl	800b04c <__malloc_lock>
 800ae7c:	4a1d      	ldr	r2, [pc, #116]	@ (800aef4 <_free_r+0x90>)
 800ae7e:	6813      	ldr	r3, [r2, #0]
 800ae80:	b933      	cbnz	r3, 800ae90 <_free_r+0x2c>
 800ae82:	6063      	str	r3, [r4, #4]
 800ae84:	6014      	str	r4, [r2, #0]
 800ae86:	4628      	mov	r0, r5
 800ae88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae8c:	f000 b8e4 	b.w	800b058 <__malloc_unlock>
 800ae90:	42a3      	cmp	r3, r4
 800ae92:	d908      	bls.n	800aea6 <_free_r+0x42>
 800ae94:	6820      	ldr	r0, [r4, #0]
 800ae96:	1821      	adds	r1, r4, r0
 800ae98:	428b      	cmp	r3, r1
 800ae9a:	bf01      	itttt	eq
 800ae9c:	6819      	ldreq	r1, [r3, #0]
 800ae9e:	685b      	ldreq	r3, [r3, #4]
 800aea0:	1809      	addeq	r1, r1, r0
 800aea2:	6021      	streq	r1, [r4, #0]
 800aea4:	e7ed      	b.n	800ae82 <_free_r+0x1e>
 800aea6:	461a      	mov	r2, r3
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	b10b      	cbz	r3, 800aeb0 <_free_r+0x4c>
 800aeac:	42a3      	cmp	r3, r4
 800aeae:	d9fa      	bls.n	800aea6 <_free_r+0x42>
 800aeb0:	6811      	ldr	r1, [r2, #0]
 800aeb2:	1850      	adds	r0, r2, r1
 800aeb4:	42a0      	cmp	r0, r4
 800aeb6:	d10b      	bne.n	800aed0 <_free_r+0x6c>
 800aeb8:	6820      	ldr	r0, [r4, #0]
 800aeba:	4401      	add	r1, r0
 800aebc:	1850      	adds	r0, r2, r1
 800aebe:	4283      	cmp	r3, r0
 800aec0:	6011      	str	r1, [r2, #0]
 800aec2:	d1e0      	bne.n	800ae86 <_free_r+0x22>
 800aec4:	6818      	ldr	r0, [r3, #0]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	6053      	str	r3, [r2, #4]
 800aeca:	4408      	add	r0, r1
 800aecc:	6010      	str	r0, [r2, #0]
 800aece:	e7da      	b.n	800ae86 <_free_r+0x22>
 800aed0:	d902      	bls.n	800aed8 <_free_r+0x74>
 800aed2:	230c      	movs	r3, #12
 800aed4:	602b      	str	r3, [r5, #0]
 800aed6:	e7d6      	b.n	800ae86 <_free_r+0x22>
 800aed8:	6820      	ldr	r0, [r4, #0]
 800aeda:	1821      	adds	r1, r4, r0
 800aedc:	428b      	cmp	r3, r1
 800aede:	bf04      	itt	eq
 800aee0:	6819      	ldreq	r1, [r3, #0]
 800aee2:	685b      	ldreq	r3, [r3, #4]
 800aee4:	6063      	str	r3, [r4, #4]
 800aee6:	bf04      	itt	eq
 800aee8:	1809      	addeq	r1, r1, r0
 800aeea:	6021      	streq	r1, [r4, #0]
 800aeec:	6054      	str	r4, [r2, #4]
 800aeee:	e7ca      	b.n	800ae86 <_free_r+0x22>
 800aef0:	bd38      	pop	{r3, r4, r5, pc}
 800aef2:	bf00      	nop
 800aef4:	200010c8 	.word	0x200010c8

0800aef8 <malloc>:
 800aef8:	4b02      	ldr	r3, [pc, #8]	@ (800af04 <malloc+0xc>)
 800aefa:	4601      	mov	r1, r0
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	f000 b825 	b.w	800af4c <_malloc_r>
 800af02:	bf00      	nop
 800af04:	20000108 	.word	0x20000108

0800af08 <sbrk_aligned>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	4e0f      	ldr	r6, [pc, #60]	@ (800af48 <sbrk_aligned+0x40>)
 800af0c:	460c      	mov	r4, r1
 800af0e:	6831      	ldr	r1, [r6, #0]
 800af10:	4605      	mov	r5, r0
 800af12:	b911      	cbnz	r1, 800af1a <sbrk_aligned+0x12>
 800af14:	f000 fcb8 	bl	800b888 <_sbrk_r>
 800af18:	6030      	str	r0, [r6, #0]
 800af1a:	4621      	mov	r1, r4
 800af1c:	4628      	mov	r0, r5
 800af1e:	f000 fcb3 	bl	800b888 <_sbrk_r>
 800af22:	1c43      	adds	r3, r0, #1
 800af24:	d103      	bne.n	800af2e <sbrk_aligned+0x26>
 800af26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800af2a:	4620      	mov	r0, r4
 800af2c:	bd70      	pop	{r4, r5, r6, pc}
 800af2e:	1cc4      	adds	r4, r0, #3
 800af30:	f024 0403 	bic.w	r4, r4, #3
 800af34:	42a0      	cmp	r0, r4
 800af36:	d0f8      	beq.n	800af2a <sbrk_aligned+0x22>
 800af38:	1a21      	subs	r1, r4, r0
 800af3a:	4628      	mov	r0, r5
 800af3c:	f000 fca4 	bl	800b888 <_sbrk_r>
 800af40:	3001      	adds	r0, #1
 800af42:	d1f2      	bne.n	800af2a <sbrk_aligned+0x22>
 800af44:	e7ef      	b.n	800af26 <sbrk_aligned+0x1e>
 800af46:	bf00      	nop
 800af48:	200010c4 	.word	0x200010c4

0800af4c <_malloc_r>:
 800af4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af50:	1ccd      	adds	r5, r1, #3
 800af52:	f025 0503 	bic.w	r5, r5, #3
 800af56:	3508      	adds	r5, #8
 800af58:	2d0c      	cmp	r5, #12
 800af5a:	bf38      	it	cc
 800af5c:	250c      	movcc	r5, #12
 800af5e:	2d00      	cmp	r5, #0
 800af60:	4606      	mov	r6, r0
 800af62:	db01      	blt.n	800af68 <_malloc_r+0x1c>
 800af64:	42a9      	cmp	r1, r5
 800af66:	d904      	bls.n	800af72 <_malloc_r+0x26>
 800af68:	230c      	movs	r3, #12
 800af6a:	6033      	str	r3, [r6, #0]
 800af6c:	2000      	movs	r0, #0
 800af6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b048 <_malloc_r+0xfc>
 800af76:	f000 f869 	bl	800b04c <__malloc_lock>
 800af7a:	f8d8 3000 	ldr.w	r3, [r8]
 800af7e:	461c      	mov	r4, r3
 800af80:	bb44      	cbnz	r4, 800afd4 <_malloc_r+0x88>
 800af82:	4629      	mov	r1, r5
 800af84:	4630      	mov	r0, r6
 800af86:	f7ff ffbf 	bl	800af08 <sbrk_aligned>
 800af8a:	1c43      	adds	r3, r0, #1
 800af8c:	4604      	mov	r4, r0
 800af8e:	d158      	bne.n	800b042 <_malloc_r+0xf6>
 800af90:	f8d8 4000 	ldr.w	r4, [r8]
 800af94:	4627      	mov	r7, r4
 800af96:	2f00      	cmp	r7, #0
 800af98:	d143      	bne.n	800b022 <_malloc_r+0xd6>
 800af9a:	2c00      	cmp	r4, #0
 800af9c:	d04b      	beq.n	800b036 <_malloc_r+0xea>
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	4639      	mov	r1, r7
 800afa2:	4630      	mov	r0, r6
 800afa4:	eb04 0903 	add.w	r9, r4, r3
 800afa8:	f000 fc6e 	bl	800b888 <_sbrk_r>
 800afac:	4581      	cmp	r9, r0
 800afae:	d142      	bne.n	800b036 <_malloc_r+0xea>
 800afb0:	6821      	ldr	r1, [r4, #0]
 800afb2:	1a6d      	subs	r5, r5, r1
 800afb4:	4629      	mov	r1, r5
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7ff ffa6 	bl	800af08 <sbrk_aligned>
 800afbc:	3001      	adds	r0, #1
 800afbe:	d03a      	beq.n	800b036 <_malloc_r+0xea>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	442b      	add	r3, r5
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	f8d8 3000 	ldr.w	r3, [r8]
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	bb62      	cbnz	r2, 800b028 <_malloc_r+0xdc>
 800afce:	f8c8 7000 	str.w	r7, [r8]
 800afd2:	e00f      	b.n	800aff4 <_malloc_r+0xa8>
 800afd4:	6822      	ldr	r2, [r4, #0]
 800afd6:	1b52      	subs	r2, r2, r5
 800afd8:	d420      	bmi.n	800b01c <_malloc_r+0xd0>
 800afda:	2a0b      	cmp	r2, #11
 800afdc:	d917      	bls.n	800b00e <_malloc_r+0xc2>
 800afde:	1961      	adds	r1, r4, r5
 800afe0:	42a3      	cmp	r3, r4
 800afe2:	6025      	str	r5, [r4, #0]
 800afe4:	bf18      	it	ne
 800afe6:	6059      	strne	r1, [r3, #4]
 800afe8:	6863      	ldr	r3, [r4, #4]
 800afea:	bf08      	it	eq
 800afec:	f8c8 1000 	streq.w	r1, [r8]
 800aff0:	5162      	str	r2, [r4, r5]
 800aff2:	604b      	str	r3, [r1, #4]
 800aff4:	4630      	mov	r0, r6
 800aff6:	f000 f82f 	bl	800b058 <__malloc_unlock>
 800affa:	f104 000b 	add.w	r0, r4, #11
 800affe:	1d23      	adds	r3, r4, #4
 800b000:	f020 0007 	bic.w	r0, r0, #7
 800b004:	1ac2      	subs	r2, r0, r3
 800b006:	bf1c      	itt	ne
 800b008:	1a1b      	subne	r3, r3, r0
 800b00a:	50a3      	strne	r3, [r4, r2]
 800b00c:	e7af      	b.n	800af6e <_malloc_r+0x22>
 800b00e:	6862      	ldr	r2, [r4, #4]
 800b010:	42a3      	cmp	r3, r4
 800b012:	bf0c      	ite	eq
 800b014:	f8c8 2000 	streq.w	r2, [r8]
 800b018:	605a      	strne	r2, [r3, #4]
 800b01a:	e7eb      	b.n	800aff4 <_malloc_r+0xa8>
 800b01c:	4623      	mov	r3, r4
 800b01e:	6864      	ldr	r4, [r4, #4]
 800b020:	e7ae      	b.n	800af80 <_malloc_r+0x34>
 800b022:	463c      	mov	r4, r7
 800b024:	687f      	ldr	r7, [r7, #4]
 800b026:	e7b6      	b.n	800af96 <_malloc_r+0x4a>
 800b028:	461a      	mov	r2, r3
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	42a3      	cmp	r3, r4
 800b02e:	d1fb      	bne.n	800b028 <_malloc_r+0xdc>
 800b030:	2300      	movs	r3, #0
 800b032:	6053      	str	r3, [r2, #4]
 800b034:	e7de      	b.n	800aff4 <_malloc_r+0xa8>
 800b036:	230c      	movs	r3, #12
 800b038:	6033      	str	r3, [r6, #0]
 800b03a:	4630      	mov	r0, r6
 800b03c:	f000 f80c 	bl	800b058 <__malloc_unlock>
 800b040:	e794      	b.n	800af6c <_malloc_r+0x20>
 800b042:	6005      	str	r5, [r0, #0]
 800b044:	e7d6      	b.n	800aff4 <_malloc_r+0xa8>
 800b046:	bf00      	nop
 800b048:	200010c8 	.word	0x200010c8

0800b04c <__malloc_lock>:
 800b04c:	4801      	ldr	r0, [pc, #4]	@ (800b054 <__malloc_lock+0x8>)
 800b04e:	f7ff bee8 	b.w	800ae22 <__retarget_lock_acquire_recursive>
 800b052:	bf00      	nop
 800b054:	200010c0 	.word	0x200010c0

0800b058 <__malloc_unlock>:
 800b058:	4801      	ldr	r0, [pc, #4]	@ (800b060 <__malloc_unlock+0x8>)
 800b05a:	f7ff bee3 	b.w	800ae24 <__retarget_lock_release_recursive>
 800b05e:	bf00      	nop
 800b060:	200010c0 	.word	0x200010c0

0800b064 <__sfputc_r>:
 800b064:	6893      	ldr	r3, [r2, #8]
 800b066:	3b01      	subs	r3, #1
 800b068:	2b00      	cmp	r3, #0
 800b06a:	b410      	push	{r4}
 800b06c:	6093      	str	r3, [r2, #8]
 800b06e:	da08      	bge.n	800b082 <__sfputc_r+0x1e>
 800b070:	6994      	ldr	r4, [r2, #24]
 800b072:	42a3      	cmp	r3, r4
 800b074:	db01      	blt.n	800b07a <__sfputc_r+0x16>
 800b076:	290a      	cmp	r1, #10
 800b078:	d103      	bne.n	800b082 <__sfputc_r+0x1e>
 800b07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b07e:	f7ff bdc2 	b.w	800ac06 <__swbuf_r>
 800b082:	6813      	ldr	r3, [r2, #0]
 800b084:	1c58      	adds	r0, r3, #1
 800b086:	6010      	str	r0, [r2, #0]
 800b088:	7019      	strb	r1, [r3, #0]
 800b08a:	4608      	mov	r0, r1
 800b08c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <__sfputs_r>:
 800b092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b094:	4606      	mov	r6, r0
 800b096:	460f      	mov	r7, r1
 800b098:	4614      	mov	r4, r2
 800b09a:	18d5      	adds	r5, r2, r3
 800b09c:	42ac      	cmp	r4, r5
 800b09e:	d101      	bne.n	800b0a4 <__sfputs_r+0x12>
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e007      	b.n	800b0b4 <__sfputs_r+0x22>
 800b0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a8:	463a      	mov	r2, r7
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f7ff ffda 	bl	800b064 <__sfputc_r>
 800b0b0:	1c43      	adds	r3, r0, #1
 800b0b2:	d1f3      	bne.n	800b09c <__sfputs_r+0xa>
 800b0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0b8 <_vfiprintf_r>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	460d      	mov	r5, r1
 800b0be:	b09d      	sub	sp, #116	@ 0x74
 800b0c0:	4614      	mov	r4, r2
 800b0c2:	4698      	mov	r8, r3
 800b0c4:	4606      	mov	r6, r0
 800b0c6:	b118      	cbz	r0, 800b0d0 <_vfiprintf_r+0x18>
 800b0c8:	6a03      	ldr	r3, [r0, #32]
 800b0ca:	b90b      	cbnz	r3, 800b0d0 <_vfiprintf_r+0x18>
 800b0cc:	f7ff fcb2 	bl	800aa34 <__sinit>
 800b0d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0d2:	07d9      	lsls	r1, r3, #31
 800b0d4:	d405      	bmi.n	800b0e2 <_vfiprintf_r+0x2a>
 800b0d6:	89ab      	ldrh	r3, [r5, #12]
 800b0d8:	059a      	lsls	r2, r3, #22
 800b0da:	d402      	bmi.n	800b0e2 <_vfiprintf_r+0x2a>
 800b0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0de:	f7ff fea0 	bl	800ae22 <__retarget_lock_acquire_recursive>
 800b0e2:	89ab      	ldrh	r3, [r5, #12]
 800b0e4:	071b      	lsls	r3, r3, #28
 800b0e6:	d501      	bpl.n	800b0ec <_vfiprintf_r+0x34>
 800b0e8:	692b      	ldr	r3, [r5, #16]
 800b0ea:	b99b      	cbnz	r3, 800b114 <_vfiprintf_r+0x5c>
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f7ff fdc8 	bl	800ac84 <__swsetup_r>
 800b0f4:	b170      	cbz	r0, 800b114 <_vfiprintf_r+0x5c>
 800b0f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0f8:	07dc      	lsls	r4, r3, #31
 800b0fa:	d504      	bpl.n	800b106 <_vfiprintf_r+0x4e>
 800b0fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b100:	b01d      	add	sp, #116	@ 0x74
 800b102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	0598      	lsls	r0, r3, #22
 800b10a:	d4f7      	bmi.n	800b0fc <_vfiprintf_r+0x44>
 800b10c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b10e:	f7ff fe89 	bl	800ae24 <__retarget_lock_release_recursive>
 800b112:	e7f3      	b.n	800b0fc <_vfiprintf_r+0x44>
 800b114:	2300      	movs	r3, #0
 800b116:	9309      	str	r3, [sp, #36]	@ 0x24
 800b118:	2320      	movs	r3, #32
 800b11a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b11e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b122:	2330      	movs	r3, #48	@ 0x30
 800b124:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2d4 <_vfiprintf_r+0x21c>
 800b128:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b12c:	f04f 0901 	mov.w	r9, #1
 800b130:	4623      	mov	r3, r4
 800b132:	469a      	mov	sl, r3
 800b134:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b138:	b10a      	cbz	r2, 800b13e <_vfiprintf_r+0x86>
 800b13a:	2a25      	cmp	r2, #37	@ 0x25
 800b13c:	d1f9      	bne.n	800b132 <_vfiprintf_r+0x7a>
 800b13e:	ebba 0b04 	subs.w	fp, sl, r4
 800b142:	d00b      	beq.n	800b15c <_vfiprintf_r+0xa4>
 800b144:	465b      	mov	r3, fp
 800b146:	4622      	mov	r2, r4
 800b148:	4629      	mov	r1, r5
 800b14a:	4630      	mov	r0, r6
 800b14c:	f7ff ffa1 	bl	800b092 <__sfputs_r>
 800b150:	3001      	adds	r0, #1
 800b152:	f000 80a7 	beq.w	800b2a4 <_vfiprintf_r+0x1ec>
 800b156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b158:	445a      	add	r2, fp
 800b15a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b15c:	f89a 3000 	ldrb.w	r3, [sl]
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 809f 	beq.w	800b2a4 <_vfiprintf_r+0x1ec>
 800b166:	2300      	movs	r3, #0
 800b168:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b16c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b170:	f10a 0a01 	add.w	sl, sl, #1
 800b174:	9304      	str	r3, [sp, #16]
 800b176:	9307      	str	r3, [sp, #28]
 800b178:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b17c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b17e:	4654      	mov	r4, sl
 800b180:	2205      	movs	r2, #5
 800b182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b186:	4853      	ldr	r0, [pc, #332]	@ (800b2d4 <_vfiprintf_r+0x21c>)
 800b188:	f7f5 f822 	bl	80001d0 <memchr>
 800b18c:	9a04      	ldr	r2, [sp, #16]
 800b18e:	b9d8      	cbnz	r0, 800b1c8 <_vfiprintf_r+0x110>
 800b190:	06d1      	lsls	r1, r2, #27
 800b192:	bf44      	itt	mi
 800b194:	2320      	movmi	r3, #32
 800b196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b19a:	0713      	lsls	r3, r2, #28
 800b19c:	bf44      	itt	mi
 800b19e:	232b      	movmi	r3, #43	@ 0x2b
 800b1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1aa:	d015      	beq.n	800b1d8 <_vfiprintf_r+0x120>
 800b1ac:	9a07      	ldr	r2, [sp, #28]
 800b1ae:	4654      	mov	r4, sl
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	f04f 0c0a 	mov.w	ip, #10
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1bc:	3b30      	subs	r3, #48	@ 0x30
 800b1be:	2b09      	cmp	r3, #9
 800b1c0:	d94b      	bls.n	800b25a <_vfiprintf_r+0x1a2>
 800b1c2:	b1b0      	cbz	r0, 800b1f2 <_vfiprintf_r+0x13a>
 800b1c4:	9207      	str	r2, [sp, #28]
 800b1c6:	e014      	b.n	800b1f2 <_vfiprintf_r+0x13a>
 800b1c8:	eba0 0308 	sub.w	r3, r0, r8
 800b1cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	9304      	str	r3, [sp, #16]
 800b1d4:	46a2      	mov	sl, r4
 800b1d6:	e7d2      	b.n	800b17e <_vfiprintf_r+0xc6>
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	1d19      	adds	r1, r3, #4
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	9103      	str	r1, [sp, #12]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	bfbb      	ittet	lt
 800b1e4:	425b      	neglt	r3, r3
 800b1e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b1ea:	9307      	strge	r3, [sp, #28]
 800b1ec:	9307      	strlt	r3, [sp, #28]
 800b1ee:	bfb8      	it	lt
 800b1f0:	9204      	strlt	r2, [sp, #16]
 800b1f2:	7823      	ldrb	r3, [r4, #0]
 800b1f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1f6:	d10a      	bne.n	800b20e <_vfiprintf_r+0x156>
 800b1f8:	7863      	ldrb	r3, [r4, #1]
 800b1fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1fc:	d132      	bne.n	800b264 <_vfiprintf_r+0x1ac>
 800b1fe:	9b03      	ldr	r3, [sp, #12]
 800b200:	1d1a      	adds	r2, r3, #4
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	9203      	str	r2, [sp, #12]
 800b206:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b20a:	3402      	adds	r4, #2
 800b20c:	9305      	str	r3, [sp, #20]
 800b20e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b2e4 <_vfiprintf_r+0x22c>
 800b212:	7821      	ldrb	r1, [r4, #0]
 800b214:	2203      	movs	r2, #3
 800b216:	4650      	mov	r0, sl
 800b218:	f7f4 ffda 	bl	80001d0 <memchr>
 800b21c:	b138      	cbz	r0, 800b22e <_vfiprintf_r+0x176>
 800b21e:	9b04      	ldr	r3, [sp, #16]
 800b220:	eba0 000a 	sub.w	r0, r0, sl
 800b224:	2240      	movs	r2, #64	@ 0x40
 800b226:	4082      	lsls	r2, r0
 800b228:	4313      	orrs	r3, r2
 800b22a:	3401      	adds	r4, #1
 800b22c:	9304      	str	r3, [sp, #16]
 800b22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b232:	4829      	ldr	r0, [pc, #164]	@ (800b2d8 <_vfiprintf_r+0x220>)
 800b234:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b238:	2206      	movs	r2, #6
 800b23a:	f7f4 ffc9 	bl	80001d0 <memchr>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d03f      	beq.n	800b2c2 <_vfiprintf_r+0x20a>
 800b242:	4b26      	ldr	r3, [pc, #152]	@ (800b2dc <_vfiprintf_r+0x224>)
 800b244:	bb1b      	cbnz	r3, 800b28e <_vfiprintf_r+0x1d6>
 800b246:	9b03      	ldr	r3, [sp, #12]
 800b248:	3307      	adds	r3, #7
 800b24a:	f023 0307 	bic.w	r3, r3, #7
 800b24e:	3308      	adds	r3, #8
 800b250:	9303      	str	r3, [sp, #12]
 800b252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b254:	443b      	add	r3, r7
 800b256:	9309      	str	r3, [sp, #36]	@ 0x24
 800b258:	e76a      	b.n	800b130 <_vfiprintf_r+0x78>
 800b25a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b25e:	460c      	mov	r4, r1
 800b260:	2001      	movs	r0, #1
 800b262:	e7a8      	b.n	800b1b6 <_vfiprintf_r+0xfe>
 800b264:	2300      	movs	r3, #0
 800b266:	3401      	adds	r4, #1
 800b268:	9305      	str	r3, [sp, #20]
 800b26a:	4619      	mov	r1, r3
 800b26c:	f04f 0c0a 	mov.w	ip, #10
 800b270:	4620      	mov	r0, r4
 800b272:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b276:	3a30      	subs	r2, #48	@ 0x30
 800b278:	2a09      	cmp	r2, #9
 800b27a:	d903      	bls.n	800b284 <_vfiprintf_r+0x1cc>
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d0c6      	beq.n	800b20e <_vfiprintf_r+0x156>
 800b280:	9105      	str	r1, [sp, #20]
 800b282:	e7c4      	b.n	800b20e <_vfiprintf_r+0x156>
 800b284:	fb0c 2101 	mla	r1, ip, r1, r2
 800b288:	4604      	mov	r4, r0
 800b28a:	2301      	movs	r3, #1
 800b28c:	e7f0      	b.n	800b270 <_vfiprintf_r+0x1b8>
 800b28e:	ab03      	add	r3, sp, #12
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	462a      	mov	r2, r5
 800b294:	4b12      	ldr	r3, [pc, #72]	@ (800b2e0 <_vfiprintf_r+0x228>)
 800b296:	a904      	add	r1, sp, #16
 800b298:	4630      	mov	r0, r6
 800b29a:	f3af 8000 	nop.w
 800b29e:	4607      	mov	r7, r0
 800b2a0:	1c78      	adds	r0, r7, #1
 800b2a2:	d1d6      	bne.n	800b252 <_vfiprintf_r+0x19a>
 800b2a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2a6:	07d9      	lsls	r1, r3, #31
 800b2a8:	d405      	bmi.n	800b2b6 <_vfiprintf_r+0x1fe>
 800b2aa:	89ab      	ldrh	r3, [r5, #12]
 800b2ac:	059a      	lsls	r2, r3, #22
 800b2ae:	d402      	bmi.n	800b2b6 <_vfiprintf_r+0x1fe>
 800b2b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2b2:	f7ff fdb7 	bl	800ae24 <__retarget_lock_release_recursive>
 800b2b6:	89ab      	ldrh	r3, [r5, #12]
 800b2b8:	065b      	lsls	r3, r3, #25
 800b2ba:	f53f af1f 	bmi.w	800b0fc <_vfiprintf_r+0x44>
 800b2be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2c0:	e71e      	b.n	800b100 <_vfiprintf_r+0x48>
 800b2c2:	ab03      	add	r3, sp, #12
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	462a      	mov	r2, r5
 800b2c8:	4b05      	ldr	r3, [pc, #20]	@ (800b2e0 <_vfiprintf_r+0x228>)
 800b2ca:	a904      	add	r1, sp, #16
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f000 f879 	bl	800b3c4 <_printf_i>
 800b2d2:	e7e4      	b.n	800b29e <_vfiprintf_r+0x1e6>
 800b2d4:	0800badd 	.word	0x0800badd
 800b2d8:	0800bae7 	.word	0x0800bae7
 800b2dc:	00000000 	.word	0x00000000
 800b2e0:	0800b093 	.word	0x0800b093
 800b2e4:	0800bae3 	.word	0x0800bae3

0800b2e8 <_printf_common>:
 800b2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2ec:	4616      	mov	r6, r2
 800b2ee:	4698      	mov	r8, r3
 800b2f0:	688a      	ldr	r2, [r1, #8]
 800b2f2:	690b      	ldr	r3, [r1, #16]
 800b2f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	bfb8      	it	lt
 800b2fc:	4613      	movlt	r3, r2
 800b2fe:	6033      	str	r3, [r6, #0]
 800b300:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b304:	4607      	mov	r7, r0
 800b306:	460c      	mov	r4, r1
 800b308:	b10a      	cbz	r2, 800b30e <_printf_common+0x26>
 800b30a:	3301      	adds	r3, #1
 800b30c:	6033      	str	r3, [r6, #0]
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	0699      	lsls	r1, r3, #26
 800b312:	bf42      	ittt	mi
 800b314:	6833      	ldrmi	r3, [r6, #0]
 800b316:	3302      	addmi	r3, #2
 800b318:	6033      	strmi	r3, [r6, #0]
 800b31a:	6825      	ldr	r5, [r4, #0]
 800b31c:	f015 0506 	ands.w	r5, r5, #6
 800b320:	d106      	bne.n	800b330 <_printf_common+0x48>
 800b322:	f104 0a19 	add.w	sl, r4, #25
 800b326:	68e3      	ldr	r3, [r4, #12]
 800b328:	6832      	ldr	r2, [r6, #0]
 800b32a:	1a9b      	subs	r3, r3, r2
 800b32c:	42ab      	cmp	r3, r5
 800b32e:	dc26      	bgt.n	800b37e <_printf_common+0x96>
 800b330:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b334:	6822      	ldr	r2, [r4, #0]
 800b336:	3b00      	subs	r3, #0
 800b338:	bf18      	it	ne
 800b33a:	2301      	movne	r3, #1
 800b33c:	0692      	lsls	r2, r2, #26
 800b33e:	d42b      	bmi.n	800b398 <_printf_common+0xb0>
 800b340:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b344:	4641      	mov	r1, r8
 800b346:	4638      	mov	r0, r7
 800b348:	47c8      	blx	r9
 800b34a:	3001      	adds	r0, #1
 800b34c:	d01e      	beq.n	800b38c <_printf_common+0xa4>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	6922      	ldr	r2, [r4, #16]
 800b352:	f003 0306 	and.w	r3, r3, #6
 800b356:	2b04      	cmp	r3, #4
 800b358:	bf02      	ittt	eq
 800b35a:	68e5      	ldreq	r5, [r4, #12]
 800b35c:	6833      	ldreq	r3, [r6, #0]
 800b35e:	1aed      	subeq	r5, r5, r3
 800b360:	68a3      	ldr	r3, [r4, #8]
 800b362:	bf0c      	ite	eq
 800b364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b368:	2500      	movne	r5, #0
 800b36a:	4293      	cmp	r3, r2
 800b36c:	bfc4      	itt	gt
 800b36e:	1a9b      	subgt	r3, r3, r2
 800b370:	18ed      	addgt	r5, r5, r3
 800b372:	2600      	movs	r6, #0
 800b374:	341a      	adds	r4, #26
 800b376:	42b5      	cmp	r5, r6
 800b378:	d11a      	bne.n	800b3b0 <_printf_common+0xc8>
 800b37a:	2000      	movs	r0, #0
 800b37c:	e008      	b.n	800b390 <_printf_common+0xa8>
 800b37e:	2301      	movs	r3, #1
 800b380:	4652      	mov	r2, sl
 800b382:	4641      	mov	r1, r8
 800b384:	4638      	mov	r0, r7
 800b386:	47c8      	blx	r9
 800b388:	3001      	adds	r0, #1
 800b38a:	d103      	bne.n	800b394 <_printf_common+0xac>
 800b38c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b394:	3501      	adds	r5, #1
 800b396:	e7c6      	b.n	800b326 <_printf_common+0x3e>
 800b398:	18e1      	adds	r1, r4, r3
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	2030      	movs	r0, #48	@ 0x30
 800b39e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3a2:	4422      	add	r2, r4
 800b3a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3ac:	3302      	adds	r3, #2
 800b3ae:	e7c7      	b.n	800b340 <_printf_common+0x58>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	4641      	mov	r1, r8
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	47c8      	blx	r9
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	d0e6      	beq.n	800b38c <_printf_common+0xa4>
 800b3be:	3601      	adds	r6, #1
 800b3c0:	e7d9      	b.n	800b376 <_printf_common+0x8e>
	...

0800b3c4 <_printf_i>:
 800b3c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c8:	7e0f      	ldrb	r7, [r1, #24]
 800b3ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3cc:	2f78      	cmp	r7, #120	@ 0x78
 800b3ce:	4691      	mov	r9, r2
 800b3d0:	4680      	mov	r8, r0
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	469a      	mov	sl, r3
 800b3d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3da:	d807      	bhi.n	800b3ec <_printf_i+0x28>
 800b3dc:	2f62      	cmp	r7, #98	@ 0x62
 800b3de:	d80a      	bhi.n	800b3f6 <_printf_i+0x32>
 800b3e0:	2f00      	cmp	r7, #0
 800b3e2:	f000 80d2 	beq.w	800b58a <_printf_i+0x1c6>
 800b3e6:	2f58      	cmp	r7, #88	@ 0x58
 800b3e8:	f000 80b9 	beq.w	800b55e <_printf_i+0x19a>
 800b3ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3f4:	e03a      	b.n	800b46c <_printf_i+0xa8>
 800b3f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3fa:	2b15      	cmp	r3, #21
 800b3fc:	d8f6      	bhi.n	800b3ec <_printf_i+0x28>
 800b3fe:	a101      	add	r1, pc, #4	@ (adr r1, 800b404 <_printf_i+0x40>)
 800b400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b404:	0800b45d 	.word	0x0800b45d
 800b408:	0800b471 	.word	0x0800b471
 800b40c:	0800b3ed 	.word	0x0800b3ed
 800b410:	0800b3ed 	.word	0x0800b3ed
 800b414:	0800b3ed 	.word	0x0800b3ed
 800b418:	0800b3ed 	.word	0x0800b3ed
 800b41c:	0800b471 	.word	0x0800b471
 800b420:	0800b3ed 	.word	0x0800b3ed
 800b424:	0800b3ed 	.word	0x0800b3ed
 800b428:	0800b3ed 	.word	0x0800b3ed
 800b42c:	0800b3ed 	.word	0x0800b3ed
 800b430:	0800b571 	.word	0x0800b571
 800b434:	0800b49b 	.word	0x0800b49b
 800b438:	0800b52b 	.word	0x0800b52b
 800b43c:	0800b3ed 	.word	0x0800b3ed
 800b440:	0800b3ed 	.word	0x0800b3ed
 800b444:	0800b593 	.word	0x0800b593
 800b448:	0800b3ed 	.word	0x0800b3ed
 800b44c:	0800b49b 	.word	0x0800b49b
 800b450:	0800b3ed 	.word	0x0800b3ed
 800b454:	0800b3ed 	.word	0x0800b3ed
 800b458:	0800b533 	.word	0x0800b533
 800b45c:	6833      	ldr	r3, [r6, #0]
 800b45e:	1d1a      	adds	r2, r3, #4
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	6032      	str	r2, [r6, #0]
 800b464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b468:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b46c:	2301      	movs	r3, #1
 800b46e:	e09d      	b.n	800b5ac <_printf_i+0x1e8>
 800b470:	6833      	ldr	r3, [r6, #0]
 800b472:	6820      	ldr	r0, [r4, #0]
 800b474:	1d19      	adds	r1, r3, #4
 800b476:	6031      	str	r1, [r6, #0]
 800b478:	0606      	lsls	r6, r0, #24
 800b47a:	d501      	bpl.n	800b480 <_printf_i+0xbc>
 800b47c:	681d      	ldr	r5, [r3, #0]
 800b47e:	e003      	b.n	800b488 <_printf_i+0xc4>
 800b480:	0645      	lsls	r5, r0, #25
 800b482:	d5fb      	bpl.n	800b47c <_printf_i+0xb8>
 800b484:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b488:	2d00      	cmp	r5, #0
 800b48a:	da03      	bge.n	800b494 <_printf_i+0xd0>
 800b48c:	232d      	movs	r3, #45	@ 0x2d
 800b48e:	426d      	negs	r5, r5
 800b490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b494:	4859      	ldr	r0, [pc, #356]	@ (800b5fc <_printf_i+0x238>)
 800b496:	230a      	movs	r3, #10
 800b498:	e011      	b.n	800b4be <_printf_i+0xfa>
 800b49a:	6821      	ldr	r1, [r4, #0]
 800b49c:	6833      	ldr	r3, [r6, #0]
 800b49e:	0608      	lsls	r0, r1, #24
 800b4a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4a4:	d402      	bmi.n	800b4ac <_printf_i+0xe8>
 800b4a6:	0649      	lsls	r1, r1, #25
 800b4a8:	bf48      	it	mi
 800b4aa:	b2ad      	uxthmi	r5, r5
 800b4ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4ae:	4853      	ldr	r0, [pc, #332]	@ (800b5fc <_printf_i+0x238>)
 800b4b0:	6033      	str	r3, [r6, #0]
 800b4b2:	bf14      	ite	ne
 800b4b4:	230a      	movne	r3, #10
 800b4b6:	2308      	moveq	r3, #8
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4be:	6866      	ldr	r6, [r4, #4]
 800b4c0:	60a6      	str	r6, [r4, #8]
 800b4c2:	2e00      	cmp	r6, #0
 800b4c4:	bfa2      	ittt	ge
 800b4c6:	6821      	ldrge	r1, [r4, #0]
 800b4c8:	f021 0104 	bicge.w	r1, r1, #4
 800b4cc:	6021      	strge	r1, [r4, #0]
 800b4ce:	b90d      	cbnz	r5, 800b4d4 <_printf_i+0x110>
 800b4d0:	2e00      	cmp	r6, #0
 800b4d2:	d04b      	beq.n	800b56c <_printf_i+0x1a8>
 800b4d4:	4616      	mov	r6, r2
 800b4d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4da:	fb03 5711 	mls	r7, r3, r1, r5
 800b4de:	5dc7      	ldrb	r7, [r0, r7]
 800b4e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4e4:	462f      	mov	r7, r5
 800b4e6:	42bb      	cmp	r3, r7
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	d9f4      	bls.n	800b4d6 <_printf_i+0x112>
 800b4ec:	2b08      	cmp	r3, #8
 800b4ee:	d10b      	bne.n	800b508 <_printf_i+0x144>
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	07df      	lsls	r7, r3, #31
 800b4f4:	d508      	bpl.n	800b508 <_printf_i+0x144>
 800b4f6:	6923      	ldr	r3, [r4, #16]
 800b4f8:	6861      	ldr	r1, [r4, #4]
 800b4fa:	4299      	cmp	r1, r3
 800b4fc:	bfde      	ittt	le
 800b4fe:	2330      	movle	r3, #48	@ 0x30
 800b500:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b504:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b508:	1b92      	subs	r2, r2, r6
 800b50a:	6122      	str	r2, [r4, #16]
 800b50c:	f8cd a000 	str.w	sl, [sp]
 800b510:	464b      	mov	r3, r9
 800b512:	aa03      	add	r2, sp, #12
 800b514:	4621      	mov	r1, r4
 800b516:	4640      	mov	r0, r8
 800b518:	f7ff fee6 	bl	800b2e8 <_printf_common>
 800b51c:	3001      	adds	r0, #1
 800b51e:	d14a      	bne.n	800b5b6 <_printf_i+0x1f2>
 800b520:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b524:	b004      	add	sp, #16
 800b526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	f043 0320 	orr.w	r3, r3, #32
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	4833      	ldr	r0, [pc, #204]	@ (800b600 <_printf_i+0x23c>)
 800b534:	2778      	movs	r7, #120	@ 0x78
 800b536:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	6831      	ldr	r1, [r6, #0]
 800b53e:	061f      	lsls	r7, r3, #24
 800b540:	f851 5b04 	ldr.w	r5, [r1], #4
 800b544:	d402      	bmi.n	800b54c <_printf_i+0x188>
 800b546:	065f      	lsls	r7, r3, #25
 800b548:	bf48      	it	mi
 800b54a:	b2ad      	uxthmi	r5, r5
 800b54c:	6031      	str	r1, [r6, #0]
 800b54e:	07d9      	lsls	r1, r3, #31
 800b550:	bf44      	itt	mi
 800b552:	f043 0320 	orrmi.w	r3, r3, #32
 800b556:	6023      	strmi	r3, [r4, #0]
 800b558:	b11d      	cbz	r5, 800b562 <_printf_i+0x19e>
 800b55a:	2310      	movs	r3, #16
 800b55c:	e7ac      	b.n	800b4b8 <_printf_i+0xf4>
 800b55e:	4827      	ldr	r0, [pc, #156]	@ (800b5fc <_printf_i+0x238>)
 800b560:	e7e9      	b.n	800b536 <_printf_i+0x172>
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	f023 0320 	bic.w	r3, r3, #32
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	e7f6      	b.n	800b55a <_printf_i+0x196>
 800b56c:	4616      	mov	r6, r2
 800b56e:	e7bd      	b.n	800b4ec <_printf_i+0x128>
 800b570:	6833      	ldr	r3, [r6, #0]
 800b572:	6825      	ldr	r5, [r4, #0]
 800b574:	6961      	ldr	r1, [r4, #20]
 800b576:	1d18      	adds	r0, r3, #4
 800b578:	6030      	str	r0, [r6, #0]
 800b57a:	062e      	lsls	r6, r5, #24
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	d501      	bpl.n	800b584 <_printf_i+0x1c0>
 800b580:	6019      	str	r1, [r3, #0]
 800b582:	e002      	b.n	800b58a <_printf_i+0x1c6>
 800b584:	0668      	lsls	r0, r5, #25
 800b586:	d5fb      	bpl.n	800b580 <_printf_i+0x1bc>
 800b588:	8019      	strh	r1, [r3, #0]
 800b58a:	2300      	movs	r3, #0
 800b58c:	6123      	str	r3, [r4, #16]
 800b58e:	4616      	mov	r6, r2
 800b590:	e7bc      	b.n	800b50c <_printf_i+0x148>
 800b592:	6833      	ldr	r3, [r6, #0]
 800b594:	1d1a      	adds	r2, r3, #4
 800b596:	6032      	str	r2, [r6, #0]
 800b598:	681e      	ldr	r6, [r3, #0]
 800b59a:	6862      	ldr	r2, [r4, #4]
 800b59c:	2100      	movs	r1, #0
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f7f4 fe16 	bl	80001d0 <memchr>
 800b5a4:	b108      	cbz	r0, 800b5aa <_printf_i+0x1e6>
 800b5a6:	1b80      	subs	r0, r0, r6
 800b5a8:	6060      	str	r0, [r4, #4]
 800b5aa:	6863      	ldr	r3, [r4, #4]
 800b5ac:	6123      	str	r3, [r4, #16]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5b4:	e7aa      	b.n	800b50c <_printf_i+0x148>
 800b5b6:	6923      	ldr	r3, [r4, #16]
 800b5b8:	4632      	mov	r2, r6
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	4640      	mov	r0, r8
 800b5be:	47d0      	blx	sl
 800b5c0:	3001      	adds	r0, #1
 800b5c2:	d0ad      	beq.n	800b520 <_printf_i+0x15c>
 800b5c4:	6823      	ldr	r3, [r4, #0]
 800b5c6:	079b      	lsls	r3, r3, #30
 800b5c8:	d413      	bmi.n	800b5f2 <_printf_i+0x22e>
 800b5ca:	68e0      	ldr	r0, [r4, #12]
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	4298      	cmp	r0, r3
 800b5d0:	bfb8      	it	lt
 800b5d2:	4618      	movlt	r0, r3
 800b5d4:	e7a6      	b.n	800b524 <_printf_i+0x160>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4632      	mov	r2, r6
 800b5da:	4649      	mov	r1, r9
 800b5dc:	4640      	mov	r0, r8
 800b5de:	47d0      	blx	sl
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d09d      	beq.n	800b520 <_printf_i+0x15c>
 800b5e4:	3501      	adds	r5, #1
 800b5e6:	68e3      	ldr	r3, [r4, #12]
 800b5e8:	9903      	ldr	r1, [sp, #12]
 800b5ea:	1a5b      	subs	r3, r3, r1
 800b5ec:	42ab      	cmp	r3, r5
 800b5ee:	dcf2      	bgt.n	800b5d6 <_printf_i+0x212>
 800b5f0:	e7eb      	b.n	800b5ca <_printf_i+0x206>
 800b5f2:	2500      	movs	r5, #0
 800b5f4:	f104 0619 	add.w	r6, r4, #25
 800b5f8:	e7f5      	b.n	800b5e6 <_printf_i+0x222>
 800b5fa:	bf00      	nop
 800b5fc:	0800baee 	.word	0x0800baee
 800b600:	0800baff 	.word	0x0800baff

0800b604 <__sflush_r>:
 800b604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60c:	0716      	lsls	r6, r2, #28
 800b60e:	4605      	mov	r5, r0
 800b610:	460c      	mov	r4, r1
 800b612:	d454      	bmi.n	800b6be <__sflush_r+0xba>
 800b614:	684b      	ldr	r3, [r1, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	dc02      	bgt.n	800b620 <__sflush_r+0x1c>
 800b61a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	dd48      	ble.n	800b6b2 <__sflush_r+0xae>
 800b620:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b622:	2e00      	cmp	r6, #0
 800b624:	d045      	beq.n	800b6b2 <__sflush_r+0xae>
 800b626:	2300      	movs	r3, #0
 800b628:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b62c:	682f      	ldr	r7, [r5, #0]
 800b62e:	6a21      	ldr	r1, [r4, #32]
 800b630:	602b      	str	r3, [r5, #0]
 800b632:	d030      	beq.n	800b696 <__sflush_r+0x92>
 800b634:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	0759      	lsls	r1, r3, #29
 800b63a:	d505      	bpl.n	800b648 <__sflush_r+0x44>
 800b63c:	6863      	ldr	r3, [r4, #4]
 800b63e:	1ad2      	subs	r2, r2, r3
 800b640:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b642:	b10b      	cbz	r3, 800b648 <__sflush_r+0x44>
 800b644:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b646:	1ad2      	subs	r2, r2, r3
 800b648:	2300      	movs	r3, #0
 800b64a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b64c:	6a21      	ldr	r1, [r4, #32]
 800b64e:	4628      	mov	r0, r5
 800b650:	47b0      	blx	r6
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	d106      	bne.n	800b666 <__sflush_r+0x62>
 800b658:	6829      	ldr	r1, [r5, #0]
 800b65a:	291d      	cmp	r1, #29
 800b65c:	d82b      	bhi.n	800b6b6 <__sflush_r+0xb2>
 800b65e:	4a2a      	ldr	r2, [pc, #168]	@ (800b708 <__sflush_r+0x104>)
 800b660:	410a      	asrs	r2, r1
 800b662:	07d6      	lsls	r6, r2, #31
 800b664:	d427      	bmi.n	800b6b6 <__sflush_r+0xb2>
 800b666:	2200      	movs	r2, #0
 800b668:	6062      	str	r2, [r4, #4]
 800b66a:	04d9      	lsls	r1, r3, #19
 800b66c:	6922      	ldr	r2, [r4, #16]
 800b66e:	6022      	str	r2, [r4, #0]
 800b670:	d504      	bpl.n	800b67c <__sflush_r+0x78>
 800b672:	1c42      	adds	r2, r0, #1
 800b674:	d101      	bne.n	800b67a <__sflush_r+0x76>
 800b676:	682b      	ldr	r3, [r5, #0]
 800b678:	b903      	cbnz	r3, 800b67c <__sflush_r+0x78>
 800b67a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b67c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b67e:	602f      	str	r7, [r5, #0]
 800b680:	b1b9      	cbz	r1, 800b6b2 <__sflush_r+0xae>
 800b682:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b686:	4299      	cmp	r1, r3
 800b688:	d002      	beq.n	800b690 <__sflush_r+0x8c>
 800b68a:	4628      	mov	r0, r5
 800b68c:	f7ff fbea 	bl	800ae64 <_free_r>
 800b690:	2300      	movs	r3, #0
 800b692:	6363      	str	r3, [r4, #52]	@ 0x34
 800b694:	e00d      	b.n	800b6b2 <__sflush_r+0xae>
 800b696:	2301      	movs	r3, #1
 800b698:	4628      	mov	r0, r5
 800b69a:	47b0      	blx	r6
 800b69c:	4602      	mov	r2, r0
 800b69e:	1c50      	adds	r0, r2, #1
 800b6a0:	d1c9      	bne.n	800b636 <__sflush_r+0x32>
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0c6      	beq.n	800b636 <__sflush_r+0x32>
 800b6a8:	2b1d      	cmp	r3, #29
 800b6aa:	d001      	beq.n	800b6b0 <__sflush_r+0xac>
 800b6ac:	2b16      	cmp	r3, #22
 800b6ae:	d11e      	bne.n	800b6ee <__sflush_r+0xea>
 800b6b0:	602f      	str	r7, [r5, #0]
 800b6b2:	2000      	movs	r0, #0
 800b6b4:	e022      	b.n	800b6fc <__sflush_r+0xf8>
 800b6b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ba:	b21b      	sxth	r3, r3
 800b6bc:	e01b      	b.n	800b6f6 <__sflush_r+0xf2>
 800b6be:	690f      	ldr	r7, [r1, #16]
 800b6c0:	2f00      	cmp	r7, #0
 800b6c2:	d0f6      	beq.n	800b6b2 <__sflush_r+0xae>
 800b6c4:	0793      	lsls	r3, r2, #30
 800b6c6:	680e      	ldr	r6, [r1, #0]
 800b6c8:	bf08      	it	eq
 800b6ca:	694b      	ldreq	r3, [r1, #20]
 800b6cc:	600f      	str	r7, [r1, #0]
 800b6ce:	bf18      	it	ne
 800b6d0:	2300      	movne	r3, #0
 800b6d2:	eba6 0807 	sub.w	r8, r6, r7
 800b6d6:	608b      	str	r3, [r1, #8]
 800b6d8:	f1b8 0f00 	cmp.w	r8, #0
 800b6dc:	dde9      	ble.n	800b6b2 <__sflush_r+0xae>
 800b6de:	6a21      	ldr	r1, [r4, #32]
 800b6e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6e2:	4643      	mov	r3, r8
 800b6e4:	463a      	mov	r2, r7
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	47b0      	blx	r6
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	dc08      	bgt.n	800b700 <__sflush_r+0xfc>
 800b6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6f6:	81a3      	strh	r3, [r4, #12]
 800b6f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b700:	4407      	add	r7, r0
 800b702:	eba8 0800 	sub.w	r8, r8, r0
 800b706:	e7e7      	b.n	800b6d8 <__sflush_r+0xd4>
 800b708:	dfbffffe 	.word	0xdfbffffe

0800b70c <_fflush_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	690b      	ldr	r3, [r1, #16]
 800b710:	4605      	mov	r5, r0
 800b712:	460c      	mov	r4, r1
 800b714:	b913      	cbnz	r3, 800b71c <_fflush_r+0x10>
 800b716:	2500      	movs	r5, #0
 800b718:	4628      	mov	r0, r5
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	b118      	cbz	r0, 800b726 <_fflush_r+0x1a>
 800b71e:	6a03      	ldr	r3, [r0, #32]
 800b720:	b90b      	cbnz	r3, 800b726 <_fflush_r+0x1a>
 800b722:	f7ff f987 	bl	800aa34 <__sinit>
 800b726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d0f3      	beq.n	800b716 <_fflush_r+0xa>
 800b72e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b730:	07d0      	lsls	r0, r2, #31
 800b732:	d404      	bmi.n	800b73e <_fflush_r+0x32>
 800b734:	0599      	lsls	r1, r3, #22
 800b736:	d402      	bmi.n	800b73e <_fflush_r+0x32>
 800b738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b73a:	f7ff fb72 	bl	800ae22 <__retarget_lock_acquire_recursive>
 800b73e:	4628      	mov	r0, r5
 800b740:	4621      	mov	r1, r4
 800b742:	f7ff ff5f 	bl	800b604 <__sflush_r>
 800b746:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b748:	07da      	lsls	r2, r3, #31
 800b74a:	4605      	mov	r5, r0
 800b74c:	d4e4      	bmi.n	800b718 <_fflush_r+0xc>
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	059b      	lsls	r3, r3, #22
 800b752:	d4e1      	bmi.n	800b718 <_fflush_r+0xc>
 800b754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b756:	f7ff fb65 	bl	800ae24 <__retarget_lock_release_recursive>
 800b75a:	e7dd      	b.n	800b718 <_fflush_r+0xc>

0800b75c <fiprintf>:
 800b75c:	b40e      	push	{r1, r2, r3}
 800b75e:	b503      	push	{r0, r1, lr}
 800b760:	4601      	mov	r1, r0
 800b762:	ab03      	add	r3, sp, #12
 800b764:	4805      	ldr	r0, [pc, #20]	@ (800b77c <fiprintf+0x20>)
 800b766:	f853 2b04 	ldr.w	r2, [r3], #4
 800b76a:	6800      	ldr	r0, [r0, #0]
 800b76c:	9301      	str	r3, [sp, #4]
 800b76e:	f7ff fca3 	bl	800b0b8 <_vfiprintf_r>
 800b772:	b002      	add	sp, #8
 800b774:	f85d eb04 	ldr.w	lr, [sp], #4
 800b778:	b003      	add	sp, #12
 800b77a:	4770      	bx	lr
 800b77c:	20000108 	.word	0x20000108

0800b780 <__swhatbuf_r>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	460c      	mov	r4, r1
 800b784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b788:	2900      	cmp	r1, #0
 800b78a:	b096      	sub	sp, #88	@ 0x58
 800b78c:	4615      	mov	r5, r2
 800b78e:	461e      	mov	r6, r3
 800b790:	da0d      	bge.n	800b7ae <__swhatbuf_r+0x2e>
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b798:	f04f 0100 	mov.w	r1, #0
 800b79c:	bf14      	ite	ne
 800b79e:	2340      	movne	r3, #64	@ 0x40
 800b7a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	6031      	str	r1, [r6, #0]
 800b7a8:	602b      	str	r3, [r5, #0]
 800b7aa:	b016      	add	sp, #88	@ 0x58
 800b7ac:	bd70      	pop	{r4, r5, r6, pc}
 800b7ae:	466a      	mov	r2, sp
 800b7b0:	f000 f848 	bl	800b844 <_fstat_r>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	dbec      	blt.n	800b792 <__swhatbuf_r+0x12>
 800b7b8:	9901      	ldr	r1, [sp, #4]
 800b7ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7c2:	4259      	negs	r1, r3
 800b7c4:	4159      	adcs	r1, r3
 800b7c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7ca:	e7eb      	b.n	800b7a4 <__swhatbuf_r+0x24>

0800b7cc <__smakebuf_r>:
 800b7cc:	898b      	ldrh	r3, [r1, #12]
 800b7ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7d0:	079d      	lsls	r5, r3, #30
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	d507      	bpl.n	800b7e8 <__smakebuf_r+0x1c>
 800b7d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	6123      	str	r3, [r4, #16]
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	6163      	str	r3, [r4, #20]
 800b7e4:	b003      	add	sp, #12
 800b7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7e8:	ab01      	add	r3, sp, #4
 800b7ea:	466a      	mov	r2, sp
 800b7ec:	f7ff ffc8 	bl	800b780 <__swhatbuf_r>
 800b7f0:	9f00      	ldr	r7, [sp, #0]
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f7ff fba8 	bl	800af4c <_malloc_r>
 800b7fc:	b948      	cbnz	r0, 800b812 <__smakebuf_r+0x46>
 800b7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b802:	059a      	lsls	r2, r3, #22
 800b804:	d4ee      	bmi.n	800b7e4 <__smakebuf_r+0x18>
 800b806:	f023 0303 	bic.w	r3, r3, #3
 800b80a:	f043 0302 	orr.w	r3, r3, #2
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	e7e2      	b.n	800b7d8 <__smakebuf_r+0xc>
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	6020      	str	r0, [r4, #0]
 800b816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b81a:	81a3      	strh	r3, [r4, #12]
 800b81c:	9b01      	ldr	r3, [sp, #4]
 800b81e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b822:	b15b      	cbz	r3, 800b83c <__smakebuf_r+0x70>
 800b824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 f81d 	bl	800b868 <_isatty_r>
 800b82e:	b128      	cbz	r0, 800b83c <__smakebuf_r+0x70>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	f023 0303 	bic.w	r3, r3, #3
 800b836:	f043 0301 	orr.w	r3, r3, #1
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	431d      	orrs	r5, r3
 800b840:	81a5      	strh	r5, [r4, #12]
 800b842:	e7cf      	b.n	800b7e4 <__smakebuf_r+0x18>

0800b844 <_fstat_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4d07      	ldr	r5, [pc, #28]	@ (800b864 <_fstat_r+0x20>)
 800b848:	2300      	movs	r3, #0
 800b84a:	4604      	mov	r4, r0
 800b84c:	4608      	mov	r0, r1
 800b84e:	4611      	mov	r1, r2
 800b850:	602b      	str	r3, [r5, #0]
 800b852:	f7f5 fac3 	bl	8000ddc <_fstat>
 800b856:	1c43      	adds	r3, r0, #1
 800b858:	d102      	bne.n	800b860 <_fstat_r+0x1c>
 800b85a:	682b      	ldr	r3, [r5, #0]
 800b85c:	b103      	cbz	r3, 800b860 <_fstat_r+0x1c>
 800b85e:	6023      	str	r3, [r4, #0]
 800b860:	bd38      	pop	{r3, r4, r5, pc}
 800b862:	bf00      	nop
 800b864:	200010bc 	.word	0x200010bc

0800b868 <_isatty_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d06      	ldr	r5, [pc, #24]	@ (800b884 <_isatty_r+0x1c>)
 800b86c:	2300      	movs	r3, #0
 800b86e:	4604      	mov	r4, r0
 800b870:	4608      	mov	r0, r1
 800b872:	602b      	str	r3, [r5, #0]
 800b874:	f7f5 fac2 	bl	8000dfc <_isatty>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	d102      	bne.n	800b882 <_isatty_r+0x1a>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	b103      	cbz	r3, 800b882 <_isatty_r+0x1a>
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	bd38      	pop	{r3, r4, r5, pc}
 800b884:	200010bc 	.word	0x200010bc

0800b888 <_sbrk_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4d06      	ldr	r5, [pc, #24]	@ (800b8a4 <_sbrk_r+0x1c>)
 800b88c:	2300      	movs	r3, #0
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	602b      	str	r3, [r5, #0]
 800b894:	f7f5 faca 	bl	8000e2c <_sbrk>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d102      	bne.n	800b8a2 <_sbrk_r+0x1a>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b103      	cbz	r3, 800b8a2 <_sbrk_r+0x1a>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	200010bc 	.word	0x200010bc

0800b8a8 <abort>:
 800b8a8:	b508      	push	{r3, lr}
 800b8aa:	2006      	movs	r0, #6
 800b8ac:	f000 f82c 	bl	800b908 <raise>
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	f7f5 fa5f 	bl	8000d74 <_exit>

0800b8b6 <_raise_r>:
 800b8b6:	291f      	cmp	r1, #31
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	460c      	mov	r4, r1
 800b8be:	d904      	bls.n	800b8ca <_raise_r+0x14>
 800b8c0:	2316      	movs	r3, #22
 800b8c2:	6003      	str	r3, [r0, #0]
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8c8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b8cc:	b112      	cbz	r2, 800b8d4 <_raise_r+0x1e>
 800b8ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8d2:	b94b      	cbnz	r3, 800b8e8 <_raise_r+0x32>
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f000 f831 	bl	800b93c <_getpid_r>
 800b8da:	4622      	mov	r2, r4
 800b8dc:	4601      	mov	r1, r0
 800b8de:	4628      	mov	r0, r5
 800b8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8e4:	f000 b818 	b.w	800b918 <_kill_r>
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d00a      	beq.n	800b902 <_raise_r+0x4c>
 800b8ec:	1c59      	adds	r1, r3, #1
 800b8ee:	d103      	bne.n	800b8f8 <_raise_r+0x42>
 800b8f0:	2316      	movs	r3, #22
 800b8f2:	6003      	str	r3, [r0, #0]
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	e7e7      	b.n	800b8c8 <_raise_r+0x12>
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b8fe:	4620      	mov	r0, r4
 800b900:	4798      	blx	r3
 800b902:	2000      	movs	r0, #0
 800b904:	e7e0      	b.n	800b8c8 <_raise_r+0x12>
	...

0800b908 <raise>:
 800b908:	4b02      	ldr	r3, [pc, #8]	@ (800b914 <raise+0xc>)
 800b90a:	4601      	mov	r1, r0
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	f7ff bfd2 	b.w	800b8b6 <_raise_r>
 800b912:	bf00      	nop
 800b914:	20000108 	.word	0x20000108

0800b918 <_kill_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d07      	ldr	r5, [pc, #28]	@ (800b938 <_kill_r+0x20>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	4611      	mov	r1, r2
 800b924:	602b      	str	r3, [r5, #0]
 800b926:	f7f5 fa15 	bl	8000d54 <_kill>
 800b92a:	1c43      	adds	r3, r0, #1
 800b92c:	d102      	bne.n	800b934 <_kill_r+0x1c>
 800b92e:	682b      	ldr	r3, [r5, #0]
 800b930:	b103      	cbz	r3, 800b934 <_kill_r+0x1c>
 800b932:	6023      	str	r3, [r4, #0]
 800b934:	bd38      	pop	{r3, r4, r5, pc}
 800b936:	bf00      	nop
 800b938:	200010bc 	.word	0x200010bc

0800b93c <_getpid_r>:
 800b93c:	f7f5 ba02 	b.w	8000d44 <_getpid>

0800b940 <_init>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	bf00      	nop
 800b944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b946:	bc08      	pop	{r3}
 800b948:	469e      	mov	lr, r3
 800b94a:	4770      	bx	lr

0800b94c <_fini>:
 800b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94e:	bf00      	nop
 800b950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b952:	bc08      	pop	{r3}
 800b954:	469e      	mov	lr, r3
 800b956:	4770      	bx	lr
