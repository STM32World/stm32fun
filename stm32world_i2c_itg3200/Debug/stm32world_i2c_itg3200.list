
stm32world_i2c_itg3200.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000573c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080058d0  080058d0  000068d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d48  08005d48  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005d48  08005d48  00006d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d50  08005d50  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d54  08005d54  00006d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005d58  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000071d4  2**0
                  CONTENTS
 10 .bss          00000214  200001d4  200001d4  000071d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e8  200003e8  000071d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da36  00000000  00000000  00007204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c32  00000000  00000000  00014c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00006811  00000000  00000000  0001686c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c0  00000000  00000000  0001d080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000078c  00000000  00000000  0001da40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f84e  00000000  00000000  0001e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010c58  00000000  00000000  0003da1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bbf50  00000000  00000000  0004e672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0010a5c2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002bf8  00000000  00000000  0010a608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  0010d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058b4 	.word	0x080058b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080058b4 	.word	0x080058b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b084      	sub	sp, #16
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	9201      	str	r2, [sp, #4]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <MX_GPIO_Init+0x48>)
 8000ea0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ea2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000ea6:	6319      	str	r1, [r3, #48]	@ 0x30
 8000ea8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000eaa:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8000eae:	9101      	str	r1, [sp, #4]
 8000eb0:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	9202      	str	r2, [sp, #8]
 8000eb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000eb6:	f041 0102 	orr.w	r1, r1, #2
 8000eba:	6319      	str	r1, [r3, #48]	@ 0x30
 8000ebc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ebe:	f001 0102 	and.w	r1, r1, #2
 8000ec2:	9102      	str	r1, [sp, #8]
 8000ec4:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	9203      	str	r2, [sp, #12]
 8000ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eca:	f042 0201 	orr.w	r2, r2, #1
 8000ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	9303      	str	r3, [sp, #12]
 8000ed8:	9b03      	ldr	r3, [sp, #12]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eda:	b004      	add	sp, #16
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <_write>:
    if (fd == 1 || fd == 2) {
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	2801      	cmp	r0, #1
 8000ee8:	d80a      	bhi.n	8000f00 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000eea:	b510      	push	{r4, lr}
 8000eec:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <_write+0x28>)
 8000ef6:	f001 fe8c 	bl	8002c12 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000efa:	b920      	cbnz	r0, 8000f06 <_write+0x22>
            return len;
 8000efc:	4620      	mov	r0, r4
}
 8000efe:	bd10      	pop	{r4, pc}
    return -1;
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000f04:	4770      	bx	lr
            return -1;
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f0a:	e7f8      	b.n	8000efe <_write+0x1a>
 8000f0c:	200001f8 	.word	0x200001f8

08000f10 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <Error_Handler+0x2>

08000f14 <MX_USART1_UART_Init>:
{
 8000f14:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000f16:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <MX_USART1_UART_Init+0x2c>)
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_USART1_UART_Init+0x30>)
 8000f1a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8000f1c:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000f20:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	2300      	movs	r3, #0
 8000f24:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f26:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f28:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f32:	f001 fe3e 	bl	8002bb2 <HAL_UART_Init>
 8000f36:	b900      	cbnz	r0, 8000f3a <MX_USART1_UART_Init+0x26>
}
 8000f38:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f3a:	f7ff ffe9 	bl	8000f10 <Error_Handler>
 8000f3e:	bf00      	nop
 8000f40:	200001f8 	.word	0x200001f8
 8000f44:	40011000 	.word	0x40011000

08000f48 <MX_I2C2_Init>:
{
 8000f48:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8000f4a:	480a      	ldr	r0, [pc, #40]	@ (8000f74 <MX_I2C2_Init+0x2c>)
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <MX_I2C2_Init+0x30>)
 8000f4e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <MX_I2C2_Init+0x34>)
 8000f52:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f54:	2300      	movs	r3, #0
 8000f56:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f58:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f5e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f60:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f62:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f64:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f66:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f68:	f000 fe0e 	bl	8001b88 <HAL_I2C_Init>
 8000f6c:	b900      	cbnz	r0, 8000f70 <MX_I2C2_Init+0x28>
}
 8000f6e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f70:	f7ff ffce 	bl	8000f10 <Error_Handler>
 8000f74:	20000240 	.word	0x20000240
 8000f78:	40005800 	.word	0x40005800
 8000f7c:	00061a80 	.word	0x00061a80

08000f80 <SystemClock_Config>:
{
 8000f80:	b500      	push	{lr}
 8000f82:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f84:	2230      	movs	r2, #48	@ 0x30
 8000f86:	2100      	movs	r1, #0
 8000f88:	a808      	add	r0, sp, #32
 8000f8a:	f002 fdd1 	bl	8003b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9303      	str	r3, [sp, #12]
 8000f92:	9304      	str	r3, [sp, #16]
 8000f94:	9305      	str	r3, [sp, #20]
 8000f96:	9306      	str	r3, [sp, #24]
 8000f98:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	4a20      	ldr	r2, [pc, #128]	@ (8001020 <SystemClock_Config+0xa0>)
 8000f9e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000fa0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000fa4:	6411      	str	r1, [r2, #64]	@ 0x40
 8000fa6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000fa8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000fac:	9201      	str	r2, [sp, #4]
 8000fae:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <SystemClock_Config+0xa4>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fce:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fd8:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fda:	2208      	movs	r2, #8
 8000fdc:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fde:	22a8      	movs	r2, #168	@ 0xa8
 8000fe0:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe2:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	a808      	add	r0, sp, #32
 8000fea:	f001 f9af 	bl	800234c <HAL_RCC_OscConfig>
 8000fee:	b998      	cbnz	r0, 8001018 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001000:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001006:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001008:	2105      	movs	r1, #5
 800100a:	a803      	add	r0, sp, #12
 800100c:	f001 fc02 	bl	8002814 <HAL_RCC_ClockConfig>
 8001010:	b920      	cbnz	r0, 800101c <SystemClock_Config+0x9c>
}
 8001012:	b015      	add	sp, #84	@ 0x54
 8001014:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001018:	f7ff ff7a 	bl	8000f10 <Error_Handler>
    Error_Handler();
 800101c:	f7ff ff78 	bl	8000f10 <Error_Handler>
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <main>:
{
 8001028:	b510      	push	{r4, lr}
  HAL_Init();
 800102a:	f000 f9af 	bl	800138c <HAL_Init>
  SystemClock_Config();
 800102e:	f7ff ffa7 	bl	8000f80 <SystemClock_Config>
  MX_GPIO_Init();
 8001032:	f7ff ff31 	bl	8000e98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001036:	f7ff ff6d 	bl	8000f14 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800103a:	f7ff ff85 	bl	8000f48 <MX_I2C2_Init>
  printf("\n\n\n--------\nStarting\n");
 800103e:	4827      	ldr	r0, [pc, #156]	@ (80010dc <main+0xb4>)
 8001040:	f002 fc96 	bl	8003970 <puts>
  printf("Scan i2c2\n");
 8001044:	4826      	ldr	r0, [pc, #152]	@ (80010e0 <main+0xb8>)
 8001046:	f002 fc93 	bl	8003970 <puts>
    for (uint8_t i = 0; i < 128; i++) {
 800104a:	2400      	movs	r4, #0
 800104c:	e005      	b.n	800105a <main+0x32>
            printf("-- ");
 800104e:	4825      	ldr	r0, [pc, #148]	@ (80010e4 <main+0xbc>)
 8001050:	f002 fc1e 	bl	8003890 <iprintf>
 8001054:	e010      	b.n	8001078 <main+0x50>
    for (uint8_t i = 0; i < 128; i++) {
 8001056:	3401      	adds	r4, #1
 8001058:	b2e4      	uxtb	r4, r4
 800105a:	f014 0f80 	tst.w	r4, #128	@ 0x80
 800105e:	d115      	bne.n	800108c <main+0x64>
        if (HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8001060:	2305      	movs	r3, #5
 8001062:	2203      	movs	r2, #3
 8001064:	0061      	lsls	r1, r4, #1
 8001066:	4820      	ldr	r0, [pc, #128]	@ (80010e8 <main+0xc0>)
 8001068:	f001 f8a6 	bl	80021b8 <HAL_I2C_IsDeviceReady>
 800106c:	2800      	cmp	r0, #0
 800106e:	d1ee      	bne.n	800104e <main+0x26>
            printf("%2x ", i);
 8001070:	4621      	mov	r1, r4
 8001072:	481e      	ldr	r0, [pc, #120]	@ (80010ec <main+0xc4>)
 8001074:	f002 fc0c 	bl	8003890 <iprintf>
        if (i > 0 && (i + 1) % 16 == 0) printf("\n");
 8001078:	2c00      	cmp	r4, #0
 800107a:	d0ec      	beq.n	8001056 <main+0x2e>
 800107c:	1c63      	adds	r3, r4, #1
 800107e:	f013 0f0f 	tst.w	r3, #15
 8001082:	d1e8      	bne.n	8001056 <main+0x2e>
 8001084:	200a      	movs	r0, #10
 8001086:	f002 fc15 	bl	80038b4 <putchar>
 800108a:	e7e4      	b.n	8001056 <main+0x2e>
    printf("\n");
 800108c:	200a      	movs	r0, #10
 800108e:	f002 fc11 	bl	80038b4 <putchar>
    printf("Initialising ITG3200\n");
 8001092:	4817      	ldr	r0, [pc, #92]	@ (80010f0 <main+0xc8>)
 8001094:	f002 fc6c 	bl	8003970 <puts>
    if (itg3200_init(&itg, &hi2c2, ITG3200_DEFAULT_ADDR) != ITG3200_OK) {
 8001098:	2268      	movs	r2, #104	@ 0x68
 800109a:	4913      	ldr	r1, [pc, #76]	@ (80010e8 <main+0xc0>)
 800109c:	4815      	ldr	r0, [pc, #84]	@ (80010f4 <main+0xcc>)
 800109e:	f001 fe71 	bl	8002d84 <itg3200_init>
 80010a2:	b948      	cbnz	r0, 80010b8 <main+0x90>
    printf("Getting temperature\n");
 80010a4:	4814      	ldr	r0, [pc, #80]	@ (80010f8 <main+0xd0>)
 80010a6:	f002 fc63 	bl	8003970 <puts>
    if (itg3200_get_temp(&itg) != ITG3200_OK) {
 80010aa:	4812      	ldr	r0, [pc, #72]	@ (80010f4 <main+0xcc>)
 80010ac:	f001 fe9a 	bl	8002de4 <itg3200_get_temp>
 80010b0:	b930      	cbnz	r0, 80010c0 <main+0x98>
    for (uint8_t i = 0; i < 128; i++) {
 80010b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b6:	e00c      	b.n	80010d2 <main+0xaa>
        printf("Error\n");
 80010b8:	4810      	ldr	r0, [pc, #64]	@ (80010fc <main+0xd4>)
 80010ba:	f002 fc59 	bl	8003970 <puts>
 80010be:	e7f1      	b.n	80010a4 <main+0x7c>
        printf("Error\n");
 80010c0:	480e      	ldr	r0, [pc, #56]	@ (80010fc <main+0xd4>)
 80010c2:	f002 fc55 	bl	8003970 <puts>
 80010c6:	e7f4      	b.n	80010b2 <main+0x8a>
            itg3200_get_temp(&itg);
 80010c8:	480a      	ldr	r0, [pc, #40]	@ (80010f4 <main+0xcc>)
 80010ca:	f001 fe8b 	bl	8002de4 <itg3200_get_temp>
            next_tick = now + 1000;
 80010ce:	f504 727a 	add.w	r2, r4, #1000	@ 0x3e8
        now = uwTick;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <main+0xd8>)
 80010d4:	681c      	ldr	r4, [r3, #0]
        if (now >= next_tick) {
 80010d6:	42a2      	cmp	r2, r4
 80010d8:	d8fb      	bhi.n	80010d2 <main+0xaa>
 80010da:	e7f5      	b.n	80010c8 <main+0xa0>
 80010dc:	080058d0 	.word	0x080058d0
 80010e0:	080058e8 	.word	0x080058e8
 80010e4:	080058fc 	.word	0x080058fc
 80010e8:	20000240 	.word	0x20000240
 80010ec:	080058f4 	.word	0x080058f4
 80010f0:	08005900 	.word	0x08005900
 80010f4:	200001f0 	.word	0x200001f0
 80010f8:	08005920 	.word	0x08005920
 80010fc:	08005918 	.word	0x08005918
 8001100:	20000298 	.word	0x20000298

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2100      	movs	r1, #0
 8001108:	9100      	str	r1, [sp, #0]
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_MspInit+0x34>)
 800110c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800110e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001112:	645a      	str	r2, [r3, #68]	@ 0x44
 8001114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001116:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	9101      	str	r1, [sp, #4]
 8001120:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001122:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001126:	641a      	str	r2, [r3, #64]	@ 0x40
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	b002      	add	sp, #8
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800113c:	b530      	push	{r4, r5, lr}
 800113e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	2300      	movs	r3, #0
 8001142:	9303      	str	r3, [sp, #12]
 8001144:	9304      	str	r3, [sp, #16]
 8001146:	9305      	str	r3, [sp, #20]
 8001148:	9306      	str	r3, [sp, #24]
 800114a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 800114c:	6802      	ldr	r2, [r0, #0]
 800114e:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <HAL_I2C_MspInit+0x64>)
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001154:	b009      	add	sp, #36	@ 0x24
 8001156:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	2500      	movs	r5, #0
 800115a:	9501      	str	r5, [sp, #4]
 800115c:	4c11      	ldr	r4, [pc, #68]	@ (80011a4 <HAL_I2C_MspInit+0x68>)
 800115e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6323      	str	r3, [r4, #48]	@ 0x30
 8001166:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001170:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001174:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001176:	2312      	movs	r3, #18
 8001178:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800117e:	2304      	movs	r3, #4
 8001180:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	a903      	add	r1, sp, #12
 8001184:	4808      	ldr	r0, [pc, #32]	@ (80011a8 <HAL_I2C_MspInit+0x6c>)
 8001186:	f000 f9ab 	bl	80014e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800118a:	9502      	str	r5, [sp, #8]
 800118c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800118e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001192:	6423      	str	r3, [r4, #64]	@ 0x40
 8001194:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	9b02      	ldr	r3, [sp, #8]
}
 800119e:	e7d9      	b.n	8001154 <HAL_I2C_MspInit+0x18>
 80011a0:	40005800 	.word	0x40005800
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b500      	push	{lr}
 80011ae:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	2300      	movs	r3, #0
 80011b2:	9303      	str	r3, [sp, #12]
 80011b4:	9304      	str	r3, [sp, #16]
 80011b6:	9305      	str	r3, [sp, #20]
 80011b8:	9306      	str	r3, [sp, #24]
 80011ba:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80011bc:	6802      	ldr	r2, [r0, #0]
 80011be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80011c2:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d002      	beq.n	80011d0 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011ca:	b009      	add	sp, #36	@ 0x24
 80011cc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d0:	2100      	movs	r1, #0
 80011d2:	9101      	str	r1, [sp, #4]
 80011d4:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80011d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011da:	f042 0210 	orr.w	r2, r2, #16
 80011de:	645a      	str	r2, [r3, #68]	@ 0x44
 80011e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011e2:	f002 0210 	and.w	r2, r2, #16
 80011e6:	9201      	str	r2, [sp, #4]
 80011e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	9102      	str	r1, [sp, #8]
 80011ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001202:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800120c:	2307      	movs	r3, #7
 800120e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	a903      	add	r1, sp, #12
 8001212:	4802      	ldr	r0, [pc, #8]	@ (800121c <HAL_UART_MspInit+0x70>)
 8001214:	f000 f964 	bl	80014e0 <HAL_GPIO_Init>
}
 8001218:	e7d7      	b.n	80011ca <HAL_UART_MspInit+0x1e>
 800121a:	bf00      	nop
 800121c:	40020000 	.word	0x40020000

08001220 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler>

08001222 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler>

08001224 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler>

08001226 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler>

08001228 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler>

0800122a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	4770      	bx	lr

0800122c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001232:	f000 f8c5 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001236:	bd08      	pop	{r3, pc}

08001238 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001238:	2001      	movs	r0, #1
 800123a:	4770      	bx	lr

0800123c <_kill>:

int _kill(int pid, int sig)
{
 800123c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800123e:	f002 fcc9 	bl	8003bd4 <__errno>
 8001242:	2316      	movs	r3, #22
 8001244:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800124a:	bd08      	pop	{r3, pc}

0800124c <_exit>:

void _exit (int status)
{
 800124c:	b508      	push	{r3, lr}
  _kill(status, -1);
 800124e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001252:	f7ff fff3 	bl	800123c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001256:	e7fe      	b.n	8001256 <_exit+0xa>

08001258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	460c      	mov	r4, r1
 800125c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	2500      	movs	r5, #0
 8001260:	e006      	b.n	8001270 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001262:	f3af 8000 	nop.w
 8001266:	4621      	mov	r1, r4
 8001268:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800126e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001270:	42b5      	cmp	r5, r6
 8001272:	dbf6      	blt.n	8001262 <_read+0xa>
  }

  return len;
}
 8001274:	4630      	mov	r0, r6
 8001276:	bd70      	pop	{r4, r5, r6, pc}

08001278 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800127c:	4770      	bx	lr

0800127e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800127e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001282:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001284:	2000      	movs	r0, #0
 8001286:	4770      	bx	lr

08001288 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001288:	2001      	movs	r0, #1
 800128a:	4770      	bx	lr

0800128c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800128c:	2000      	movs	r0, #0
 800128e:	4770      	bx	lr

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b510      	push	{r4, lr}
 8001292:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a0c      	ldr	r2, [pc, #48]	@ (80012c8 <_sbrk+0x38>)
 8001296:	490d      	ldr	r1, [pc, #52]	@ (80012cc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <_sbrk+0x40>)
 800129a:	6800      	ldr	r0, [r0, #0]
 800129c:	b140      	cbz	r0, 80012b0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <_sbrk+0x40>)
 80012a0:	6800      	ldr	r0, [r0, #0]
 80012a2:	4403      	add	r3, r0
 80012a4:	1a52      	subs	r2, r2, r1
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d806      	bhi.n	80012b8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80012aa:	4a09      	ldr	r2, [pc, #36]	@ (80012d0 <_sbrk+0x40>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80012ae:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80012b0:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <_sbrk+0x40>)
 80012b2:	4c08      	ldr	r4, [pc, #32]	@ (80012d4 <_sbrk+0x44>)
 80012b4:	6004      	str	r4, [r0, #0]
 80012b6:	e7f2      	b.n	800129e <_sbrk+0xe>
    errno = ENOMEM;
 80012b8:	f002 fc8c 	bl	8003bd4 <__errno>
 80012bc:	230c      	movs	r3, #12
 80012be:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c4:	e7f3      	b.n	80012ae <_sbrk+0x1e>
 80012c6:	bf00      	nop
 80012c8:	20020000 	.word	0x20020000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	20000294 	.word	0x20000294
 80012d4:	200003e8 	.word	0x200003e8

080012d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4a03      	ldr	r2, [pc, #12]	@ (80012e8 <SystemInit+0x10>)
 80012da:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80012de:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001324 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012f0:	f7ff fff2 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f4:	480c      	ldr	r0, [pc, #48]	@ (8001328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f6:	490d      	ldr	r1, [pc, #52]	@ (800132c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800130c:	4c0a      	ldr	r4, [pc, #40]	@ (8001338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800131a:	f002 fc61 	bl	8003be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fe83 	bl	8001028 <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001330:	08005d58 	.word	0x08005d58
  ldr r2, =_sbss
 8001334:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001338:	200003e8 	.word	0x200003e8

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>
	...

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b510      	push	{r4, lr}
 8001342:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_InitTick+0x40>)
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <HAL_InitTick+0x44>)
 8001352:	6810      	ldr	r0, [r2, #0]
 8001354:	fbb0 f0f3 	udiv	r0, r0, r3
 8001358:	f000 f8ae 	bl	80014b8 <HAL_SYSTICK_Config>
 800135c:	b968      	cbnz	r0, 800137a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	2c0f      	cmp	r4, #15
 8001360:	d901      	bls.n	8001366 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001362:	2001      	movs	r0, #1
 8001364:	e00a      	b.n	800137c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001366:	2200      	movs	r2, #0
 8001368:	4621      	mov	r1, r4
 800136a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800136e:	f000 f893 	bl	8001498 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_InitTick+0x48>)
 8001374:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2000      	movs	r0, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
}
 800137c:	bd10      	pop	{r4, pc}
 800137e:	bf00      	nop
 8001380:	20000004 	.word	0x20000004
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008

0800138c <HAL_Init>:
{
 800138c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <HAL_Init+0x30>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001396:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800139e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013a6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f863 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	200f      	movs	r0, #15
 80013b0:	f7ff ffc6 	bl	8001340 <HAL_InitTick>
  HAL_MspInit();
 80013b4:	f7ff fea6 	bl	8001104 <HAL_MspInit>
}
 80013b8:	2000      	movs	r0, #0
 80013ba:	bd08      	pop	{r3, pc}
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013c0:	4a03      	ldr	r2, [pc, #12]	@ (80013d0 <HAL_IncTick+0x10>)
 80013c2:	6811      	ldr	r1, [r2, #0]
 80013c4:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <HAL_IncTick+0x14>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	440b      	add	r3, r1
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000298 	.word	0x20000298
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013d8:	4b01      	ldr	r3, [pc, #4]	@ (80013e0 <HAL_GetTick+0x8>)
 80013da:	6818      	ldr	r0, [r3, #0]
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000298 	.word	0x20000298

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013e8:	f7ff fff6 	bl	80013d8 <HAL_GetTick>
 80013ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ee:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80013f2:	d002      	beq.n	80013fa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <HAL_Delay+0x24>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013fa:	f7ff ffed 	bl	80013d8 <HAL_GetTick>
 80013fe:	1b40      	subs	r0, r0, r5
 8001400:	42a0      	cmp	r0, r4
 8001402:	d3fa      	bcc.n	80013fa <HAL_Delay+0x16>
  {
  }
}
 8001404:	bd38      	pop	{r3, r4, r5, pc}
 8001406:	bf00      	nop
 8001408:	20000004 	.word	0x20000004

0800140c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800140c:	2800      	cmp	r0, #0
 800140e:	db08      	blt.n	8001422 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	0109      	lsls	r1, r1, #4
 8001412:	b2c9      	uxtb	r1, r1
 8001414:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001418:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800141c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001420:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	f000 000f 	and.w	r0, r0, #15
 8001426:	0109      	lsls	r1, r1, #4
 8001428:	b2c9      	uxtb	r1, r1
 800142a:	4b01      	ldr	r3, [pc, #4]	@ (8001430 <__NVIC_SetPriority+0x24>)
 800142c:	5419      	strb	r1, [r3, r0]
  }
}
 800142e:	4770      	bx	lr
 8001430:	e000ed14 	.word	0xe000ed14

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001436:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143a:	f1c0 0c07 	rsb	ip, r0, #7
 800143e:	f1bc 0f04 	cmp.w	ip, #4
 8001442:	bf28      	it	cs
 8001444:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001448:	1d03      	adds	r3, r0, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d90f      	bls.n	800146e <NVIC_EncodePriority+0x3a>
 800144e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001454:	fa0e f00c 	lsl.w	r0, lr, ip
 8001458:	ea21 0100 	bic.w	r1, r1, r0
 800145c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001462:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001466:	ea41 0002 	orr.w	r0, r1, r2
 800146a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	2300      	movs	r3, #0
 8001470:	e7ee      	b.n	8001450 <NVIC_EncodePriority+0x1c>
	...

08001474 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4a07      	ldr	r2, [pc, #28]	@ (8001494 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001476:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001478:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	0200      	lsls	r0, r0, #8
 8001482:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001486:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001490:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001498:	b510      	push	{r4, lr}
 800149a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_NVIC_SetPriority+0x1c>)
 800149e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80014a4:	f7ff ffc6 	bl	8001434 <NVIC_EncodePriority>
 80014a8:	4601      	mov	r1, r0
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff ffae 	bl	800140c <__NVIC_SetPriority>
}
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	3801      	subs	r0, #1
 80014ba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80014be:	d20b      	bcs.n	80014d8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80014c4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <HAL_SYSTICK_Config+0x24>)
 80014c8:	21f0      	movs	r1, #240	@ 0xf0
 80014ca:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ce:	2000      	movs	r0, #0
 80014d0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	2207      	movs	r2, #7
 80014d4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014d8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	f200 80e9 	bhi.w	80016ba <HAL_GPIO_Init+0x1da>
{
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	e065      	b.n	80015ba <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ee:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80014f4:	2403      	movs	r4, #3
 80014f6:	fa04 f40e 	lsl.w	r4, r4, lr
 80014fa:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014fe:	68cc      	ldr	r4, [r1, #12]
 8001500:	fa04 f40e 	lsl.w	r4, r4, lr
 8001504:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001506:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001508:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800150a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150e:	684a      	ldr	r2, [r1, #4]
 8001510:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001514:	409a      	lsls	r2, r3
 8001516:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001518:	6042      	str	r2, [r0, #4]
 800151a:	e05c      	b.n	80015d6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151c:	08dc      	lsrs	r4, r3, #3
 800151e:	3408      	adds	r4, #8
 8001520:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001524:	f003 0507 	and.w	r5, r3, #7
 8001528:	00ad      	lsls	r5, r5, #2
 800152a:	f04f 0e0f 	mov.w	lr, #15
 800152e:	fa0e fe05 	lsl.w	lr, lr, r5
 8001532:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001536:	690a      	ldr	r2, [r1, #16]
 8001538:	40aa      	lsls	r2, r5
 800153a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800153e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001542:	e05c      	b.n	80015fe <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001544:	2207      	movs	r2, #7
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x6a>
 8001548:	2200      	movs	r2, #0
 800154a:	fa02 f20e 	lsl.w	r2, r2, lr
 800154e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001550:	3402      	adds	r4, #2
 8001552:	4d5a      	ldr	r5, [pc, #360]	@ (80016bc <HAL_GPIO_Init+0x1dc>)
 8001554:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001558:	4a59      	ldr	r2, [pc, #356]	@ (80016c0 <HAL_GPIO_Init+0x1e0>)
 800155a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800155c:	ea6f 020c 	mvn.w	r2, ip
 8001560:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001564:	684e      	ldr	r6, [r1, #4]
 8001566:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800156a:	d001      	beq.n	8001570 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800156c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001570:	4c53      	ldr	r4, [pc, #332]	@ (80016c0 <HAL_GPIO_Init+0x1e0>)
 8001572:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001574:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001576:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800157a:	684e      	ldr	r6, [r1, #4]
 800157c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001580:	d001      	beq.n	8001586 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001582:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001586:	4c4e      	ldr	r4, [pc, #312]	@ (80016c0 <HAL_GPIO_Init+0x1e0>)
 8001588:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800158a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800158c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001590:	684e      	ldr	r6, [r1, #4]
 8001592:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001596:	d001      	beq.n	800159c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001598:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800159c:	4c48      	ldr	r4, [pc, #288]	@ (80016c0 <HAL_GPIO_Init+0x1e0>)
 800159e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a4:	684d      	ldr	r5, [r1, #4]
 80015a6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80015aa:	d001      	beq.n	80015b0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80015ac:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80015b0:	4c43      	ldr	r4, [pc, #268]	@ (80016c0 <HAL_GPIO_Init+0x1e0>)
 80015b2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b4:	3301      	adds	r3, #1
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	d87d      	bhi.n	80016b6 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80015ba:	2201      	movs	r2, #1
 80015bc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015be:	680c      	ldr	r4, [r1, #0]
 80015c0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80015c4:	ea32 0404 	bics.w	r4, r2, r4
 80015c8:	d1f4      	bne.n	80015b4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ca:	684c      	ldr	r4, [r1, #4]
 80015cc:	f004 0403 	and.w	r4, r4, #3
 80015d0:	3c01      	subs	r4, #1
 80015d2:	2c01      	cmp	r4, #1
 80015d4:	d98b      	bls.n	80014ee <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d6:	684a      	ldr	r2, [r1, #4]
 80015d8:	f002 0203 	and.w	r2, r2, #3
 80015dc:	2a03      	cmp	r2, #3
 80015de:	d009      	beq.n	80015f4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80015e0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015e2:	005d      	lsls	r5, r3, #1
 80015e4:	2203      	movs	r2, #3
 80015e6:	40aa      	lsls	r2, r5
 80015e8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ec:	688a      	ldr	r2, [r1, #8]
 80015ee:	40aa      	lsls	r2, r5
 80015f0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80015f2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f4:	684a      	ldr	r2, [r1, #4]
 80015f6:	f002 0203 	and.w	r2, r2, #3
 80015fa:	2a02      	cmp	r2, #2
 80015fc:	d08e      	beq.n	800151c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80015fe:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001600:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f20e 	lsl.w	r2, r2, lr
 800160a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160e:	684a      	ldr	r2, [r1, #4]
 8001610:	f002 0203 	and.w	r2, r2, #3
 8001614:	fa02 f20e 	lsl.w	r2, r2, lr
 8001618:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800161a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800161c:	684a      	ldr	r2, [r1, #4]
 800161e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001622:	d0c7      	beq.n	80015b4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001624:	2200      	movs	r2, #0
 8001626:	9201      	str	r2, [sp, #4]
 8001628:	4a26      	ldr	r2, [pc, #152]	@ (80016c4 <HAL_GPIO_Init+0x1e4>)
 800162a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800162c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001630:	6454      	str	r4, [r2, #68]	@ 0x44
 8001632:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001634:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001638:	9201      	str	r2, [sp, #4]
 800163a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800163c:	089c      	lsrs	r4, r3, #2
 800163e:	1ca5      	adds	r5, r4, #2
 8001640:	4a1e      	ldr	r2, [pc, #120]	@ (80016bc <HAL_GPIO_Init+0x1dc>)
 8001642:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001646:	f003 0e03 	and.w	lr, r3, #3
 800164a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f20e 	lsl.w	r2, r2, lr
 8001654:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001658:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <HAL_GPIO_Init+0x1e8>)
 800165a:	4290      	cmp	r0, r2
 800165c:	f43f af74 	beq.w	8001548 <HAL_GPIO_Init+0x68>
 8001660:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001664:	4290      	cmp	r0, r2
 8001666:	d01a      	beq.n	800169e <HAL_GPIO_Init+0x1be>
 8001668:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800166c:	4290      	cmp	r0, r2
 800166e:	d018      	beq.n	80016a2 <HAL_GPIO_Init+0x1c2>
 8001670:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001674:	4290      	cmp	r0, r2
 8001676:	d016      	beq.n	80016a6 <HAL_GPIO_Init+0x1c6>
 8001678:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800167c:	4290      	cmp	r0, r2
 800167e:	d014      	beq.n	80016aa <HAL_GPIO_Init+0x1ca>
 8001680:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001684:	4290      	cmp	r0, r2
 8001686:	d012      	beq.n	80016ae <HAL_GPIO_Init+0x1ce>
 8001688:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800168c:	4290      	cmp	r0, r2
 800168e:	d010      	beq.n	80016b2 <HAL_GPIO_Init+0x1d2>
 8001690:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001694:	4290      	cmp	r0, r2
 8001696:	f43f af55 	beq.w	8001544 <HAL_GPIO_Init+0x64>
 800169a:	2208      	movs	r2, #8
 800169c:	e755      	b.n	800154a <HAL_GPIO_Init+0x6a>
 800169e:	2201      	movs	r2, #1
 80016a0:	e753      	b.n	800154a <HAL_GPIO_Init+0x6a>
 80016a2:	2202      	movs	r2, #2
 80016a4:	e751      	b.n	800154a <HAL_GPIO_Init+0x6a>
 80016a6:	2203      	movs	r2, #3
 80016a8:	e74f      	b.n	800154a <HAL_GPIO_Init+0x6a>
 80016aa:	2204      	movs	r2, #4
 80016ac:	e74d      	b.n	800154a <HAL_GPIO_Init+0x6a>
 80016ae:	2205      	movs	r2, #5
 80016b0:	e74b      	b.n	800154a <HAL_GPIO_Init+0x6a>
 80016b2:	2206      	movs	r2, #6
 80016b4:	e749      	b.n	800154a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80016b6:	b002      	add	sp, #8
 80016b8:	bd70      	pop	{r4, r5, r6, pc}
 80016ba:	4770      	bx	lr
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40013c00 	.word	0x40013c00
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016cc:	6803      	ldr	r3, [r0, #0]
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80016d4:	d101      	bne.n	80016da <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80016d6:	2000      	movs	r0, #0
}
 80016d8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80016de:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80016e4:	2220      	movs	r2, #32
 80016e6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016ea:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016ee:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80016f0:	f042 0204 	orr.w	r2, r2, #4
 80016f4:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80016f6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80016fa:	2001      	movs	r0, #1
 80016fc:	4770      	bx	lr

080016fe <I2C_WaitOnFlagUntilTimeout>:
{
 80016fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001702:	4606      	mov	r6, r0
 8001704:	460c      	mov	r4, r1
 8001706:	4617      	mov	r7, r2
 8001708:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800170a:	e03b      	b.n	8001784 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800170c:	f7ff fe64 	bl	80013d8 <HAL_GetTick>
 8001710:	9b06      	ldr	r3, [sp, #24]
 8001712:	1ac0      	subs	r0, r0, r3
 8001714:	4540      	cmp	r0, r8
 8001716:	d802      	bhi.n	800171e <I2C_WaitOnFlagUntilTimeout+0x20>
 8001718:	f1b8 0f00 	cmp.w	r8, #0
 800171c:	d132      	bne.n	8001784 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800171e:	2d01      	cmp	r5, #1
 8001720:	d018      	beq.n	8001754 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001722:	6833      	ldr	r3, [r6, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	ea24 0303 	bic.w	r3, r4, r3
 800172a:	b29b      	uxth	r3, r3
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	429f      	cmp	r7, r3
 8001734:	d126      	bne.n	8001784 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001736:	2300      	movs	r3, #0
 8001738:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800173a:	2220      	movs	r2, #32
 800173c:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001740:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001744:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800174c:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001750:	2001      	movs	r0, #1
 8001752:	e027      	b.n	80017a4 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001754:	6833      	ldr	r3, [r6, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	ea24 0303 	bic.w	r3, r4, r3
 800175c:	b29b      	uxth	r3, r3
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	e7e5      	b.n	8001732 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001766:	6833      	ldr	r3, [r6, #0]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	ea24 0c03 	bic.w	ip, r4, r3
 800176e:	fa1f fc8c 	uxth.w	ip, ip
 8001772:	fabc fc8c 	clz	ip, ip
 8001776:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800177a:	4567      	cmp	r7, ip
 800177c:	d111      	bne.n	80017a2 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 800177e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001782:	d1c3      	bne.n	800170c <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001784:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8001788:	2d01      	cmp	r5, #1
 800178a:	d0ec      	beq.n	8001766 <I2C_WaitOnFlagUntilTimeout+0x68>
 800178c:	6833      	ldr	r3, [r6, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	ea24 0c03 	bic.w	ip, r4, r3
 8001794:	fa1f fc8c 	uxth.w	ip, ip
 8001798:	fabc fc8c 	clz	ip, ip
 800179c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80017a0:	e7eb      	b.n	800177a <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80017a2:	2000      	movs	r0, #0
}
 80017a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080017a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80017a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017ac:	4605      	mov	r5, r0
 80017ae:	460e      	mov	r6, r1
 80017b0:	4690      	mov	r8, r2
 80017b2:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017b4:	e053      	b.n	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017bc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017c4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017ca:	2220      	movs	r2, #32
 80017cc:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017d0:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017d4:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80017d6:	f042 0204 	orr.w	r2, r2, #4
 80017da:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80017dc:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
 80017e2:	e04a      	b.n	800187a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e4:	f7ff fdf8 	bl	80013d8 <HAL_GetTick>
 80017e8:	eba0 0009 	sub.w	r0, r0, r9
 80017ec:	4540      	cmp	r0, r8
 80017ee:	d802      	bhi.n	80017f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 80017f0:	f1b8 0f00 	cmp.w	r8, #0
 80017f4:	d133      	bne.n	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80017f6:	2f01      	cmp	r7, #1
 80017f8:	d017      	beq.n	800182a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 80017fa:	682b      	ldr	r3, [r5, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	ea26 0303 	bic.w	r3, r6, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b00      	subs	r3, #0
 8001806:	bf18      	it	ne
 8001808:	2301      	movne	r3, #1
 800180a:	b343      	cbz	r3, 800185e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001810:	2220      	movs	r2, #32
 8001812:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001816:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800181a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800181c:	f042 0220 	orr.w	r2, r2, #32
 8001820:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001822:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001826:	2001      	movs	r0, #1
 8001828:	e027      	b.n	800187a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800182a:	682b      	ldr	r3, [r5, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	ea26 0303 	bic.w	r3, r6, r3
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b00      	subs	r3, #0
 8001836:	bf18      	it	ne
 8001838:	2301      	movne	r3, #1
 800183a:	e7e6      	b.n	800180a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	699c      	ldr	r4, [r3, #24]
 8001840:	ea26 0404 	bic.w	r4, r6, r4
 8001844:	b2a4      	uxth	r4, r4
 8001846:	3c00      	subs	r4, #0
 8001848:	bf18      	it	ne
 800184a:	2401      	movne	r4, #1
 800184c:	b1a4      	cbz	r4, 8001878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800184e:	682b      	ldr	r3, [r5, #0]
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001856:	d1ae      	bne.n	80017b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001858:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800185c:	d1c2      	bne.n	80017e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800185e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001862:	2f01      	cmp	r7, #1
 8001864:	d1ea      	bne.n	800183c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8001866:	682b      	ldr	r3, [r5, #0]
 8001868:	695c      	ldr	r4, [r3, #20]
 800186a:	ea26 0404 	bic.w	r4, r6, r4
 800186e:	b2a4      	uxth	r4, r4
 8001870:	3c00      	subs	r4, #0
 8001872:	bf18      	it	ne
 8001874:	2401      	movne	r4, #1
 8001876:	e7e9      	b.n	800184c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8001878:	2000      	movs	r0, #0
}
 800187a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001880 <I2C_MasterRequestWrite>:
{
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	b083      	sub	sp, #12
 8001884:	4604      	mov	r4, r0
 8001886:	460d      	mov	r5, r1
 8001888:	4616      	mov	r6, r2
 800188a:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800188c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800188e:	2b08      	cmp	r3, #8
 8001890:	d00d      	beq.n	80018ae <I2C_MasterRequestWrite+0x2e>
 8001892:	2b01      	cmp	r3, #1
 8001894:	d00b      	beq.n	80018ae <I2C_MasterRequestWrite+0x2e>
 8001896:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800189a:	d008      	beq.n	80018ae <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800189c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d10a      	bne.n	80018b8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a2:	6802      	ldr	r2, [r0, #0]
 80018a4:	6813      	ldr	r3, [r2, #0]
 80018a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e004      	b.n	80018b8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ae:	6822      	ldr	r2, [r4, #0]
 80018b0:	6813      	ldr	r3, [r2, #0]
 80018b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b8:	9700      	str	r7, [sp, #0]
 80018ba:	4633      	mov	r3, r6
 80018bc:	2200      	movs	r2, #0
 80018be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff ff1b 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 80018c8:	b980      	cbnz	r0, 80018ec <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018ca:	6923      	ldr	r3, [r4, #16]
 80018cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018d0:	d116      	bne.n	8001900 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80018d8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4632      	mov	r2, r6
 80018de:	4913      	ldr	r1, [pc, #76]	@ (800192c <I2C_MasterRequestWrite+0xac>)
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff ff61 	bl	80017a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018e6:	b9f8      	cbnz	r0, 8001928 <I2C_MasterRequestWrite+0xa8>
}
 80018e8:	b003      	add	sp, #12
 80018ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80018f4:	d002      	beq.n	80018fc <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018fa:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80018fc:	2003      	movs	r0, #3
 80018fe:	e7f3      	b.n	80018e8 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001900:	11eb      	asrs	r3, r5, #7
 8001902:	6822      	ldr	r2, [r4, #0]
 8001904:	f003 0306 	and.w	r3, r3, #6
 8001908:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 800190c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800190e:	463b      	mov	r3, r7
 8001910:	4632      	mov	r2, r6
 8001912:	4907      	ldr	r1, [pc, #28]	@ (8001930 <I2C_MasterRequestWrite+0xb0>)
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff ff47 	bl	80017a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800191a:	b918      	cbnz	r0, 8001924 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	b2ed      	uxtb	r5, r5
 8001920:	611d      	str	r5, [r3, #16]
 8001922:	e7da      	b.n	80018da <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8001924:	2001      	movs	r0, #1
 8001926:	e7df      	b.n	80018e8 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
 800192a:	e7dd      	b.n	80018e8 <I2C_MasterRequestWrite+0x68>
 800192c:	00010002 	.word	0x00010002
 8001930:	00010008 	.word	0x00010008

08001934 <I2C_MasterRequestRead>:
{
 8001934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	4616      	mov	r6, r2
 8001940:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001942:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001944:	6801      	ldr	r1, [r0, #0]
 8001946:	680b      	ldr	r3, [r1, #0]
 8001948:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800194c:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800194e:	2a08      	cmp	r2, #8
 8001950:	d00d      	beq.n	800196e <I2C_MasterRequestRead+0x3a>
 8001952:	2a01      	cmp	r2, #1
 8001954:	d00b      	beq.n	800196e <I2C_MasterRequestRead+0x3a>
 8001956:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 800195a:	d008      	beq.n	800196e <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800195c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800195e:	2b11      	cmp	r3, #17
 8001960:	d10a      	bne.n	8001978 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001962:	6802      	ldr	r2, [r0, #0]
 8001964:	6813      	ldr	r3, [r2, #0]
 8001966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	e004      	b.n	8001978 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800196e:	6822      	ldr	r2, [r4, #0]
 8001970:	6813      	ldr	r3, [r2, #0]
 8001972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001976:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001978:	9700      	str	r7, [sp, #0]
 800197a:	4633      	mov	r3, r6
 800197c:	2200      	movs	r2, #0
 800197e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff febb 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 8001988:	b998      	cbnz	r0, 80019b2 <I2C_MasterRequestRead+0x7e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800198a:	6923      	ldr	r3, [r4, #16]
 800198c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001990:	d119      	bne.n	80019c6 <I2C_MasterRequestRead+0x92>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	f045 0501 	orr.w	r5, r5, #1
 8001998:	b2ed      	uxtb	r5, r5
 800199a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	4632      	mov	r2, r6
 80019a0:	492a      	ldr	r1, [pc, #168]	@ (8001a4c <I2C_MasterRequestRead+0x118>)
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff ff00 	bl	80017a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	d14c      	bne.n	8001a46 <I2C_MasterRequestRead+0x112>
}
 80019ac:	b004      	add	sp, #16
 80019ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80019ba:	d002      	beq.n	80019c2 <I2C_MasterRequestRead+0x8e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019c0:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80019c2:	2003      	movs	r0, #3
 80019c4:	e7f2      	b.n	80019ac <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019c6:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80019ca:	f008 0806 	and.w	r8, r8, #6
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	f048 02f0 	orr.w	r2, r8, #240	@ 0xf0
 80019d4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019d6:	463b      	mov	r3, r7
 80019d8:	4632      	mov	r2, r6
 80019da:	491d      	ldr	r1, [pc, #116]	@ (8001a50 <I2C_MasterRequestRead+0x11c>)
 80019dc:	4620      	mov	r0, r4
 80019de:	f7ff fee3 	bl	80017a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019e2:	b108      	cbz	r0, 80019e8 <I2C_MasterRequestRead+0xb4>
      return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
 80019e6:	e7e1      	b.n	80019ac <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	b2ed      	uxtb	r5, r5
 80019ec:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	4632      	mov	r2, r6
 80019f2:	4916      	ldr	r1, [pc, #88]	@ (8001a4c <I2C_MasterRequestRead+0x118>)
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff fed7 	bl	80017a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019fa:	b108      	cbz	r0, 8001a00 <I2C_MasterRequestRead+0xcc>
      return HAL_ERROR;
 80019fc:	2001      	movs	r0, #1
 80019fe:	e7d5      	b.n	80019ac <I2C_MasterRequestRead+0x78>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a00:	2200      	movs	r2, #0
 8001a02:	9203      	str	r2, [sp, #12]
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	6959      	ldr	r1, [r3, #20]
 8001a08:	9103      	str	r1, [sp, #12]
 8001a0a:	6999      	ldr	r1, [r3, #24]
 8001a0c:	9103      	str	r1, [sp, #12]
 8001a0e:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a10:	6819      	ldr	r1, [r3, #0]
 8001a12:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001a16:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a18:	9700      	str	r7, [sp, #0]
 8001a1a:	4633      	mov	r3, r6
 8001a1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fe6c 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 8001a26:	b920      	cbnz	r0, 8001a32 <I2C_MasterRequestRead+0xfe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 8001a2e:	6113      	str	r3, [r2, #16]
 8001a30:	e7b4      	b.n	800199c <I2C_MasterRequestRead+0x68>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001a3a:	d002      	beq.n	8001a42 <I2C_MasterRequestRead+0x10e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a40:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_TIMEOUT;
 8001a42:	2003      	movs	r0, #3
 8001a44:	e7b2      	b.n	80019ac <I2C_MasterRequestRead+0x78>
    return HAL_ERROR;
 8001a46:	2001      	movs	r0, #1
 8001a48:	e7b0      	b.n	80019ac <I2C_MasterRequestRead+0x78>
 8001a4a:	bf00      	nop
 8001a4c:	00010002 	.word	0x00010002
 8001a50:	00010008 	.word	0x00010008

08001a54 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	4604      	mov	r4, r0
 8001a58:	460d      	mov	r5, r1
 8001a5a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a64:	d121      	bne.n	8001aaa <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7ff fe30 	bl	80016cc <I2C_IsAcknowledgeFailed>
 8001a6c:	b9f8      	cbnz	r0, 8001aae <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001a6e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001a72:	d0f3      	beq.n	8001a5c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a74:	f7ff fcb0 	bl	80013d8 <HAL_GetTick>
 8001a78:	1b80      	subs	r0, r0, r6
 8001a7a:	42a8      	cmp	r0, r5
 8001a7c:	d801      	bhi.n	8001a82 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001a7e:	2d00      	cmp	r5, #0
 8001a80:	d1ec      	bne.n	8001a5c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a8a:	d1e7      	bne.n	8001a5c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a90:	2220      	movs	r2, #32
 8001a92:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a96:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a9a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001a9c:	f042 0220 	orr.w	r2, r2, #32
 8001aa0:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001aa2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	e000      	b.n	8001aac <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8001aaa:	2000      	movs	r0, #0
}
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001aae:	2001      	movs	r0, #1
 8001ab0:	e7fc      	b.n	8001aac <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08001ab2 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001ab2:	b570      	push	{r4, r5, r6, lr}
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	460d      	mov	r5, r1
 8001ab8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f013 0f04 	tst.w	r3, #4
 8001ac2:	d121      	bne.n	8001b08 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7ff fe01 	bl	80016cc <I2C_IsAcknowledgeFailed>
 8001aca:	b9f8      	cbnz	r0, 8001b0c <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001acc:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001ad0:	d0f3      	beq.n	8001aba <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad2:	f7ff fc81 	bl	80013d8 <HAL_GetTick>
 8001ad6:	1b80      	subs	r0, r0, r6
 8001ad8:	42a8      	cmp	r0, r5
 8001ada:	d801      	bhi.n	8001ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001adc:	2d00      	cmp	r5, #0
 8001ade:	d1ec      	bne.n	8001aba <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f013 0f04 	tst.w	r3, #4
 8001ae8:	d1e7      	bne.n	8001aba <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001aee:	2220      	movs	r2, #32
 8001af0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001af8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001afa:	f042 0220 	orr.w	r2, r2, #32
 8001afe:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001b00:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001b04:	2001      	movs	r0, #1
 8001b06:	e000      	b.n	8001b0a <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8001b08:	2000      	movs	r0, #0
}
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	e7fc      	b.n	8001b0a <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08001b10 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	4604      	mov	r4, r0
 8001b14:	460d      	mov	r5, r1
 8001b16:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b18:	e014      	b.n	8001b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b1a:	f06f 0210 	mvn.w	r2, #16
 8001b1e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b24:	2220      	movs	r2, #32
 8001b26:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b2a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001b2e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001b30:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001b32:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8001b36:	2001      	movs	r0, #1
 8001b38:	e025      	b.n	8001b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001b42:	d010      	beq.n	8001b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	6958      	ldr	r0, [r3, #20]
 8001b48:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8001b4c:	d11a      	bne.n	8001b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b4e:	6958      	ldr	r0, [r3, #20]
 8001b50:	f010 0f10 	tst.w	r0, #16
 8001b54:	d1e1      	bne.n	8001b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b56:	f7ff fc3f 	bl	80013d8 <HAL_GetTick>
 8001b5a:	1b80      	subs	r0, r0, r6
 8001b5c:	42a8      	cmp	r0, r5
 8001b5e:	d8ec      	bhi.n	8001b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8001b60:	2d00      	cmp	r5, #0
 8001b62:	d1ef      	bne.n	8001b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8001b64:	e7e9      	b.n	8001b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b70:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b74:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001b7c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 8001b80:	2001      	movs	r0, #1
 8001b82:	e000      	b.n	8001b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 8001b84:	2000      	movs	r0, #0
}
 8001b86:	bd70      	pop	{r4, r5, r6, pc}

08001b88 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	f000 80cc 	beq.w	8001d26 <HAL_I2C_Init+0x19e>
{
 8001b8e:	b570      	push	{r4, r5, r6, lr}
 8001b90:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b92:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d077      	beq.n	8001c8a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b9a:	2324      	movs	r3, #36	@ 0x24
 8001b9c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001ba0:	6822      	ldr	r2, [r4, #0]
 8001ba2:	6813      	ldr	r3, [r2, #0]
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001baa:	6822      	ldr	r2, [r4, #0]
 8001bac:	6813      	ldr	r3, [r2, #0]
 8001bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bb4:	6822      	ldr	r2, [r4, #0]
 8001bb6:	6813      	ldr	r3, [r2, #0]
 8001bb8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001bbc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bbe:	f000 fedf 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bc2:	6862      	ldr	r2, [r4, #4]
 8001bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8001d30 <HAL_I2C_Init+0x1a8>)
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d864      	bhi.n	8001c94 <HAL_I2C_Init+0x10c>
 8001bca:	4b5a      	ldr	r3, [pc, #360]	@ (8001d34 <HAL_I2C_Init+0x1ac>)
 8001bcc:	4298      	cmp	r0, r3
 8001bce:	bf8c      	ite	hi
 8001bd0:	2300      	movhi	r3, #0
 8001bd2:	2301      	movls	r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f040 80a8 	bne.w	8001d2a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8001bda:	4957      	ldr	r1, [pc, #348]	@ (8001d38 <HAL_I2C_Init+0x1b0>)
 8001bdc:	fba1 3100 	umull	r3, r1, r1, r0
 8001be0:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001be2:	6825      	ldr	r5, [r4, #0]
 8001be4:	686a      	ldr	r2, [r5, #4]
 8001be6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001bea:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8001bee:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf0:	6821      	ldr	r1, [r4, #0]
 8001bf2:	6a0a      	ldr	r2, [r1, #32]
 8001bf4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001bf8:	6866      	ldr	r6, [r4, #4]
 8001bfa:	4d4d      	ldr	r5, [pc, #308]	@ (8001d30 <HAL_I2C_Init+0x1a8>)
 8001bfc:	42ae      	cmp	r6, r5
 8001bfe:	d84f      	bhi.n	8001ca0 <HAL_I2C_Init+0x118>
 8001c00:	3301      	adds	r3, #1
 8001c02:	4313      	orrs	r3, r2
 8001c04:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c06:	6821      	ldr	r1, [r4, #0]
 8001c08:	69ca      	ldr	r2, [r1, #28]
 8001c0a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8001c0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c12:	6865      	ldr	r5, [r4, #4]
 8001c14:	4b46      	ldr	r3, [pc, #280]	@ (8001d30 <HAL_I2C_Init+0x1a8>)
 8001c16:	429d      	cmp	r5, r3
 8001c18:	d84c      	bhi.n	8001cb4 <HAL_I2C_Init+0x12c>
 8001c1a:	1e43      	subs	r3, r0, #1
 8001c1c:	006d      	lsls	r5, r5, #1
 8001c1e:	fbb3 f3f5 	udiv	r3, r3, r5
 8001c22:	3301      	adds	r3, #1
 8001c24:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001c28:	4203      	tst	r3, r0
 8001c2a:	d078      	beq.n	8001d1e <HAL_I2C_Init+0x196>
 8001c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c30:	431a      	orrs	r2, r3
 8001c32:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c34:	6821      	ldr	r1, [r4, #0]
 8001c36:	680b      	ldr	r3, [r1, #0]
 8001c38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001c3c:	69e2      	ldr	r2, [r4, #28]
 8001c3e:	6a20      	ldr	r0, [r4, #32]
 8001c40:	4302      	orrs	r2, r0
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c46:	6821      	ldr	r1, [r4, #0]
 8001c48:	688b      	ldr	r3, [r1, #8]
 8001c4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c52:	6922      	ldr	r2, [r4, #16]
 8001c54:	68e0      	ldr	r0, [r4, #12]
 8001c56:	4302      	orrs	r2, r0
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c5c:	6821      	ldr	r1, [r4, #0]
 8001c5e:	68cb      	ldr	r3, [r1, #12]
 8001c60:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c64:	6962      	ldr	r2, [r4, #20]
 8001c66:	69a0      	ldr	r0, [r4, #24]
 8001c68:	4302      	orrs	r2, r0
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c78:	2000      	movs	r0, #0
 8001c7a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c82:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c84:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8001c88:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001c8a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c8e:	f7ff fa55 	bl	800113c <HAL_I2C_MspInit>
 8001c92:	e782      	b.n	8001b9a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c94:	4b29      	ldr	r3, [pc, #164]	@ (8001d3c <HAL_I2C_Init+0x1b4>)
 8001c96:	4298      	cmp	r0, r3
 8001c98:	bf8c      	ite	hi
 8001c9a:	2300      	movhi	r3, #0
 8001c9c:	2301      	movls	r3, #1
 8001c9e:	e799      	b.n	8001bd4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ca0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001ca4:	fb05 f303 	mul.w	r3, r5, r3
 8001ca8:	4d25      	ldr	r5, [pc, #148]	@ (8001d40 <HAL_I2C_Init+0x1b8>)
 8001caa:	fba5 5303 	umull	r5, r3, r5, r3
 8001cae:	099b      	lsrs	r3, r3, #6
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	e7a6      	b.n	8001c02 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb4:	68a6      	ldr	r6, [r4, #8]
 8001cb6:	b9be      	cbnz	r6, 8001ce8 <HAL_I2C_Init+0x160>
 8001cb8:	1e43      	subs	r3, r0, #1
 8001cba:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001cbe:	fbb3 f3fc 	udiv	r3, r3, ip
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	bb43      	cbnz	r3, 8001d22 <HAL_I2C_Init+0x19a>
 8001cd0:	b9c6      	cbnz	r6, 8001d04 <HAL_I2C_Init+0x17c>
 8001cd2:	1e43      	subs	r3, r0, #1
 8001cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001cd8:	fbb3 f3f5 	udiv	r3, r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce6:	e7a3      	b.n	8001c30 <HAL_I2C_Init+0xa8>
 8001ce8:	1e43      	subs	r3, r0, #1
 8001cea:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8001cee:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001cf2:	fbb3 f3fc 	udiv	r3, r3, ip
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	e7e4      	b.n	8001cce <HAL_I2C_Init+0x146>
 8001d04:	1e43      	subs	r3, r0, #1
 8001d06:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001d0a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001d0e:	fbb3 f3f5 	udiv	r3, r3, r5
 8001d12:	3301      	adds	r3, #1
 8001d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d1c:	e788      	b.n	8001c30 <HAL_I2C_Init+0xa8>
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e786      	b.n	8001c30 <HAL_I2C_Init+0xa8>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e784      	b.n	8001c30 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
}
 8001d28:	4770      	bx	lr
    return HAL_ERROR;
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	e7ac      	b.n	8001c88 <HAL_I2C_Init+0x100>
 8001d2e:	bf00      	nop
 8001d30:	000186a0 	.word	0x000186a0
 8001d34:	001e847f 	.word	0x001e847f
 8001d38:	431bde83 	.word	0x431bde83
 8001d3c:	003d08ff 	.word	0x003d08ff
 8001d40:	10624dd3 	.word	0x10624dd3

08001d44 <HAL_I2C_Master_Transmit>:
{
 8001d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	460f      	mov	r7, r1
 8001d4e:	4691      	mov	r9, r2
 8001d50:	4698      	mov	r8, r3
 8001d52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff fb40 	bl	80013d8 <HAL_GetTick>
 8001d58:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8001d5e:	b2c0      	uxtb	r0, r0
 8001d60:	2820      	cmp	r0, #32
 8001d62:	d004      	beq.n	8001d6e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8001d64:	2702      	movs	r7, #2
}
 8001d66:	4638      	mov	r0, r7
 8001d68:	b005      	add	sp, #20
 8001d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d6e:	9500      	str	r5, [sp, #0]
 8001d70:	2319      	movs	r3, #25
 8001d72:	2201      	movs	r2, #1
 8001d74:	494f      	ldr	r1, [pc, #316]	@ (8001eb4 <HAL_I2C_Master_Transmit+0x170>)
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7ff fcc1 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	f040 8092 	bne.w	8001ea6 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8001d82:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	f000 808f 	beq.w	8001eaa <HAL_I2C_Master_Transmit+0x166>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f012 0f01 	tst.w	r2, #1
 8001d9a:	d103      	bne.n	8001da4 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	6813      	ldr	r3, [r2, #0]
 8001da8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001dac:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dae:	2321      	movs	r3, #33	@ 0x21
 8001db0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001db4:	2310      	movs	r3, #16
 8001db6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001dbe:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dc2:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dc6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001dc8:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dca:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb8 <HAL_I2C_Master_Transmit+0x174>)
 8001dcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dce:	462b      	mov	r3, r5
 8001dd0:	4632      	mov	r2, r6
 8001dd2:	4639      	mov	r1, r7
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fd53 	bl	8001880 <I2C_MasterRequestWrite>
 8001dda:	4607      	mov	r7, r0
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d166      	bne.n	8001eae <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de0:	2300      	movs	r3, #0
 8001de2:	9303      	str	r3, [sp, #12]
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	9203      	str	r2, [sp, #12]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	9303      	str	r3, [sp, #12]
 8001dee:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001df0:	e011      	b.n	8001e16 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001df8:	2701      	movs	r7, #1
 8001dfa:	e7b4      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfc:	6822      	ldr	r2, [r4, #0]
 8001dfe:	6813      	ldr	r3, [r2, #0]
 8001e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e7f7      	b.n	8001df8 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e08:	462a      	mov	r2, r5
 8001e0a:	4631      	mov	r1, r6
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f7ff fe50 	bl	8001ab2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e12:	2800      	cmp	r0, #0
 8001e14:	d12e      	bne.n	8001e74 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8001e16:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d036      	beq.n	8001e8a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1c:	462a      	mov	r2, r5
 8001e1e:	4631      	mov	r1, r6
 8001e20:	4620      	mov	r0, r4
 8001e22:	f7ff fe17 	bl	8001a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d1e3      	bne.n	8001df2 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e2a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e32:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001e34:	1c43      	adds	r3, r0, #1
 8001e36:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001e38:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8001e3a:	b289      	uxth	r1, r1
 8001e3c:	3901      	subs	r1, #1
 8001e3e:	b289      	uxth	r1, r1
 8001e40:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e42:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	6951      	ldr	r1, [r2, #20]
 8001e4e:	f011 0f04 	tst.w	r1, #4
 8001e52:	d0d9      	beq.n	8001e08 <HAL_I2C_Master_Transmit+0xc4>
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0d7      	beq.n	8001e08 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e58:	7843      	ldrb	r3, [r0, #1]
 8001e5a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001e5c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e5e:	3301      	adds	r3, #1
 8001e60:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8001e62:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e6c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	8523      	strh	r3, [r4, #40]	@ 0x28
 8001e72:	e7c9      	b.n	8001e08 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8001e7a:	2701      	movs	r7, #1
 8001e7c:	e773      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7e:	6822      	ldr	r2, [r4, #0]
 8001e80:	6813      	ldr	r3, [r2, #0]
 8001e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	e7f7      	b.n	8001e7a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8a:	6822      	ldr	r2, [r4, #0]
 8001e8c:	6813      	ldr	r3, [r2, #0]
 8001e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e92:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e94:	2320      	movs	r3, #32
 8001e96:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8001ea0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8001ea4:	e75f      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001ea6:	2702      	movs	r7, #2
 8001ea8:	e75d      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8001eaa:	2702      	movs	r7, #2
 8001eac:	e75b      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8001eae:	2701      	movs	r7, #1
 8001eb0:	e759      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x22>
 8001eb2:	bf00      	nop
 8001eb4:	00100002 	.word	0x00100002
 8001eb8:	ffff0000 	.word	0xffff0000

08001ebc <HAL_I2C_Master_Receive>:
{
 8001ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ec0:	b087      	sub	sp, #28
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	460f      	mov	r7, r1
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	4698      	mov	r8, r3
 8001eca:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff fa84 	bl	80013d8 <HAL_GetTick>
 8001ed0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed2:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8001ed6:	b2c0      	uxtb	r0, r0
 8001ed8:	2820      	cmp	r0, #32
 8001eda:	d004      	beq.n	8001ee6 <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 8001edc:	2702      	movs	r7, #2
}
 8001ede:	4638      	mov	r0, r7
 8001ee0:	b007      	add	sp, #28
 8001ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ee6:	9500      	str	r5, [sp, #0]
 8001ee8:	2319      	movs	r3, #25
 8001eea:	2201      	movs	r2, #1
 8001eec:	4989      	ldr	r1, [pc, #548]	@ (8002114 <HAL_I2C_Master_Receive+0x258>)
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff fc05 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 8001ef4:	2800      	cmp	r0, #0
 8001ef6:	f040 814f 	bne.w	8002198 <HAL_I2C_Master_Receive+0x2dc>
    __HAL_LOCK(hi2c);
 8001efa:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	f000 814c 	beq.w	800219c <HAL_I2C_Master_Receive+0x2e0>
 8001f04:	2301      	movs	r3, #1
 8001f06:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	f012 0f01 	tst.w	r2, #1
 8001f12:	d103      	bne.n	8001f1c <HAL_I2C_Master_Receive+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f1c:	6822      	ldr	r2, [r4, #0]
 8001f1e:	6813      	ldr	r3, [r2, #0]
 8001f20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001f24:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f26:	2322      	movs	r3, #34	@ 0x22
 8001f28:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001f36:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f3a:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f3e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001f40:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f42:	4b75      	ldr	r3, [pc, #468]	@ (8002118 <HAL_I2C_Master_Receive+0x25c>)
 8001f44:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f46:	462b      	mov	r3, r5
 8001f48:	4632      	mov	r2, r6
 8001f4a:	4639      	mov	r1, r7
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f7ff fcf1 	bl	8001934 <I2C_MasterRequestRead>
 8001f52:	4607      	mov	r7, r0
 8001f54:	2800      	cmp	r0, #0
 8001f56:	f040 8123 	bne.w	80021a0 <HAL_I2C_Master_Receive+0x2e4>
    if (hi2c->XferSize == 0U)
 8001f5a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001f5c:	b95b      	cbnz	r3, 8001f76 <HAL_I2C_Master_Receive+0xba>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5e:	9302      	str	r3, [sp, #8]
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	9202      	str	r2, [sp, #8]
 8001f66:	699a      	ldr	r2, [r3, #24]
 8001f68:	9202      	str	r2, [sp, #8]
 8001f6a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e07a      	b.n	800206c <HAL_I2C_Master_Receive+0x1b0>
    else if (hi2c->XferSize == 1U)
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d00f      	beq.n	8001f9a <HAL_I2C_Master_Receive+0xde>
    else if (hi2c->XferSize == 2U)
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d01f      	beq.n	8001fbe <HAL_I2C_Master_Receive+0x102>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7e:	6822      	ldr	r2, [r4, #0]
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f86:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9305      	str	r3, [sp, #20]
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	9205      	str	r2, [sp, #20]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	9305      	str	r3, [sp, #20]
 8001f96:	9b05      	ldr	r3, [sp, #20]
 8001f98:	e068      	b.n	800206c <HAL_I2C_Master_Receive+0x1b0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f9a:	6822      	ldr	r2, [r4, #0]
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fa2:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9303      	str	r3, [sp, #12]
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	9203      	str	r2, [sp, #12]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	9203      	str	r2, [sp, #12]
 8001fb2:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e056      	b.n	800206c <HAL_I2C_Master_Receive+0x1b0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fbe:	6822      	ldr	r2, [r4, #0]
 8001fc0:	6813      	ldr	r3, [r2, #0]
 8001fc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fc6:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fc8:	6822      	ldr	r2, [r4, #0]
 8001fca:	6813      	ldr	r3, [r2, #0]
 8001fcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fd0:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9304      	str	r3, [sp, #16]
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	9204      	str	r2, [sp, #16]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	9304      	str	r3, [sp, #16]
 8001fe0:	9b04      	ldr	r3, [sp, #16]
 8001fe2:	e043      	b.n	800206c <HAL_I2C_Master_Receive+0x1b0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe4:	462a      	mov	r2, r5
 8001fe6:	4631      	mov	r1, r6
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff fd91 	bl	8001b10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	f040 80d8 	bne.w	80021a4 <HAL_I2C_Master_Receive+0x2e8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ffa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001ffc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ffe:	3301      	adds	r3, #1
 8002000:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002002:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002004:	3b01      	subs	r3, #1
 8002006:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002008:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29b      	uxth	r3, r3
 8002010:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002012:	e02b      	b.n	800206c <HAL_I2C_Master_Receive+0x1b0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002014:	9500      	str	r5, [sp, #0]
 8002016:	4633      	mov	r3, r6
 8002018:	2200      	movs	r2, #0
 800201a:	4940      	ldr	r1, [pc, #256]	@ (800211c <HAL_I2C_Master_Receive+0x260>)
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff fb6e 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 8002022:	2800      	cmp	r0, #0
 8002024:	f040 80c0 	bne.w	80021a8 <HAL_I2C_Master_Receive+0x2ec>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	6822      	ldr	r2, [r4, #0]
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002030:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002038:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800203a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800203c:	1c53      	adds	r3, r2, #1
 800203e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002040:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002042:	3b01      	subs	r3, #1
 8002044:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002046:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29b      	uxth	r3, r3
 800204e:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002056:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002058:	3301      	adds	r3, #1
 800205a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800205c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800205e:	3b01      	subs	r3, #1
 8002060:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002062:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29b      	uxth	r3, r3
 800206a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800206c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800206e:	2900      	cmp	r1, #0
 8002070:	f000 8089 	beq.w	8002186 <HAL_I2C_Master_Receive+0x2ca>
      if (hi2c->XferSize <= 3U)
 8002074:	2903      	cmp	r1, #3
 8002076:	d853      	bhi.n	8002120 <HAL_I2C_Master_Receive+0x264>
        if (hi2c->XferSize == 1U)
 8002078:	2901      	cmp	r1, #1
 800207a:	d0b3      	beq.n	8001fe4 <HAL_I2C_Master_Receive+0x128>
        else if (hi2c->XferSize == 2U)
 800207c:	2902      	cmp	r1, #2
 800207e:	d0c9      	beq.n	8002014 <HAL_I2C_Master_Receive+0x158>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002080:	9500      	str	r5, [sp, #0]
 8002082:	4633      	mov	r3, r6
 8002084:	2200      	movs	r2, #0
 8002086:	4925      	ldr	r1, [pc, #148]	@ (800211c <HAL_I2C_Master_Receive+0x260>)
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff fb38 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 800208e:	2800      	cmp	r0, #0
 8002090:	f040 808c 	bne.w	80021ac <HAL_I2C_Master_Receive+0x2f0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002094:	6822      	ldr	r2, [r4, #0]
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800209c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80020a4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80020a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80020a8:	3301      	adds	r3, #1
 80020aa:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80020ac:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80020b2:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80020b4:	b289      	uxth	r1, r1
 80020b6:	3901      	subs	r1, #1
 80020b8:	b289      	uxth	r1, r1
 80020ba:	8561      	strh	r1, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020bc:	9500      	str	r5, [sp, #0]
 80020be:	4633      	mov	r3, r6
 80020c0:	2200      	movs	r2, #0
 80020c2:	4916      	ldr	r1, [pc, #88]	@ (800211c <HAL_I2C_Master_Receive+0x260>)
 80020c4:	4620      	mov	r0, r4
 80020c6:	f7ff fb1a 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 80020ca:	2800      	cmp	r0, #0
 80020cc:	d170      	bne.n	80021b0 <HAL_I2C_Master_Receive+0x2f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ce:	6822      	ldr	r2, [r4, #0]
 80020d0:	6813      	ldr	r3, [r2, #0]
 80020d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80020de:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80020e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80020e2:	1c53      	adds	r3, r2, #1
 80020e4:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80020e6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80020e8:	3b01      	subs	r3, #1
 80020ea:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80020ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80020fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80020fe:	3301      	adds	r3, #1
 8002100:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002102:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002104:	3b01      	subs	r3, #1
 8002106:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002108:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29b      	uxth	r3, r3
 8002110:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002112:	e7ab      	b.n	800206c <HAL_I2C_Master_Receive+0x1b0>
 8002114:	00100002 	.word	0x00100002
 8002118:	ffff0000 	.word	0xffff0000
 800211c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002120:	462a      	mov	r2, r5
 8002122:	4631      	mov	r1, r6
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff fcf3 	bl	8001b10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800212a:	2800      	cmp	r0, #0
 800212c:	d142      	bne.n	80021b4 <HAL_I2C_Master_Receive+0x2f8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002134:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002136:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002138:	3301      	adds	r3, #1
 800213a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800213c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800213e:	3a01      	subs	r2, #1
 8002140:	b292      	uxth	r2, r2
 8002142:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002144:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29b      	uxth	r3, r3
 800214c:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	6959      	ldr	r1, [r3, #20]
 8002152:	f011 0f04 	tst.w	r1, #4
 8002156:	d089      	beq.n	800206c <HAL_I2C_Master_Receive+0x1b0>
          if (hi2c->XferSize == 3U)
 8002158:	2a03      	cmp	r2, #3
 800215a:	d00f      	beq.n	800217c <HAL_I2C_Master_Receive+0x2c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002162:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002164:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002166:	3301      	adds	r3, #1
 8002168:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800216a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800216c:	3b01      	subs	r3, #1
 800216e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002170:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29b      	uxth	r3, r3
 8002178:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800217a:	e777      	b.n	800206c <HAL_I2C_Master_Receive+0x1b0>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e7ea      	b.n	800215c <HAL_I2C_Master_Receive+0x2a0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002186:	2320      	movs	r3, #32
 8002188:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800218c:	2300      	movs	r3, #0
 800218e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002192:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002196:	e6a2      	b.n	8001ede <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 8002198:	2702      	movs	r7, #2
 800219a:	e6a0      	b.n	8001ede <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 800219c:	2702      	movs	r7, #2
 800219e:	e69e      	b.n	8001ede <HAL_I2C_Master_Receive+0x22>
      return HAL_ERROR;
 80021a0:	2701      	movs	r7, #1
 80021a2:	e69c      	b.n	8001ede <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 80021a4:	2701      	movs	r7, #1
 80021a6:	e69a      	b.n	8001ede <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 80021a8:	2701      	movs	r7, #1
 80021aa:	e698      	b.n	8001ede <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 80021ac:	2701      	movs	r7, #1
 80021ae:	e696      	b.n	8001ede <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 80021b0:	2701      	movs	r7, #1
 80021b2:	e694      	b.n	8001ede <HAL_I2C_Master_Receive+0x22>
          return HAL_ERROR;
 80021b4:	2701      	movs	r7, #1
 80021b6:	e692      	b.n	8001ede <HAL_I2C_Master_Receive+0x22>

080021b8 <HAL_I2C_IsDeviceReady>:
{
 80021b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021bc:	b085      	sub	sp, #20
 80021be:	4604      	mov	r4, r0
 80021c0:	4688      	mov	r8, r1
 80021c2:	4691      	mov	r9, r2
 80021c4:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80021c6:	f7ff f907 	bl	80013d8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ca:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d003      	beq.n	80021dc <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80021d4:	2002      	movs	r0, #2
}
 80021d6:	b005      	add	sp, #20
 80021d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021dc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021de:	9000      	str	r0, [sp, #0]
 80021e0:	2319      	movs	r3, #25
 80021e2:	2201      	movs	r2, #1
 80021e4:	4957      	ldr	r1, [pc, #348]	@ (8002344 <HAL_I2C_IsDeviceReady+0x18c>)
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff fa89 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 80021ec:	2800      	cmp	r0, #0
 80021ee:	f040 80a0 	bne.w	8002332 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 80021f2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	f000 809d 	beq.w	8002336 <HAL_I2C_IsDeviceReady+0x17e>
 80021fc:	2301      	movs	r3, #1
 80021fe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	f012 0f01 	tst.w	r2, #1
 800220a:	d103      	bne.n	8002214 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002214:	6822      	ldr	r2, [r4, #0]
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800221c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800221e:	2324      	movs	r3, #36	@ 0x24
 8002220:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002224:	2700      	movs	r7, #0
 8002226:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002228:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <HAL_I2C_IsDeviceReady+0x190>)
 800222a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800222c:	e040      	b.n	80022b0 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002236:	d002      	beq.n	800223e <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002238:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800223c:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 800223e:	2003      	movs	r0, #3
 8002240:	e7c9      	b.n	80021d6 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002242:	23a0      	movs	r3, #160	@ 0xa0
 8002244:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	6953      	ldr	r3, [r2, #20]
 800224c:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002250:	6952      	ldr	r2, [r2, #20]
 8002252:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002256:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 800225a:	fa5f fc8c 	uxtb.w	ip, ip
 800225e:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8002262:	d009      	beq.n	8002278 <HAL_I2C_IsDeviceReady+0xc0>
 8002264:	b943      	cbnz	r3, 8002278 <HAL_I2C_IsDeviceReady+0xc0>
 8002266:	b93a      	cbnz	r2, 8002278 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002268:	f7ff f8b6 	bl	80013d8 <HAL_GetTick>
 800226c:	1b80      	subs	r0, r0, r6
 800226e:	42a8      	cmp	r0, r5
 8002270:	d8e7      	bhi.n	8002242 <HAL_I2C_IsDeviceReady+0x8a>
 8002272:	2d00      	cmp	r5, #0
 8002274:	d1e8      	bne.n	8002248 <HAL_I2C_IsDeviceReady+0x90>
 8002276:	e7e4      	b.n	8002242 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8002278:	2320      	movs	r3, #32
 800227a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	f012 0f02 	tst.w	r2, #2
 8002286:	d131      	bne.n	80022ec <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800228e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002296:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002298:	9600      	str	r6, [sp, #0]
 800229a:	2319      	movs	r3, #25
 800229c:	2201      	movs	r2, #1
 800229e:	4929      	ldr	r1, [pc, #164]	@ (8002344 <HAL_I2C_IsDeviceReady+0x18c>)
 80022a0:	4620      	mov	r0, r4
 80022a2:	f7ff fa2c 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d149      	bne.n	800233e <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 80022aa:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80022ac:	454f      	cmp	r7, r9
 80022ae:	d238      	bcs.n	8002322 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b0:	6822      	ldr	r2, [r4, #0]
 80022b2:	6813      	ldr	r3, [r2, #0]
 80022b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b8:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022ba:	9600      	str	r6, [sp, #0]
 80022bc:	462b      	mov	r3, r5
 80022be:	2200      	movs	r2, #0
 80022c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff fa1a 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 80022ca:	2800      	cmp	r0, #0
 80022cc:	d1af      	bne.n	800222e <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 80022d4:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80022d6:	f7ff f87f 	bl	80013d8 <HAL_GetTick>
 80022da:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022dc:	6822      	ldr	r2, [r4, #0]
 80022de:	6953      	ldr	r3, [r2, #20]
 80022e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022e4:	6952      	ldr	r2, [r2, #20]
 80022e6:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022ea:	e7b4      	b.n	8002256 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022f2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f4:	2300      	movs	r3, #0
 80022f6:	9303      	str	r3, [sp, #12]
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	9203      	str	r2, [sp, #12]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	9303      	str	r3, [sp, #12]
 8002302:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002304:	9600      	str	r6, [sp, #0]
 8002306:	2319      	movs	r3, #25
 8002308:	2201      	movs	r2, #1
 800230a:	490e      	ldr	r1, [pc, #56]	@ (8002344 <HAL_I2C_IsDeviceReady+0x18c>)
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff f9f6 	bl	80016fe <I2C_WaitOnFlagUntilTimeout>
 8002312:	b990      	cbnz	r0, 800233a <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8002314:	2320      	movs	r3, #32
 8002316:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 800231a:	2300      	movs	r3, #0
 800231c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8002320:	e759      	b.n	80021d6 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002322:	2320      	movs	r3, #32
 8002324:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8002328:	2300      	movs	r3, #0
 800232a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 800232e:	2001      	movs	r0, #1
 8002330:	e751      	b.n	80021d6 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8002332:	2002      	movs	r0, #2
 8002334:	e74f      	b.n	80021d6 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8002336:	2002      	movs	r0, #2
 8002338:	e74d      	b.n	80021d6 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800233a:	2001      	movs	r0, #1
 800233c:	e74b      	b.n	80021d6 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800233e:	2001      	movs	r0, #1
 8002340:	e749      	b.n	80021d6 <HAL_I2C_IsDeviceReady+0x1e>
 8002342:	bf00      	nop
 8002344:	00100002 	.word	0x00100002
 8002348:	ffff0000 	.word	0xffff0000

0800234c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800234c:	2800      	cmp	r0, #0
 800234e:	f000 81e0 	beq.w	8002712 <HAL_RCC_OscConfig+0x3c6>
{
 8002352:	b570      	push	{r4, r5, r6, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002358:	6803      	ldr	r3, [r0, #0]
 800235a:	f013 0f01 	tst.w	r3, #1
 800235e:	d03b      	beq.n	80023d8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002360:	4b9f      	ldr	r3, [pc, #636]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b04      	cmp	r3, #4
 800236a:	d02c      	beq.n	80023c6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236c:	4b9c      	ldr	r3, [pc, #624]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002374:	2b08      	cmp	r3, #8
 8002376:	d021      	beq.n	80023bc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002378:	6863      	ldr	r3, [r4, #4]
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800237e:	d04f      	beq.n	8002420 <HAL_RCC_OscConfig+0xd4>
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002384:	d052      	beq.n	800242c <HAL_RCC_OscConfig+0xe0>
 8002386:	4b96      	ldr	r3, [pc, #600]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002396:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	6863      	ldr	r3, [r4, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d050      	beq.n	8002440 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7ff f81b 	bl	80013d8 <HAL_GetTick>
 80023a2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a4:	4b8e      	ldr	r3, [pc, #568]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80023ac:	d114      	bne.n	80023d8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ae:	f7ff f813 	bl	80013d8 <HAL_GetTick>
 80023b2:	1b40      	subs	r0, r0, r5
 80023b4:	2864      	cmp	r0, #100	@ 0x64
 80023b6:	d9f5      	bls.n	80023a4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80023b8:	2003      	movs	r0, #3
 80023ba:	e1b1      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023bc:	4b88      	ldr	r3, [pc, #544]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80023c4:	d0d8      	beq.n	8002378 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c6:	4b86      	ldr	r3, [pc, #536]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80023ce:	d003      	beq.n	80023d8 <HAL_RCC_OscConfig+0x8c>
 80023d0:	6863      	ldr	r3, [r4, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 819f 	beq.w	8002716 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	f013 0f02 	tst.w	r3, #2
 80023de:	d054      	beq.n	800248a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023e0:	4b7f      	ldr	r3, [pc, #508]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f013 0f0c 	tst.w	r3, #12
 80023e8:	d03e      	beq.n	8002468 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b7d      	ldr	r3, [pc, #500]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d033      	beq.n	800245e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023f6:	68e3      	ldr	r3, [r4, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d068      	beq.n	80024ce <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fc:	4b79      	ldr	r3, [pc, #484]	@ (80025e4 <HAL_RCC_OscConfig+0x298>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe ffe9 	bl	80013d8 <HAL_GetTick>
 8002406:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	4b75      	ldr	r3, [pc, #468]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f013 0f02 	tst.w	r3, #2
 8002410:	d154      	bne.n	80024bc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002412:	f7fe ffe1 	bl	80013d8 <HAL_GetTick>
 8002416:	1b40      	subs	r0, r0, r5
 8002418:	2802      	cmp	r0, #2
 800241a:	d9f5      	bls.n	8002408 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800241c:	2003      	movs	r0, #3
 800241e:	e17f      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002420:	4a6f      	ldr	r2, [pc, #444]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e7b5      	b.n	8002398 <HAL_RCC_OscConfig+0x4c>
 800242c:	4b6c      	ldr	r3, [pc, #432]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e7ab      	b.n	8002398 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002440:	f7fe ffca 	bl	80013d8 <HAL_GetTick>
 8002444:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	4b66      	ldr	r3, [pc, #408]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800244e:	d0c3      	beq.n	80023d8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe ffc2 	bl	80013d8 <HAL_GetTick>
 8002454:	1b40      	subs	r0, r0, r5
 8002456:	2864      	cmp	r0, #100	@ 0x64
 8002458:	d9f5      	bls.n	8002446 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800245a:	2003      	movs	r0, #3
 800245c:	e160      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245e:	4b60      	ldr	r3, [pc, #384]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002466:	d1c6      	bne.n	80023f6 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002468:	4b5d      	ldr	r3, [pc, #372]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f013 0f02 	tst.w	r3, #2
 8002470:	d003      	beq.n	800247a <HAL_RCC_OscConfig+0x12e>
 8002472:	68e3      	ldr	r3, [r4, #12]
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 8150 	bne.w	800271a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4a59      	ldr	r2, [pc, #356]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 800247c:	6813      	ldr	r3, [r2, #0]
 800247e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002482:	6921      	ldr	r1, [r4, #16]
 8002484:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002488:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	f013 0f08 	tst.w	r3, #8
 8002490:	d042      	beq.n	8002518 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002492:	6963      	ldr	r3, [r4, #20]
 8002494:	b36b      	cbz	r3, 80024f2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b53      	ldr	r3, [pc, #332]	@ (80025e4 <HAL_RCC_OscConfig+0x298>)
 8002498:	2201      	movs	r2, #1
 800249a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe ff9b 	bl	80013d8 <HAL_GetTick>
 80024a2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a4:	4b4e      	ldr	r3, [pc, #312]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a8:	f013 0f02 	tst.w	r3, #2
 80024ac:	d134      	bne.n	8002518 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ae:	f7fe ff93 	bl	80013d8 <HAL_GetTick>
 80024b2:	1b40      	subs	r0, r0, r5
 80024b4:	2802      	cmp	r0, #2
 80024b6:	d9f5      	bls.n	80024a4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80024b8:	2003      	movs	r0, #3
 80024ba:	e131      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4a48      	ldr	r2, [pc, #288]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 80024be:	6813      	ldr	r3, [r2, #0]
 80024c0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80024c4:	6921      	ldr	r1, [r4, #16]
 80024c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e7dd      	b.n	800248a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80024ce:	4b45      	ldr	r3, [pc, #276]	@ (80025e4 <HAL_RCC_OscConfig+0x298>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024d4:	f7fe ff80 	bl	80013d8 <HAL_GetTick>
 80024d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	4b41      	ldr	r3, [pc, #260]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f013 0f02 	tst.w	r3, #2
 80024e2:	d0d2      	beq.n	800248a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e4:	f7fe ff78 	bl	80013d8 <HAL_GetTick>
 80024e8:	1b40      	subs	r0, r0, r5
 80024ea:	2802      	cmp	r0, #2
 80024ec:	d9f5      	bls.n	80024da <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80024ee:	2003      	movs	r0, #3
 80024f0:	e116      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f2:	4b3c      	ldr	r3, [pc, #240]	@ (80025e4 <HAL_RCC_OscConfig+0x298>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe ff6d 	bl	80013d8 <HAL_GetTick>
 80024fe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	4b37      	ldr	r3, [pc, #220]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 8002502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002504:	f013 0f02 	tst.w	r3, #2
 8002508:	d006      	beq.n	8002518 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250a:	f7fe ff65 	bl	80013d8 <HAL_GetTick>
 800250e:	1b40      	subs	r0, r0, r5
 8002510:	2802      	cmp	r0, #2
 8002512:	d9f5      	bls.n	8002500 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002514:	2003      	movs	r0, #3
 8002516:	e103      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	f013 0f04 	tst.w	r3, #4
 800251e:	d077      	beq.n	8002610 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002520:	4b2f      	ldr	r3, [pc, #188]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002528:	d133      	bne.n	8002592 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	4b2c      	ldr	r3, [pc, #176]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 8002530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002532:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002536:	641a      	str	r2, [r3, #64]	@ 0x40
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002542:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	4b28      	ldr	r3, [pc, #160]	@ (80025e8 <HAL_RCC_OscConfig+0x29c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800254c:	d023      	beq.n	8002596 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254e:	68a3      	ldr	r3, [r4, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d034      	beq.n	80025be <HAL_RCC_OscConfig+0x272>
 8002554:	2b05      	cmp	r3, #5
 8002556:	d038      	beq.n	80025ca <HAL_RCC_OscConfig+0x27e>
 8002558:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 800255a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	671a      	str	r2, [r3, #112]	@ 0x70
 8002562:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002564:	f022 0204 	bic.w	r2, r2, #4
 8002568:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800256a:	68a3      	ldr	r3, [r4, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d03d      	beq.n	80025ec <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe ff32 	bl	80013d8 <HAL_GetTick>
 8002574:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002576:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	f013 0f02 	tst.w	r3, #2
 800257e:	d146      	bne.n	800260e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7fe ff2a 	bl	80013d8 <HAL_GetTick>
 8002584:	1b80      	subs	r0, r0, r6
 8002586:	f241 3388 	movw	r3, #5000	@ 0x1388
 800258a:	4298      	cmp	r0, r3
 800258c:	d9f3      	bls.n	8002576 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800258e:	2003      	movs	r0, #3
 8002590:	e0c6      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2500      	movs	r5, #0
 8002594:	e7d6      	b.n	8002544 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4a14      	ldr	r2, [pc, #80]	@ (80025e8 <HAL_RCC_OscConfig+0x29c>)
 8002598:	6813      	ldr	r3, [r2, #0]
 800259a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80025a0:	f7fe ff1a 	bl	80013d8 <HAL_GetTick>
 80025a4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <HAL_RCC_OscConfig+0x29c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80025ae:	d1ce      	bne.n	800254e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b0:	f7fe ff12 	bl	80013d8 <HAL_GetTick>
 80025b4:	1b80      	subs	r0, r0, r6
 80025b6:	2802      	cmp	r0, #2
 80025b8:	d9f5      	bls.n	80025a6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80025ba:	2003      	movs	r0, #3
 80025bc:	e0b0      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025be:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 80025c0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c8:	e7cf      	b.n	800256a <HAL_RCC_OscConfig+0x21e>
 80025ca:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_RCC_OscConfig+0x294>)
 80025cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025ce:	f042 0204 	orr.w	r2, r2, #4
 80025d2:	671a      	str	r2, [r3, #112]	@ 0x70
 80025d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	671a      	str	r2, [r3, #112]	@ 0x70
 80025dc:	e7c5      	b.n	800256a <HAL_RCC_OscConfig+0x21e>
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	42470000 	.word	0x42470000
 80025e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ec:	f7fe fef4 	bl	80013d8 <HAL_GetTick>
 80025f0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f2:	4b52      	ldr	r3, [pc, #328]	@ (800273c <HAL_RCC_OscConfig+0x3f0>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f6:	f013 0f02 	tst.w	r3, #2
 80025fa:	d008      	beq.n	800260e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fe feec 	bl	80013d8 <HAL_GetTick>
 8002600:	1b80      	subs	r0, r0, r6
 8002602:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002606:	4298      	cmp	r0, r3
 8002608:	d9f3      	bls.n	80025f2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800260a:	2003      	movs	r0, #3
 800260c:	e088      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800260e:	b9ed      	cbnz	r5, 800264c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002610:	69a3      	ldr	r3, [r4, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8083 	beq.w	800271e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002618:	4a48      	ldr	r2, [pc, #288]	@ (800273c <HAL_RCC_OscConfig+0x3f0>)
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	f002 020c 	and.w	r2, r2, #12
 8002620:	2a08      	cmp	r2, #8
 8002622:	d051      	beq.n	80026c8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002624:	2b02      	cmp	r3, #2
 8002626:	d017      	beq.n	8002658 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	4b45      	ldr	r3, [pc, #276]	@ (8002740 <HAL_RCC_OscConfig+0x3f4>)
 800262a:	2200      	movs	r2, #0
 800262c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe fed3 	bl	80013d8 <HAL_GetTick>
 8002632:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002634:	4b41      	ldr	r3, [pc, #260]	@ (800273c <HAL_RCC_OscConfig+0x3f0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800263c:	d042      	beq.n	80026c4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe fecb 	bl	80013d8 <HAL_GetTick>
 8002642:	1b00      	subs	r0, r0, r4
 8002644:	2802      	cmp	r0, #2
 8002646:	d9f5      	bls.n	8002634 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002648:	2003      	movs	r0, #3
 800264a:	e069      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4a3b      	ldr	r2, [pc, #236]	@ (800273c <HAL_RCC_OscConfig+0x3f0>)
 800264e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	@ 0x40
 8002656:	e7db      	b.n	8002610 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002658:	4b39      	ldr	r3, [pc, #228]	@ (8002740 <HAL_RCC_OscConfig+0x3f4>)
 800265a:	2200      	movs	r2, #0
 800265c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800265e:	f7fe febb 	bl	80013d8 <HAL_GetTick>
 8002662:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002664:	4b35      	ldr	r3, [pc, #212]	@ (800273c <HAL_RCC_OscConfig+0x3f0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800266c:	d006      	beq.n	800267c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe feb3 	bl	80013d8 <HAL_GetTick>
 8002672:	1b40      	subs	r0, r0, r5
 8002674:	2802      	cmp	r0, #2
 8002676:	d9f5      	bls.n	8002664 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002678:	2003      	movs	r0, #3
 800267a:	e051      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800267c:	69e3      	ldr	r3, [r4, #28]
 800267e:	6a22      	ldr	r2, [r4, #32]
 8002680:	4313      	orrs	r3, r2
 8002682:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002684:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002688:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800268a:	0852      	lsrs	r2, r2, #1
 800268c:	3a01      	subs	r2, #1
 800268e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002692:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002694:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002698:	4a28      	ldr	r2, [pc, #160]	@ (800273c <HAL_RCC_OscConfig+0x3f0>)
 800269a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800269c:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <HAL_RCC_OscConfig+0x3f4>)
 800269e:	2201      	movs	r2, #1
 80026a0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80026a2:	f7fe fe99 	bl	80013d8 <HAL_GetTick>
 80026a6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a8:	4b24      	ldr	r3, [pc, #144]	@ (800273c <HAL_RCC_OscConfig+0x3f0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80026b0:	d106      	bne.n	80026c0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7fe fe91 	bl	80013d8 <HAL_GetTick>
 80026b6:	1b00      	subs	r0, r0, r4
 80026b8:	2802      	cmp	r0, #2
 80026ba:	d9f5      	bls.n	80026a8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80026bc:	2003      	movs	r0, #3
 80026be:	e02f      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80026c0:	2000      	movs	r0, #0
 80026c2:	e02d      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
 80026c4:	2000      	movs	r0, #0
 80026c6:	e02b      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d02b      	beq.n	8002724 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <HAL_RCC_OscConfig+0x3f0>)
 80026ce:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80026d4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d6:	4291      	cmp	r1, r2
 80026d8:	d126      	bne.n	8002728 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026de:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e0:	428a      	cmp	r2, r1
 80026e2:	d123      	bne.n	800272c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80026ea:	401a      	ands	r2, r3
 80026ec:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80026f0:	d11e      	bne.n	8002730 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80026f6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80026f8:	0852      	lsrs	r2, r2, #1
 80026fa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026fc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002700:	d118      	bne.n	8002734 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002702:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002706:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002708:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800270c:	d114      	bne.n	8002738 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800270e:	2000      	movs	r0, #0
 8002710:	e006      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002712:	2001      	movs	r0, #1
}
 8002714:	4770      	bx	lr
        return HAL_ERROR;
 8002716:	2001      	movs	r0, #1
 8002718:	e002      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800271a:	2001      	movs	r0, #1
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800271e:	2000      	movs	r0, #0
}
 8002720:	b002      	add	sp, #8
 8002722:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002724:	2001      	movs	r0, #1
 8002726:	e7fb      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
 800272a:	e7f9      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
 800272c:	2001      	movs	r0, #1
 800272e:	e7f7      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
 8002730:	2001      	movs	r0, #1
 8002732:	e7f5      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
 8002734:	2001      	movs	r0, #1
 8002736:	e7f3      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
 8002738:	2001      	movs	r0, #1
 800273a:	e7f1      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
 800273c:	40023800 	.word	0x40023800
 8002740:	42470000 	.word	0x42470000

08002744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002744:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002746:	4b31      	ldr	r3, [pc, #196]	@ (800280c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b08      	cmp	r3, #8
 8002750:	d001      	beq.n	8002756 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002752:	482f      	ldr	r0, [pc, #188]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002754:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002756:	4b2d      	ldr	r3, [pc, #180]	@ (800280c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002764:	d02c      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002766:	4b29      	ldr	r3, [pc, #164]	@ (800280c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002768:	6858      	ldr	r0, [r3, #4]
 800276a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800276e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002772:	ebbc 0c00 	subs.w	ip, ip, r0
 8002776:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800277a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800277e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002782:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002786:	ebb1 010c 	subs.w	r1, r1, ip
 800278a:	eb63 030e 	sbc.w	r3, r3, lr
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002794:	00c9      	lsls	r1, r1, #3
 8002796:	eb11 0c00 	adds.w	ip, r1, r0
 800279a:	f143 0300 	adc.w	r3, r3, #0
 800279e:	0299      	lsls	r1, r3, #10
 80027a0:	2300      	movs	r3, #0
 80027a2:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80027a6:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80027aa:	f7fe f9fd 	bl	8000ba8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027ae:	4b17      	ldr	r3, [pc, #92]	@ (800280c <HAL_RCC_GetSysClockFreq+0xc8>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80027ba:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80027be:	e7c9      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c0:	4b12      	ldr	r3, [pc, #72]	@ (800280c <HAL_RCC_GetSysClockFreq+0xc8>)
 80027c2:	6858      	ldr	r0, [r3, #4]
 80027c4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80027c8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80027cc:	ebbc 0c00 	subs.w	ip, ip, r0
 80027d0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80027d4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80027d8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80027dc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80027e0:	ebb1 010c 	subs.w	r1, r1, ip
 80027e4:	eb63 030e 	sbc.w	r3, r3, lr
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	eb11 0c00 	adds.w	ip, r1, r0
 80027f4:	f143 0300 	adc.w	r3, r3, #0
 80027f8:	0299      	lsls	r1, r3, #10
 80027fa:	2300      	movs	r3, #0
 80027fc:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002800:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002804:	f7fe f9d0 	bl	8000ba8 <__aeabi_uldivmod>
 8002808:	e7d1      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x6a>
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	00f42400 	.word	0x00f42400

08002814 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002814:	2800      	cmp	r0, #0
 8002816:	f000 809b 	beq.w	8002950 <HAL_RCC_ClockConfig+0x13c>
{
 800281a:	b570      	push	{r4, r5, r6, lr}
 800281c:	460d      	mov	r5, r1
 800281e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b4f      	ldr	r3, [pc, #316]	@ (8002960 <HAL_RCC_ClockConfig+0x14c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	428b      	cmp	r3, r1
 800282a:	d208      	bcs.n	800283e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282c:	b2cb      	uxtb	r3, r1
 800282e:	4a4c      	ldr	r2, [pc, #304]	@ (8002960 <HAL_RCC_ClockConfig+0x14c>)
 8002830:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	6813      	ldr	r3, [r2, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	428b      	cmp	r3, r1
 800283a:	f040 808b 	bne.w	8002954 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	f013 0f02 	tst.w	r3, #2
 8002844:	d017      	beq.n	8002876 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002846:	f013 0f04 	tst.w	r3, #4
 800284a:	d004      	beq.n	8002856 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800284c:	4a45      	ldr	r2, [pc, #276]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 800284e:	6893      	ldr	r3, [r2, #8]
 8002850:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002854:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	f013 0f08 	tst.w	r3, #8
 800285c:	d004      	beq.n	8002868 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800285e:	4a41      	ldr	r2, [pc, #260]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 8002860:	6893      	ldr	r3, [r2, #8]
 8002862:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002866:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4a3e      	ldr	r2, [pc, #248]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 800286a:	6893      	ldr	r3, [r2, #8]
 800286c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002870:	68a1      	ldr	r1, [r4, #8]
 8002872:	430b      	orrs	r3, r1
 8002874:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	f013 0f01 	tst.w	r3, #1
 800287c:	d032      	beq.n	80028e4 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	6863      	ldr	r3, [r4, #4]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d021      	beq.n	80028c8 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002884:	1e9a      	subs	r2, r3, #2
 8002886:	2a01      	cmp	r2, #1
 8002888:	d925      	bls.n	80028d6 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4a36      	ldr	r2, [pc, #216]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	f012 0f02 	tst.w	r2, #2
 8002892:	d061      	beq.n	8002958 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002894:	4933      	ldr	r1, [pc, #204]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 8002896:	688a      	ldr	r2, [r1, #8]
 8002898:	f022 0203 	bic.w	r2, r2, #3
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80028a0:	f7fe fd9a 	bl	80013d8 <HAL_GetTick>
 80028a4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	6862      	ldr	r2, [r4, #4]
 80028b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80028b4:	d016      	beq.n	80028e4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b6:	f7fe fd8f 	bl	80013d8 <HAL_GetTick>
 80028ba:	1b80      	subs	r0, r0, r6
 80028bc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80028c0:	4298      	cmp	r0, r3
 80028c2:	d9f0      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80028c4:	2003      	movs	r0, #3
 80028c6:	e042      	b.n	800294e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c8:	4a26      	ldr	r2, [pc, #152]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80028d0:	d1e0      	bne.n	8002894 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80028d2:	2001      	movs	r0, #1
 80028d4:	e03b      	b.n	800294e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4a23      	ldr	r2, [pc, #140]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80028de:	d1d9      	bne.n	8002894 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80028e0:	2001      	movs	r0, #1
 80028e2:	e034      	b.n	800294e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <HAL_RCC_ClockConfig+0x14c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	42ab      	cmp	r3, r5
 80028ee:	d907      	bls.n	8002900 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f0:	b2ea      	uxtb	r2, r5
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_RCC_ClockConfig+0x14c>)
 80028f4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	42ab      	cmp	r3, r5
 80028fe:	d12d      	bne.n	800295c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	f013 0f04 	tst.w	r3, #4
 8002906:	d006      	beq.n	8002916 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002908:	4a16      	ldr	r2, [pc, #88]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 800290a:	6893      	ldr	r3, [r2, #8]
 800290c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002910:	68e1      	ldr	r1, [r4, #12]
 8002912:	430b      	orrs	r3, r1
 8002914:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	f013 0f08 	tst.w	r3, #8
 800291c:	d007      	beq.n	800292e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291e:	4a11      	ldr	r2, [pc, #68]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 8002920:	6893      	ldr	r3, [r2, #8]
 8002922:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002926:	6921      	ldr	r1, [r4, #16]
 8002928:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800292c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800292e:	f7ff ff09 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8002932:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <HAL_RCC_ClockConfig+0x150>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800293a:	4a0b      	ldr	r2, [pc, #44]	@ (8002968 <HAL_RCC_ClockConfig+0x154>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	40d8      	lsrs	r0, r3
 8002940:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_RCC_ClockConfig+0x158>)
 8002942:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_RCC_ClockConfig+0x15c>)
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	f7fe fcfa 	bl	8001340 <HAL_InitTick>
  return HAL_OK;
 800294c:	2000      	movs	r0, #0
}
 800294e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002950:	2001      	movs	r0, #1
}
 8002952:	4770      	bx	lr
      return HAL_ERROR;
 8002954:	2001      	movs	r0, #1
 8002956:	e7fa      	b.n	800294e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002958:	2001      	movs	r0, #1
 800295a:	e7f8      	b.n	800294e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800295c:	2001      	movs	r0, #1
 800295e:	e7f6      	b.n	800294e <HAL_RCC_ClockConfig+0x13a>
 8002960:	40023c00 	.word	0x40023c00
 8002964:	40023800 	.word	0x40023800
 8002968:	0800593c 	.word	0x0800593c
 800296c:	20000000 	.word	0x20000000
 8002970:	20000008 	.word	0x20000008

08002974 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002974:	4b01      	ldr	r3, [pc, #4]	@ (800297c <HAL_RCC_GetHCLKFreq+0x8>)
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000000 	.word	0x20000000

08002980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002980:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002982:	f7ff fff7 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002986:	4b04      	ldr	r3, [pc, #16]	@ (8002998 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800298e:	4a03      	ldr	r2, [pc, #12]	@ (800299c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
}
 8002992:	40d8      	lsrs	r0, r3
 8002994:	bd08      	pop	{r3, pc}
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	08005934 	.word	0x08005934

080029a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a2:	f7ff ffe7 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029a6:	4b04      	ldr	r3, [pc, #16]	@ (80029b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80029ae:	4a03      	ldr	r2, [pc, #12]	@ (80029bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80029b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80029b2:	40d8      	lsrs	r0, r3
 80029b4:	bd08      	pop	{r3, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	08005934 	.word	0x08005934

080029c0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	f102 030c 	add.w	r3, r2, #12
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	320c      	adds	r2, #12
 80029d0:	e842 3100 	strex	r1, r3, [r2]
 80029d4:	2900      	cmp	r1, #0
 80029d6:	d1f3      	bne.n	80029c0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029da:	f102 0314 	add.w	r3, r2, #20
 80029de:	e853 3f00 	ldrex	r3, [r3]
 80029e2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	3214      	adds	r2, #20
 80029e8:	e842 3100 	strex	r1, r3, [r2]
 80029ec:	2900      	cmp	r1, #0
 80029ee:	d1f3      	bne.n	80029d8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029f6:	2320      	movs	r3, #32
 80029f8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fc:	2300      	movs	r3, #0
 80029fe:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002a00:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a02:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a04:	f102 030c 	add.w	r3, r2, #12
 8002a08:	e853 3f00 	ldrex	r3, [r3]
 8002a0c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	320c      	adds	r2, #12
 8002a12:	e842 3100 	strex	r1, r3, [r2]
 8002a16:	2900      	cmp	r1, #0
 8002a18:	d1f3      	bne.n	8002a02 <UART_EndRxTransfer+0x42>
 8002a1a:	e7ec      	b.n	80029f6 <UART_EndRxTransfer+0x36>

08002a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a1c:	b510      	push	{r4, lr}
 8002a1e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a20:	6802      	ldr	r2, [r0, #0]
 8002a22:	6913      	ldr	r3, [r2, #16]
 8002a24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a28:	68c1      	ldr	r1, [r0, #12]
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a2e:	6883      	ldr	r3, [r0, #8]
 8002a30:	6902      	ldr	r2, [r0, #16]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	6943      	ldr	r3, [r0, #20]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	69c3      	ldr	r3, [r0, #28]
 8002a3a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002a3c:	6801      	ldr	r1, [r0, #0]
 8002a3e:	68cb      	ldr	r3, [r1, #12]
 8002a40:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002a44:	f023 030c 	bic.w	r3, r3, #12
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a4c:	6802      	ldr	r2, [r0, #0]
 8002a4e:	6953      	ldr	r3, [r2, #20]
 8002a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a54:	6981      	ldr	r1, [r0, #24]
 8002a56:	430b      	orrs	r3, r1
 8002a58:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	4a31      	ldr	r2, [pc, #196]	@ (8002b24 <UART_SetConfig+0x108>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d006      	beq.n	8002a70 <UART_SetConfig+0x54>
 8002a62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d002      	beq.n	8002a70 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a6a:	f7ff ff89 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8002a6e:	e001      	b.n	8002a74 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a70:	f7ff ff96 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a74:	69e3      	ldr	r3, [r4, #28]
 8002a76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a7a:	d029      	beq.n	8002ad0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	1803      	adds	r3, r0, r0
 8002a80:	4149      	adcs	r1, r1
 8002a82:	181b      	adds	r3, r3, r0
 8002a84:	f141 0100 	adc.w	r1, r1, #0
 8002a88:	00c9      	lsls	r1, r1, #3
 8002a8a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	1818      	adds	r0, r3, r0
 8002a92:	6863      	ldr	r3, [r4, #4]
 8002a94:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002a98:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002a9c:	f141 0100 	adc.w	r1, r1, #0
 8002aa0:	f7fe f882 	bl	8000ba8 <__aeabi_uldivmod>
 8002aa4:	4a20      	ldr	r2, [pc, #128]	@ (8002b28 <UART_SetConfig+0x10c>)
 8002aa6:	fba2 3100 	umull	r3, r1, r2, r0
 8002aaa:	0949      	lsrs	r1, r1, #5
 8002aac:	2364      	movs	r3, #100	@ 0x64
 8002aae:	fb03 0311 	mls	r3, r3, r1, r0
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	3332      	adds	r3, #50	@ 0x32
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ac0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	6821      	ldr	r1, [r4, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }
}
 8002ace:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	1802      	adds	r2, r0, r0
 8002ad4:	eb43 0103 	adc.w	r1, r3, r3
 8002ad8:	1812      	adds	r2, r2, r0
 8002ada:	f141 0100 	adc.w	r1, r1, #0
 8002ade:	00c9      	lsls	r1, r1, #3
 8002ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ae4:	00d2      	lsls	r2, r2, #3
 8002ae6:	1810      	adds	r0, r2, r0
 8002ae8:	f141 0100 	adc.w	r1, r1, #0
 8002aec:	6862      	ldr	r2, [r4, #4]
 8002aee:	1892      	adds	r2, r2, r2
 8002af0:	415b      	adcs	r3, r3
 8002af2:	f7fe f859 	bl	8000ba8 <__aeabi_uldivmod>
 8002af6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b28 <UART_SetConfig+0x10c>)
 8002af8:	fba2 3100 	umull	r3, r1, r2, r0
 8002afc:	0949      	lsrs	r1, r1, #5
 8002afe:	2364      	movs	r3, #100	@ 0x64
 8002b00:	fb03 0311 	mls	r3, r3, r1, r0
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	3332      	adds	r3, #50	@ 0x32
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	005a      	lsls	r2, r3, #1
 8002b10:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002b14:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	6821      	ldr	r1, [r4, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
 8002b22:	e7d4      	b.n	8002ace <UART_SetConfig+0xb2>
 8002b24:	40011000 	.word	0x40011000
 8002b28:	51eb851f 	.word	0x51eb851f

08002b2c <UART_WaitOnFlagUntilTimeout>:
{
 8002b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b30:	b083      	sub	sp, #12
 8002b32:	4605      	mov	r5, r0
 8002b34:	460e      	mov	r6, r1
 8002b36:	4617      	mov	r7, r2
 8002b38:	4699      	mov	r9, r3
 8002b3a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b3e:	682b      	ldr	r3, [r5, #0]
 8002b40:	681c      	ldr	r4, [r3, #0]
 8002b42:	ea36 0404 	bics.w	r4, r6, r4
 8002b46:	bf0c      	ite	eq
 8002b48:	2401      	moveq	r4, #1
 8002b4a:	2400      	movne	r4, #0
 8002b4c:	42bc      	cmp	r4, r7
 8002b4e:	d128      	bne.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002b50:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002b54:	d0f3      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7fe fc3f 	bl	80013d8 <HAL_GetTick>
 8002b5a:	eba0 0009 	sub.w	r0, r0, r9
 8002b5e:	4540      	cmp	r0, r8
 8002b60:	d823      	bhi.n	8002baa <UART_WaitOnFlagUntilTimeout+0x7e>
 8002b62:	f1b8 0f00 	cmp.w	r8, #0
 8002b66:	d022      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	f012 0f04 	tst.w	r2, #4
 8002b70:	d0e5      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0x12>
 8002b72:	2e80      	cmp	r6, #128	@ 0x80
 8002b74:	d0e3      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0x12>
 8002b76:	2e40      	cmp	r6, #64	@ 0x40
 8002b78:	d0e1      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	f012 0f08 	tst.w	r2, #8
 8002b80:	d0dd      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b82:	2400      	movs	r4, #0
 8002b84:	9401      	str	r4, [sp, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	9201      	str	r2, [sp, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002b90:	4628      	mov	r0, r5
 8002b92:	f7ff ff15 	bl	80029c0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b96:	2308      	movs	r3, #8
 8002b98:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002b9a:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	e000      	b.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002ba2:	2000      	movs	r0, #0
}
 8002ba4:	b003      	add	sp, #12
 8002ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002baa:	2003      	movs	r0, #3
 8002bac:	e7fa      	b.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x78>
 8002bae:	2003      	movs	r0, #3
 8002bb0:	e7f8      	b.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x78>

08002bb2 <HAL_UART_Init>:
  if (huart == NULL)
 8002bb2:	b360      	cbz	r0, 8002c0e <HAL_UART_Init+0x5c>
{
 8002bb4:	b510      	push	{r4, lr}
 8002bb6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002bbc:	b313      	cbz	r3, 8002c04 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002bbe:	2324      	movs	r3, #36	@ 0x24
 8002bc0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002bc4:	6822      	ldr	r2, [r4, #0]
 8002bc6:	68d3      	ldr	r3, [r2, #12]
 8002bc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bcc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff ff24 	bl	8002a1c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd4:	6822      	ldr	r2, [r4, #0]
 8002bd6:	6913      	ldr	r3, [r2, #16]
 8002bd8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002bdc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bde:	6822      	ldr	r2, [r4, #0]
 8002be0:	6953      	ldr	r3, [r2, #20]
 8002be2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002be6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002be8:	6822      	ldr	r2, [r4, #0]
 8002bea:	68d3      	ldr	r3, [r2, #12]
 8002bec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bf0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c00:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002c02:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002c04:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002c08:	f7fe fad0 	bl	80011ac <HAL_UART_MspInit>
 8002c0c:	e7d7      	b.n	8002bbe <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
}
 8002c10:	4770      	bx	lr

08002c12 <HAL_UART_Transmit>:
{
 8002c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002c1a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d156      	bne.n	8002cd2 <HAL_UART_Transmit+0xc0>
 8002c24:	4604      	mov	r4, r0
 8002c26:	460d      	mov	r5, r1
 8002c28:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d055      	beq.n	8002cda <HAL_UART_Transmit+0xc8>
 8002c2e:	b90a      	cbnz	r2, 8002c34 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002c30:	2001      	movs	r0, #1
 8002c32:	e04f      	b.n	8002cd4 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c38:	2321      	movs	r3, #33	@ 0x21
 8002c3a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fbcb 	bl	80013d8 <HAL_GetTick>
 8002c42:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002c44:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c48:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	68a3      	ldr	r3, [r4, #8]
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c52:	d002      	beq.n	8002c5a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002c54:	f04f 0800 	mov.w	r8, #0
 8002c58:	e014      	b.n	8002c84 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5a:	6923      	ldr	r3, [r4, #16]
 8002c5c:	b32b      	cbz	r3, 8002caa <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8002c5e:	f04f 0800 	mov.w	r8, #0
 8002c62:	e00f      	b.n	8002c84 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002c64:	2320      	movs	r3, #32
 8002c66:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002c6a:	2003      	movs	r0, #3
 8002c6c:	e032      	b.n	8002cd4 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c6e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002c72:	6822      	ldr	r2, [r4, #0]
 8002c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c78:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002c7a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002c7c:	b292      	uxth	r2, r2
 8002c7e:	3a01      	subs	r2, #1
 8002c80:	b292      	uxth	r2, r2
 8002c82:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c84:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	b193      	cbz	r3, 8002cb0 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8a:	9600      	str	r6, [sp, #0]
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2180      	movs	r1, #128	@ 0x80
 8002c92:	4620      	mov	r0, r4
 8002c94:	f7ff ff4a 	bl	8002b2c <UART_WaitOnFlagUntilTimeout>
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	d1e3      	bne.n	8002c64 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002c9c:	2d00      	cmp	r5, #0
 8002c9e:	d0e6      	beq.n	8002c6e <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ca8:	e7e7      	b.n	8002c7a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002caa:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002cac:	2500      	movs	r5, #0
 8002cae:	e7e9      	b.n	8002c84 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb0:	9600      	str	r6, [sp, #0]
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2140      	movs	r1, #64	@ 0x40
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7ff ff37 	bl	8002b2c <UART_WaitOnFlagUntilTimeout>
 8002cbe:	b918      	cbnz	r0, 8002cc8 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002cc6:	e005      	b.n	8002cd4 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002cce:	2003      	movs	r0, #3
 8002cd0:	e000      	b.n	8002cd4 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8002cd2:	2002      	movs	r0, #2
}
 8002cd4:	b002      	add	sp, #8
 8002cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002cda:	2001      	movs	r0, #1
 8002cdc:	e7fa      	b.n	8002cd4 <HAL_UART_Transmit+0xc2>
	...

08002ce0 <itg3200_write>:
static const int GYRO_TEMP_OFFSET = -13200;
static const float GYRO_TEMP_OFFSET_CELSIUS = 35.0;

// Private functions

ITG3200_result_t itg3200_write(ITG3200_HandleTypeDef *itg, uint8_t *data, uint16_t len) {
 8002ce0:	b500      	push	{lr}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	468e      	mov	lr, r1
 8002ce6:	4613      	mov	r3, r2

    if (HAL_I2C_Master_Transmit(itg->i2c, itg->i2c_addr << 1, data, len, HAL_MAX_DELAY) != HAL_OK) {
 8002ce8:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002cec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002cf0:	fa1f f18c 	uxth.w	r1, ip
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cf8:	9200      	str	r2, [sp, #0]
 8002cfa:	4672      	mov	r2, lr
 8002cfc:	6800      	ldr	r0, [r0, #0]
 8002cfe:	f7ff f821 	bl	8001d44 <HAL_I2C_Master_Transmit>
 8002d02:	b910      	cbnz	r0, 8002d0a <itg3200_write+0x2a>
        return ITG3200_Err;
    }

    return ITG3200_OK;

}
 8002d04:	b003      	add	sp, #12
 8002d06:	f85d fb04 	ldr.w	pc, [sp], #4
        ITG_DBG("I2C Transmit Error\n");
 8002d0a:	4802      	ldr	r0, [pc, #8]	@ (8002d14 <itg3200_write+0x34>)
 8002d0c:	f000 fe30 	bl	8003970 <puts>
        return ITG3200_Err;
 8002d10:	2001      	movs	r0, #1
 8002d12:	e7f7      	b.n	8002d04 <itg3200_write+0x24>
 8002d14:	0800594c 	.word	0x0800594c

08002d18 <itg3200_read>:

ITG3200_result_t itg3200_read(ITG3200_HandleTypeDef *itg, uint8_t *data, uint16_t len) {
 8002d18:	b500      	push	{lr}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	468e      	mov	lr, r1
 8002d1e:	4613      	mov	r3, r2

    if (HAL_I2C_Master_Receive(itg->i2c, itg->i2c_addr << 1, data, len, HAL_MAX_DELAY) != HAL_OK) {
 8002d20:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002d24:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002d28:	fa1f f18c 	uxth.w	r1, ip
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d30:	9200      	str	r2, [sp, #0]
 8002d32:	4672      	mov	r2, lr
 8002d34:	6800      	ldr	r0, [r0, #0]
 8002d36:	f7ff f8c1 	bl	8001ebc <HAL_I2C_Master_Receive>
 8002d3a:	b910      	cbnz	r0, 8002d42 <itg3200_read+0x2a>
        ITG_DBG("I2C Transmit Error\n");
        return ITG3200_Err;
    }

    return ITG3200_OK;
}
 8002d3c:	b003      	add	sp, #12
 8002d3e:	f85d fb04 	ldr.w	pc, [sp], #4
        ITG_DBG("I2C Transmit Error\n");
 8002d42:	4802      	ldr	r0, [pc, #8]	@ (8002d4c <itg3200_read+0x34>)
 8002d44:	f000 fe14 	bl	8003970 <puts>
        return ITG3200_Err;
 8002d48:	2001      	movs	r0, #1
 8002d4a:	e7f7      	b.n	8002d3c <itg3200_read+0x24>
 8002d4c:	0800594c 	.word	0x0800594c

08002d50 <itg3200_read_register>:

ITG3200_result_t itg3200_read_register(ITG3200_HandleTypeDef *itg, uint8_t reg, uint8_t *data, uint16_t len) {
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	4604      	mov	r4, r0
 8002d56:	4615      	mov	r5, r2
 8002d58:	461e      	mov	r6, r3
 8002d5a:	f88d 1007 	strb.w	r1, [sp, #7]

    if (itg3200_write(itg, &reg, 1) != ITG3200_OK) {
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f10d 0107 	add.w	r1, sp, #7
 8002d64:	f7ff ffbc 	bl	8002ce0 <itg3200_write>
 8002d68:	b110      	cbz	r0, 8002d70 <itg3200_read_register+0x20>
        return ITG3200_Err;
 8002d6a:	2001      	movs	r0, #1
    if (itg3200_read(itg, data, len) != ITG3200_OK) {
        return ITG3200_Err;
    }

    return ITG3200_OK;
}
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
    if (itg3200_read(itg, data, len) != ITG3200_OK) {
 8002d70:	4632      	mov	r2, r6
 8002d72:	4629      	mov	r1, r5
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7ff ffcf 	bl	8002d18 <itg3200_read>
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d0f6      	beq.n	8002d6c <itg3200_read_register+0x1c>
        return ITG3200_Err;
 8002d7e:	2001      	movs	r0, #1
 8002d80:	e7f4      	b.n	8002d6c <itg3200_read_register+0x1c>
	...

08002d84 <itg3200_init>:

// Public functions

ITG3200_result_t itg3200_init(ITG3200_HandleTypeDef *itg, I2C_HandleTypeDef *i2c, uint16_t i2c_addr) {
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	4604      	mov	r4, r0
 8002d8a:	460e      	mov	r6, r1
 8002d8c:	4615      	mov	r5, r2
    ITG_DBG("itg3200_init\n");
 8002d8e:	4812      	ldr	r0, [pc, #72]	@ (8002dd8 <itg3200_init+0x54>)
 8002d90:	f000 fdee 	bl	8003970 <puts>

    itg->i2c = i2c;
 8002d94:	6026      	str	r6, [r4, #0]
    itg->i2c_addr = i2c_addr;
 8002d96:	80a5      	strh	r5, [r4, #4]

    HAL_Delay(50);
 8002d98:	2032      	movs	r0, #50	@ 0x32
 8002d9a:	f7fe fb23 	bl	80013e4 <HAL_Delay>

    uint8_t addr;

    if (itg3200_read_register(itg, ITG3200_REG_WHO_AM_I, &addr, 1) != ITG3200_OK) {
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f10d 0207 	add.w	r2, sp, #7
 8002da4:	2100      	movs	r1, #0
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7ff ffd2 	bl	8002d50 <itg3200_read_register>
 8002dac:	b118      	cbz	r0, 8002db6 <itg3200_init+0x32>
        return ITG3200_Err;
 8002dae:	2501      	movs	r5, #1
        ITG_DBG("Who am i error!\n");
        return ITG3200_Err;
    }

    return ITG3200_OK;
}
 8002db0:	4628      	mov	r0, r5
 8002db2:	b002      	add	sp, #8
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
 8002db6:	4605      	mov	r5, r0
    ITG_DBG("Received WHO_AM_I: %d addr = %d\n", addr, itg->i2c_addr);
 8002db8:	88a2      	ldrh	r2, [r4, #4]
 8002dba:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002dbe:	4807      	ldr	r0, [pc, #28]	@ (8002ddc <itg3200_init+0x58>)
 8002dc0:	f000 fd66 	bl	8003890 <iprintf>
    if (itg->i2c_addr != addr) {
 8002dc4:	88a2      	ldrh	r2, [r4, #4]
 8002dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d0f0      	beq.n	8002db0 <itg3200_init+0x2c>
        ITG_DBG("Who am i error!\n");
 8002dce:	4804      	ldr	r0, [pc, #16]	@ (8002de0 <itg3200_init+0x5c>)
 8002dd0:	f000 fdce 	bl	8003970 <puts>
        return ITG3200_Err;
 8002dd4:	2501      	movs	r5, #1
 8002dd6:	e7eb      	b.n	8002db0 <itg3200_init+0x2c>
 8002dd8:	08005960 	.word	0x08005960
 8002ddc:	08005970 	.word	0x08005970
 8002de0:	08005994 	.word	0x08005994

08002de4 <itg3200_get_temp>:

ITG3200_result_t itg3200_get_temp(ITG3200_HandleTypeDef *itg) {
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	4604      	mov	r4, r0
    ITG_DBG("itg_get_temp\n");
 8002dea:	4818      	ldr	r0, [pc, #96]	@ (8002e4c <itg3200_get_temp+0x68>)
 8002dec:	f000 fdc0 	bl	8003970 <puts>

    uint8_t temp_data[2];

    if (itg3200_read_register(itg, ITG3200_REG_TEMP_DATA, (uint8_t *)&temp_data, sizeof(temp_data)) != ITG3200_OK) {
 8002df0:	2302      	movs	r3, #2
 8002df2:	aa03      	add	r2, sp, #12
 8002df4:	211b      	movs	r1, #27
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7ff ffaa 	bl	8002d50 <itg3200_read_register>
 8002dfc:	b118      	cbz	r0, 8002e06 <itg3200_get_temp+0x22>
        return ITG3200_Err;
 8002dfe:	2401      	movs	r4, #1
    float t = (((float)((temp_data[0] | temp_data[1]<<8) + GYRO_TEMP_OFFSET))/GYRO_TEMP_SENSITIVITY) + GYRO_TEMP_OFFSET_CELSIUS;

    ITG_DBG("temp hi = %d, temp lo = %d full = %f\n", temp_data[0], temp_data[1], t);

    return ITG3200_OK;
}
 8002e00:	4620      	mov	r0, r4
 8002e02:	b004      	add	sp, #16
 8002e04:	bd70      	pop	{r4, r5, r6, pc}
 8002e06:	4604      	mov	r4, r0
    float t = (((float)((temp_data[0] | temp_data[1]<<8) + GYRO_TEMP_OFFSET))/GYRO_TEMP_SENSITIVITY) + GYRO_TEMP_OFFSET_CELSIUS;
 8002e08:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8002e0c:	f89d 600d 	ldrb.w	r6, [sp, #13]
 8002e10:	ea45 2306 	orr.w	r3, r5, r6, lsl #8
 8002e14:	f5a3 534e 	sub.w	r3, r3, #13184	@ 0x3380
 8002e18:	3b10      	subs	r3, #16
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e22:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002e50 <itg3200_get_temp+0x6c>
 8002e26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    ITG_DBG("temp hi = %d, temp lo = %d full = %f\n", temp_data[0], temp_data[1], t);
 8002e2a:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8002e54 <itg3200_get_temp+0x70>
 8002e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e32:	ee17 0a90 	vmov	r0, s15
 8002e36:	f7fd fb87 	bl	8000548 <__aeabi_f2d>
 8002e3a:	e9cd 0100 	strd	r0, r1, [sp]
 8002e3e:	4632      	mov	r2, r6
 8002e40:	4629      	mov	r1, r5
 8002e42:	4805      	ldr	r0, [pc, #20]	@ (8002e58 <itg3200_get_temp+0x74>)
 8002e44:	f000 fd24 	bl	8003890 <iprintf>
    return ITG3200_OK;
 8002e48:	e7da      	b.n	8002e00 <itg3200_get_temp+0x1c>
 8002e4a:	bf00      	nop
 8002e4c:	080059a4 	.word	0x080059a4
 8002e50:	438c0000 	.word	0x438c0000
 8002e54:	420c0000 	.word	0x420c0000
 8002e58:	080059b4 	.word	0x080059b4

08002e5c <__cvt>:
 8002e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e60:	ec57 6b10 	vmov	r6, r7, d0
 8002e64:	2f00      	cmp	r7, #0
 8002e66:	460c      	mov	r4, r1
 8002e68:	4619      	mov	r1, r3
 8002e6a:	463b      	mov	r3, r7
 8002e6c:	bfbb      	ittet	lt
 8002e6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002e72:	461f      	movlt	r7, r3
 8002e74:	2300      	movge	r3, #0
 8002e76:	232d      	movlt	r3, #45	@ 0x2d
 8002e78:	700b      	strb	r3, [r1, #0]
 8002e7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002e80:	4691      	mov	r9, r2
 8002e82:	f023 0820 	bic.w	r8, r3, #32
 8002e86:	bfbc      	itt	lt
 8002e88:	4632      	movlt	r2, r6
 8002e8a:	4616      	movlt	r6, r2
 8002e8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e90:	d005      	beq.n	8002e9e <__cvt+0x42>
 8002e92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002e96:	d100      	bne.n	8002e9a <__cvt+0x3e>
 8002e98:	3401      	adds	r4, #1
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	e000      	b.n	8002ea0 <__cvt+0x44>
 8002e9e:	2103      	movs	r1, #3
 8002ea0:	ab03      	add	r3, sp, #12
 8002ea2:	9301      	str	r3, [sp, #4]
 8002ea4:	ab02      	add	r3, sp, #8
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	ec47 6b10 	vmov	d0, r6, r7
 8002eac:	4653      	mov	r3, sl
 8002eae:	4622      	mov	r2, r4
 8002eb0:	f000 ff46 	bl	8003d40 <_dtoa_r>
 8002eb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002eb8:	4605      	mov	r5, r0
 8002eba:	d119      	bne.n	8002ef0 <__cvt+0x94>
 8002ebc:	f019 0f01 	tst.w	r9, #1
 8002ec0:	d00e      	beq.n	8002ee0 <__cvt+0x84>
 8002ec2:	eb00 0904 	add.w	r9, r0, r4
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2300      	movs	r3, #0
 8002eca:	4630      	mov	r0, r6
 8002ecc:	4639      	mov	r1, r7
 8002ece:	f7fd fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 8002ed2:	b108      	cbz	r0, 8002ed8 <__cvt+0x7c>
 8002ed4:	f8cd 900c 	str.w	r9, [sp, #12]
 8002ed8:	2230      	movs	r2, #48	@ 0x30
 8002eda:	9b03      	ldr	r3, [sp, #12]
 8002edc:	454b      	cmp	r3, r9
 8002ede:	d31e      	bcc.n	8002f1e <__cvt+0xc2>
 8002ee0:	9b03      	ldr	r3, [sp, #12]
 8002ee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002ee4:	1b5b      	subs	r3, r3, r5
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	b004      	add	sp, #16
 8002eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ef4:	eb00 0904 	add.w	r9, r0, r4
 8002ef8:	d1e5      	bne.n	8002ec6 <__cvt+0x6a>
 8002efa:	7803      	ldrb	r3, [r0, #0]
 8002efc:	2b30      	cmp	r3, #48	@ 0x30
 8002efe:	d10a      	bne.n	8002f16 <__cvt+0xba>
 8002f00:	2200      	movs	r2, #0
 8002f02:	2300      	movs	r3, #0
 8002f04:	4630      	mov	r0, r6
 8002f06:	4639      	mov	r1, r7
 8002f08:	f7fd fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f0c:	b918      	cbnz	r0, 8002f16 <__cvt+0xba>
 8002f0e:	f1c4 0401 	rsb	r4, r4, #1
 8002f12:	f8ca 4000 	str.w	r4, [sl]
 8002f16:	f8da 3000 	ldr.w	r3, [sl]
 8002f1a:	4499      	add	r9, r3
 8002f1c:	e7d3      	b.n	8002ec6 <__cvt+0x6a>
 8002f1e:	1c59      	adds	r1, r3, #1
 8002f20:	9103      	str	r1, [sp, #12]
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e7d9      	b.n	8002eda <__cvt+0x7e>

08002f26 <__exponent>:
 8002f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f28:	2900      	cmp	r1, #0
 8002f2a:	bfba      	itte	lt
 8002f2c:	4249      	neglt	r1, r1
 8002f2e:	232d      	movlt	r3, #45	@ 0x2d
 8002f30:	232b      	movge	r3, #43	@ 0x2b
 8002f32:	2909      	cmp	r1, #9
 8002f34:	7002      	strb	r2, [r0, #0]
 8002f36:	7043      	strb	r3, [r0, #1]
 8002f38:	dd29      	ble.n	8002f8e <__exponent+0x68>
 8002f3a:	f10d 0307 	add.w	r3, sp, #7
 8002f3e:	461d      	mov	r5, r3
 8002f40:	270a      	movs	r7, #10
 8002f42:	461a      	mov	r2, r3
 8002f44:	fbb1 f6f7 	udiv	r6, r1, r7
 8002f48:	fb07 1416 	mls	r4, r7, r6, r1
 8002f4c:	3430      	adds	r4, #48	@ 0x30
 8002f4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002f52:	460c      	mov	r4, r1
 8002f54:	2c63      	cmp	r4, #99	@ 0x63
 8002f56:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8002f5a:	4631      	mov	r1, r6
 8002f5c:	dcf1      	bgt.n	8002f42 <__exponent+0x1c>
 8002f5e:	3130      	adds	r1, #48	@ 0x30
 8002f60:	1e94      	subs	r4, r2, #2
 8002f62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002f66:	1c41      	adds	r1, r0, #1
 8002f68:	4623      	mov	r3, r4
 8002f6a:	42ab      	cmp	r3, r5
 8002f6c:	d30a      	bcc.n	8002f84 <__exponent+0x5e>
 8002f6e:	f10d 0309 	add.w	r3, sp, #9
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	42ac      	cmp	r4, r5
 8002f76:	bf88      	it	hi
 8002f78:	2300      	movhi	r3, #0
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	4403      	add	r3, r0
 8002f7e:	1a18      	subs	r0, r3, r0
 8002f80:	b003      	add	sp, #12
 8002f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002f88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002f8c:	e7ed      	b.n	8002f6a <__exponent+0x44>
 8002f8e:	2330      	movs	r3, #48	@ 0x30
 8002f90:	3130      	adds	r1, #48	@ 0x30
 8002f92:	7083      	strb	r3, [r0, #2]
 8002f94:	70c1      	strb	r1, [r0, #3]
 8002f96:	1d03      	adds	r3, r0, #4
 8002f98:	e7f1      	b.n	8002f7e <__exponent+0x58>
	...

08002f9c <_printf_float>:
 8002f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa0:	b08d      	sub	sp, #52	@ 0x34
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002fa8:	4616      	mov	r6, r2
 8002faa:	461f      	mov	r7, r3
 8002fac:	4605      	mov	r5, r0
 8002fae:	f000 fdc7 	bl	8003b40 <_localeconv_r>
 8002fb2:	6803      	ldr	r3, [r0, #0]
 8002fb4:	9304      	str	r3, [sp, #16]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd f95a 	bl	8000270 <strlen>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8002fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8002fc4:	9005      	str	r0, [sp, #20]
 8002fc6:	3307      	adds	r3, #7
 8002fc8:	f023 0307 	bic.w	r3, r3, #7
 8002fcc:	f103 0208 	add.w	r2, r3, #8
 8002fd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002fd4:	f8d4 b000 	ldr.w	fp, [r4]
 8002fd8:	f8c8 2000 	str.w	r2, [r8]
 8002fdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fe0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002fe4:	9307      	str	r3, [sp, #28]
 8002fe6:	f8cd 8018 	str.w	r8, [sp, #24]
 8002fea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ff2:	4b9c      	ldr	r3, [pc, #624]	@ (8003264 <_printf_float+0x2c8>)
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ff8:	f7fd fd98 	bl	8000b2c <__aeabi_dcmpun>
 8002ffc:	bb70      	cbnz	r0, 800305c <_printf_float+0xc0>
 8002ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003002:	4b98      	ldr	r3, [pc, #608]	@ (8003264 <_printf_float+0x2c8>)
 8003004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003008:	f7fd fd72 	bl	8000af0 <__aeabi_dcmple>
 800300c:	bb30      	cbnz	r0, 800305c <_printf_float+0xc0>
 800300e:	2200      	movs	r2, #0
 8003010:	2300      	movs	r3, #0
 8003012:	4640      	mov	r0, r8
 8003014:	4649      	mov	r1, r9
 8003016:	f7fd fd61 	bl	8000adc <__aeabi_dcmplt>
 800301a:	b110      	cbz	r0, 8003022 <_printf_float+0x86>
 800301c:	232d      	movs	r3, #45	@ 0x2d
 800301e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003022:	4a91      	ldr	r2, [pc, #580]	@ (8003268 <_printf_float+0x2cc>)
 8003024:	4b91      	ldr	r3, [pc, #580]	@ (800326c <_printf_float+0x2d0>)
 8003026:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800302a:	bf94      	ite	ls
 800302c:	4690      	movls	r8, r2
 800302e:	4698      	movhi	r8, r3
 8003030:	2303      	movs	r3, #3
 8003032:	6123      	str	r3, [r4, #16]
 8003034:	f02b 0304 	bic.w	r3, fp, #4
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	f04f 0900 	mov.w	r9, #0
 800303e:	9700      	str	r7, [sp, #0]
 8003040:	4633      	mov	r3, r6
 8003042:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003044:	4621      	mov	r1, r4
 8003046:	4628      	mov	r0, r5
 8003048:	f000 f9d2 	bl	80033f0 <_printf_common>
 800304c:	3001      	adds	r0, #1
 800304e:	f040 808d 	bne.w	800316c <_printf_float+0x1d0>
 8003052:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003056:	b00d      	add	sp, #52	@ 0x34
 8003058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	4640      	mov	r0, r8
 8003062:	4649      	mov	r1, r9
 8003064:	f7fd fd62 	bl	8000b2c <__aeabi_dcmpun>
 8003068:	b140      	cbz	r0, 800307c <_printf_float+0xe0>
 800306a:	464b      	mov	r3, r9
 800306c:	2b00      	cmp	r3, #0
 800306e:	bfbc      	itt	lt
 8003070:	232d      	movlt	r3, #45	@ 0x2d
 8003072:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003076:	4a7e      	ldr	r2, [pc, #504]	@ (8003270 <_printf_float+0x2d4>)
 8003078:	4b7e      	ldr	r3, [pc, #504]	@ (8003274 <_printf_float+0x2d8>)
 800307a:	e7d4      	b.n	8003026 <_printf_float+0x8a>
 800307c:	6863      	ldr	r3, [r4, #4]
 800307e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003082:	9206      	str	r2, [sp, #24]
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	d13b      	bne.n	8003100 <_printf_float+0x164>
 8003088:	2306      	movs	r3, #6
 800308a:	6063      	str	r3, [r4, #4]
 800308c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003090:	2300      	movs	r3, #0
 8003092:	6022      	str	r2, [r4, #0]
 8003094:	9303      	str	r3, [sp, #12]
 8003096:	ab0a      	add	r3, sp, #40	@ 0x28
 8003098:	e9cd a301 	strd	sl, r3, [sp, #4]
 800309c:	ab09      	add	r3, sp, #36	@ 0x24
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	6861      	ldr	r1, [r4, #4]
 80030a2:	ec49 8b10 	vmov	d0, r8, r9
 80030a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80030aa:	4628      	mov	r0, r5
 80030ac:	f7ff fed6 	bl	8002e5c <__cvt>
 80030b0:	9b06      	ldr	r3, [sp, #24]
 80030b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80030b4:	2b47      	cmp	r3, #71	@ 0x47
 80030b6:	4680      	mov	r8, r0
 80030b8:	d129      	bne.n	800310e <_printf_float+0x172>
 80030ba:	1cc8      	adds	r0, r1, #3
 80030bc:	db02      	blt.n	80030c4 <_printf_float+0x128>
 80030be:	6863      	ldr	r3, [r4, #4]
 80030c0:	4299      	cmp	r1, r3
 80030c2:	dd41      	ble.n	8003148 <_printf_float+0x1ac>
 80030c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80030c8:	fa5f fa8a 	uxtb.w	sl, sl
 80030cc:	3901      	subs	r1, #1
 80030ce:	4652      	mov	r2, sl
 80030d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80030d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80030d6:	f7ff ff26 	bl	8002f26 <__exponent>
 80030da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80030dc:	1813      	adds	r3, r2, r0
 80030de:	2a01      	cmp	r2, #1
 80030e0:	4681      	mov	r9, r0
 80030e2:	6123      	str	r3, [r4, #16]
 80030e4:	dc02      	bgt.n	80030ec <_printf_float+0x150>
 80030e6:	6822      	ldr	r2, [r4, #0]
 80030e8:	07d2      	lsls	r2, r2, #31
 80030ea:	d501      	bpl.n	80030f0 <_printf_float+0x154>
 80030ec:	3301      	adds	r3, #1
 80030ee:	6123      	str	r3, [r4, #16]
 80030f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0a2      	beq.n	800303e <_printf_float+0xa2>
 80030f8:	232d      	movs	r3, #45	@ 0x2d
 80030fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030fe:	e79e      	b.n	800303e <_printf_float+0xa2>
 8003100:	9a06      	ldr	r2, [sp, #24]
 8003102:	2a47      	cmp	r2, #71	@ 0x47
 8003104:	d1c2      	bne.n	800308c <_printf_float+0xf0>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1c0      	bne.n	800308c <_printf_float+0xf0>
 800310a:	2301      	movs	r3, #1
 800310c:	e7bd      	b.n	800308a <_printf_float+0xee>
 800310e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003112:	d9db      	bls.n	80030cc <_printf_float+0x130>
 8003114:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003118:	d118      	bne.n	800314c <_printf_float+0x1b0>
 800311a:	2900      	cmp	r1, #0
 800311c:	6863      	ldr	r3, [r4, #4]
 800311e:	dd0b      	ble.n	8003138 <_printf_float+0x19c>
 8003120:	6121      	str	r1, [r4, #16]
 8003122:	b913      	cbnz	r3, 800312a <_printf_float+0x18e>
 8003124:	6822      	ldr	r2, [r4, #0]
 8003126:	07d0      	lsls	r0, r2, #31
 8003128:	d502      	bpl.n	8003130 <_printf_float+0x194>
 800312a:	3301      	adds	r3, #1
 800312c:	440b      	add	r3, r1
 800312e:	6123      	str	r3, [r4, #16]
 8003130:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003132:	f04f 0900 	mov.w	r9, #0
 8003136:	e7db      	b.n	80030f0 <_printf_float+0x154>
 8003138:	b913      	cbnz	r3, 8003140 <_printf_float+0x1a4>
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	07d2      	lsls	r2, r2, #31
 800313e:	d501      	bpl.n	8003144 <_printf_float+0x1a8>
 8003140:	3302      	adds	r3, #2
 8003142:	e7f4      	b.n	800312e <_printf_float+0x192>
 8003144:	2301      	movs	r3, #1
 8003146:	e7f2      	b.n	800312e <_printf_float+0x192>
 8003148:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800314c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800314e:	4299      	cmp	r1, r3
 8003150:	db05      	blt.n	800315e <_printf_float+0x1c2>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	6121      	str	r1, [r4, #16]
 8003156:	07d8      	lsls	r0, r3, #31
 8003158:	d5ea      	bpl.n	8003130 <_printf_float+0x194>
 800315a:	1c4b      	adds	r3, r1, #1
 800315c:	e7e7      	b.n	800312e <_printf_float+0x192>
 800315e:	2900      	cmp	r1, #0
 8003160:	bfd4      	ite	le
 8003162:	f1c1 0202 	rsble	r2, r1, #2
 8003166:	2201      	movgt	r2, #1
 8003168:	4413      	add	r3, r2
 800316a:	e7e0      	b.n	800312e <_printf_float+0x192>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	055a      	lsls	r2, r3, #21
 8003170:	d407      	bmi.n	8003182 <_printf_float+0x1e6>
 8003172:	6923      	ldr	r3, [r4, #16]
 8003174:	4642      	mov	r2, r8
 8003176:	4631      	mov	r1, r6
 8003178:	4628      	mov	r0, r5
 800317a:	47b8      	blx	r7
 800317c:	3001      	adds	r0, #1
 800317e:	d12b      	bne.n	80031d8 <_printf_float+0x23c>
 8003180:	e767      	b.n	8003052 <_printf_float+0xb6>
 8003182:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003186:	f240 80dd 	bls.w	8003344 <_printf_float+0x3a8>
 800318a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800318e:	2200      	movs	r2, #0
 8003190:	2300      	movs	r3, #0
 8003192:	f7fd fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 8003196:	2800      	cmp	r0, #0
 8003198:	d033      	beq.n	8003202 <_printf_float+0x266>
 800319a:	4a37      	ldr	r2, [pc, #220]	@ (8003278 <_printf_float+0x2dc>)
 800319c:	2301      	movs	r3, #1
 800319e:	4631      	mov	r1, r6
 80031a0:	4628      	mov	r0, r5
 80031a2:	47b8      	blx	r7
 80031a4:	3001      	adds	r0, #1
 80031a6:	f43f af54 	beq.w	8003052 <_printf_float+0xb6>
 80031aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80031ae:	4543      	cmp	r3, r8
 80031b0:	db02      	blt.n	80031b8 <_printf_float+0x21c>
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	07d8      	lsls	r0, r3, #31
 80031b6:	d50f      	bpl.n	80031d8 <_printf_float+0x23c>
 80031b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031bc:	4631      	mov	r1, r6
 80031be:	4628      	mov	r0, r5
 80031c0:	47b8      	blx	r7
 80031c2:	3001      	adds	r0, #1
 80031c4:	f43f af45 	beq.w	8003052 <_printf_float+0xb6>
 80031c8:	f04f 0900 	mov.w	r9, #0
 80031cc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80031d0:	f104 0a1a 	add.w	sl, r4, #26
 80031d4:	45c8      	cmp	r8, r9
 80031d6:	dc09      	bgt.n	80031ec <_printf_float+0x250>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	079b      	lsls	r3, r3, #30
 80031dc:	f100 8103 	bmi.w	80033e6 <_printf_float+0x44a>
 80031e0:	68e0      	ldr	r0, [r4, #12]
 80031e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80031e4:	4298      	cmp	r0, r3
 80031e6:	bfb8      	it	lt
 80031e8:	4618      	movlt	r0, r3
 80031ea:	e734      	b.n	8003056 <_printf_float+0xba>
 80031ec:	2301      	movs	r3, #1
 80031ee:	4652      	mov	r2, sl
 80031f0:	4631      	mov	r1, r6
 80031f2:	4628      	mov	r0, r5
 80031f4:	47b8      	blx	r7
 80031f6:	3001      	adds	r0, #1
 80031f8:	f43f af2b 	beq.w	8003052 <_printf_float+0xb6>
 80031fc:	f109 0901 	add.w	r9, r9, #1
 8003200:	e7e8      	b.n	80031d4 <_printf_float+0x238>
 8003202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003204:	2b00      	cmp	r3, #0
 8003206:	dc39      	bgt.n	800327c <_printf_float+0x2e0>
 8003208:	4a1b      	ldr	r2, [pc, #108]	@ (8003278 <_printf_float+0x2dc>)
 800320a:	2301      	movs	r3, #1
 800320c:	4631      	mov	r1, r6
 800320e:	4628      	mov	r0, r5
 8003210:	47b8      	blx	r7
 8003212:	3001      	adds	r0, #1
 8003214:	f43f af1d 	beq.w	8003052 <_printf_float+0xb6>
 8003218:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800321c:	ea59 0303 	orrs.w	r3, r9, r3
 8003220:	d102      	bne.n	8003228 <_printf_float+0x28c>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	07d9      	lsls	r1, r3, #31
 8003226:	d5d7      	bpl.n	80031d8 <_printf_float+0x23c>
 8003228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800322c:	4631      	mov	r1, r6
 800322e:	4628      	mov	r0, r5
 8003230:	47b8      	blx	r7
 8003232:	3001      	adds	r0, #1
 8003234:	f43f af0d 	beq.w	8003052 <_printf_float+0xb6>
 8003238:	f04f 0a00 	mov.w	sl, #0
 800323c:	f104 0b1a 	add.w	fp, r4, #26
 8003240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003242:	425b      	negs	r3, r3
 8003244:	4553      	cmp	r3, sl
 8003246:	dc01      	bgt.n	800324c <_printf_float+0x2b0>
 8003248:	464b      	mov	r3, r9
 800324a:	e793      	b.n	8003174 <_printf_float+0x1d8>
 800324c:	2301      	movs	r3, #1
 800324e:	465a      	mov	r2, fp
 8003250:	4631      	mov	r1, r6
 8003252:	4628      	mov	r0, r5
 8003254:	47b8      	blx	r7
 8003256:	3001      	adds	r0, #1
 8003258:	f43f aefb 	beq.w	8003052 <_printf_float+0xb6>
 800325c:	f10a 0a01 	add.w	sl, sl, #1
 8003260:	e7ee      	b.n	8003240 <_printf_float+0x2a4>
 8003262:	bf00      	nop
 8003264:	7fefffff 	.word	0x7fefffff
 8003268:	080059da 	.word	0x080059da
 800326c:	080059de 	.word	0x080059de
 8003270:	080059e2 	.word	0x080059e2
 8003274:	080059e6 	.word	0x080059e6
 8003278:	080059ea 	.word	0x080059ea
 800327c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800327e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003282:	4553      	cmp	r3, sl
 8003284:	bfa8      	it	ge
 8003286:	4653      	movge	r3, sl
 8003288:	2b00      	cmp	r3, #0
 800328a:	4699      	mov	r9, r3
 800328c:	dc36      	bgt.n	80032fc <_printf_float+0x360>
 800328e:	f04f 0b00 	mov.w	fp, #0
 8003292:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003296:	f104 021a 	add.w	r2, r4, #26
 800329a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800329c:	9306      	str	r3, [sp, #24]
 800329e:	eba3 0309 	sub.w	r3, r3, r9
 80032a2:	455b      	cmp	r3, fp
 80032a4:	dc31      	bgt.n	800330a <_printf_float+0x36e>
 80032a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032a8:	459a      	cmp	sl, r3
 80032aa:	dc3a      	bgt.n	8003322 <_printf_float+0x386>
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	07da      	lsls	r2, r3, #31
 80032b0:	d437      	bmi.n	8003322 <_printf_float+0x386>
 80032b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032b4:	ebaa 0903 	sub.w	r9, sl, r3
 80032b8:	9b06      	ldr	r3, [sp, #24]
 80032ba:	ebaa 0303 	sub.w	r3, sl, r3
 80032be:	4599      	cmp	r9, r3
 80032c0:	bfa8      	it	ge
 80032c2:	4699      	movge	r9, r3
 80032c4:	f1b9 0f00 	cmp.w	r9, #0
 80032c8:	dc33      	bgt.n	8003332 <_printf_float+0x396>
 80032ca:	f04f 0800 	mov.w	r8, #0
 80032ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032d2:	f104 0b1a 	add.w	fp, r4, #26
 80032d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032d8:	ebaa 0303 	sub.w	r3, sl, r3
 80032dc:	eba3 0309 	sub.w	r3, r3, r9
 80032e0:	4543      	cmp	r3, r8
 80032e2:	f77f af79 	ble.w	80031d8 <_printf_float+0x23c>
 80032e6:	2301      	movs	r3, #1
 80032e8:	465a      	mov	r2, fp
 80032ea:	4631      	mov	r1, r6
 80032ec:	4628      	mov	r0, r5
 80032ee:	47b8      	blx	r7
 80032f0:	3001      	adds	r0, #1
 80032f2:	f43f aeae 	beq.w	8003052 <_printf_float+0xb6>
 80032f6:	f108 0801 	add.w	r8, r8, #1
 80032fa:	e7ec      	b.n	80032d6 <_printf_float+0x33a>
 80032fc:	4642      	mov	r2, r8
 80032fe:	4631      	mov	r1, r6
 8003300:	4628      	mov	r0, r5
 8003302:	47b8      	blx	r7
 8003304:	3001      	adds	r0, #1
 8003306:	d1c2      	bne.n	800328e <_printf_float+0x2f2>
 8003308:	e6a3      	b.n	8003052 <_printf_float+0xb6>
 800330a:	2301      	movs	r3, #1
 800330c:	4631      	mov	r1, r6
 800330e:	4628      	mov	r0, r5
 8003310:	9206      	str	r2, [sp, #24]
 8003312:	47b8      	blx	r7
 8003314:	3001      	adds	r0, #1
 8003316:	f43f ae9c 	beq.w	8003052 <_printf_float+0xb6>
 800331a:	9a06      	ldr	r2, [sp, #24]
 800331c:	f10b 0b01 	add.w	fp, fp, #1
 8003320:	e7bb      	b.n	800329a <_printf_float+0x2fe>
 8003322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003326:	4631      	mov	r1, r6
 8003328:	4628      	mov	r0, r5
 800332a:	47b8      	blx	r7
 800332c:	3001      	adds	r0, #1
 800332e:	d1c0      	bne.n	80032b2 <_printf_float+0x316>
 8003330:	e68f      	b.n	8003052 <_printf_float+0xb6>
 8003332:	9a06      	ldr	r2, [sp, #24]
 8003334:	464b      	mov	r3, r9
 8003336:	4442      	add	r2, r8
 8003338:	4631      	mov	r1, r6
 800333a:	4628      	mov	r0, r5
 800333c:	47b8      	blx	r7
 800333e:	3001      	adds	r0, #1
 8003340:	d1c3      	bne.n	80032ca <_printf_float+0x32e>
 8003342:	e686      	b.n	8003052 <_printf_float+0xb6>
 8003344:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003348:	f1ba 0f01 	cmp.w	sl, #1
 800334c:	dc01      	bgt.n	8003352 <_printf_float+0x3b6>
 800334e:	07db      	lsls	r3, r3, #31
 8003350:	d536      	bpl.n	80033c0 <_printf_float+0x424>
 8003352:	2301      	movs	r3, #1
 8003354:	4642      	mov	r2, r8
 8003356:	4631      	mov	r1, r6
 8003358:	4628      	mov	r0, r5
 800335a:	47b8      	blx	r7
 800335c:	3001      	adds	r0, #1
 800335e:	f43f ae78 	beq.w	8003052 <_printf_float+0xb6>
 8003362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003366:	4631      	mov	r1, r6
 8003368:	4628      	mov	r0, r5
 800336a:	47b8      	blx	r7
 800336c:	3001      	adds	r0, #1
 800336e:	f43f ae70 	beq.w	8003052 <_printf_float+0xb6>
 8003372:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003376:	2200      	movs	r2, #0
 8003378:	2300      	movs	r3, #0
 800337a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800337e:	f7fd fba3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003382:	b9c0      	cbnz	r0, 80033b6 <_printf_float+0x41a>
 8003384:	4653      	mov	r3, sl
 8003386:	f108 0201 	add.w	r2, r8, #1
 800338a:	4631      	mov	r1, r6
 800338c:	4628      	mov	r0, r5
 800338e:	47b8      	blx	r7
 8003390:	3001      	adds	r0, #1
 8003392:	d10c      	bne.n	80033ae <_printf_float+0x412>
 8003394:	e65d      	b.n	8003052 <_printf_float+0xb6>
 8003396:	2301      	movs	r3, #1
 8003398:	465a      	mov	r2, fp
 800339a:	4631      	mov	r1, r6
 800339c:	4628      	mov	r0, r5
 800339e:	47b8      	blx	r7
 80033a0:	3001      	adds	r0, #1
 80033a2:	f43f ae56 	beq.w	8003052 <_printf_float+0xb6>
 80033a6:	f108 0801 	add.w	r8, r8, #1
 80033aa:	45d0      	cmp	r8, sl
 80033ac:	dbf3      	blt.n	8003396 <_printf_float+0x3fa>
 80033ae:	464b      	mov	r3, r9
 80033b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80033b4:	e6df      	b.n	8003176 <_printf_float+0x1da>
 80033b6:	f04f 0800 	mov.w	r8, #0
 80033ba:	f104 0b1a 	add.w	fp, r4, #26
 80033be:	e7f4      	b.n	80033aa <_printf_float+0x40e>
 80033c0:	2301      	movs	r3, #1
 80033c2:	4642      	mov	r2, r8
 80033c4:	e7e1      	b.n	800338a <_printf_float+0x3ee>
 80033c6:	2301      	movs	r3, #1
 80033c8:	464a      	mov	r2, r9
 80033ca:	4631      	mov	r1, r6
 80033cc:	4628      	mov	r0, r5
 80033ce:	47b8      	blx	r7
 80033d0:	3001      	adds	r0, #1
 80033d2:	f43f ae3e 	beq.w	8003052 <_printf_float+0xb6>
 80033d6:	f108 0801 	add.w	r8, r8, #1
 80033da:	68e3      	ldr	r3, [r4, #12]
 80033dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80033de:	1a5b      	subs	r3, r3, r1
 80033e0:	4543      	cmp	r3, r8
 80033e2:	dcf0      	bgt.n	80033c6 <_printf_float+0x42a>
 80033e4:	e6fc      	b.n	80031e0 <_printf_float+0x244>
 80033e6:	f04f 0800 	mov.w	r8, #0
 80033ea:	f104 0919 	add.w	r9, r4, #25
 80033ee:	e7f4      	b.n	80033da <_printf_float+0x43e>

080033f0 <_printf_common>:
 80033f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f4:	4616      	mov	r6, r2
 80033f6:	4698      	mov	r8, r3
 80033f8:	688a      	ldr	r2, [r1, #8]
 80033fa:	690b      	ldr	r3, [r1, #16]
 80033fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003400:	4293      	cmp	r3, r2
 8003402:	bfb8      	it	lt
 8003404:	4613      	movlt	r3, r2
 8003406:	6033      	str	r3, [r6, #0]
 8003408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800340c:	4607      	mov	r7, r0
 800340e:	460c      	mov	r4, r1
 8003410:	b10a      	cbz	r2, 8003416 <_printf_common+0x26>
 8003412:	3301      	adds	r3, #1
 8003414:	6033      	str	r3, [r6, #0]
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	0699      	lsls	r1, r3, #26
 800341a:	bf42      	ittt	mi
 800341c:	6833      	ldrmi	r3, [r6, #0]
 800341e:	3302      	addmi	r3, #2
 8003420:	6033      	strmi	r3, [r6, #0]
 8003422:	6825      	ldr	r5, [r4, #0]
 8003424:	f015 0506 	ands.w	r5, r5, #6
 8003428:	d106      	bne.n	8003438 <_printf_common+0x48>
 800342a:	f104 0a19 	add.w	sl, r4, #25
 800342e:	68e3      	ldr	r3, [r4, #12]
 8003430:	6832      	ldr	r2, [r6, #0]
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	42ab      	cmp	r3, r5
 8003436:	dc26      	bgt.n	8003486 <_printf_common+0x96>
 8003438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	3b00      	subs	r3, #0
 8003440:	bf18      	it	ne
 8003442:	2301      	movne	r3, #1
 8003444:	0692      	lsls	r2, r2, #26
 8003446:	d42b      	bmi.n	80034a0 <_printf_common+0xb0>
 8003448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800344c:	4641      	mov	r1, r8
 800344e:	4638      	mov	r0, r7
 8003450:	47c8      	blx	r9
 8003452:	3001      	adds	r0, #1
 8003454:	d01e      	beq.n	8003494 <_printf_common+0xa4>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	6922      	ldr	r2, [r4, #16]
 800345a:	f003 0306 	and.w	r3, r3, #6
 800345e:	2b04      	cmp	r3, #4
 8003460:	bf02      	ittt	eq
 8003462:	68e5      	ldreq	r5, [r4, #12]
 8003464:	6833      	ldreq	r3, [r6, #0]
 8003466:	1aed      	subeq	r5, r5, r3
 8003468:	68a3      	ldr	r3, [r4, #8]
 800346a:	bf0c      	ite	eq
 800346c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003470:	2500      	movne	r5, #0
 8003472:	4293      	cmp	r3, r2
 8003474:	bfc4      	itt	gt
 8003476:	1a9b      	subgt	r3, r3, r2
 8003478:	18ed      	addgt	r5, r5, r3
 800347a:	2600      	movs	r6, #0
 800347c:	341a      	adds	r4, #26
 800347e:	42b5      	cmp	r5, r6
 8003480:	d11a      	bne.n	80034b8 <_printf_common+0xc8>
 8003482:	2000      	movs	r0, #0
 8003484:	e008      	b.n	8003498 <_printf_common+0xa8>
 8003486:	2301      	movs	r3, #1
 8003488:	4652      	mov	r2, sl
 800348a:	4641      	mov	r1, r8
 800348c:	4638      	mov	r0, r7
 800348e:	47c8      	blx	r9
 8003490:	3001      	adds	r0, #1
 8003492:	d103      	bne.n	800349c <_printf_common+0xac>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349c:	3501      	adds	r5, #1
 800349e:	e7c6      	b.n	800342e <_printf_common+0x3e>
 80034a0:	18e1      	adds	r1, r4, r3
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	2030      	movs	r0, #48	@ 0x30
 80034a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034aa:	4422      	add	r2, r4
 80034ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034b4:	3302      	adds	r3, #2
 80034b6:	e7c7      	b.n	8003448 <_printf_common+0x58>
 80034b8:	2301      	movs	r3, #1
 80034ba:	4622      	mov	r2, r4
 80034bc:	4641      	mov	r1, r8
 80034be:	4638      	mov	r0, r7
 80034c0:	47c8      	blx	r9
 80034c2:	3001      	adds	r0, #1
 80034c4:	d0e6      	beq.n	8003494 <_printf_common+0xa4>
 80034c6:	3601      	adds	r6, #1
 80034c8:	e7d9      	b.n	800347e <_printf_common+0x8e>
	...

080034cc <_printf_i>:
 80034cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	7e0f      	ldrb	r7, [r1, #24]
 80034d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034d4:	2f78      	cmp	r7, #120	@ 0x78
 80034d6:	4691      	mov	r9, r2
 80034d8:	4680      	mov	r8, r0
 80034da:	460c      	mov	r4, r1
 80034dc:	469a      	mov	sl, r3
 80034de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034e2:	d807      	bhi.n	80034f4 <_printf_i+0x28>
 80034e4:	2f62      	cmp	r7, #98	@ 0x62
 80034e6:	d80a      	bhi.n	80034fe <_printf_i+0x32>
 80034e8:	2f00      	cmp	r7, #0
 80034ea:	f000 80d2 	beq.w	8003692 <_printf_i+0x1c6>
 80034ee:	2f58      	cmp	r7, #88	@ 0x58
 80034f0:	f000 80b9 	beq.w	8003666 <_printf_i+0x19a>
 80034f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034fc:	e03a      	b.n	8003574 <_printf_i+0xa8>
 80034fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003502:	2b15      	cmp	r3, #21
 8003504:	d8f6      	bhi.n	80034f4 <_printf_i+0x28>
 8003506:	a101      	add	r1, pc, #4	@ (adr r1, 800350c <_printf_i+0x40>)
 8003508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800350c:	08003565 	.word	0x08003565
 8003510:	08003579 	.word	0x08003579
 8003514:	080034f5 	.word	0x080034f5
 8003518:	080034f5 	.word	0x080034f5
 800351c:	080034f5 	.word	0x080034f5
 8003520:	080034f5 	.word	0x080034f5
 8003524:	08003579 	.word	0x08003579
 8003528:	080034f5 	.word	0x080034f5
 800352c:	080034f5 	.word	0x080034f5
 8003530:	080034f5 	.word	0x080034f5
 8003534:	080034f5 	.word	0x080034f5
 8003538:	08003679 	.word	0x08003679
 800353c:	080035a3 	.word	0x080035a3
 8003540:	08003633 	.word	0x08003633
 8003544:	080034f5 	.word	0x080034f5
 8003548:	080034f5 	.word	0x080034f5
 800354c:	0800369b 	.word	0x0800369b
 8003550:	080034f5 	.word	0x080034f5
 8003554:	080035a3 	.word	0x080035a3
 8003558:	080034f5 	.word	0x080034f5
 800355c:	080034f5 	.word	0x080034f5
 8003560:	0800363b 	.word	0x0800363b
 8003564:	6833      	ldr	r3, [r6, #0]
 8003566:	1d1a      	adds	r2, r3, #4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6032      	str	r2, [r6, #0]
 800356c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003574:	2301      	movs	r3, #1
 8003576:	e09d      	b.n	80036b4 <_printf_i+0x1e8>
 8003578:	6833      	ldr	r3, [r6, #0]
 800357a:	6820      	ldr	r0, [r4, #0]
 800357c:	1d19      	adds	r1, r3, #4
 800357e:	6031      	str	r1, [r6, #0]
 8003580:	0606      	lsls	r6, r0, #24
 8003582:	d501      	bpl.n	8003588 <_printf_i+0xbc>
 8003584:	681d      	ldr	r5, [r3, #0]
 8003586:	e003      	b.n	8003590 <_printf_i+0xc4>
 8003588:	0645      	lsls	r5, r0, #25
 800358a:	d5fb      	bpl.n	8003584 <_printf_i+0xb8>
 800358c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003590:	2d00      	cmp	r5, #0
 8003592:	da03      	bge.n	800359c <_printf_i+0xd0>
 8003594:	232d      	movs	r3, #45	@ 0x2d
 8003596:	426d      	negs	r5, r5
 8003598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800359c:	4859      	ldr	r0, [pc, #356]	@ (8003704 <_printf_i+0x238>)
 800359e:	230a      	movs	r3, #10
 80035a0:	e011      	b.n	80035c6 <_printf_i+0xfa>
 80035a2:	6821      	ldr	r1, [r4, #0]
 80035a4:	6833      	ldr	r3, [r6, #0]
 80035a6:	0608      	lsls	r0, r1, #24
 80035a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80035ac:	d402      	bmi.n	80035b4 <_printf_i+0xe8>
 80035ae:	0649      	lsls	r1, r1, #25
 80035b0:	bf48      	it	mi
 80035b2:	b2ad      	uxthmi	r5, r5
 80035b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80035b6:	4853      	ldr	r0, [pc, #332]	@ (8003704 <_printf_i+0x238>)
 80035b8:	6033      	str	r3, [r6, #0]
 80035ba:	bf14      	ite	ne
 80035bc:	230a      	movne	r3, #10
 80035be:	2308      	moveq	r3, #8
 80035c0:	2100      	movs	r1, #0
 80035c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035c6:	6866      	ldr	r6, [r4, #4]
 80035c8:	60a6      	str	r6, [r4, #8]
 80035ca:	2e00      	cmp	r6, #0
 80035cc:	bfa2      	ittt	ge
 80035ce:	6821      	ldrge	r1, [r4, #0]
 80035d0:	f021 0104 	bicge.w	r1, r1, #4
 80035d4:	6021      	strge	r1, [r4, #0]
 80035d6:	b90d      	cbnz	r5, 80035dc <_printf_i+0x110>
 80035d8:	2e00      	cmp	r6, #0
 80035da:	d04b      	beq.n	8003674 <_printf_i+0x1a8>
 80035dc:	4616      	mov	r6, r2
 80035de:	fbb5 f1f3 	udiv	r1, r5, r3
 80035e2:	fb03 5711 	mls	r7, r3, r1, r5
 80035e6:	5dc7      	ldrb	r7, [r0, r7]
 80035e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035ec:	462f      	mov	r7, r5
 80035ee:	42bb      	cmp	r3, r7
 80035f0:	460d      	mov	r5, r1
 80035f2:	d9f4      	bls.n	80035de <_printf_i+0x112>
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d10b      	bne.n	8003610 <_printf_i+0x144>
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	07df      	lsls	r7, r3, #31
 80035fc:	d508      	bpl.n	8003610 <_printf_i+0x144>
 80035fe:	6923      	ldr	r3, [r4, #16]
 8003600:	6861      	ldr	r1, [r4, #4]
 8003602:	4299      	cmp	r1, r3
 8003604:	bfde      	ittt	le
 8003606:	2330      	movle	r3, #48	@ 0x30
 8003608:	f806 3c01 	strble.w	r3, [r6, #-1]
 800360c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003610:	1b92      	subs	r2, r2, r6
 8003612:	6122      	str	r2, [r4, #16]
 8003614:	f8cd a000 	str.w	sl, [sp]
 8003618:	464b      	mov	r3, r9
 800361a:	aa03      	add	r2, sp, #12
 800361c:	4621      	mov	r1, r4
 800361e:	4640      	mov	r0, r8
 8003620:	f7ff fee6 	bl	80033f0 <_printf_common>
 8003624:	3001      	adds	r0, #1
 8003626:	d14a      	bne.n	80036be <_printf_i+0x1f2>
 8003628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800362c:	b004      	add	sp, #16
 800362e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	f043 0320 	orr.w	r3, r3, #32
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	4833      	ldr	r0, [pc, #204]	@ (8003708 <_printf_i+0x23c>)
 800363c:	2778      	movs	r7, #120	@ 0x78
 800363e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	6831      	ldr	r1, [r6, #0]
 8003646:	061f      	lsls	r7, r3, #24
 8003648:	f851 5b04 	ldr.w	r5, [r1], #4
 800364c:	d402      	bmi.n	8003654 <_printf_i+0x188>
 800364e:	065f      	lsls	r7, r3, #25
 8003650:	bf48      	it	mi
 8003652:	b2ad      	uxthmi	r5, r5
 8003654:	6031      	str	r1, [r6, #0]
 8003656:	07d9      	lsls	r1, r3, #31
 8003658:	bf44      	itt	mi
 800365a:	f043 0320 	orrmi.w	r3, r3, #32
 800365e:	6023      	strmi	r3, [r4, #0]
 8003660:	b11d      	cbz	r5, 800366a <_printf_i+0x19e>
 8003662:	2310      	movs	r3, #16
 8003664:	e7ac      	b.n	80035c0 <_printf_i+0xf4>
 8003666:	4827      	ldr	r0, [pc, #156]	@ (8003704 <_printf_i+0x238>)
 8003668:	e7e9      	b.n	800363e <_printf_i+0x172>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	f023 0320 	bic.w	r3, r3, #32
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	e7f6      	b.n	8003662 <_printf_i+0x196>
 8003674:	4616      	mov	r6, r2
 8003676:	e7bd      	b.n	80035f4 <_printf_i+0x128>
 8003678:	6833      	ldr	r3, [r6, #0]
 800367a:	6825      	ldr	r5, [r4, #0]
 800367c:	6961      	ldr	r1, [r4, #20]
 800367e:	1d18      	adds	r0, r3, #4
 8003680:	6030      	str	r0, [r6, #0]
 8003682:	062e      	lsls	r6, r5, #24
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	d501      	bpl.n	800368c <_printf_i+0x1c0>
 8003688:	6019      	str	r1, [r3, #0]
 800368a:	e002      	b.n	8003692 <_printf_i+0x1c6>
 800368c:	0668      	lsls	r0, r5, #25
 800368e:	d5fb      	bpl.n	8003688 <_printf_i+0x1bc>
 8003690:	8019      	strh	r1, [r3, #0]
 8003692:	2300      	movs	r3, #0
 8003694:	6123      	str	r3, [r4, #16]
 8003696:	4616      	mov	r6, r2
 8003698:	e7bc      	b.n	8003614 <_printf_i+0x148>
 800369a:	6833      	ldr	r3, [r6, #0]
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	6032      	str	r2, [r6, #0]
 80036a0:	681e      	ldr	r6, [r3, #0]
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4630      	mov	r0, r6
 80036a8:	f7fc fd92 	bl	80001d0 <memchr>
 80036ac:	b108      	cbz	r0, 80036b2 <_printf_i+0x1e6>
 80036ae:	1b80      	subs	r0, r0, r6
 80036b0:	6060      	str	r0, [r4, #4]
 80036b2:	6863      	ldr	r3, [r4, #4]
 80036b4:	6123      	str	r3, [r4, #16]
 80036b6:	2300      	movs	r3, #0
 80036b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036bc:	e7aa      	b.n	8003614 <_printf_i+0x148>
 80036be:	6923      	ldr	r3, [r4, #16]
 80036c0:	4632      	mov	r2, r6
 80036c2:	4649      	mov	r1, r9
 80036c4:	4640      	mov	r0, r8
 80036c6:	47d0      	blx	sl
 80036c8:	3001      	adds	r0, #1
 80036ca:	d0ad      	beq.n	8003628 <_printf_i+0x15c>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	079b      	lsls	r3, r3, #30
 80036d0:	d413      	bmi.n	80036fa <_printf_i+0x22e>
 80036d2:	68e0      	ldr	r0, [r4, #12]
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	4298      	cmp	r0, r3
 80036d8:	bfb8      	it	lt
 80036da:	4618      	movlt	r0, r3
 80036dc:	e7a6      	b.n	800362c <_printf_i+0x160>
 80036de:	2301      	movs	r3, #1
 80036e0:	4632      	mov	r2, r6
 80036e2:	4649      	mov	r1, r9
 80036e4:	4640      	mov	r0, r8
 80036e6:	47d0      	blx	sl
 80036e8:	3001      	adds	r0, #1
 80036ea:	d09d      	beq.n	8003628 <_printf_i+0x15c>
 80036ec:	3501      	adds	r5, #1
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	9903      	ldr	r1, [sp, #12]
 80036f2:	1a5b      	subs	r3, r3, r1
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dcf2      	bgt.n	80036de <_printf_i+0x212>
 80036f8:	e7eb      	b.n	80036d2 <_printf_i+0x206>
 80036fa:	2500      	movs	r5, #0
 80036fc:	f104 0619 	add.w	r6, r4, #25
 8003700:	e7f5      	b.n	80036ee <_printf_i+0x222>
 8003702:	bf00      	nop
 8003704:	080059ec 	.word	0x080059ec
 8003708:	080059fd 	.word	0x080059fd

0800370c <std>:
 800370c:	2300      	movs	r3, #0
 800370e:	b510      	push	{r4, lr}
 8003710:	4604      	mov	r4, r0
 8003712:	e9c0 3300 	strd	r3, r3, [r0]
 8003716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800371a:	6083      	str	r3, [r0, #8]
 800371c:	8181      	strh	r1, [r0, #12]
 800371e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003720:	81c2      	strh	r2, [r0, #14]
 8003722:	6183      	str	r3, [r0, #24]
 8003724:	4619      	mov	r1, r3
 8003726:	2208      	movs	r2, #8
 8003728:	305c      	adds	r0, #92	@ 0x5c
 800372a:	f000 fa01 	bl	8003b30 <memset>
 800372e:	4b0d      	ldr	r3, [pc, #52]	@ (8003764 <std+0x58>)
 8003730:	6263      	str	r3, [r4, #36]	@ 0x24
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <std+0x5c>)
 8003734:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <std+0x60>)
 8003738:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800373a:	4b0d      	ldr	r3, [pc, #52]	@ (8003770 <std+0x64>)
 800373c:	6323      	str	r3, [r4, #48]	@ 0x30
 800373e:	4b0d      	ldr	r3, [pc, #52]	@ (8003774 <std+0x68>)
 8003740:	6224      	str	r4, [r4, #32]
 8003742:	429c      	cmp	r4, r3
 8003744:	d006      	beq.n	8003754 <std+0x48>
 8003746:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800374a:	4294      	cmp	r4, r2
 800374c:	d002      	beq.n	8003754 <std+0x48>
 800374e:	33d0      	adds	r3, #208	@ 0xd0
 8003750:	429c      	cmp	r4, r3
 8003752:	d105      	bne.n	8003760 <std+0x54>
 8003754:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800375c:	f000 ba64 	b.w	8003c28 <__retarget_lock_init_recursive>
 8003760:	bd10      	pop	{r4, pc}
 8003762:	bf00      	nop
 8003764:	08003981 	.word	0x08003981
 8003768:	080039a3 	.word	0x080039a3
 800376c:	080039db 	.word	0x080039db
 8003770:	080039ff 	.word	0x080039ff
 8003774:	2000029c 	.word	0x2000029c

08003778 <stdio_exit_handler>:
 8003778:	4a02      	ldr	r2, [pc, #8]	@ (8003784 <stdio_exit_handler+0xc>)
 800377a:	4903      	ldr	r1, [pc, #12]	@ (8003788 <stdio_exit_handler+0x10>)
 800377c:	4803      	ldr	r0, [pc, #12]	@ (800378c <stdio_exit_handler+0x14>)
 800377e:	f000 b869 	b.w	8003854 <_fwalk_sglue>
 8003782:	bf00      	nop
 8003784:	2000000c 	.word	0x2000000c
 8003788:	08005559 	.word	0x08005559
 800378c:	2000001c 	.word	0x2000001c

08003790 <cleanup_stdio>:
 8003790:	6841      	ldr	r1, [r0, #4]
 8003792:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <cleanup_stdio+0x34>)
 8003794:	4299      	cmp	r1, r3
 8003796:	b510      	push	{r4, lr}
 8003798:	4604      	mov	r4, r0
 800379a:	d001      	beq.n	80037a0 <cleanup_stdio+0x10>
 800379c:	f001 fedc 	bl	8005558 <_fflush_r>
 80037a0:	68a1      	ldr	r1, [r4, #8]
 80037a2:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <cleanup_stdio+0x38>)
 80037a4:	4299      	cmp	r1, r3
 80037a6:	d002      	beq.n	80037ae <cleanup_stdio+0x1e>
 80037a8:	4620      	mov	r0, r4
 80037aa:	f001 fed5 	bl	8005558 <_fflush_r>
 80037ae:	68e1      	ldr	r1, [r4, #12]
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <cleanup_stdio+0x3c>)
 80037b2:	4299      	cmp	r1, r3
 80037b4:	d004      	beq.n	80037c0 <cleanup_stdio+0x30>
 80037b6:	4620      	mov	r0, r4
 80037b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037bc:	f001 becc 	b.w	8005558 <_fflush_r>
 80037c0:	bd10      	pop	{r4, pc}
 80037c2:	bf00      	nop
 80037c4:	2000029c 	.word	0x2000029c
 80037c8:	20000304 	.word	0x20000304
 80037cc:	2000036c 	.word	0x2000036c

080037d0 <global_stdio_init.part.0>:
 80037d0:	b510      	push	{r4, lr}
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <global_stdio_init.part.0+0x30>)
 80037d4:	4c0b      	ldr	r4, [pc, #44]	@ (8003804 <global_stdio_init.part.0+0x34>)
 80037d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003808 <global_stdio_init.part.0+0x38>)
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	4620      	mov	r0, r4
 80037dc:	2200      	movs	r2, #0
 80037de:	2104      	movs	r1, #4
 80037e0:	f7ff ff94 	bl	800370c <std>
 80037e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037e8:	2201      	movs	r2, #1
 80037ea:	2109      	movs	r1, #9
 80037ec:	f7ff ff8e 	bl	800370c <std>
 80037f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037f4:	2202      	movs	r2, #2
 80037f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037fa:	2112      	movs	r1, #18
 80037fc:	f7ff bf86 	b.w	800370c <std>
 8003800:	200003d4 	.word	0x200003d4
 8003804:	2000029c 	.word	0x2000029c
 8003808:	08003779 	.word	0x08003779

0800380c <__sfp_lock_acquire>:
 800380c:	4801      	ldr	r0, [pc, #4]	@ (8003814 <__sfp_lock_acquire+0x8>)
 800380e:	f000 ba0c 	b.w	8003c2a <__retarget_lock_acquire_recursive>
 8003812:	bf00      	nop
 8003814:	200003dd 	.word	0x200003dd

08003818 <__sfp_lock_release>:
 8003818:	4801      	ldr	r0, [pc, #4]	@ (8003820 <__sfp_lock_release+0x8>)
 800381a:	f000 ba07 	b.w	8003c2c <__retarget_lock_release_recursive>
 800381e:	bf00      	nop
 8003820:	200003dd 	.word	0x200003dd

08003824 <__sinit>:
 8003824:	b510      	push	{r4, lr}
 8003826:	4604      	mov	r4, r0
 8003828:	f7ff fff0 	bl	800380c <__sfp_lock_acquire>
 800382c:	6a23      	ldr	r3, [r4, #32]
 800382e:	b11b      	cbz	r3, 8003838 <__sinit+0x14>
 8003830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003834:	f7ff bff0 	b.w	8003818 <__sfp_lock_release>
 8003838:	4b04      	ldr	r3, [pc, #16]	@ (800384c <__sinit+0x28>)
 800383a:	6223      	str	r3, [r4, #32]
 800383c:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <__sinit+0x2c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f5      	bne.n	8003830 <__sinit+0xc>
 8003844:	f7ff ffc4 	bl	80037d0 <global_stdio_init.part.0>
 8003848:	e7f2      	b.n	8003830 <__sinit+0xc>
 800384a:	bf00      	nop
 800384c:	08003791 	.word	0x08003791
 8003850:	200003d4 	.word	0x200003d4

08003854 <_fwalk_sglue>:
 8003854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003858:	4607      	mov	r7, r0
 800385a:	4688      	mov	r8, r1
 800385c:	4614      	mov	r4, r2
 800385e:	2600      	movs	r6, #0
 8003860:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003864:	f1b9 0901 	subs.w	r9, r9, #1
 8003868:	d505      	bpl.n	8003876 <_fwalk_sglue+0x22>
 800386a:	6824      	ldr	r4, [r4, #0]
 800386c:	2c00      	cmp	r4, #0
 800386e:	d1f7      	bne.n	8003860 <_fwalk_sglue+0xc>
 8003870:	4630      	mov	r0, r6
 8003872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003876:	89ab      	ldrh	r3, [r5, #12]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d907      	bls.n	800388c <_fwalk_sglue+0x38>
 800387c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003880:	3301      	adds	r3, #1
 8003882:	d003      	beq.n	800388c <_fwalk_sglue+0x38>
 8003884:	4629      	mov	r1, r5
 8003886:	4638      	mov	r0, r7
 8003888:	47c0      	blx	r8
 800388a:	4306      	orrs	r6, r0
 800388c:	3568      	adds	r5, #104	@ 0x68
 800388e:	e7e9      	b.n	8003864 <_fwalk_sglue+0x10>

08003890 <iprintf>:
 8003890:	b40f      	push	{r0, r1, r2, r3}
 8003892:	b507      	push	{r0, r1, r2, lr}
 8003894:	4906      	ldr	r1, [pc, #24]	@ (80038b0 <iprintf+0x20>)
 8003896:	ab04      	add	r3, sp, #16
 8003898:	6808      	ldr	r0, [r1, #0]
 800389a:	f853 2b04 	ldr.w	r2, [r3], #4
 800389e:	6881      	ldr	r1, [r0, #8]
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	f001 fcbd 	bl	8005220 <_vfiprintf_r>
 80038a6:	b003      	add	sp, #12
 80038a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038ac:	b004      	add	sp, #16
 80038ae:	4770      	bx	lr
 80038b0:	20000018 	.word	0x20000018

080038b4 <putchar>:
 80038b4:	4b02      	ldr	r3, [pc, #8]	@ (80038c0 <putchar+0xc>)
 80038b6:	4601      	mov	r1, r0
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	6882      	ldr	r2, [r0, #8]
 80038bc:	f001 bed6 	b.w	800566c <_putc_r>
 80038c0:	20000018 	.word	0x20000018

080038c4 <_puts_r>:
 80038c4:	6a03      	ldr	r3, [r0, #32]
 80038c6:	b570      	push	{r4, r5, r6, lr}
 80038c8:	6884      	ldr	r4, [r0, #8]
 80038ca:	4605      	mov	r5, r0
 80038cc:	460e      	mov	r6, r1
 80038ce:	b90b      	cbnz	r3, 80038d4 <_puts_r+0x10>
 80038d0:	f7ff ffa8 	bl	8003824 <__sinit>
 80038d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038d6:	07db      	lsls	r3, r3, #31
 80038d8:	d405      	bmi.n	80038e6 <_puts_r+0x22>
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	0598      	lsls	r0, r3, #22
 80038de:	d402      	bmi.n	80038e6 <_puts_r+0x22>
 80038e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038e2:	f000 f9a2 	bl	8003c2a <__retarget_lock_acquire_recursive>
 80038e6:	89a3      	ldrh	r3, [r4, #12]
 80038e8:	0719      	lsls	r1, r3, #28
 80038ea:	d502      	bpl.n	80038f2 <_puts_r+0x2e>
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d135      	bne.n	800395e <_puts_r+0x9a>
 80038f2:	4621      	mov	r1, r4
 80038f4:	4628      	mov	r0, r5
 80038f6:	f000 f8c5 	bl	8003a84 <__swsetup_r>
 80038fa:	b380      	cbz	r0, 800395e <_puts_r+0x9a>
 80038fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003902:	07da      	lsls	r2, r3, #31
 8003904:	d405      	bmi.n	8003912 <_puts_r+0x4e>
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	059b      	lsls	r3, r3, #22
 800390a:	d402      	bmi.n	8003912 <_puts_r+0x4e>
 800390c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800390e:	f000 f98d 	bl	8003c2c <__retarget_lock_release_recursive>
 8003912:	4628      	mov	r0, r5
 8003914:	bd70      	pop	{r4, r5, r6, pc}
 8003916:	2b00      	cmp	r3, #0
 8003918:	da04      	bge.n	8003924 <_puts_r+0x60>
 800391a:	69a2      	ldr	r2, [r4, #24]
 800391c:	429a      	cmp	r2, r3
 800391e:	dc17      	bgt.n	8003950 <_puts_r+0x8c>
 8003920:	290a      	cmp	r1, #10
 8003922:	d015      	beq.n	8003950 <_puts_r+0x8c>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	6022      	str	r2, [r4, #0]
 800392a:	7019      	strb	r1, [r3, #0]
 800392c:	68a3      	ldr	r3, [r4, #8]
 800392e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003932:	3b01      	subs	r3, #1
 8003934:	60a3      	str	r3, [r4, #8]
 8003936:	2900      	cmp	r1, #0
 8003938:	d1ed      	bne.n	8003916 <_puts_r+0x52>
 800393a:	2b00      	cmp	r3, #0
 800393c:	da11      	bge.n	8003962 <_puts_r+0x9e>
 800393e:	4622      	mov	r2, r4
 8003940:	210a      	movs	r1, #10
 8003942:	4628      	mov	r0, r5
 8003944:	f000 f85f 	bl	8003a06 <__swbuf_r>
 8003948:	3001      	adds	r0, #1
 800394a:	d0d7      	beq.n	80038fc <_puts_r+0x38>
 800394c:	250a      	movs	r5, #10
 800394e:	e7d7      	b.n	8003900 <_puts_r+0x3c>
 8003950:	4622      	mov	r2, r4
 8003952:	4628      	mov	r0, r5
 8003954:	f000 f857 	bl	8003a06 <__swbuf_r>
 8003958:	3001      	adds	r0, #1
 800395a:	d1e7      	bne.n	800392c <_puts_r+0x68>
 800395c:	e7ce      	b.n	80038fc <_puts_r+0x38>
 800395e:	3e01      	subs	r6, #1
 8003960:	e7e4      	b.n	800392c <_puts_r+0x68>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	6022      	str	r2, [r4, #0]
 8003968:	220a      	movs	r2, #10
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e7ee      	b.n	800394c <_puts_r+0x88>
	...

08003970 <puts>:
 8003970:	4b02      	ldr	r3, [pc, #8]	@ (800397c <puts+0xc>)
 8003972:	4601      	mov	r1, r0
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	f7ff bfa5 	b.w	80038c4 <_puts_r>
 800397a:	bf00      	nop
 800397c:	20000018 	.word	0x20000018

08003980 <__sread>:
 8003980:	b510      	push	{r4, lr}
 8003982:	460c      	mov	r4, r1
 8003984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003988:	f000 f900 	bl	8003b8c <_read_r>
 800398c:	2800      	cmp	r0, #0
 800398e:	bfab      	itete	ge
 8003990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003992:	89a3      	ldrhlt	r3, [r4, #12]
 8003994:	181b      	addge	r3, r3, r0
 8003996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800399a:	bfac      	ite	ge
 800399c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800399e:	81a3      	strhlt	r3, [r4, #12]
 80039a0:	bd10      	pop	{r4, pc}

080039a2 <__swrite>:
 80039a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a6:	461f      	mov	r7, r3
 80039a8:	898b      	ldrh	r3, [r1, #12]
 80039aa:	05db      	lsls	r3, r3, #23
 80039ac:	4605      	mov	r5, r0
 80039ae:	460c      	mov	r4, r1
 80039b0:	4616      	mov	r6, r2
 80039b2:	d505      	bpl.n	80039c0 <__swrite+0x1e>
 80039b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b8:	2302      	movs	r3, #2
 80039ba:	2200      	movs	r2, #0
 80039bc:	f000 f8d4 	bl	8003b68 <_lseek_r>
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039ca:	81a3      	strh	r3, [r4, #12]
 80039cc:	4632      	mov	r2, r6
 80039ce:	463b      	mov	r3, r7
 80039d0:	4628      	mov	r0, r5
 80039d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039d6:	f000 b8eb 	b.w	8003bb0 <_write_r>

080039da <__sseek>:
 80039da:	b510      	push	{r4, lr}
 80039dc:	460c      	mov	r4, r1
 80039de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e2:	f000 f8c1 	bl	8003b68 <_lseek_r>
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	bf15      	itete	ne
 80039ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80039ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80039f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80039f6:	81a3      	strheq	r3, [r4, #12]
 80039f8:	bf18      	it	ne
 80039fa:	81a3      	strhne	r3, [r4, #12]
 80039fc:	bd10      	pop	{r4, pc}

080039fe <__sclose>:
 80039fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a02:	f000 b8a1 	b.w	8003b48 <_close_r>

08003a06 <__swbuf_r>:
 8003a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a08:	460e      	mov	r6, r1
 8003a0a:	4614      	mov	r4, r2
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	b118      	cbz	r0, 8003a18 <__swbuf_r+0x12>
 8003a10:	6a03      	ldr	r3, [r0, #32]
 8003a12:	b90b      	cbnz	r3, 8003a18 <__swbuf_r+0x12>
 8003a14:	f7ff ff06 	bl	8003824 <__sinit>
 8003a18:	69a3      	ldr	r3, [r4, #24]
 8003a1a:	60a3      	str	r3, [r4, #8]
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	071a      	lsls	r2, r3, #28
 8003a20:	d501      	bpl.n	8003a26 <__swbuf_r+0x20>
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	b943      	cbnz	r3, 8003a38 <__swbuf_r+0x32>
 8003a26:	4621      	mov	r1, r4
 8003a28:	4628      	mov	r0, r5
 8003a2a:	f000 f82b 	bl	8003a84 <__swsetup_r>
 8003a2e:	b118      	cbz	r0, 8003a38 <__swbuf_r+0x32>
 8003a30:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003a34:	4638      	mov	r0, r7
 8003a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	6922      	ldr	r2, [r4, #16]
 8003a3c:	1a98      	subs	r0, r3, r2
 8003a3e:	6963      	ldr	r3, [r4, #20]
 8003a40:	b2f6      	uxtb	r6, r6
 8003a42:	4283      	cmp	r3, r0
 8003a44:	4637      	mov	r7, r6
 8003a46:	dc05      	bgt.n	8003a54 <__swbuf_r+0x4e>
 8003a48:	4621      	mov	r1, r4
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f001 fd84 	bl	8005558 <_fflush_r>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d1ed      	bne.n	8003a30 <__swbuf_r+0x2a>
 8003a54:	68a3      	ldr	r3, [r4, #8]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	60a3      	str	r3, [r4, #8]
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	6022      	str	r2, [r4, #0]
 8003a60:	701e      	strb	r6, [r3, #0]
 8003a62:	6962      	ldr	r2, [r4, #20]
 8003a64:	1c43      	adds	r3, r0, #1
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d004      	beq.n	8003a74 <__swbuf_r+0x6e>
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	07db      	lsls	r3, r3, #31
 8003a6e:	d5e1      	bpl.n	8003a34 <__swbuf_r+0x2e>
 8003a70:	2e0a      	cmp	r6, #10
 8003a72:	d1df      	bne.n	8003a34 <__swbuf_r+0x2e>
 8003a74:	4621      	mov	r1, r4
 8003a76:	4628      	mov	r0, r5
 8003a78:	f001 fd6e 	bl	8005558 <_fflush_r>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d0d9      	beq.n	8003a34 <__swbuf_r+0x2e>
 8003a80:	e7d6      	b.n	8003a30 <__swbuf_r+0x2a>
	...

08003a84 <__swsetup_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4b29      	ldr	r3, [pc, #164]	@ (8003b2c <__swsetup_r+0xa8>)
 8003a88:	4605      	mov	r5, r0
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	b118      	cbz	r0, 8003a98 <__swsetup_r+0x14>
 8003a90:	6a03      	ldr	r3, [r0, #32]
 8003a92:	b90b      	cbnz	r3, 8003a98 <__swsetup_r+0x14>
 8003a94:	f7ff fec6 	bl	8003824 <__sinit>
 8003a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a9c:	0719      	lsls	r1, r3, #28
 8003a9e:	d422      	bmi.n	8003ae6 <__swsetup_r+0x62>
 8003aa0:	06da      	lsls	r2, r3, #27
 8003aa2:	d407      	bmi.n	8003ab4 <__swsetup_r+0x30>
 8003aa4:	2209      	movs	r2, #9
 8003aa6:	602a      	str	r2, [r5, #0]
 8003aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aac:	81a3      	strh	r3, [r4, #12]
 8003aae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ab2:	e033      	b.n	8003b1c <__swsetup_r+0x98>
 8003ab4:	0758      	lsls	r0, r3, #29
 8003ab6:	d512      	bpl.n	8003ade <__swsetup_r+0x5a>
 8003ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003aba:	b141      	cbz	r1, 8003ace <__swsetup_r+0x4a>
 8003abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ac0:	4299      	cmp	r1, r3
 8003ac2:	d002      	beq.n	8003aca <__swsetup_r+0x46>
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	f000 feff 	bl	80048c8 <_free_r>
 8003aca:	2300      	movs	r3, #0
 8003acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ad4:	81a3      	strh	r3, [r4, #12]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	6923      	ldr	r3, [r4, #16]
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	f043 0308 	orr.w	r3, r3, #8
 8003ae4:	81a3      	strh	r3, [r4, #12]
 8003ae6:	6923      	ldr	r3, [r4, #16]
 8003ae8:	b94b      	cbnz	r3, 8003afe <__swsetup_r+0x7a>
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003af4:	d003      	beq.n	8003afe <__swsetup_r+0x7a>
 8003af6:	4621      	mov	r1, r4
 8003af8:	4628      	mov	r0, r5
 8003afa:	f001 fd7b 	bl	80055f4 <__smakebuf_r>
 8003afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b02:	f013 0201 	ands.w	r2, r3, #1
 8003b06:	d00a      	beq.n	8003b1e <__swsetup_r+0x9a>
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60a2      	str	r2, [r4, #8]
 8003b0c:	6962      	ldr	r2, [r4, #20]
 8003b0e:	4252      	negs	r2, r2
 8003b10:	61a2      	str	r2, [r4, #24]
 8003b12:	6922      	ldr	r2, [r4, #16]
 8003b14:	b942      	cbnz	r2, 8003b28 <__swsetup_r+0xa4>
 8003b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b1a:	d1c5      	bne.n	8003aa8 <__swsetup_r+0x24>
 8003b1c:	bd38      	pop	{r3, r4, r5, pc}
 8003b1e:	0799      	lsls	r1, r3, #30
 8003b20:	bf58      	it	pl
 8003b22:	6962      	ldrpl	r2, [r4, #20]
 8003b24:	60a2      	str	r2, [r4, #8]
 8003b26:	e7f4      	b.n	8003b12 <__swsetup_r+0x8e>
 8003b28:	2000      	movs	r0, #0
 8003b2a:	e7f7      	b.n	8003b1c <__swsetup_r+0x98>
 8003b2c:	20000018 	.word	0x20000018

08003b30 <memset>:
 8003b30:	4402      	add	r2, r0
 8003b32:	4603      	mov	r3, r0
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d100      	bne.n	8003b3a <memset+0xa>
 8003b38:	4770      	bx	lr
 8003b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3e:	e7f9      	b.n	8003b34 <memset+0x4>

08003b40 <_localeconv_r>:
 8003b40:	4800      	ldr	r0, [pc, #0]	@ (8003b44 <_localeconv_r+0x4>)
 8003b42:	4770      	bx	lr
 8003b44:	20000158 	.word	0x20000158

08003b48 <_close_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	4d06      	ldr	r5, [pc, #24]	@ (8003b64 <_close_r+0x1c>)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	4604      	mov	r4, r0
 8003b50:	4608      	mov	r0, r1
 8003b52:	602b      	str	r3, [r5, #0]
 8003b54:	f7fd fb90 	bl	8001278 <_close>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_close_r+0x1a>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_close_r+0x1a>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	200003d8 	.word	0x200003d8

08003b68 <_lseek_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4d07      	ldr	r5, [pc, #28]	@ (8003b88 <_lseek_r+0x20>)
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	4608      	mov	r0, r1
 8003b70:	4611      	mov	r1, r2
 8003b72:	2200      	movs	r2, #0
 8003b74:	602a      	str	r2, [r5, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f7fd fb88 	bl	800128c <_lseek>
 8003b7c:	1c43      	adds	r3, r0, #1
 8003b7e:	d102      	bne.n	8003b86 <_lseek_r+0x1e>
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	b103      	cbz	r3, 8003b86 <_lseek_r+0x1e>
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	bd38      	pop	{r3, r4, r5, pc}
 8003b88:	200003d8 	.word	0x200003d8

08003b8c <_read_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4d07      	ldr	r5, [pc, #28]	@ (8003bac <_read_r+0x20>)
 8003b90:	4604      	mov	r4, r0
 8003b92:	4608      	mov	r0, r1
 8003b94:	4611      	mov	r1, r2
 8003b96:	2200      	movs	r2, #0
 8003b98:	602a      	str	r2, [r5, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7fd fb5c 	bl	8001258 <_read>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_read_r+0x1e>
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_read_r+0x1e>
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	200003d8 	.word	0x200003d8

08003bb0 <_write_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4d07      	ldr	r5, [pc, #28]	@ (8003bd0 <_write_r+0x20>)
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	4608      	mov	r0, r1
 8003bb8:	4611      	mov	r1, r2
 8003bba:	2200      	movs	r2, #0
 8003bbc:	602a      	str	r2, [r5, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f7fd f990 	bl	8000ee4 <_write>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d102      	bne.n	8003bce <_write_r+0x1e>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	b103      	cbz	r3, 8003bce <_write_r+0x1e>
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	200003d8 	.word	0x200003d8

08003bd4 <__errno>:
 8003bd4:	4b01      	ldr	r3, [pc, #4]	@ (8003bdc <__errno+0x8>)
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000018 	.word	0x20000018

08003be0 <__libc_init_array>:
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	4d0d      	ldr	r5, [pc, #52]	@ (8003c18 <__libc_init_array+0x38>)
 8003be4:	4c0d      	ldr	r4, [pc, #52]	@ (8003c1c <__libc_init_array+0x3c>)
 8003be6:	1b64      	subs	r4, r4, r5
 8003be8:	10a4      	asrs	r4, r4, #2
 8003bea:	2600      	movs	r6, #0
 8003bec:	42a6      	cmp	r6, r4
 8003bee:	d109      	bne.n	8003c04 <__libc_init_array+0x24>
 8003bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8003c20 <__libc_init_array+0x40>)
 8003bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8003c24 <__libc_init_array+0x44>)
 8003bf4:	f001 fe5e 	bl	80058b4 <_init>
 8003bf8:	1b64      	subs	r4, r4, r5
 8003bfa:	10a4      	asrs	r4, r4, #2
 8003bfc:	2600      	movs	r6, #0
 8003bfe:	42a6      	cmp	r6, r4
 8003c00:	d105      	bne.n	8003c0e <__libc_init_array+0x2e>
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c08:	4798      	blx	r3
 8003c0a:	3601      	adds	r6, #1
 8003c0c:	e7ee      	b.n	8003bec <__libc_init_array+0xc>
 8003c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c12:	4798      	blx	r3
 8003c14:	3601      	adds	r6, #1
 8003c16:	e7f2      	b.n	8003bfe <__libc_init_array+0x1e>
 8003c18:	08005d50 	.word	0x08005d50
 8003c1c:	08005d50 	.word	0x08005d50
 8003c20:	08005d50 	.word	0x08005d50
 8003c24:	08005d54 	.word	0x08005d54

08003c28 <__retarget_lock_init_recursive>:
 8003c28:	4770      	bx	lr

08003c2a <__retarget_lock_acquire_recursive>:
 8003c2a:	4770      	bx	lr

08003c2c <__retarget_lock_release_recursive>:
 8003c2c:	4770      	bx	lr

08003c2e <quorem>:
 8003c2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c32:	6903      	ldr	r3, [r0, #16]
 8003c34:	690c      	ldr	r4, [r1, #16]
 8003c36:	42a3      	cmp	r3, r4
 8003c38:	4607      	mov	r7, r0
 8003c3a:	db7e      	blt.n	8003d3a <quorem+0x10c>
 8003c3c:	3c01      	subs	r4, #1
 8003c3e:	f101 0814 	add.w	r8, r1, #20
 8003c42:	00a3      	lsls	r3, r4, #2
 8003c44:	f100 0514 	add.w	r5, r0, #20
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c60:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c64:	d32e      	bcc.n	8003cc4 <quorem+0x96>
 8003c66:	f04f 0a00 	mov.w	sl, #0
 8003c6a:	46c4      	mov	ip, r8
 8003c6c:	46ae      	mov	lr, r5
 8003c6e:	46d3      	mov	fp, sl
 8003c70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c74:	b298      	uxth	r0, r3
 8003c76:	fb06 a000 	mla	r0, r6, r0, sl
 8003c7a:	0c02      	lsrs	r2, r0, #16
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	fb06 2303 	mla	r3, r6, r3, r2
 8003c82:	f8de 2000 	ldr.w	r2, [lr]
 8003c86:	b280      	uxth	r0, r0
 8003c88:	b292      	uxth	r2, r2
 8003c8a:	1a12      	subs	r2, r2, r0
 8003c8c:	445a      	add	r2, fp
 8003c8e:	f8de 0000 	ldr.w	r0, [lr]
 8003c92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003c9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003ca0:	b292      	uxth	r2, r2
 8003ca2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003ca6:	45e1      	cmp	r9, ip
 8003ca8:	f84e 2b04 	str.w	r2, [lr], #4
 8003cac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003cb0:	d2de      	bcs.n	8003c70 <quorem+0x42>
 8003cb2:	9b00      	ldr	r3, [sp, #0]
 8003cb4:	58eb      	ldr	r3, [r5, r3]
 8003cb6:	b92b      	cbnz	r3, 8003cc4 <quorem+0x96>
 8003cb8:	9b01      	ldr	r3, [sp, #4]
 8003cba:	3b04      	subs	r3, #4
 8003cbc:	429d      	cmp	r5, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	d32f      	bcc.n	8003d22 <quorem+0xf4>
 8003cc2:	613c      	str	r4, [r7, #16]
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	f001 f979 	bl	8004fbc <__mcmp>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	db25      	blt.n	8003d1a <quorem+0xec>
 8003cce:	4629      	mov	r1, r5
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8003cd6:	f8d1 c000 	ldr.w	ip, [r1]
 8003cda:	fa1f fe82 	uxth.w	lr, r2
 8003cde:	fa1f f38c 	uxth.w	r3, ip
 8003ce2:	eba3 030e 	sub.w	r3, r3, lr
 8003ce6:	4403      	add	r3, r0
 8003ce8:	0c12      	lsrs	r2, r2, #16
 8003cea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003cee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cf8:	45c1      	cmp	r9, r8
 8003cfa:	f841 3b04 	str.w	r3, [r1], #4
 8003cfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d02:	d2e6      	bcs.n	8003cd2 <quorem+0xa4>
 8003d04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d0c:	b922      	cbnz	r2, 8003d18 <quorem+0xea>
 8003d0e:	3b04      	subs	r3, #4
 8003d10:	429d      	cmp	r5, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	d30b      	bcc.n	8003d2e <quorem+0x100>
 8003d16:	613c      	str	r4, [r7, #16]
 8003d18:	3601      	adds	r6, #1
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	b003      	add	sp, #12
 8003d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	3b04      	subs	r3, #4
 8003d26:	2a00      	cmp	r2, #0
 8003d28:	d1cb      	bne.n	8003cc2 <quorem+0x94>
 8003d2a:	3c01      	subs	r4, #1
 8003d2c:	e7c6      	b.n	8003cbc <quorem+0x8e>
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	3b04      	subs	r3, #4
 8003d32:	2a00      	cmp	r2, #0
 8003d34:	d1ef      	bne.n	8003d16 <quorem+0xe8>
 8003d36:	3c01      	subs	r4, #1
 8003d38:	e7ea      	b.n	8003d10 <quorem+0xe2>
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	e7ee      	b.n	8003d1c <quorem+0xee>
	...

08003d40 <_dtoa_r>:
 8003d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d44:	69c7      	ldr	r7, [r0, #28]
 8003d46:	b099      	sub	sp, #100	@ 0x64
 8003d48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003d4c:	ec55 4b10 	vmov	r4, r5, d0
 8003d50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003d52:	9109      	str	r1, [sp, #36]	@ 0x24
 8003d54:	4683      	mov	fp, r0
 8003d56:	920e      	str	r2, [sp, #56]	@ 0x38
 8003d58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d5a:	b97f      	cbnz	r7, 8003d7c <_dtoa_r+0x3c>
 8003d5c:	2010      	movs	r0, #16
 8003d5e:	f000 fdfd 	bl	800495c <malloc>
 8003d62:	4602      	mov	r2, r0
 8003d64:	f8cb 001c 	str.w	r0, [fp, #28]
 8003d68:	b920      	cbnz	r0, 8003d74 <_dtoa_r+0x34>
 8003d6a:	4ba7      	ldr	r3, [pc, #668]	@ (8004008 <_dtoa_r+0x2c8>)
 8003d6c:	21ef      	movs	r1, #239	@ 0xef
 8003d6e:	48a7      	ldr	r0, [pc, #668]	@ (800400c <_dtoa_r+0x2cc>)
 8003d70:	f001 fcf0 	bl	8005754 <__assert_func>
 8003d74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003d78:	6007      	str	r7, [r0, #0]
 8003d7a:	60c7      	str	r7, [r0, #12]
 8003d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	b159      	cbz	r1, 8003d9c <_dtoa_r+0x5c>
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	604a      	str	r2, [r1, #4]
 8003d88:	2301      	movs	r3, #1
 8003d8a:	4093      	lsls	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
 8003d8e:	4658      	mov	r0, fp
 8003d90:	f000 feda 	bl	8004b48 <_Bfree>
 8003d94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	1e2b      	subs	r3, r5, #0
 8003d9e:	bfb9      	ittee	lt
 8003da0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003da4:	9303      	strlt	r3, [sp, #12]
 8003da6:	2300      	movge	r3, #0
 8003da8:	6033      	strge	r3, [r6, #0]
 8003daa:	9f03      	ldr	r7, [sp, #12]
 8003dac:	4b98      	ldr	r3, [pc, #608]	@ (8004010 <_dtoa_r+0x2d0>)
 8003dae:	bfbc      	itt	lt
 8003db0:	2201      	movlt	r2, #1
 8003db2:	6032      	strlt	r2, [r6, #0]
 8003db4:	43bb      	bics	r3, r7
 8003db6:	d112      	bne.n	8003dde <_dtoa_r+0x9e>
 8003db8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003dba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003dc4:	4323      	orrs	r3, r4
 8003dc6:	f000 854d 	beq.w	8004864 <_dtoa_r+0xb24>
 8003dca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003dcc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004024 <_dtoa_r+0x2e4>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 854f 	beq.w	8004874 <_dtoa_r+0xb34>
 8003dd6:	f10a 0303 	add.w	r3, sl, #3
 8003dda:	f000 bd49 	b.w	8004870 <_dtoa_r+0xb30>
 8003dde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003de2:	2200      	movs	r2, #0
 8003de4:	ec51 0b17 	vmov	r0, r1, d7
 8003de8:	2300      	movs	r3, #0
 8003dea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003dee:	f7fc fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003df2:	4680      	mov	r8, r0
 8003df4:	b158      	cbz	r0, 8003e0e <_dtoa_r+0xce>
 8003df6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003df8:	2301      	movs	r3, #1
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003dfe:	b113      	cbz	r3, 8003e06 <_dtoa_r+0xc6>
 8003e00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003e02:	4b84      	ldr	r3, [pc, #528]	@ (8004014 <_dtoa_r+0x2d4>)
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004028 <_dtoa_r+0x2e8>
 8003e0a:	f000 bd33 	b.w	8004874 <_dtoa_r+0xb34>
 8003e0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003e12:	aa16      	add	r2, sp, #88	@ 0x58
 8003e14:	a917      	add	r1, sp, #92	@ 0x5c
 8003e16:	4658      	mov	r0, fp
 8003e18:	f001 f980 	bl	800511c <__d2b>
 8003e1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003e20:	4681      	mov	r9, r0
 8003e22:	2e00      	cmp	r6, #0
 8003e24:	d077      	beq.n	8003f16 <_dtoa_r+0x1d6>
 8003e26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003e38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003e3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003e40:	4619      	mov	r1, r3
 8003e42:	2200      	movs	r2, #0
 8003e44:	4b74      	ldr	r3, [pc, #464]	@ (8004018 <_dtoa_r+0x2d8>)
 8003e46:	f7fc fa1f 	bl	8000288 <__aeabi_dsub>
 8003e4a:	a369      	add	r3, pc, #420	@ (adr r3, 8003ff0 <_dtoa_r+0x2b0>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc fbd2 	bl	80005f8 <__aeabi_dmul>
 8003e54:	a368      	add	r3, pc, #416	@ (adr r3, 8003ff8 <_dtoa_r+0x2b8>)
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f7fc fa17 	bl	800028c <__adddf3>
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4630      	mov	r0, r6
 8003e62:	460d      	mov	r5, r1
 8003e64:	f7fc fb5e 	bl	8000524 <__aeabi_i2d>
 8003e68:	a365      	add	r3, pc, #404	@ (adr r3, 8004000 <_dtoa_r+0x2c0>)
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f7fc fbc3 	bl	80005f8 <__aeabi_dmul>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4620      	mov	r0, r4
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f7fc fa07 	bl	800028c <__adddf3>
 8003e7e:	4604      	mov	r4, r0
 8003e80:	460d      	mov	r5, r1
 8003e82:	f7fc fe69 	bl	8000b58 <__aeabi_d2iz>
 8003e86:	2200      	movs	r2, #0
 8003e88:	4607      	mov	r7, r0
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	4629      	mov	r1, r5
 8003e90:	f7fc fe24 	bl	8000adc <__aeabi_dcmplt>
 8003e94:	b140      	cbz	r0, 8003ea8 <_dtoa_r+0x168>
 8003e96:	4638      	mov	r0, r7
 8003e98:	f7fc fb44 	bl	8000524 <__aeabi_i2d>
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	462b      	mov	r3, r5
 8003ea0:	f7fc fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ea4:	b900      	cbnz	r0, 8003ea8 <_dtoa_r+0x168>
 8003ea6:	3f01      	subs	r7, #1
 8003ea8:	2f16      	cmp	r7, #22
 8003eaa:	d851      	bhi.n	8003f50 <_dtoa_r+0x210>
 8003eac:	4b5b      	ldr	r3, [pc, #364]	@ (800401c <_dtoa_r+0x2dc>)
 8003eae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003eba:	f7fc fe0f 	bl	8000adc <__aeabi_dcmplt>
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d048      	beq.n	8003f54 <_dtoa_r+0x214>
 8003ec2:	3f01      	subs	r7, #1
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9312      	str	r3, [sp, #72]	@ 0x48
 8003ec8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003eca:	1b9b      	subs	r3, r3, r6
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	bf44      	itt	mi
 8003ed0:	f1c3 0801 	rsbmi	r8, r3, #1
 8003ed4:	2300      	movmi	r3, #0
 8003ed6:	9208      	str	r2, [sp, #32]
 8003ed8:	bf54      	ite	pl
 8003eda:	f04f 0800 	movpl.w	r8, #0
 8003ede:	9308      	strmi	r3, [sp, #32]
 8003ee0:	2f00      	cmp	r7, #0
 8003ee2:	db39      	blt.n	8003f58 <_dtoa_r+0x218>
 8003ee4:	9b08      	ldr	r3, [sp, #32]
 8003ee6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003ee8:	443b      	add	r3, r7
 8003eea:	9308      	str	r3, [sp, #32]
 8003eec:	2300      	movs	r3, #0
 8003eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef2:	2b09      	cmp	r3, #9
 8003ef4:	d864      	bhi.n	8003fc0 <_dtoa_r+0x280>
 8003ef6:	2b05      	cmp	r3, #5
 8003ef8:	bfc4      	itt	gt
 8003efa:	3b04      	subgt	r3, #4
 8003efc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f00:	f1a3 0302 	sub.w	r3, r3, #2
 8003f04:	bfcc      	ite	gt
 8003f06:	2400      	movgt	r4, #0
 8003f08:	2401      	movle	r4, #1
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d863      	bhi.n	8003fd6 <_dtoa_r+0x296>
 8003f0e:	e8df f003 	tbb	[pc, r3]
 8003f12:	372a      	.short	0x372a
 8003f14:	5535      	.short	0x5535
 8003f16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003f1a:	441e      	add	r6, r3
 8003f1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	bfc1      	itttt	gt
 8003f24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003f28:	409f      	lslgt	r7, r3
 8003f2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003f2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003f32:	bfd6      	itet	le
 8003f34:	f1c3 0320 	rsble	r3, r3, #32
 8003f38:	ea47 0003 	orrgt.w	r0, r7, r3
 8003f3c:	fa04 f003 	lslle.w	r0, r4, r3
 8003f40:	f7fc fae0 	bl	8000504 <__aeabi_ui2d>
 8003f44:	2201      	movs	r2, #1
 8003f46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003f4a:	3e01      	subs	r6, #1
 8003f4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8003f4e:	e777      	b.n	8003e40 <_dtoa_r+0x100>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e7b8      	b.n	8003ec6 <_dtoa_r+0x186>
 8003f54:	9012      	str	r0, [sp, #72]	@ 0x48
 8003f56:	e7b7      	b.n	8003ec8 <_dtoa_r+0x188>
 8003f58:	427b      	negs	r3, r7
 8003f5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	eba8 0807 	sub.w	r8, r8, r7
 8003f62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003f64:	e7c4      	b.n	8003ef0 <_dtoa_r+0x1b0>
 8003f66:	2300      	movs	r3, #0
 8003f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	dc35      	bgt.n	8003fdc <_dtoa_r+0x29c>
 8003f70:	2301      	movs	r3, #1
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	9307      	str	r3, [sp, #28]
 8003f76:	461a      	mov	r2, r3
 8003f78:	920e      	str	r2, [sp, #56]	@ 0x38
 8003f7a:	e00b      	b.n	8003f94 <_dtoa_r+0x254>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e7f3      	b.n	8003f68 <_dtoa_r+0x228>
 8003f80:	2300      	movs	r3, #0
 8003f82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	9307      	str	r3, [sp, #28]
 8003f90:	bfb8      	it	lt
 8003f92:	2301      	movlt	r3, #1
 8003f94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003f98:	2100      	movs	r1, #0
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	f102 0514 	add.w	r5, r2, #20
 8003fa0:	429d      	cmp	r5, r3
 8003fa2:	d91f      	bls.n	8003fe4 <_dtoa_r+0x2a4>
 8003fa4:	6041      	str	r1, [r0, #4]
 8003fa6:	4658      	mov	r0, fp
 8003fa8:	f000 fd8e 	bl	8004ac8 <_Balloc>
 8003fac:	4682      	mov	sl, r0
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d13c      	bne.n	800402c <_dtoa_r+0x2ec>
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <_dtoa_r+0x2e0>)
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8003fba:	e6d8      	b.n	8003d6e <_dtoa_r+0x2e>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e7e0      	b.n	8003f82 <_dtoa_r+0x242>
 8003fc0:	2401      	movs	r4, #1
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	9307      	str	r3, [sp, #28]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2312      	movs	r3, #18
 8003fd4:	e7d0      	b.n	8003f78 <_dtoa_r+0x238>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fda:	e7f5      	b.n	8003fc8 <_dtoa_r+0x288>
 8003fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	9307      	str	r3, [sp, #28]
 8003fe2:	e7d7      	b.n	8003f94 <_dtoa_r+0x254>
 8003fe4:	3101      	adds	r1, #1
 8003fe6:	0052      	lsls	r2, r2, #1
 8003fe8:	e7d8      	b.n	8003f9c <_dtoa_r+0x25c>
 8003fea:	bf00      	nop
 8003fec:	f3af 8000 	nop.w
 8003ff0:	636f4361 	.word	0x636f4361
 8003ff4:	3fd287a7 	.word	0x3fd287a7
 8003ff8:	8b60c8b3 	.word	0x8b60c8b3
 8003ffc:	3fc68a28 	.word	0x3fc68a28
 8004000:	509f79fb 	.word	0x509f79fb
 8004004:	3fd34413 	.word	0x3fd34413
 8004008:	08005a1b 	.word	0x08005a1b
 800400c:	08005a32 	.word	0x08005a32
 8004010:	7ff00000 	.word	0x7ff00000
 8004014:	080059eb 	.word	0x080059eb
 8004018:	3ff80000 	.word	0x3ff80000
 800401c:	08005b28 	.word	0x08005b28
 8004020:	08005a8a 	.word	0x08005a8a
 8004024:	08005a17 	.word	0x08005a17
 8004028:	080059ea 	.word	0x080059ea
 800402c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004030:	6018      	str	r0, [r3, #0]
 8004032:	9b07      	ldr	r3, [sp, #28]
 8004034:	2b0e      	cmp	r3, #14
 8004036:	f200 80a4 	bhi.w	8004182 <_dtoa_r+0x442>
 800403a:	2c00      	cmp	r4, #0
 800403c:	f000 80a1 	beq.w	8004182 <_dtoa_r+0x442>
 8004040:	2f00      	cmp	r7, #0
 8004042:	dd33      	ble.n	80040ac <_dtoa_r+0x36c>
 8004044:	4bad      	ldr	r3, [pc, #692]	@ (80042fc <_dtoa_r+0x5bc>)
 8004046:	f007 020f 	and.w	r2, r7, #15
 800404a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800404e:	ed93 7b00 	vldr	d7, [r3]
 8004052:	05f8      	lsls	r0, r7, #23
 8004054:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004058:	ea4f 1427 	mov.w	r4, r7, asr #4
 800405c:	d516      	bpl.n	800408c <_dtoa_r+0x34c>
 800405e:	4ba8      	ldr	r3, [pc, #672]	@ (8004300 <_dtoa_r+0x5c0>)
 8004060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004068:	f7fc fbf0 	bl	800084c <__aeabi_ddiv>
 800406c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004070:	f004 040f 	and.w	r4, r4, #15
 8004074:	2603      	movs	r6, #3
 8004076:	4da2      	ldr	r5, [pc, #648]	@ (8004300 <_dtoa_r+0x5c0>)
 8004078:	b954      	cbnz	r4, 8004090 <_dtoa_r+0x350>
 800407a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800407e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004082:	f7fc fbe3 	bl	800084c <__aeabi_ddiv>
 8004086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800408a:	e028      	b.n	80040de <_dtoa_r+0x39e>
 800408c:	2602      	movs	r6, #2
 800408e:	e7f2      	b.n	8004076 <_dtoa_r+0x336>
 8004090:	07e1      	lsls	r1, r4, #31
 8004092:	d508      	bpl.n	80040a6 <_dtoa_r+0x366>
 8004094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004098:	e9d5 2300 	ldrd	r2, r3, [r5]
 800409c:	f7fc faac 	bl	80005f8 <__aeabi_dmul>
 80040a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040a4:	3601      	adds	r6, #1
 80040a6:	1064      	asrs	r4, r4, #1
 80040a8:	3508      	adds	r5, #8
 80040aa:	e7e5      	b.n	8004078 <_dtoa_r+0x338>
 80040ac:	f000 80d2 	beq.w	8004254 <_dtoa_r+0x514>
 80040b0:	427c      	negs	r4, r7
 80040b2:	4b92      	ldr	r3, [pc, #584]	@ (80042fc <_dtoa_r+0x5bc>)
 80040b4:	4d92      	ldr	r5, [pc, #584]	@ (8004300 <_dtoa_r+0x5c0>)
 80040b6:	f004 020f 	and.w	r2, r4, #15
 80040ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040c6:	f7fc fa97 	bl	80005f8 <__aeabi_dmul>
 80040ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040ce:	1124      	asrs	r4, r4, #4
 80040d0:	2300      	movs	r3, #0
 80040d2:	2602      	movs	r6, #2
 80040d4:	2c00      	cmp	r4, #0
 80040d6:	f040 80b2 	bne.w	800423e <_dtoa_r+0x4fe>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1d3      	bne.n	8004086 <_dtoa_r+0x346>
 80040de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80040e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80b7 	beq.w	8004258 <_dtoa_r+0x518>
 80040ea:	4b86      	ldr	r3, [pc, #536]	@ (8004304 <_dtoa_r+0x5c4>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	4620      	mov	r0, r4
 80040f0:	4629      	mov	r1, r5
 80040f2:	f7fc fcf3 	bl	8000adc <__aeabi_dcmplt>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	f000 80ae 	beq.w	8004258 <_dtoa_r+0x518>
 80040fc:	9b07      	ldr	r3, [sp, #28]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80aa 	beq.w	8004258 <_dtoa_r+0x518>
 8004104:	9b00      	ldr	r3, [sp, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	dd37      	ble.n	800417a <_dtoa_r+0x43a>
 800410a:	1e7b      	subs	r3, r7, #1
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	4620      	mov	r0, r4
 8004110:	4b7d      	ldr	r3, [pc, #500]	@ (8004308 <_dtoa_r+0x5c8>)
 8004112:	2200      	movs	r2, #0
 8004114:	4629      	mov	r1, r5
 8004116:	f7fc fa6f 	bl	80005f8 <__aeabi_dmul>
 800411a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800411e:	9c00      	ldr	r4, [sp, #0]
 8004120:	3601      	adds	r6, #1
 8004122:	4630      	mov	r0, r6
 8004124:	f7fc f9fe 	bl	8000524 <__aeabi_i2d>
 8004128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800412c:	f7fc fa64 	bl	80005f8 <__aeabi_dmul>
 8004130:	4b76      	ldr	r3, [pc, #472]	@ (800430c <_dtoa_r+0x5cc>)
 8004132:	2200      	movs	r2, #0
 8004134:	f7fc f8aa 	bl	800028c <__adddf3>
 8004138:	4605      	mov	r5, r0
 800413a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800413e:	2c00      	cmp	r4, #0
 8004140:	f040 808d 	bne.w	800425e <_dtoa_r+0x51e>
 8004144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004148:	4b71      	ldr	r3, [pc, #452]	@ (8004310 <_dtoa_r+0x5d0>)
 800414a:	2200      	movs	r2, #0
 800414c:	f7fc f89c 	bl	8000288 <__aeabi_dsub>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004158:	462a      	mov	r2, r5
 800415a:	4633      	mov	r3, r6
 800415c:	f7fc fcdc 	bl	8000b18 <__aeabi_dcmpgt>
 8004160:	2800      	cmp	r0, #0
 8004162:	f040 828b 	bne.w	800467c <_dtoa_r+0x93c>
 8004166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800416a:	462a      	mov	r2, r5
 800416c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004170:	f7fc fcb4 	bl	8000adc <__aeabi_dcmplt>
 8004174:	2800      	cmp	r0, #0
 8004176:	f040 8128 	bne.w	80043ca <_dtoa_r+0x68a>
 800417a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800417e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004182:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004184:	2b00      	cmp	r3, #0
 8004186:	f2c0 815a 	blt.w	800443e <_dtoa_r+0x6fe>
 800418a:	2f0e      	cmp	r7, #14
 800418c:	f300 8157 	bgt.w	800443e <_dtoa_r+0x6fe>
 8004190:	4b5a      	ldr	r3, [pc, #360]	@ (80042fc <_dtoa_r+0x5bc>)
 8004192:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004196:	ed93 7b00 	vldr	d7, [r3]
 800419a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800419c:	2b00      	cmp	r3, #0
 800419e:	ed8d 7b00 	vstr	d7, [sp]
 80041a2:	da03      	bge.n	80041ac <_dtoa_r+0x46c>
 80041a4:	9b07      	ldr	r3, [sp, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f340 8101 	ble.w	80043ae <_dtoa_r+0x66e>
 80041ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80041b0:	4656      	mov	r6, sl
 80041b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041b6:	4620      	mov	r0, r4
 80041b8:	4629      	mov	r1, r5
 80041ba:	f7fc fb47 	bl	800084c <__aeabi_ddiv>
 80041be:	f7fc fccb 	bl	8000b58 <__aeabi_d2iz>
 80041c2:	4680      	mov	r8, r0
 80041c4:	f7fc f9ae 	bl	8000524 <__aeabi_i2d>
 80041c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041cc:	f7fc fa14 	bl	80005f8 <__aeabi_dmul>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4620      	mov	r0, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80041dc:	f7fc f854 	bl	8000288 <__aeabi_dsub>
 80041e0:	f806 4b01 	strb.w	r4, [r6], #1
 80041e4:	9d07      	ldr	r5, [sp, #28]
 80041e6:	eba6 040a 	sub.w	r4, r6, sl
 80041ea:	42a5      	cmp	r5, r4
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	f040 8117 	bne.w	8004422 <_dtoa_r+0x6e2>
 80041f4:	f7fc f84a 	bl	800028c <__adddf3>
 80041f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041fc:	4604      	mov	r4, r0
 80041fe:	460d      	mov	r5, r1
 8004200:	f7fc fc8a 	bl	8000b18 <__aeabi_dcmpgt>
 8004204:	2800      	cmp	r0, #0
 8004206:	f040 80f9 	bne.w	80043fc <_dtoa_r+0x6bc>
 800420a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800420e:	4620      	mov	r0, r4
 8004210:	4629      	mov	r1, r5
 8004212:	f7fc fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 8004216:	b118      	cbz	r0, 8004220 <_dtoa_r+0x4e0>
 8004218:	f018 0f01 	tst.w	r8, #1
 800421c:	f040 80ee 	bne.w	80043fc <_dtoa_r+0x6bc>
 8004220:	4649      	mov	r1, r9
 8004222:	4658      	mov	r0, fp
 8004224:	f000 fc90 	bl	8004b48 <_Bfree>
 8004228:	2300      	movs	r3, #0
 800422a:	7033      	strb	r3, [r6, #0]
 800422c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800422e:	3701      	adds	r7, #1
 8004230:	601f      	str	r7, [r3, #0]
 8004232:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 831d 	beq.w	8004874 <_dtoa_r+0xb34>
 800423a:	601e      	str	r6, [r3, #0]
 800423c:	e31a      	b.n	8004874 <_dtoa_r+0xb34>
 800423e:	07e2      	lsls	r2, r4, #31
 8004240:	d505      	bpl.n	800424e <_dtoa_r+0x50e>
 8004242:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004246:	f7fc f9d7 	bl	80005f8 <__aeabi_dmul>
 800424a:	3601      	adds	r6, #1
 800424c:	2301      	movs	r3, #1
 800424e:	1064      	asrs	r4, r4, #1
 8004250:	3508      	adds	r5, #8
 8004252:	e73f      	b.n	80040d4 <_dtoa_r+0x394>
 8004254:	2602      	movs	r6, #2
 8004256:	e742      	b.n	80040de <_dtoa_r+0x39e>
 8004258:	9c07      	ldr	r4, [sp, #28]
 800425a:	9704      	str	r7, [sp, #16]
 800425c:	e761      	b.n	8004122 <_dtoa_r+0x3e2>
 800425e:	4b27      	ldr	r3, [pc, #156]	@ (80042fc <_dtoa_r+0x5bc>)
 8004260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004262:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004266:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800426a:	4454      	add	r4, sl
 800426c:	2900      	cmp	r1, #0
 800426e:	d053      	beq.n	8004318 <_dtoa_r+0x5d8>
 8004270:	4928      	ldr	r1, [pc, #160]	@ (8004314 <_dtoa_r+0x5d4>)
 8004272:	2000      	movs	r0, #0
 8004274:	f7fc faea 	bl	800084c <__aeabi_ddiv>
 8004278:	4633      	mov	r3, r6
 800427a:	462a      	mov	r2, r5
 800427c:	f7fc f804 	bl	8000288 <__aeabi_dsub>
 8004280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004284:	4656      	mov	r6, sl
 8004286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800428a:	f7fc fc65 	bl	8000b58 <__aeabi_d2iz>
 800428e:	4605      	mov	r5, r0
 8004290:	f7fc f948 	bl	8000524 <__aeabi_i2d>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800429c:	f7fb fff4 	bl	8000288 <__aeabi_dsub>
 80042a0:	3530      	adds	r5, #48	@ 0x30
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042aa:	f806 5b01 	strb.w	r5, [r6], #1
 80042ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80042b2:	f7fc fc13 	bl	8000adc <__aeabi_dcmplt>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d171      	bne.n	800439e <_dtoa_r+0x65e>
 80042ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042be:	4911      	ldr	r1, [pc, #68]	@ (8004304 <_dtoa_r+0x5c4>)
 80042c0:	2000      	movs	r0, #0
 80042c2:	f7fb ffe1 	bl	8000288 <__aeabi_dsub>
 80042c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80042ca:	f7fc fc07 	bl	8000adc <__aeabi_dcmplt>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	f040 8095 	bne.w	80043fe <_dtoa_r+0x6be>
 80042d4:	42a6      	cmp	r6, r4
 80042d6:	f43f af50 	beq.w	800417a <_dtoa_r+0x43a>
 80042da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80042de:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <_dtoa_r+0x5c8>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	f7fc f989 	bl	80005f8 <__aeabi_dmul>
 80042e6:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <_dtoa_r+0x5c8>)
 80042e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042ec:	2200      	movs	r2, #0
 80042ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042f2:	f7fc f981 	bl	80005f8 <__aeabi_dmul>
 80042f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042fa:	e7c4      	b.n	8004286 <_dtoa_r+0x546>
 80042fc:	08005b28 	.word	0x08005b28
 8004300:	08005b00 	.word	0x08005b00
 8004304:	3ff00000 	.word	0x3ff00000
 8004308:	40240000 	.word	0x40240000
 800430c:	401c0000 	.word	0x401c0000
 8004310:	40140000 	.word	0x40140000
 8004314:	3fe00000 	.word	0x3fe00000
 8004318:	4631      	mov	r1, r6
 800431a:	4628      	mov	r0, r5
 800431c:	f7fc f96c 	bl	80005f8 <__aeabi_dmul>
 8004320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004324:	9415      	str	r4, [sp, #84]	@ 0x54
 8004326:	4656      	mov	r6, sl
 8004328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800432c:	f7fc fc14 	bl	8000b58 <__aeabi_d2iz>
 8004330:	4605      	mov	r5, r0
 8004332:	f7fc f8f7 	bl	8000524 <__aeabi_i2d>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800433e:	f7fb ffa3 	bl	8000288 <__aeabi_dsub>
 8004342:	3530      	adds	r5, #48	@ 0x30
 8004344:	f806 5b01 	strb.w	r5, [r6], #1
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	42a6      	cmp	r6, r4
 800434e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	d124      	bne.n	80043a2 <_dtoa_r+0x662>
 8004358:	4bac      	ldr	r3, [pc, #688]	@ (800460c <_dtoa_r+0x8cc>)
 800435a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800435e:	f7fb ff95 	bl	800028c <__adddf3>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800436a:	f7fc fbd5 	bl	8000b18 <__aeabi_dcmpgt>
 800436e:	2800      	cmp	r0, #0
 8004370:	d145      	bne.n	80043fe <_dtoa_r+0x6be>
 8004372:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004376:	49a5      	ldr	r1, [pc, #660]	@ (800460c <_dtoa_r+0x8cc>)
 8004378:	2000      	movs	r0, #0
 800437a:	f7fb ff85 	bl	8000288 <__aeabi_dsub>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004386:	f7fc fba9 	bl	8000adc <__aeabi_dcmplt>
 800438a:	2800      	cmp	r0, #0
 800438c:	f43f aef5 	beq.w	800417a <_dtoa_r+0x43a>
 8004390:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004392:	1e73      	subs	r3, r6, #1
 8004394:	9315      	str	r3, [sp, #84]	@ 0x54
 8004396:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800439a:	2b30      	cmp	r3, #48	@ 0x30
 800439c:	d0f8      	beq.n	8004390 <_dtoa_r+0x650>
 800439e:	9f04      	ldr	r7, [sp, #16]
 80043a0:	e73e      	b.n	8004220 <_dtoa_r+0x4e0>
 80043a2:	4b9b      	ldr	r3, [pc, #620]	@ (8004610 <_dtoa_r+0x8d0>)
 80043a4:	f7fc f928 	bl	80005f8 <__aeabi_dmul>
 80043a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043ac:	e7bc      	b.n	8004328 <_dtoa_r+0x5e8>
 80043ae:	d10c      	bne.n	80043ca <_dtoa_r+0x68a>
 80043b0:	4b98      	ldr	r3, [pc, #608]	@ (8004614 <_dtoa_r+0x8d4>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043b8:	f7fc f91e 	bl	80005f8 <__aeabi_dmul>
 80043bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043c0:	f7fc fba0 	bl	8000b04 <__aeabi_dcmpge>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	f000 8157 	beq.w	8004678 <_dtoa_r+0x938>
 80043ca:	2400      	movs	r4, #0
 80043cc:	4625      	mov	r5, r4
 80043ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043d0:	43db      	mvns	r3, r3
 80043d2:	9304      	str	r3, [sp, #16]
 80043d4:	4656      	mov	r6, sl
 80043d6:	2700      	movs	r7, #0
 80043d8:	4621      	mov	r1, r4
 80043da:	4658      	mov	r0, fp
 80043dc:	f000 fbb4 	bl	8004b48 <_Bfree>
 80043e0:	2d00      	cmp	r5, #0
 80043e2:	d0dc      	beq.n	800439e <_dtoa_r+0x65e>
 80043e4:	b12f      	cbz	r7, 80043f2 <_dtoa_r+0x6b2>
 80043e6:	42af      	cmp	r7, r5
 80043e8:	d003      	beq.n	80043f2 <_dtoa_r+0x6b2>
 80043ea:	4639      	mov	r1, r7
 80043ec:	4658      	mov	r0, fp
 80043ee:	f000 fbab 	bl	8004b48 <_Bfree>
 80043f2:	4629      	mov	r1, r5
 80043f4:	4658      	mov	r0, fp
 80043f6:	f000 fba7 	bl	8004b48 <_Bfree>
 80043fa:	e7d0      	b.n	800439e <_dtoa_r+0x65e>
 80043fc:	9704      	str	r7, [sp, #16]
 80043fe:	4633      	mov	r3, r6
 8004400:	461e      	mov	r6, r3
 8004402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004406:	2a39      	cmp	r2, #57	@ 0x39
 8004408:	d107      	bne.n	800441a <_dtoa_r+0x6da>
 800440a:	459a      	cmp	sl, r3
 800440c:	d1f8      	bne.n	8004400 <_dtoa_r+0x6c0>
 800440e:	9a04      	ldr	r2, [sp, #16]
 8004410:	3201      	adds	r2, #1
 8004412:	9204      	str	r2, [sp, #16]
 8004414:	2230      	movs	r2, #48	@ 0x30
 8004416:	f88a 2000 	strb.w	r2, [sl]
 800441a:	781a      	ldrb	r2, [r3, #0]
 800441c:	3201      	adds	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e7bd      	b.n	800439e <_dtoa_r+0x65e>
 8004422:	4b7b      	ldr	r3, [pc, #492]	@ (8004610 <_dtoa_r+0x8d0>)
 8004424:	2200      	movs	r2, #0
 8004426:	f7fc f8e7 	bl	80005f8 <__aeabi_dmul>
 800442a:	2200      	movs	r2, #0
 800442c:	2300      	movs	r3, #0
 800442e:	4604      	mov	r4, r0
 8004430:	460d      	mov	r5, r1
 8004432:	f7fc fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 8004436:	2800      	cmp	r0, #0
 8004438:	f43f aebb 	beq.w	80041b2 <_dtoa_r+0x472>
 800443c:	e6f0      	b.n	8004220 <_dtoa_r+0x4e0>
 800443e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004440:	2a00      	cmp	r2, #0
 8004442:	f000 80db 	beq.w	80045fc <_dtoa_r+0x8bc>
 8004446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004448:	2a01      	cmp	r2, #1
 800444a:	f300 80bf 	bgt.w	80045cc <_dtoa_r+0x88c>
 800444e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004450:	2a00      	cmp	r2, #0
 8004452:	f000 80b7 	beq.w	80045c4 <_dtoa_r+0x884>
 8004456:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800445a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800445c:	4646      	mov	r6, r8
 800445e:	9a08      	ldr	r2, [sp, #32]
 8004460:	2101      	movs	r1, #1
 8004462:	441a      	add	r2, r3
 8004464:	4658      	mov	r0, fp
 8004466:	4498      	add	r8, r3
 8004468:	9208      	str	r2, [sp, #32]
 800446a:	f000 fc21 	bl	8004cb0 <__i2b>
 800446e:	4605      	mov	r5, r0
 8004470:	b15e      	cbz	r6, 800448a <_dtoa_r+0x74a>
 8004472:	9b08      	ldr	r3, [sp, #32]
 8004474:	2b00      	cmp	r3, #0
 8004476:	dd08      	ble.n	800448a <_dtoa_r+0x74a>
 8004478:	42b3      	cmp	r3, r6
 800447a:	9a08      	ldr	r2, [sp, #32]
 800447c:	bfa8      	it	ge
 800447e:	4633      	movge	r3, r6
 8004480:	eba8 0803 	sub.w	r8, r8, r3
 8004484:	1af6      	subs	r6, r6, r3
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	9308      	str	r3, [sp, #32]
 800448a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800448c:	b1f3      	cbz	r3, 80044cc <_dtoa_r+0x78c>
 800448e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80b7 	beq.w	8004604 <_dtoa_r+0x8c4>
 8004496:	b18c      	cbz	r4, 80044bc <_dtoa_r+0x77c>
 8004498:	4629      	mov	r1, r5
 800449a:	4622      	mov	r2, r4
 800449c:	4658      	mov	r0, fp
 800449e:	f000 fcc7 	bl	8004e30 <__pow5mult>
 80044a2:	464a      	mov	r2, r9
 80044a4:	4601      	mov	r1, r0
 80044a6:	4605      	mov	r5, r0
 80044a8:	4658      	mov	r0, fp
 80044aa:	f000 fc17 	bl	8004cdc <__multiply>
 80044ae:	4649      	mov	r1, r9
 80044b0:	9004      	str	r0, [sp, #16]
 80044b2:	4658      	mov	r0, fp
 80044b4:	f000 fb48 	bl	8004b48 <_Bfree>
 80044b8:	9b04      	ldr	r3, [sp, #16]
 80044ba:	4699      	mov	r9, r3
 80044bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044be:	1b1a      	subs	r2, r3, r4
 80044c0:	d004      	beq.n	80044cc <_dtoa_r+0x78c>
 80044c2:	4649      	mov	r1, r9
 80044c4:	4658      	mov	r0, fp
 80044c6:	f000 fcb3 	bl	8004e30 <__pow5mult>
 80044ca:	4681      	mov	r9, r0
 80044cc:	2101      	movs	r1, #1
 80044ce:	4658      	mov	r0, fp
 80044d0:	f000 fbee 	bl	8004cb0 <__i2b>
 80044d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044d6:	4604      	mov	r4, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 81cf 	beq.w	800487c <_dtoa_r+0xb3c>
 80044de:	461a      	mov	r2, r3
 80044e0:	4601      	mov	r1, r0
 80044e2:	4658      	mov	r0, fp
 80044e4:	f000 fca4 	bl	8004e30 <__pow5mult>
 80044e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	4604      	mov	r4, r0
 80044ee:	f300 8095 	bgt.w	800461c <_dtoa_r+0x8dc>
 80044f2:	9b02      	ldr	r3, [sp, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 8087 	bne.w	8004608 <_dtoa_r+0x8c8>
 80044fa:	9b03      	ldr	r3, [sp, #12]
 80044fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004500:	2b00      	cmp	r3, #0
 8004502:	f040 8089 	bne.w	8004618 <_dtoa_r+0x8d8>
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800450c:	0d1b      	lsrs	r3, r3, #20
 800450e:	051b      	lsls	r3, r3, #20
 8004510:	b12b      	cbz	r3, 800451e <_dtoa_r+0x7de>
 8004512:	9b08      	ldr	r3, [sp, #32]
 8004514:	3301      	adds	r3, #1
 8004516:	9308      	str	r3, [sp, #32]
 8004518:	f108 0801 	add.w	r8, r8, #1
 800451c:	2301      	movs	r3, #1
 800451e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 81b0 	beq.w	8004888 <_dtoa_r+0xb48>
 8004528:	6923      	ldr	r3, [r4, #16]
 800452a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800452e:	6918      	ldr	r0, [r3, #16]
 8004530:	f000 fb72 	bl	8004c18 <__hi0bits>
 8004534:	f1c0 0020 	rsb	r0, r0, #32
 8004538:	9b08      	ldr	r3, [sp, #32]
 800453a:	4418      	add	r0, r3
 800453c:	f010 001f 	ands.w	r0, r0, #31
 8004540:	d077      	beq.n	8004632 <_dtoa_r+0x8f2>
 8004542:	f1c0 0320 	rsb	r3, r0, #32
 8004546:	2b04      	cmp	r3, #4
 8004548:	dd6b      	ble.n	8004622 <_dtoa_r+0x8e2>
 800454a:	9b08      	ldr	r3, [sp, #32]
 800454c:	f1c0 001c 	rsb	r0, r0, #28
 8004550:	4403      	add	r3, r0
 8004552:	4480      	add	r8, r0
 8004554:	4406      	add	r6, r0
 8004556:	9308      	str	r3, [sp, #32]
 8004558:	f1b8 0f00 	cmp.w	r8, #0
 800455c:	dd05      	ble.n	800456a <_dtoa_r+0x82a>
 800455e:	4649      	mov	r1, r9
 8004560:	4642      	mov	r2, r8
 8004562:	4658      	mov	r0, fp
 8004564:	f000 fcbe 	bl	8004ee4 <__lshift>
 8004568:	4681      	mov	r9, r0
 800456a:	9b08      	ldr	r3, [sp, #32]
 800456c:	2b00      	cmp	r3, #0
 800456e:	dd05      	ble.n	800457c <_dtoa_r+0x83c>
 8004570:	4621      	mov	r1, r4
 8004572:	461a      	mov	r2, r3
 8004574:	4658      	mov	r0, fp
 8004576:	f000 fcb5 	bl	8004ee4 <__lshift>
 800457a:	4604      	mov	r4, r0
 800457c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800457e:	2b00      	cmp	r3, #0
 8004580:	d059      	beq.n	8004636 <_dtoa_r+0x8f6>
 8004582:	4621      	mov	r1, r4
 8004584:	4648      	mov	r0, r9
 8004586:	f000 fd19 	bl	8004fbc <__mcmp>
 800458a:	2800      	cmp	r0, #0
 800458c:	da53      	bge.n	8004636 <_dtoa_r+0x8f6>
 800458e:	1e7b      	subs	r3, r7, #1
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	4649      	mov	r1, r9
 8004594:	2300      	movs	r3, #0
 8004596:	220a      	movs	r2, #10
 8004598:	4658      	mov	r0, fp
 800459a:	f000 faf7 	bl	8004b8c <__multadd>
 800459e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045a0:	4681      	mov	r9, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8172 	beq.w	800488c <_dtoa_r+0xb4c>
 80045a8:	2300      	movs	r3, #0
 80045aa:	4629      	mov	r1, r5
 80045ac:	220a      	movs	r2, #10
 80045ae:	4658      	mov	r0, fp
 80045b0:	f000 faec 	bl	8004b8c <__multadd>
 80045b4:	9b00      	ldr	r3, [sp, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	4605      	mov	r5, r0
 80045ba:	dc67      	bgt.n	800468c <_dtoa_r+0x94c>
 80045bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045be:	2b02      	cmp	r3, #2
 80045c0:	dc41      	bgt.n	8004646 <_dtoa_r+0x906>
 80045c2:	e063      	b.n	800468c <_dtoa_r+0x94c>
 80045c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80045c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80045ca:	e746      	b.n	800445a <_dtoa_r+0x71a>
 80045cc:	9b07      	ldr	r3, [sp, #28]
 80045ce:	1e5c      	subs	r4, r3, #1
 80045d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045d2:	42a3      	cmp	r3, r4
 80045d4:	bfbf      	itttt	lt
 80045d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80045d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80045da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80045dc:	1ae3      	sublt	r3, r4, r3
 80045de:	bfb4      	ite	lt
 80045e0:	18d2      	addlt	r2, r2, r3
 80045e2:	1b1c      	subge	r4, r3, r4
 80045e4:	9b07      	ldr	r3, [sp, #28]
 80045e6:	bfbc      	itt	lt
 80045e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80045ea:	2400      	movlt	r4, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bfb5      	itete	lt
 80045f0:	eba8 0603 	sublt.w	r6, r8, r3
 80045f4:	9b07      	ldrge	r3, [sp, #28]
 80045f6:	2300      	movlt	r3, #0
 80045f8:	4646      	movge	r6, r8
 80045fa:	e730      	b.n	800445e <_dtoa_r+0x71e>
 80045fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80045fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004600:	4646      	mov	r6, r8
 8004602:	e735      	b.n	8004470 <_dtoa_r+0x730>
 8004604:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004606:	e75c      	b.n	80044c2 <_dtoa_r+0x782>
 8004608:	2300      	movs	r3, #0
 800460a:	e788      	b.n	800451e <_dtoa_r+0x7de>
 800460c:	3fe00000 	.word	0x3fe00000
 8004610:	40240000 	.word	0x40240000
 8004614:	40140000 	.word	0x40140000
 8004618:	9b02      	ldr	r3, [sp, #8]
 800461a:	e780      	b.n	800451e <_dtoa_r+0x7de>
 800461c:	2300      	movs	r3, #0
 800461e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004620:	e782      	b.n	8004528 <_dtoa_r+0x7e8>
 8004622:	d099      	beq.n	8004558 <_dtoa_r+0x818>
 8004624:	9a08      	ldr	r2, [sp, #32]
 8004626:	331c      	adds	r3, #28
 8004628:	441a      	add	r2, r3
 800462a:	4498      	add	r8, r3
 800462c:	441e      	add	r6, r3
 800462e:	9208      	str	r2, [sp, #32]
 8004630:	e792      	b.n	8004558 <_dtoa_r+0x818>
 8004632:	4603      	mov	r3, r0
 8004634:	e7f6      	b.n	8004624 <_dtoa_r+0x8e4>
 8004636:	9b07      	ldr	r3, [sp, #28]
 8004638:	9704      	str	r7, [sp, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	dc20      	bgt.n	8004680 <_dtoa_r+0x940>
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004642:	2b02      	cmp	r3, #2
 8004644:	dd1e      	ble.n	8004684 <_dtoa_r+0x944>
 8004646:	9b00      	ldr	r3, [sp, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f aec0 	bne.w	80043ce <_dtoa_r+0x68e>
 800464e:	4621      	mov	r1, r4
 8004650:	2205      	movs	r2, #5
 8004652:	4658      	mov	r0, fp
 8004654:	f000 fa9a 	bl	8004b8c <__multadd>
 8004658:	4601      	mov	r1, r0
 800465a:	4604      	mov	r4, r0
 800465c:	4648      	mov	r0, r9
 800465e:	f000 fcad 	bl	8004fbc <__mcmp>
 8004662:	2800      	cmp	r0, #0
 8004664:	f77f aeb3 	ble.w	80043ce <_dtoa_r+0x68e>
 8004668:	4656      	mov	r6, sl
 800466a:	2331      	movs	r3, #49	@ 0x31
 800466c:	f806 3b01 	strb.w	r3, [r6], #1
 8004670:	9b04      	ldr	r3, [sp, #16]
 8004672:	3301      	adds	r3, #1
 8004674:	9304      	str	r3, [sp, #16]
 8004676:	e6ae      	b.n	80043d6 <_dtoa_r+0x696>
 8004678:	9c07      	ldr	r4, [sp, #28]
 800467a:	9704      	str	r7, [sp, #16]
 800467c:	4625      	mov	r5, r4
 800467e:	e7f3      	b.n	8004668 <_dtoa_r+0x928>
 8004680:	9b07      	ldr	r3, [sp, #28]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8104 	beq.w	8004894 <_dtoa_r+0xb54>
 800468c:	2e00      	cmp	r6, #0
 800468e:	dd05      	ble.n	800469c <_dtoa_r+0x95c>
 8004690:	4629      	mov	r1, r5
 8004692:	4632      	mov	r2, r6
 8004694:	4658      	mov	r0, fp
 8004696:	f000 fc25 	bl	8004ee4 <__lshift>
 800469a:	4605      	mov	r5, r0
 800469c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d05a      	beq.n	8004758 <_dtoa_r+0xa18>
 80046a2:	6869      	ldr	r1, [r5, #4]
 80046a4:	4658      	mov	r0, fp
 80046a6:	f000 fa0f 	bl	8004ac8 <_Balloc>
 80046aa:	4606      	mov	r6, r0
 80046ac:	b928      	cbnz	r0, 80046ba <_dtoa_r+0x97a>
 80046ae:	4b84      	ldr	r3, [pc, #528]	@ (80048c0 <_dtoa_r+0xb80>)
 80046b0:	4602      	mov	r2, r0
 80046b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80046b6:	f7ff bb5a 	b.w	8003d6e <_dtoa_r+0x2e>
 80046ba:	692a      	ldr	r2, [r5, #16]
 80046bc:	3202      	adds	r2, #2
 80046be:	0092      	lsls	r2, r2, #2
 80046c0:	f105 010c 	add.w	r1, r5, #12
 80046c4:	300c      	adds	r0, #12
 80046c6:	f001 f837 	bl	8005738 <memcpy>
 80046ca:	2201      	movs	r2, #1
 80046cc:	4631      	mov	r1, r6
 80046ce:	4658      	mov	r0, fp
 80046d0:	f000 fc08 	bl	8004ee4 <__lshift>
 80046d4:	f10a 0301 	add.w	r3, sl, #1
 80046d8:	9307      	str	r3, [sp, #28]
 80046da:	9b00      	ldr	r3, [sp, #0]
 80046dc:	4453      	add	r3, sl
 80046de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046e0:	9b02      	ldr	r3, [sp, #8]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	462f      	mov	r7, r5
 80046e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80046ea:	4605      	mov	r5, r0
 80046ec:	9b07      	ldr	r3, [sp, #28]
 80046ee:	4621      	mov	r1, r4
 80046f0:	3b01      	subs	r3, #1
 80046f2:	4648      	mov	r0, r9
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	f7ff fa9a 	bl	8003c2e <quorem>
 80046fa:	4639      	mov	r1, r7
 80046fc:	9002      	str	r0, [sp, #8]
 80046fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004702:	4648      	mov	r0, r9
 8004704:	f000 fc5a 	bl	8004fbc <__mcmp>
 8004708:	462a      	mov	r2, r5
 800470a:	9008      	str	r0, [sp, #32]
 800470c:	4621      	mov	r1, r4
 800470e:	4658      	mov	r0, fp
 8004710:	f000 fc70 	bl	8004ff4 <__mdiff>
 8004714:	68c2      	ldr	r2, [r0, #12]
 8004716:	4606      	mov	r6, r0
 8004718:	bb02      	cbnz	r2, 800475c <_dtoa_r+0xa1c>
 800471a:	4601      	mov	r1, r0
 800471c:	4648      	mov	r0, r9
 800471e:	f000 fc4d 	bl	8004fbc <__mcmp>
 8004722:	4602      	mov	r2, r0
 8004724:	4631      	mov	r1, r6
 8004726:	4658      	mov	r0, fp
 8004728:	920e      	str	r2, [sp, #56]	@ 0x38
 800472a:	f000 fa0d 	bl	8004b48 <_Bfree>
 800472e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004730:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004732:	9e07      	ldr	r6, [sp, #28]
 8004734:	ea43 0102 	orr.w	r1, r3, r2
 8004738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800473a:	4319      	orrs	r1, r3
 800473c:	d110      	bne.n	8004760 <_dtoa_r+0xa20>
 800473e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004742:	d029      	beq.n	8004798 <_dtoa_r+0xa58>
 8004744:	9b08      	ldr	r3, [sp, #32]
 8004746:	2b00      	cmp	r3, #0
 8004748:	dd02      	ble.n	8004750 <_dtoa_r+0xa10>
 800474a:	9b02      	ldr	r3, [sp, #8]
 800474c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004750:	9b00      	ldr	r3, [sp, #0]
 8004752:	f883 8000 	strb.w	r8, [r3]
 8004756:	e63f      	b.n	80043d8 <_dtoa_r+0x698>
 8004758:	4628      	mov	r0, r5
 800475a:	e7bb      	b.n	80046d4 <_dtoa_r+0x994>
 800475c:	2201      	movs	r2, #1
 800475e:	e7e1      	b.n	8004724 <_dtoa_r+0x9e4>
 8004760:	9b08      	ldr	r3, [sp, #32]
 8004762:	2b00      	cmp	r3, #0
 8004764:	db04      	blt.n	8004770 <_dtoa_r+0xa30>
 8004766:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004768:	430b      	orrs	r3, r1
 800476a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800476c:	430b      	orrs	r3, r1
 800476e:	d120      	bne.n	80047b2 <_dtoa_r+0xa72>
 8004770:	2a00      	cmp	r2, #0
 8004772:	dded      	ble.n	8004750 <_dtoa_r+0xa10>
 8004774:	4649      	mov	r1, r9
 8004776:	2201      	movs	r2, #1
 8004778:	4658      	mov	r0, fp
 800477a:	f000 fbb3 	bl	8004ee4 <__lshift>
 800477e:	4621      	mov	r1, r4
 8004780:	4681      	mov	r9, r0
 8004782:	f000 fc1b 	bl	8004fbc <__mcmp>
 8004786:	2800      	cmp	r0, #0
 8004788:	dc03      	bgt.n	8004792 <_dtoa_r+0xa52>
 800478a:	d1e1      	bne.n	8004750 <_dtoa_r+0xa10>
 800478c:	f018 0f01 	tst.w	r8, #1
 8004790:	d0de      	beq.n	8004750 <_dtoa_r+0xa10>
 8004792:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004796:	d1d8      	bne.n	800474a <_dtoa_r+0xa0a>
 8004798:	9a00      	ldr	r2, [sp, #0]
 800479a:	2339      	movs	r3, #57	@ 0x39
 800479c:	7013      	strb	r3, [r2, #0]
 800479e:	4633      	mov	r3, r6
 80047a0:	461e      	mov	r6, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80047a8:	2a39      	cmp	r2, #57	@ 0x39
 80047aa:	d052      	beq.n	8004852 <_dtoa_r+0xb12>
 80047ac:	3201      	adds	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	e612      	b.n	80043d8 <_dtoa_r+0x698>
 80047b2:	2a00      	cmp	r2, #0
 80047b4:	dd07      	ble.n	80047c6 <_dtoa_r+0xa86>
 80047b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80047ba:	d0ed      	beq.n	8004798 <_dtoa_r+0xa58>
 80047bc:	9a00      	ldr	r2, [sp, #0]
 80047be:	f108 0301 	add.w	r3, r8, #1
 80047c2:	7013      	strb	r3, [r2, #0]
 80047c4:	e608      	b.n	80043d8 <_dtoa_r+0x698>
 80047c6:	9b07      	ldr	r3, [sp, #28]
 80047c8:	9a07      	ldr	r2, [sp, #28]
 80047ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80047ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d028      	beq.n	8004826 <_dtoa_r+0xae6>
 80047d4:	4649      	mov	r1, r9
 80047d6:	2300      	movs	r3, #0
 80047d8:	220a      	movs	r2, #10
 80047da:	4658      	mov	r0, fp
 80047dc:	f000 f9d6 	bl	8004b8c <__multadd>
 80047e0:	42af      	cmp	r7, r5
 80047e2:	4681      	mov	r9, r0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	f04f 020a 	mov.w	r2, #10
 80047ec:	4639      	mov	r1, r7
 80047ee:	4658      	mov	r0, fp
 80047f0:	d107      	bne.n	8004802 <_dtoa_r+0xac2>
 80047f2:	f000 f9cb 	bl	8004b8c <__multadd>
 80047f6:	4607      	mov	r7, r0
 80047f8:	4605      	mov	r5, r0
 80047fa:	9b07      	ldr	r3, [sp, #28]
 80047fc:	3301      	adds	r3, #1
 80047fe:	9307      	str	r3, [sp, #28]
 8004800:	e774      	b.n	80046ec <_dtoa_r+0x9ac>
 8004802:	f000 f9c3 	bl	8004b8c <__multadd>
 8004806:	4629      	mov	r1, r5
 8004808:	4607      	mov	r7, r0
 800480a:	2300      	movs	r3, #0
 800480c:	220a      	movs	r2, #10
 800480e:	4658      	mov	r0, fp
 8004810:	f000 f9bc 	bl	8004b8c <__multadd>
 8004814:	4605      	mov	r5, r0
 8004816:	e7f0      	b.n	80047fa <_dtoa_r+0xaba>
 8004818:	9b00      	ldr	r3, [sp, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	bfcc      	ite	gt
 800481e:	461e      	movgt	r6, r3
 8004820:	2601      	movle	r6, #1
 8004822:	4456      	add	r6, sl
 8004824:	2700      	movs	r7, #0
 8004826:	4649      	mov	r1, r9
 8004828:	2201      	movs	r2, #1
 800482a:	4658      	mov	r0, fp
 800482c:	f000 fb5a 	bl	8004ee4 <__lshift>
 8004830:	4621      	mov	r1, r4
 8004832:	4681      	mov	r9, r0
 8004834:	f000 fbc2 	bl	8004fbc <__mcmp>
 8004838:	2800      	cmp	r0, #0
 800483a:	dcb0      	bgt.n	800479e <_dtoa_r+0xa5e>
 800483c:	d102      	bne.n	8004844 <_dtoa_r+0xb04>
 800483e:	f018 0f01 	tst.w	r8, #1
 8004842:	d1ac      	bne.n	800479e <_dtoa_r+0xa5e>
 8004844:	4633      	mov	r3, r6
 8004846:	461e      	mov	r6, r3
 8004848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800484c:	2a30      	cmp	r2, #48	@ 0x30
 800484e:	d0fa      	beq.n	8004846 <_dtoa_r+0xb06>
 8004850:	e5c2      	b.n	80043d8 <_dtoa_r+0x698>
 8004852:	459a      	cmp	sl, r3
 8004854:	d1a4      	bne.n	80047a0 <_dtoa_r+0xa60>
 8004856:	9b04      	ldr	r3, [sp, #16]
 8004858:	3301      	adds	r3, #1
 800485a:	9304      	str	r3, [sp, #16]
 800485c:	2331      	movs	r3, #49	@ 0x31
 800485e:	f88a 3000 	strb.w	r3, [sl]
 8004862:	e5b9      	b.n	80043d8 <_dtoa_r+0x698>
 8004864:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004866:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80048c4 <_dtoa_r+0xb84>
 800486a:	b11b      	cbz	r3, 8004874 <_dtoa_r+0xb34>
 800486c:	f10a 0308 	add.w	r3, sl, #8
 8004870:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	4650      	mov	r0, sl
 8004876:	b019      	add	sp, #100	@ 0x64
 8004878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800487c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800487e:	2b01      	cmp	r3, #1
 8004880:	f77f ae37 	ble.w	80044f2 <_dtoa_r+0x7b2>
 8004884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004886:	930a      	str	r3, [sp, #40]	@ 0x28
 8004888:	2001      	movs	r0, #1
 800488a:	e655      	b.n	8004538 <_dtoa_r+0x7f8>
 800488c:	9b00      	ldr	r3, [sp, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f77f aed6 	ble.w	8004640 <_dtoa_r+0x900>
 8004894:	4656      	mov	r6, sl
 8004896:	4621      	mov	r1, r4
 8004898:	4648      	mov	r0, r9
 800489a:	f7ff f9c8 	bl	8003c2e <quorem>
 800489e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80048a2:	f806 8b01 	strb.w	r8, [r6], #1
 80048a6:	9b00      	ldr	r3, [sp, #0]
 80048a8:	eba6 020a 	sub.w	r2, r6, sl
 80048ac:	4293      	cmp	r3, r2
 80048ae:	ddb3      	ble.n	8004818 <_dtoa_r+0xad8>
 80048b0:	4649      	mov	r1, r9
 80048b2:	2300      	movs	r3, #0
 80048b4:	220a      	movs	r2, #10
 80048b6:	4658      	mov	r0, fp
 80048b8:	f000 f968 	bl	8004b8c <__multadd>
 80048bc:	4681      	mov	r9, r0
 80048be:	e7ea      	b.n	8004896 <_dtoa_r+0xb56>
 80048c0:	08005a8a 	.word	0x08005a8a
 80048c4:	08005a0e 	.word	0x08005a0e

080048c8 <_free_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4605      	mov	r5, r0
 80048cc:	2900      	cmp	r1, #0
 80048ce:	d041      	beq.n	8004954 <_free_r+0x8c>
 80048d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d4:	1f0c      	subs	r4, r1, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfb8      	it	lt
 80048da:	18e4      	addlt	r4, r4, r3
 80048dc:	f000 f8e8 	bl	8004ab0 <__malloc_lock>
 80048e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004958 <_free_r+0x90>)
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	b933      	cbnz	r3, 80048f4 <_free_r+0x2c>
 80048e6:	6063      	str	r3, [r4, #4]
 80048e8:	6014      	str	r4, [r2, #0]
 80048ea:	4628      	mov	r0, r5
 80048ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f0:	f000 b8e4 	b.w	8004abc <__malloc_unlock>
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d908      	bls.n	800490a <_free_r+0x42>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	1821      	adds	r1, r4, r0
 80048fc:	428b      	cmp	r3, r1
 80048fe:	bf01      	itttt	eq
 8004900:	6819      	ldreq	r1, [r3, #0]
 8004902:	685b      	ldreq	r3, [r3, #4]
 8004904:	1809      	addeq	r1, r1, r0
 8004906:	6021      	streq	r1, [r4, #0]
 8004908:	e7ed      	b.n	80048e6 <_free_r+0x1e>
 800490a:	461a      	mov	r2, r3
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	b10b      	cbz	r3, 8004914 <_free_r+0x4c>
 8004910:	42a3      	cmp	r3, r4
 8004912:	d9fa      	bls.n	800490a <_free_r+0x42>
 8004914:	6811      	ldr	r1, [r2, #0]
 8004916:	1850      	adds	r0, r2, r1
 8004918:	42a0      	cmp	r0, r4
 800491a:	d10b      	bne.n	8004934 <_free_r+0x6c>
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	4401      	add	r1, r0
 8004920:	1850      	adds	r0, r2, r1
 8004922:	4283      	cmp	r3, r0
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	d1e0      	bne.n	80048ea <_free_r+0x22>
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	6053      	str	r3, [r2, #4]
 800492e:	4408      	add	r0, r1
 8004930:	6010      	str	r0, [r2, #0]
 8004932:	e7da      	b.n	80048ea <_free_r+0x22>
 8004934:	d902      	bls.n	800493c <_free_r+0x74>
 8004936:	230c      	movs	r3, #12
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	e7d6      	b.n	80048ea <_free_r+0x22>
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	1821      	adds	r1, r4, r0
 8004940:	428b      	cmp	r3, r1
 8004942:	bf04      	itt	eq
 8004944:	6819      	ldreq	r1, [r3, #0]
 8004946:	685b      	ldreq	r3, [r3, #4]
 8004948:	6063      	str	r3, [r4, #4]
 800494a:	bf04      	itt	eq
 800494c:	1809      	addeq	r1, r1, r0
 800494e:	6021      	streq	r1, [r4, #0]
 8004950:	6054      	str	r4, [r2, #4]
 8004952:	e7ca      	b.n	80048ea <_free_r+0x22>
 8004954:	bd38      	pop	{r3, r4, r5, pc}
 8004956:	bf00      	nop
 8004958:	200003e4 	.word	0x200003e4

0800495c <malloc>:
 800495c:	4b02      	ldr	r3, [pc, #8]	@ (8004968 <malloc+0xc>)
 800495e:	4601      	mov	r1, r0
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	f000 b825 	b.w	80049b0 <_malloc_r>
 8004966:	bf00      	nop
 8004968:	20000018 	.word	0x20000018

0800496c <sbrk_aligned>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4e0f      	ldr	r6, [pc, #60]	@ (80049ac <sbrk_aligned+0x40>)
 8004970:	460c      	mov	r4, r1
 8004972:	6831      	ldr	r1, [r6, #0]
 8004974:	4605      	mov	r5, r0
 8004976:	b911      	cbnz	r1, 800497e <sbrk_aligned+0x12>
 8004978:	f000 fece 	bl	8005718 <_sbrk_r>
 800497c:	6030      	str	r0, [r6, #0]
 800497e:	4621      	mov	r1, r4
 8004980:	4628      	mov	r0, r5
 8004982:	f000 fec9 	bl	8005718 <_sbrk_r>
 8004986:	1c43      	adds	r3, r0, #1
 8004988:	d103      	bne.n	8004992 <sbrk_aligned+0x26>
 800498a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800498e:	4620      	mov	r0, r4
 8004990:	bd70      	pop	{r4, r5, r6, pc}
 8004992:	1cc4      	adds	r4, r0, #3
 8004994:	f024 0403 	bic.w	r4, r4, #3
 8004998:	42a0      	cmp	r0, r4
 800499a:	d0f8      	beq.n	800498e <sbrk_aligned+0x22>
 800499c:	1a21      	subs	r1, r4, r0
 800499e:	4628      	mov	r0, r5
 80049a0:	f000 feba 	bl	8005718 <_sbrk_r>
 80049a4:	3001      	adds	r0, #1
 80049a6:	d1f2      	bne.n	800498e <sbrk_aligned+0x22>
 80049a8:	e7ef      	b.n	800498a <sbrk_aligned+0x1e>
 80049aa:	bf00      	nop
 80049ac:	200003e0 	.word	0x200003e0

080049b0 <_malloc_r>:
 80049b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b4:	1ccd      	adds	r5, r1, #3
 80049b6:	f025 0503 	bic.w	r5, r5, #3
 80049ba:	3508      	adds	r5, #8
 80049bc:	2d0c      	cmp	r5, #12
 80049be:	bf38      	it	cc
 80049c0:	250c      	movcc	r5, #12
 80049c2:	2d00      	cmp	r5, #0
 80049c4:	4606      	mov	r6, r0
 80049c6:	db01      	blt.n	80049cc <_malloc_r+0x1c>
 80049c8:	42a9      	cmp	r1, r5
 80049ca:	d904      	bls.n	80049d6 <_malloc_r+0x26>
 80049cc:	230c      	movs	r3, #12
 80049ce:	6033      	str	r3, [r6, #0]
 80049d0:	2000      	movs	r0, #0
 80049d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004aac <_malloc_r+0xfc>
 80049da:	f000 f869 	bl	8004ab0 <__malloc_lock>
 80049de:	f8d8 3000 	ldr.w	r3, [r8]
 80049e2:	461c      	mov	r4, r3
 80049e4:	bb44      	cbnz	r4, 8004a38 <_malloc_r+0x88>
 80049e6:	4629      	mov	r1, r5
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7ff ffbf 	bl	800496c <sbrk_aligned>
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	4604      	mov	r4, r0
 80049f2:	d158      	bne.n	8004aa6 <_malloc_r+0xf6>
 80049f4:	f8d8 4000 	ldr.w	r4, [r8]
 80049f8:	4627      	mov	r7, r4
 80049fa:	2f00      	cmp	r7, #0
 80049fc:	d143      	bne.n	8004a86 <_malloc_r+0xd6>
 80049fe:	2c00      	cmp	r4, #0
 8004a00:	d04b      	beq.n	8004a9a <_malloc_r+0xea>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	4639      	mov	r1, r7
 8004a06:	4630      	mov	r0, r6
 8004a08:	eb04 0903 	add.w	r9, r4, r3
 8004a0c:	f000 fe84 	bl	8005718 <_sbrk_r>
 8004a10:	4581      	cmp	r9, r0
 8004a12:	d142      	bne.n	8004a9a <_malloc_r+0xea>
 8004a14:	6821      	ldr	r1, [r4, #0]
 8004a16:	1a6d      	subs	r5, r5, r1
 8004a18:	4629      	mov	r1, r5
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f7ff ffa6 	bl	800496c <sbrk_aligned>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d03a      	beq.n	8004a9a <_malloc_r+0xea>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	442b      	add	r3, r5
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	bb62      	cbnz	r2, 8004a8c <_malloc_r+0xdc>
 8004a32:	f8c8 7000 	str.w	r7, [r8]
 8004a36:	e00f      	b.n	8004a58 <_malloc_r+0xa8>
 8004a38:	6822      	ldr	r2, [r4, #0]
 8004a3a:	1b52      	subs	r2, r2, r5
 8004a3c:	d420      	bmi.n	8004a80 <_malloc_r+0xd0>
 8004a3e:	2a0b      	cmp	r2, #11
 8004a40:	d917      	bls.n	8004a72 <_malloc_r+0xc2>
 8004a42:	1961      	adds	r1, r4, r5
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	6025      	str	r5, [r4, #0]
 8004a48:	bf18      	it	ne
 8004a4a:	6059      	strne	r1, [r3, #4]
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	bf08      	it	eq
 8004a50:	f8c8 1000 	streq.w	r1, [r8]
 8004a54:	5162      	str	r2, [r4, r5]
 8004a56:	604b      	str	r3, [r1, #4]
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f000 f82f 	bl	8004abc <__malloc_unlock>
 8004a5e:	f104 000b 	add.w	r0, r4, #11
 8004a62:	1d23      	adds	r3, r4, #4
 8004a64:	f020 0007 	bic.w	r0, r0, #7
 8004a68:	1ac2      	subs	r2, r0, r3
 8004a6a:	bf1c      	itt	ne
 8004a6c:	1a1b      	subne	r3, r3, r0
 8004a6e:	50a3      	strne	r3, [r4, r2]
 8004a70:	e7af      	b.n	80049d2 <_malloc_r+0x22>
 8004a72:	6862      	ldr	r2, [r4, #4]
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	bf0c      	ite	eq
 8004a78:	f8c8 2000 	streq.w	r2, [r8]
 8004a7c:	605a      	strne	r2, [r3, #4]
 8004a7e:	e7eb      	b.n	8004a58 <_malloc_r+0xa8>
 8004a80:	4623      	mov	r3, r4
 8004a82:	6864      	ldr	r4, [r4, #4]
 8004a84:	e7ae      	b.n	80049e4 <_malloc_r+0x34>
 8004a86:	463c      	mov	r4, r7
 8004a88:	687f      	ldr	r7, [r7, #4]
 8004a8a:	e7b6      	b.n	80049fa <_malloc_r+0x4a>
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	42a3      	cmp	r3, r4
 8004a92:	d1fb      	bne.n	8004a8c <_malloc_r+0xdc>
 8004a94:	2300      	movs	r3, #0
 8004a96:	6053      	str	r3, [r2, #4]
 8004a98:	e7de      	b.n	8004a58 <_malloc_r+0xa8>
 8004a9a:	230c      	movs	r3, #12
 8004a9c:	6033      	str	r3, [r6, #0]
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f000 f80c 	bl	8004abc <__malloc_unlock>
 8004aa4:	e794      	b.n	80049d0 <_malloc_r+0x20>
 8004aa6:	6005      	str	r5, [r0, #0]
 8004aa8:	e7d6      	b.n	8004a58 <_malloc_r+0xa8>
 8004aaa:	bf00      	nop
 8004aac:	200003e4 	.word	0x200003e4

08004ab0 <__malloc_lock>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	@ (8004ab8 <__malloc_lock+0x8>)
 8004ab2:	f7ff b8ba 	b.w	8003c2a <__retarget_lock_acquire_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	200003dc 	.word	0x200003dc

08004abc <__malloc_unlock>:
 8004abc:	4801      	ldr	r0, [pc, #4]	@ (8004ac4 <__malloc_unlock+0x8>)
 8004abe:	f7ff b8b5 	b.w	8003c2c <__retarget_lock_release_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	200003dc 	.word	0x200003dc

08004ac8 <_Balloc>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	69c6      	ldr	r6, [r0, #28]
 8004acc:	4604      	mov	r4, r0
 8004ace:	460d      	mov	r5, r1
 8004ad0:	b976      	cbnz	r6, 8004af0 <_Balloc+0x28>
 8004ad2:	2010      	movs	r0, #16
 8004ad4:	f7ff ff42 	bl	800495c <malloc>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	61e0      	str	r0, [r4, #28]
 8004adc:	b920      	cbnz	r0, 8004ae8 <_Balloc+0x20>
 8004ade:	4b18      	ldr	r3, [pc, #96]	@ (8004b40 <_Balloc+0x78>)
 8004ae0:	4818      	ldr	r0, [pc, #96]	@ (8004b44 <_Balloc+0x7c>)
 8004ae2:	216b      	movs	r1, #107	@ 0x6b
 8004ae4:	f000 fe36 	bl	8005754 <__assert_func>
 8004ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004aec:	6006      	str	r6, [r0, #0]
 8004aee:	60c6      	str	r6, [r0, #12]
 8004af0:	69e6      	ldr	r6, [r4, #28]
 8004af2:	68f3      	ldr	r3, [r6, #12]
 8004af4:	b183      	cbz	r3, 8004b18 <_Balloc+0x50>
 8004af6:	69e3      	ldr	r3, [r4, #28]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004afe:	b9b8      	cbnz	r0, 8004b30 <_Balloc+0x68>
 8004b00:	2101      	movs	r1, #1
 8004b02:	fa01 f605 	lsl.w	r6, r1, r5
 8004b06:	1d72      	adds	r2, r6, #5
 8004b08:	0092      	lsls	r2, r2, #2
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f000 fe40 	bl	8005790 <_calloc_r>
 8004b10:	b160      	cbz	r0, 8004b2c <_Balloc+0x64>
 8004b12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b16:	e00e      	b.n	8004b36 <_Balloc+0x6e>
 8004b18:	2221      	movs	r2, #33	@ 0x21
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f000 fe37 	bl	8005790 <_calloc_r>
 8004b22:	69e3      	ldr	r3, [r4, #28]
 8004b24:	60f0      	str	r0, [r6, #12]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e4      	bne.n	8004af6 <_Balloc+0x2e>
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	6802      	ldr	r2, [r0, #0]
 8004b32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b36:	2300      	movs	r3, #0
 8004b38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b3c:	e7f7      	b.n	8004b2e <_Balloc+0x66>
 8004b3e:	bf00      	nop
 8004b40:	08005a1b 	.word	0x08005a1b
 8004b44:	08005a9b 	.word	0x08005a9b

08004b48 <_Bfree>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	69c6      	ldr	r6, [r0, #28]
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	b976      	cbnz	r6, 8004b70 <_Bfree+0x28>
 8004b52:	2010      	movs	r0, #16
 8004b54:	f7ff ff02 	bl	800495c <malloc>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	61e8      	str	r0, [r5, #28]
 8004b5c:	b920      	cbnz	r0, 8004b68 <_Bfree+0x20>
 8004b5e:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <_Bfree+0x3c>)
 8004b60:	4809      	ldr	r0, [pc, #36]	@ (8004b88 <_Bfree+0x40>)
 8004b62:	218f      	movs	r1, #143	@ 0x8f
 8004b64:	f000 fdf6 	bl	8005754 <__assert_func>
 8004b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b6c:	6006      	str	r6, [r0, #0]
 8004b6e:	60c6      	str	r6, [r0, #12]
 8004b70:	b13c      	cbz	r4, 8004b82 <_Bfree+0x3a>
 8004b72:	69eb      	ldr	r3, [r5, #28]
 8004b74:	6862      	ldr	r2, [r4, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b7c:	6021      	str	r1, [r4, #0]
 8004b7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	08005a1b 	.word	0x08005a1b
 8004b88:	08005a9b 	.word	0x08005a9b

08004b8c <__multadd>:
 8004b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b90:	690d      	ldr	r5, [r1, #16]
 8004b92:	4607      	mov	r7, r0
 8004b94:	460c      	mov	r4, r1
 8004b96:	461e      	mov	r6, r3
 8004b98:	f101 0c14 	add.w	ip, r1, #20
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	f8dc 3000 	ldr.w	r3, [ip]
 8004ba2:	b299      	uxth	r1, r3
 8004ba4:	fb02 6101 	mla	r1, r2, r1, r6
 8004ba8:	0c1e      	lsrs	r6, r3, #16
 8004baa:	0c0b      	lsrs	r3, r1, #16
 8004bac:	fb02 3306 	mla	r3, r2, r6, r3
 8004bb0:	b289      	uxth	r1, r1
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004bb8:	4285      	cmp	r5, r0
 8004bba:	f84c 1b04 	str.w	r1, [ip], #4
 8004bbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004bc2:	dcec      	bgt.n	8004b9e <__multadd+0x12>
 8004bc4:	b30e      	cbz	r6, 8004c0a <__multadd+0x7e>
 8004bc6:	68a3      	ldr	r3, [r4, #8]
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	dc19      	bgt.n	8004c00 <__multadd+0x74>
 8004bcc:	6861      	ldr	r1, [r4, #4]
 8004bce:	4638      	mov	r0, r7
 8004bd0:	3101      	adds	r1, #1
 8004bd2:	f7ff ff79 	bl	8004ac8 <_Balloc>
 8004bd6:	4680      	mov	r8, r0
 8004bd8:	b928      	cbnz	r0, 8004be6 <__multadd+0x5a>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <__multadd+0x84>)
 8004bde:	480d      	ldr	r0, [pc, #52]	@ (8004c14 <__multadd+0x88>)
 8004be0:	21ba      	movs	r1, #186	@ 0xba
 8004be2:	f000 fdb7 	bl	8005754 <__assert_func>
 8004be6:	6922      	ldr	r2, [r4, #16]
 8004be8:	3202      	adds	r2, #2
 8004bea:	f104 010c 	add.w	r1, r4, #12
 8004bee:	0092      	lsls	r2, r2, #2
 8004bf0:	300c      	adds	r0, #12
 8004bf2:	f000 fda1 	bl	8005738 <memcpy>
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	f7ff ffa5 	bl	8004b48 <_Bfree>
 8004bfe:	4644      	mov	r4, r8
 8004c00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c04:	3501      	adds	r5, #1
 8004c06:	615e      	str	r6, [r3, #20]
 8004c08:	6125      	str	r5, [r4, #16]
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c10:	08005a8a 	.word	0x08005a8a
 8004c14:	08005a9b 	.word	0x08005a9b

08004c18 <__hi0bits>:
 8004c18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	bf36      	itet	cc
 8004c20:	0403      	lslcc	r3, r0, #16
 8004c22:	2000      	movcs	r0, #0
 8004c24:	2010      	movcc	r0, #16
 8004c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c2a:	bf3c      	itt	cc
 8004c2c:	021b      	lslcc	r3, r3, #8
 8004c2e:	3008      	addcc	r0, #8
 8004c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c34:	bf3c      	itt	cc
 8004c36:	011b      	lslcc	r3, r3, #4
 8004c38:	3004      	addcc	r0, #4
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3e:	bf3c      	itt	cc
 8004c40:	009b      	lslcc	r3, r3, #2
 8004c42:	3002      	addcc	r0, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	db05      	blt.n	8004c54 <__hi0bits+0x3c>
 8004c48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004c4c:	f100 0001 	add.w	r0, r0, #1
 8004c50:	bf08      	it	eq
 8004c52:	2020      	moveq	r0, #32
 8004c54:	4770      	bx	lr

08004c56 <__lo0bits>:
 8004c56:	6803      	ldr	r3, [r0, #0]
 8004c58:	4602      	mov	r2, r0
 8004c5a:	f013 0007 	ands.w	r0, r3, #7
 8004c5e:	d00b      	beq.n	8004c78 <__lo0bits+0x22>
 8004c60:	07d9      	lsls	r1, r3, #31
 8004c62:	d421      	bmi.n	8004ca8 <__lo0bits+0x52>
 8004c64:	0798      	lsls	r0, r3, #30
 8004c66:	bf49      	itett	mi
 8004c68:	085b      	lsrmi	r3, r3, #1
 8004c6a:	089b      	lsrpl	r3, r3, #2
 8004c6c:	2001      	movmi	r0, #1
 8004c6e:	6013      	strmi	r3, [r2, #0]
 8004c70:	bf5c      	itt	pl
 8004c72:	6013      	strpl	r3, [r2, #0]
 8004c74:	2002      	movpl	r0, #2
 8004c76:	4770      	bx	lr
 8004c78:	b299      	uxth	r1, r3
 8004c7a:	b909      	cbnz	r1, 8004c80 <__lo0bits+0x2a>
 8004c7c:	0c1b      	lsrs	r3, r3, #16
 8004c7e:	2010      	movs	r0, #16
 8004c80:	b2d9      	uxtb	r1, r3
 8004c82:	b909      	cbnz	r1, 8004c88 <__lo0bits+0x32>
 8004c84:	3008      	adds	r0, #8
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	0719      	lsls	r1, r3, #28
 8004c8a:	bf04      	itt	eq
 8004c8c:	091b      	lsreq	r3, r3, #4
 8004c8e:	3004      	addeq	r0, #4
 8004c90:	0799      	lsls	r1, r3, #30
 8004c92:	bf04      	itt	eq
 8004c94:	089b      	lsreq	r3, r3, #2
 8004c96:	3002      	addeq	r0, #2
 8004c98:	07d9      	lsls	r1, r3, #31
 8004c9a:	d403      	bmi.n	8004ca4 <__lo0bits+0x4e>
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	f100 0001 	add.w	r0, r0, #1
 8004ca2:	d003      	beq.n	8004cac <__lo0bits+0x56>
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4770      	bx	lr
 8004ca8:	2000      	movs	r0, #0
 8004caa:	4770      	bx	lr
 8004cac:	2020      	movs	r0, #32
 8004cae:	4770      	bx	lr

08004cb0 <__i2b>:
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	f7ff ff07 	bl	8004ac8 <_Balloc>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	b928      	cbnz	r0, 8004cca <__i2b+0x1a>
 8004cbe:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <__i2b+0x24>)
 8004cc0:	4805      	ldr	r0, [pc, #20]	@ (8004cd8 <__i2b+0x28>)
 8004cc2:	f240 1145 	movw	r1, #325	@ 0x145
 8004cc6:	f000 fd45 	bl	8005754 <__assert_func>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	6144      	str	r4, [r0, #20]
 8004cce:	6103      	str	r3, [r0, #16]
 8004cd0:	bd10      	pop	{r4, pc}
 8004cd2:	bf00      	nop
 8004cd4:	08005a8a 	.word	0x08005a8a
 8004cd8:	08005a9b 	.word	0x08005a9b

08004cdc <__multiply>:
 8004cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	690a      	ldr	r2, [r1, #16]
 8004ce4:	6923      	ldr	r3, [r4, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	bfa8      	it	ge
 8004cea:	4623      	movge	r3, r4
 8004cec:	460f      	mov	r7, r1
 8004cee:	bfa4      	itt	ge
 8004cf0:	460c      	movge	r4, r1
 8004cf2:	461f      	movge	r7, r3
 8004cf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004cf8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004cfc:	68a3      	ldr	r3, [r4, #8]
 8004cfe:	6861      	ldr	r1, [r4, #4]
 8004d00:	eb0a 0609 	add.w	r6, sl, r9
 8004d04:	42b3      	cmp	r3, r6
 8004d06:	b085      	sub	sp, #20
 8004d08:	bfb8      	it	lt
 8004d0a:	3101      	addlt	r1, #1
 8004d0c:	f7ff fedc 	bl	8004ac8 <_Balloc>
 8004d10:	b930      	cbnz	r0, 8004d20 <__multiply+0x44>
 8004d12:	4602      	mov	r2, r0
 8004d14:	4b44      	ldr	r3, [pc, #272]	@ (8004e28 <__multiply+0x14c>)
 8004d16:	4845      	ldr	r0, [pc, #276]	@ (8004e2c <__multiply+0x150>)
 8004d18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004d1c:	f000 fd1a 	bl	8005754 <__assert_func>
 8004d20:	f100 0514 	add.w	r5, r0, #20
 8004d24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004d28:	462b      	mov	r3, r5
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4543      	cmp	r3, r8
 8004d2e:	d321      	bcc.n	8004d74 <__multiply+0x98>
 8004d30:	f107 0114 	add.w	r1, r7, #20
 8004d34:	f104 0214 	add.w	r2, r4, #20
 8004d38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004d3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004d40:	9302      	str	r3, [sp, #8]
 8004d42:	1b13      	subs	r3, r2, r4
 8004d44:	3b15      	subs	r3, #21
 8004d46:	f023 0303 	bic.w	r3, r3, #3
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	f104 0715 	add.w	r7, r4, #21
 8004d50:	42ba      	cmp	r2, r7
 8004d52:	bf38      	it	cc
 8004d54:	2304      	movcc	r3, #4
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	9b02      	ldr	r3, [sp, #8]
 8004d5a:	9103      	str	r1, [sp, #12]
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	d80c      	bhi.n	8004d7a <__multiply+0x9e>
 8004d60:	2e00      	cmp	r6, #0
 8004d62:	dd03      	ble.n	8004d6c <__multiply+0x90>
 8004d64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d05b      	beq.n	8004e24 <__multiply+0x148>
 8004d6c:	6106      	str	r6, [r0, #16]
 8004d6e:	b005      	add	sp, #20
 8004d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d74:	f843 2b04 	str.w	r2, [r3], #4
 8004d78:	e7d8      	b.n	8004d2c <__multiply+0x50>
 8004d7a:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d7e:	f1ba 0f00 	cmp.w	sl, #0
 8004d82:	d024      	beq.n	8004dce <__multiply+0xf2>
 8004d84:	f104 0e14 	add.w	lr, r4, #20
 8004d88:	46a9      	mov	r9, r5
 8004d8a:	f04f 0c00 	mov.w	ip, #0
 8004d8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004d92:	f8d9 3000 	ldr.w	r3, [r9]
 8004d96:	fa1f fb87 	uxth.w	fp, r7
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004da0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004da4:	f8d9 7000 	ldr.w	r7, [r9]
 8004da8:	4463      	add	r3, ip
 8004daa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004dae:	fb0a c70b 	mla	r7, sl, fp, ip
 8004db2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004dbc:	4572      	cmp	r2, lr
 8004dbe:	f849 3b04 	str.w	r3, [r9], #4
 8004dc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004dc6:	d8e2      	bhi.n	8004d8e <__multiply+0xb2>
 8004dc8:	9b01      	ldr	r3, [sp, #4]
 8004dca:	f845 c003 	str.w	ip, [r5, r3]
 8004dce:	9b03      	ldr	r3, [sp, #12]
 8004dd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004dd4:	3104      	adds	r1, #4
 8004dd6:	f1b9 0f00 	cmp.w	r9, #0
 8004dda:	d021      	beq.n	8004e20 <__multiply+0x144>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	f104 0c14 	add.w	ip, r4, #20
 8004de2:	46ae      	mov	lr, r5
 8004de4:	f04f 0a00 	mov.w	sl, #0
 8004de8:	f8bc b000 	ldrh.w	fp, [ip]
 8004dec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004df0:	fb09 770b 	mla	r7, r9, fp, r7
 8004df4:	4457      	add	r7, sl
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004dfc:	f84e 3b04 	str.w	r3, [lr], #4
 8004e00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e08:	f8be 3000 	ldrh.w	r3, [lr]
 8004e0c:	fb09 330a 	mla	r3, r9, sl, r3
 8004e10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004e14:	4562      	cmp	r2, ip
 8004e16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e1a:	d8e5      	bhi.n	8004de8 <__multiply+0x10c>
 8004e1c:	9f01      	ldr	r7, [sp, #4]
 8004e1e:	51eb      	str	r3, [r5, r7]
 8004e20:	3504      	adds	r5, #4
 8004e22:	e799      	b.n	8004d58 <__multiply+0x7c>
 8004e24:	3e01      	subs	r6, #1
 8004e26:	e79b      	b.n	8004d60 <__multiply+0x84>
 8004e28:	08005a8a 	.word	0x08005a8a
 8004e2c:	08005a9b 	.word	0x08005a9b

08004e30 <__pow5mult>:
 8004e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e34:	4615      	mov	r5, r2
 8004e36:	f012 0203 	ands.w	r2, r2, #3
 8004e3a:	4607      	mov	r7, r0
 8004e3c:	460e      	mov	r6, r1
 8004e3e:	d007      	beq.n	8004e50 <__pow5mult+0x20>
 8004e40:	4c25      	ldr	r4, [pc, #148]	@ (8004ed8 <__pow5mult+0xa8>)
 8004e42:	3a01      	subs	r2, #1
 8004e44:	2300      	movs	r3, #0
 8004e46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e4a:	f7ff fe9f 	bl	8004b8c <__multadd>
 8004e4e:	4606      	mov	r6, r0
 8004e50:	10ad      	asrs	r5, r5, #2
 8004e52:	d03d      	beq.n	8004ed0 <__pow5mult+0xa0>
 8004e54:	69fc      	ldr	r4, [r7, #28]
 8004e56:	b97c      	cbnz	r4, 8004e78 <__pow5mult+0x48>
 8004e58:	2010      	movs	r0, #16
 8004e5a:	f7ff fd7f 	bl	800495c <malloc>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	61f8      	str	r0, [r7, #28]
 8004e62:	b928      	cbnz	r0, 8004e70 <__pow5mult+0x40>
 8004e64:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <__pow5mult+0xac>)
 8004e66:	481e      	ldr	r0, [pc, #120]	@ (8004ee0 <__pow5mult+0xb0>)
 8004e68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004e6c:	f000 fc72 	bl	8005754 <__assert_func>
 8004e70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e74:	6004      	str	r4, [r0, #0]
 8004e76:	60c4      	str	r4, [r0, #12]
 8004e78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e80:	b94c      	cbnz	r4, 8004e96 <__pow5mult+0x66>
 8004e82:	f240 2171 	movw	r1, #625	@ 0x271
 8004e86:	4638      	mov	r0, r7
 8004e88:	f7ff ff12 	bl	8004cb0 <__i2b>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e92:	4604      	mov	r4, r0
 8004e94:	6003      	str	r3, [r0, #0]
 8004e96:	f04f 0900 	mov.w	r9, #0
 8004e9a:	07eb      	lsls	r3, r5, #31
 8004e9c:	d50a      	bpl.n	8004eb4 <__pow5mult+0x84>
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	f7ff ff1a 	bl	8004cdc <__multiply>
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	4680      	mov	r8, r0
 8004eac:	4638      	mov	r0, r7
 8004eae:	f7ff fe4b 	bl	8004b48 <_Bfree>
 8004eb2:	4646      	mov	r6, r8
 8004eb4:	106d      	asrs	r5, r5, #1
 8004eb6:	d00b      	beq.n	8004ed0 <__pow5mult+0xa0>
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	b938      	cbnz	r0, 8004ecc <__pow5mult+0x9c>
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f7ff ff0b 	bl	8004cdc <__multiply>
 8004ec6:	6020      	str	r0, [r4, #0]
 8004ec8:	f8c0 9000 	str.w	r9, [r0]
 8004ecc:	4604      	mov	r4, r0
 8004ece:	e7e4      	b.n	8004e9a <__pow5mult+0x6a>
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed6:	bf00      	nop
 8004ed8:	08005af4 	.word	0x08005af4
 8004edc:	08005a1b 	.word	0x08005a1b
 8004ee0:	08005a9b 	.word	0x08005a9b

08004ee4 <__lshift>:
 8004ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	460c      	mov	r4, r1
 8004eea:	6849      	ldr	r1, [r1, #4]
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ef2:	68a3      	ldr	r3, [r4, #8]
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	4691      	mov	r9, r2
 8004ef8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004efc:	f108 0601 	add.w	r6, r8, #1
 8004f00:	42b3      	cmp	r3, r6
 8004f02:	db0b      	blt.n	8004f1c <__lshift+0x38>
 8004f04:	4638      	mov	r0, r7
 8004f06:	f7ff fddf 	bl	8004ac8 <_Balloc>
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	b948      	cbnz	r0, 8004f22 <__lshift+0x3e>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	4b28      	ldr	r3, [pc, #160]	@ (8004fb4 <__lshift+0xd0>)
 8004f12:	4829      	ldr	r0, [pc, #164]	@ (8004fb8 <__lshift+0xd4>)
 8004f14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004f18:	f000 fc1c 	bl	8005754 <__assert_func>
 8004f1c:	3101      	adds	r1, #1
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	e7ee      	b.n	8004f00 <__lshift+0x1c>
 8004f22:	2300      	movs	r3, #0
 8004f24:	f100 0114 	add.w	r1, r0, #20
 8004f28:	f100 0210 	add.w	r2, r0, #16
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	4553      	cmp	r3, sl
 8004f30:	db33      	blt.n	8004f9a <__lshift+0xb6>
 8004f32:	6920      	ldr	r0, [r4, #16]
 8004f34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f38:	f104 0314 	add.w	r3, r4, #20
 8004f3c:	f019 091f 	ands.w	r9, r9, #31
 8004f40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f48:	d02b      	beq.n	8004fa2 <__lshift+0xbe>
 8004f4a:	f1c9 0e20 	rsb	lr, r9, #32
 8004f4e:	468a      	mov	sl, r1
 8004f50:	2200      	movs	r2, #0
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	fa00 f009 	lsl.w	r0, r0, r9
 8004f58:	4310      	orrs	r0, r2
 8004f5a:	f84a 0b04 	str.w	r0, [sl], #4
 8004f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f62:	459c      	cmp	ip, r3
 8004f64:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f68:	d8f3      	bhi.n	8004f52 <__lshift+0x6e>
 8004f6a:	ebac 0304 	sub.w	r3, ip, r4
 8004f6e:	3b15      	subs	r3, #21
 8004f70:	f023 0303 	bic.w	r3, r3, #3
 8004f74:	3304      	adds	r3, #4
 8004f76:	f104 0015 	add.w	r0, r4, #21
 8004f7a:	4584      	cmp	ip, r0
 8004f7c:	bf38      	it	cc
 8004f7e:	2304      	movcc	r3, #4
 8004f80:	50ca      	str	r2, [r1, r3]
 8004f82:	b10a      	cbz	r2, 8004f88 <__lshift+0xa4>
 8004f84:	f108 0602 	add.w	r6, r8, #2
 8004f88:	3e01      	subs	r6, #1
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	612e      	str	r6, [r5, #16]
 8004f8e:	4621      	mov	r1, r4
 8004f90:	f7ff fdda 	bl	8004b48 <_Bfree>
 8004f94:	4628      	mov	r0, r5
 8004f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	e7c5      	b.n	8004f2e <__lshift+0x4a>
 8004fa2:	3904      	subs	r1, #4
 8004fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa8:	f841 2f04 	str.w	r2, [r1, #4]!
 8004fac:	459c      	cmp	ip, r3
 8004fae:	d8f9      	bhi.n	8004fa4 <__lshift+0xc0>
 8004fb0:	e7ea      	b.n	8004f88 <__lshift+0xa4>
 8004fb2:	bf00      	nop
 8004fb4:	08005a8a 	.word	0x08005a8a
 8004fb8:	08005a9b 	.word	0x08005a9b

08004fbc <__mcmp>:
 8004fbc:	690a      	ldr	r2, [r1, #16]
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	6900      	ldr	r0, [r0, #16]
 8004fc2:	1a80      	subs	r0, r0, r2
 8004fc4:	b530      	push	{r4, r5, lr}
 8004fc6:	d10e      	bne.n	8004fe6 <__mcmp+0x2a>
 8004fc8:	3314      	adds	r3, #20
 8004fca:	3114      	adds	r1, #20
 8004fcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004fd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004fd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004fd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004fdc:	4295      	cmp	r5, r2
 8004fde:	d003      	beq.n	8004fe8 <__mcmp+0x2c>
 8004fe0:	d205      	bcs.n	8004fee <__mcmp+0x32>
 8004fe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fe6:	bd30      	pop	{r4, r5, pc}
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d3f3      	bcc.n	8004fd4 <__mcmp+0x18>
 8004fec:	e7fb      	b.n	8004fe6 <__mcmp+0x2a>
 8004fee:	2001      	movs	r0, #1
 8004ff0:	e7f9      	b.n	8004fe6 <__mcmp+0x2a>
	...

08004ff4 <__mdiff>:
 8004ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	4689      	mov	r9, r1
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4648      	mov	r0, r9
 8005000:	4614      	mov	r4, r2
 8005002:	f7ff ffdb 	bl	8004fbc <__mcmp>
 8005006:	1e05      	subs	r5, r0, #0
 8005008:	d112      	bne.n	8005030 <__mdiff+0x3c>
 800500a:	4629      	mov	r1, r5
 800500c:	4630      	mov	r0, r6
 800500e:	f7ff fd5b 	bl	8004ac8 <_Balloc>
 8005012:	4602      	mov	r2, r0
 8005014:	b928      	cbnz	r0, 8005022 <__mdiff+0x2e>
 8005016:	4b3f      	ldr	r3, [pc, #252]	@ (8005114 <__mdiff+0x120>)
 8005018:	f240 2137 	movw	r1, #567	@ 0x237
 800501c:	483e      	ldr	r0, [pc, #248]	@ (8005118 <__mdiff+0x124>)
 800501e:	f000 fb99 	bl	8005754 <__assert_func>
 8005022:	2301      	movs	r3, #1
 8005024:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005028:	4610      	mov	r0, r2
 800502a:	b003      	add	sp, #12
 800502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005030:	bfbc      	itt	lt
 8005032:	464b      	movlt	r3, r9
 8005034:	46a1      	movlt	r9, r4
 8005036:	4630      	mov	r0, r6
 8005038:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800503c:	bfba      	itte	lt
 800503e:	461c      	movlt	r4, r3
 8005040:	2501      	movlt	r5, #1
 8005042:	2500      	movge	r5, #0
 8005044:	f7ff fd40 	bl	8004ac8 <_Balloc>
 8005048:	4602      	mov	r2, r0
 800504a:	b918      	cbnz	r0, 8005054 <__mdiff+0x60>
 800504c:	4b31      	ldr	r3, [pc, #196]	@ (8005114 <__mdiff+0x120>)
 800504e:	f240 2145 	movw	r1, #581	@ 0x245
 8005052:	e7e3      	b.n	800501c <__mdiff+0x28>
 8005054:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005058:	6926      	ldr	r6, [r4, #16]
 800505a:	60c5      	str	r5, [r0, #12]
 800505c:	f109 0310 	add.w	r3, r9, #16
 8005060:	f109 0514 	add.w	r5, r9, #20
 8005064:	f104 0e14 	add.w	lr, r4, #20
 8005068:	f100 0b14 	add.w	fp, r0, #20
 800506c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005070:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	46d9      	mov	r9, fp
 8005078:	f04f 0c00 	mov.w	ip, #0
 800507c:	9b01      	ldr	r3, [sp, #4]
 800507e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005082:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	fa1f f38a 	uxth.w	r3, sl
 800508c:	4619      	mov	r1, r3
 800508e:	b283      	uxth	r3, r0
 8005090:	1acb      	subs	r3, r1, r3
 8005092:	0c00      	lsrs	r0, r0, #16
 8005094:	4463      	add	r3, ip
 8005096:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800509a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800509e:	b29b      	uxth	r3, r3
 80050a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80050a4:	4576      	cmp	r6, lr
 80050a6:	f849 3b04 	str.w	r3, [r9], #4
 80050aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80050ae:	d8e5      	bhi.n	800507c <__mdiff+0x88>
 80050b0:	1b33      	subs	r3, r6, r4
 80050b2:	3b15      	subs	r3, #21
 80050b4:	f023 0303 	bic.w	r3, r3, #3
 80050b8:	3415      	adds	r4, #21
 80050ba:	3304      	adds	r3, #4
 80050bc:	42a6      	cmp	r6, r4
 80050be:	bf38      	it	cc
 80050c0:	2304      	movcc	r3, #4
 80050c2:	441d      	add	r5, r3
 80050c4:	445b      	add	r3, fp
 80050c6:	461e      	mov	r6, r3
 80050c8:	462c      	mov	r4, r5
 80050ca:	4544      	cmp	r4, r8
 80050cc:	d30e      	bcc.n	80050ec <__mdiff+0xf8>
 80050ce:	f108 0103 	add.w	r1, r8, #3
 80050d2:	1b49      	subs	r1, r1, r5
 80050d4:	f021 0103 	bic.w	r1, r1, #3
 80050d8:	3d03      	subs	r5, #3
 80050da:	45a8      	cmp	r8, r5
 80050dc:	bf38      	it	cc
 80050de:	2100      	movcc	r1, #0
 80050e0:	440b      	add	r3, r1
 80050e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80050e6:	b191      	cbz	r1, 800510e <__mdiff+0x11a>
 80050e8:	6117      	str	r7, [r2, #16]
 80050ea:	e79d      	b.n	8005028 <__mdiff+0x34>
 80050ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80050f0:	46e6      	mov	lr, ip
 80050f2:	0c08      	lsrs	r0, r1, #16
 80050f4:	fa1c fc81 	uxtah	ip, ip, r1
 80050f8:	4471      	add	r1, lr
 80050fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80050fe:	b289      	uxth	r1, r1
 8005100:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005104:	f846 1b04 	str.w	r1, [r6], #4
 8005108:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800510c:	e7dd      	b.n	80050ca <__mdiff+0xd6>
 800510e:	3f01      	subs	r7, #1
 8005110:	e7e7      	b.n	80050e2 <__mdiff+0xee>
 8005112:	bf00      	nop
 8005114:	08005a8a 	.word	0x08005a8a
 8005118:	08005a9b 	.word	0x08005a9b

0800511c <__d2b>:
 800511c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005120:	460f      	mov	r7, r1
 8005122:	2101      	movs	r1, #1
 8005124:	ec59 8b10 	vmov	r8, r9, d0
 8005128:	4616      	mov	r6, r2
 800512a:	f7ff fccd 	bl	8004ac8 <_Balloc>
 800512e:	4604      	mov	r4, r0
 8005130:	b930      	cbnz	r0, 8005140 <__d2b+0x24>
 8005132:	4602      	mov	r2, r0
 8005134:	4b23      	ldr	r3, [pc, #140]	@ (80051c4 <__d2b+0xa8>)
 8005136:	4824      	ldr	r0, [pc, #144]	@ (80051c8 <__d2b+0xac>)
 8005138:	f240 310f 	movw	r1, #783	@ 0x30f
 800513c:	f000 fb0a 	bl	8005754 <__assert_func>
 8005140:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005144:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005148:	b10d      	cbz	r5, 800514e <__d2b+0x32>
 800514a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800514e:	9301      	str	r3, [sp, #4]
 8005150:	f1b8 0300 	subs.w	r3, r8, #0
 8005154:	d023      	beq.n	800519e <__d2b+0x82>
 8005156:	4668      	mov	r0, sp
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	f7ff fd7c 	bl	8004c56 <__lo0bits>
 800515e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005162:	b1d0      	cbz	r0, 800519a <__d2b+0x7e>
 8005164:	f1c0 0320 	rsb	r3, r0, #32
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	430b      	orrs	r3, r1
 800516e:	40c2      	lsrs	r2, r0
 8005170:	6163      	str	r3, [r4, #20]
 8005172:	9201      	str	r2, [sp, #4]
 8005174:	9b01      	ldr	r3, [sp, #4]
 8005176:	61a3      	str	r3, [r4, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf0c      	ite	eq
 800517c:	2201      	moveq	r2, #1
 800517e:	2202      	movne	r2, #2
 8005180:	6122      	str	r2, [r4, #16]
 8005182:	b1a5      	cbz	r5, 80051ae <__d2b+0x92>
 8005184:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005188:	4405      	add	r5, r0
 800518a:	603d      	str	r5, [r7, #0]
 800518c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005190:	6030      	str	r0, [r6, #0]
 8005192:	4620      	mov	r0, r4
 8005194:	b003      	add	sp, #12
 8005196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800519a:	6161      	str	r1, [r4, #20]
 800519c:	e7ea      	b.n	8005174 <__d2b+0x58>
 800519e:	a801      	add	r0, sp, #4
 80051a0:	f7ff fd59 	bl	8004c56 <__lo0bits>
 80051a4:	9b01      	ldr	r3, [sp, #4]
 80051a6:	6163      	str	r3, [r4, #20]
 80051a8:	3020      	adds	r0, #32
 80051aa:	2201      	movs	r2, #1
 80051ac:	e7e8      	b.n	8005180 <__d2b+0x64>
 80051ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80051b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80051b6:	6038      	str	r0, [r7, #0]
 80051b8:	6918      	ldr	r0, [r3, #16]
 80051ba:	f7ff fd2d 	bl	8004c18 <__hi0bits>
 80051be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80051c2:	e7e5      	b.n	8005190 <__d2b+0x74>
 80051c4:	08005a8a 	.word	0x08005a8a
 80051c8:	08005a9b 	.word	0x08005a9b

080051cc <__sfputc_r>:
 80051cc:	6893      	ldr	r3, [r2, #8]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	b410      	push	{r4}
 80051d4:	6093      	str	r3, [r2, #8]
 80051d6:	da08      	bge.n	80051ea <__sfputc_r+0x1e>
 80051d8:	6994      	ldr	r4, [r2, #24]
 80051da:	42a3      	cmp	r3, r4
 80051dc:	db01      	blt.n	80051e2 <__sfputc_r+0x16>
 80051de:	290a      	cmp	r1, #10
 80051e0:	d103      	bne.n	80051ea <__sfputc_r+0x1e>
 80051e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051e6:	f7fe bc0e 	b.w	8003a06 <__swbuf_r>
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	1c58      	adds	r0, r3, #1
 80051ee:	6010      	str	r0, [r2, #0]
 80051f0:	7019      	strb	r1, [r3, #0]
 80051f2:	4608      	mov	r0, r1
 80051f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <__sfputs_r>:
 80051fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fc:	4606      	mov	r6, r0
 80051fe:	460f      	mov	r7, r1
 8005200:	4614      	mov	r4, r2
 8005202:	18d5      	adds	r5, r2, r3
 8005204:	42ac      	cmp	r4, r5
 8005206:	d101      	bne.n	800520c <__sfputs_r+0x12>
 8005208:	2000      	movs	r0, #0
 800520a:	e007      	b.n	800521c <__sfputs_r+0x22>
 800520c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005210:	463a      	mov	r2, r7
 8005212:	4630      	mov	r0, r6
 8005214:	f7ff ffda 	bl	80051cc <__sfputc_r>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d1f3      	bne.n	8005204 <__sfputs_r+0xa>
 800521c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005220 <_vfiprintf_r>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	460d      	mov	r5, r1
 8005226:	b09d      	sub	sp, #116	@ 0x74
 8005228:	4614      	mov	r4, r2
 800522a:	4698      	mov	r8, r3
 800522c:	4606      	mov	r6, r0
 800522e:	b118      	cbz	r0, 8005238 <_vfiprintf_r+0x18>
 8005230:	6a03      	ldr	r3, [r0, #32]
 8005232:	b90b      	cbnz	r3, 8005238 <_vfiprintf_r+0x18>
 8005234:	f7fe faf6 	bl	8003824 <__sinit>
 8005238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800523a:	07d9      	lsls	r1, r3, #31
 800523c:	d405      	bmi.n	800524a <_vfiprintf_r+0x2a>
 800523e:	89ab      	ldrh	r3, [r5, #12]
 8005240:	059a      	lsls	r2, r3, #22
 8005242:	d402      	bmi.n	800524a <_vfiprintf_r+0x2a>
 8005244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005246:	f7fe fcf0 	bl	8003c2a <__retarget_lock_acquire_recursive>
 800524a:	89ab      	ldrh	r3, [r5, #12]
 800524c:	071b      	lsls	r3, r3, #28
 800524e:	d501      	bpl.n	8005254 <_vfiprintf_r+0x34>
 8005250:	692b      	ldr	r3, [r5, #16]
 8005252:	b99b      	cbnz	r3, 800527c <_vfiprintf_r+0x5c>
 8005254:	4629      	mov	r1, r5
 8005256:	4630      	mov	r0, r6
 8005258:	f7fe fc14 	bl	8003a84 <__swsetup_r>
 800525c:	b170      	cbz	r0, 800527c <_vfiprintf_r+0x5c>
 800525e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005260:	07dc      	lsls	r4, r3, #31
 8005262:	d504      	bpl.n	800526e <_vfiprintf_r+0x4e>
 8005264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005268:	b01d      	add	sp, #116	@ 0x74
 800526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	0598      	lsls	r0, r3, #22
 8005272:	d4f7      	bmi.n	8005264 <_vfiprintf_r+0x44>
 8005274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005276:	f7fe fcd9 	bl	8003c2c <__retarget_lock_release_recursive>
 800527a:	e7f3      	b.n	8005264 <_vfiprintf_r+0x44>
 800527c:	2300      	movs	r3, #0
 800527e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005280:	2320      	movs	r3, #32
 8005282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005286:	f8cd 800c 	str.w	r8, [sp, #12]
 800528a:	2330      	movs	r3, #48	@ 0x30
 800528c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800543c <_vfiprintf_r+0x21c>
 8005290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005294:	f04f 0901 	mov.w	r9, #1
 8005298:	4623      	mov	r3, r4
 800529a:	469a      	mov	sl, r3
 800529c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052a0:	b10a      	cbz	r2, 80052a6 <_vfiprintf_r+0x86>
 80052a2:	2a25      	cmp	r2, #37	@ 0x25
 80052a4:	d1f9      	bne.n	800529a <_vfiprintf_r+0x7a>
 80052a6:	ebba 0b04 	subs.w	fp, sl, r4
 80052aa:	d00b      	beq.n	80052c4 <_vfiprintf_r+0xa4>
 80052ac:	465b      	mov	r3, fp
 80052ae:	4622      	mov	r2, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7ff ffa1 	bl	80051fa <__sfputs_r>
 80052b8:	3001      	adds	r0, #1
 80052ba:	f000 80a7 	beq.w	800540c <_vfiprintf_r+0x1ec>
 80052be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052c0:	445a      	add	r2, fp
 80052c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80052c4:	f89a 3000 	ldrb.w	r3, [sl]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 809f 	beq.w	800540c <_vfiprintf_r+0x1ec>
 80052ce:	2300      	movs	r3, #0
 80052d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d8:	f10a 0a01 	add.w	sl, sl, #1
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	9307      	str	r3, [sp, #28]
 80052e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80052e6:	4654      	mov	r4, sl
 80052e8:	2205      	movs	r2, #5
 80052ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ee:	4853      	ldr	r0, [pc, #332]	@ (800543c <_vfiprintf_r+0x21c>)
 80052f0:	f7fa ff6e 	bl	80001d0 <memchr>
 80052f4:	9a04      	ldr	r2, [sp, #16]
 80052f6:	b9d8      	cbnz	r0, 8005330 <_vfiprintf_r+0x110>
 80052f8:	06d1      	lsls	r1, r2, #27
 80052fa:	bf44      	itt	mi
 80052fc:	2320      	movmi	r3, #32
 80052fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005302:	0713      	lsls	r3, r2, #28
 8005304:	bf44      	itt	mi
 8005306:	232b      	movmi	r3, #43	@ 0x2b
 8005308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800530c:	f89a 3000 	ldrb.w	r3, [sl]
 8005310:	2b2a      	cmp	r3, #42	@ 0x2a
 8005312:	d015      	beq.n	8005340 <_vfiprintf_r+0x120>
 8005314:	9a07      	ldr	r2, [sp, #28]
 8005316:	4654      	mov	r4, sl
 8005318:	2000      	movs	r0, #0
 800531a:	f04f 0c0a 	mov.w	ip, #10
 800531e:	4621      	mov	r1, r4
 8005320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005324:	3b30      	subs	r3, #48	@ 0x30
 8005326:	2b09      	cmp	r3, #9
 8005328:	d94b      	bls.n	80053c2 <_vfiprintf_r+0x1a2>
 800532a:	b1b0      	cbz	r0, 800535a <_vfiprintf_r+0x13a>
 800532c:	9207      	str	r2, [sp, #28]
 800532e:	e014      	b.n	800535a <_vfiprintf_r+0x13a>
 8005330:	eba0 0308 	sub.w	r3, r0, r8
 8005334:	fa09 f303 	lsl.w	r3, r9, r3
 8005338:	4313      	orrs	r3, r2
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	46a2      	mov	sl, r4
 800533e:	e7d2      	b.n	80052e6 <_vfiprintf_r+0xc6>
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	1d19      	adds	r1, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	9103      	str	r1, [sp, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	bfbb      	ittet	lt
 800534c:	425b      	neglt	r3, r3
 800534e:	f042 0202 	orrlt.w	r2, r2, #2
 8005352:	9307      	strge	r3, [sp, #28]
 8005354:	9307      	strlt	r3, [sp, #28]
 8005356:	bfb8      	it	lt
 8005358:	9204      	strlt	r2, [sp, #16]
 800535a:	7823      	ldrb	r3, [r4, #0]
 800535c:	2b2e      	cmp	r3, #46	@ 0x2e
 800535e:	d10a      	bne.n	8005376 <_vfiprintf_r+0x156>
 8005360:	7863      	ldrb	r3, [r4, #1]
 8005362:	2b2a      	cmp	r3, #42	@ 0x2a
 8005364:	d132      	bne.n	80053cc <_vfiprintf_r+0x1ac>
 8005366:	9b03      	ldr	r3, [sp, #12]
 8005368:	1d1a      	adds	r2, r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	9203      	str	r2, [sp, #12]
 800536e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005372:	3402      	adds	r4, #2
 8005374:	9305      	str	r3, [sp, #20]
 8005376:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800544c <_vfiprintf_r+0x22c>
 800537a:	7821      	ldrb	r1, [r4, #0]
 800537c:	2203      	movs	r2, #3
 800537e:	4650      	mov	r0, sl
 8005380:	f7fa ff26 	bl	80001d0 <memchr>
 8005384:	b138      	cbz	r0, 8005396 <_vfiprintf_r+0x176>
 8005386:	9b04      	ldr	r3, [sp, #16]
 8005388:	eba0 000a 	sub.w	r0, r0, sl
 800538c:	2240      	movs	r2, #64	@ 0x40
 800538e:	4082      	lsls	r2, r0
 8005390:	4313      	orrs	r3, r2
 8005392:	3401      	adds	r4, #1
 8005394:	9304      	str	r3, [sp, #16]
 8005396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800539a:	4829      	ldr	r0, [pc, #164]	@ (8005440 <_vfiprintf_r+0x220>)
 800539c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053a0:	2206      	movs	r2, #6
 80053a2:	f7fa ff15 	bl	80001d0 <memchr>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d03f      	beq.n	800542a <_vfiprintf_r+0x20a>
 80053aa:	4b26      	ldr	r3, [pc, #152]	@ (8005444 <_vfiprintf_r+0x224>)
 80053ac:	bb1b      	cbnz	r3, 80053f6 <_vfiprintf_r+0x1d6>
 80053ae:	9b03      	ldr	r3, [sp, #12]
 80053b0:	3307      	adds	r3, #7
 80053b2:	f023 0307 	bic.w	r3, r3, #7
 80053b6:	3308      	adds	r3, #8
 80053b8:	9303      	str	r3, [sp, #12]
 80053ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053bc:	443b      	add	r3, r7
 80053be:	9309      	str	r3, [sp, #36]	@ 0x24
 80053c0:	e76a      	b.n	8005298 <_vfiprintf_r+0x78>
 80053c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80053c6:	460c      	mov	r4, r1
 80053c8:	2001      	movs	r0, #1
 80053ca:	e7a8      	b.n	800531e <_vfiprintf_r+0xfe>
 80053cc:	2300      	movs	r3, #0
 80053ce:	3401      	adds	r4, #1
 80053d0:	9305      	str	r3, [sp, #20]
 80053d2:	4619      	mov	r1, r3
 80053d4:	f04f 0c0a 	mov.w	ip, #10
 80053d8:	4620      	mov	r0, r4
 80053da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053de:	3a30      	subs	r2, #48	@ 0x30
 80053e0:	2a09      	cmp	r2, #9
 80053e2:	d903      	bls.n	80053ec <_vfiprintf_r+0x1cc>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0c6      	beq.n	8005376 <_vfiprintf_r+0x156>
 80053e8:	9105      	str	r1, [sp, #20]
 80053ea:	e7c4      	b.n	8005376 <_vfiprintf_r+0x156>
 80053ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80053f0:	4604      	mov	r4, r0
 80053f2:	2301      	movs	r3, #1
 80053f4:	e7f0      	b.n	80053d8 <_vfiprintf_r+0x1b8>
 80053f6:	ab03      	add	r3, sp, #12
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	462a      	mov	r2, r5
 80053fc:	4b12      	ldr	r3, [pc, #72]	@ (8005448 <_vfiprintf_r+0x228>)
 80053fe:	a904      	add	r1, sp, #16
 8005400:	4630      	mov	r0, r6
 8005402:	f7fd fdcb 	bl	8002f9c <_printf_float>
 8005406:	4607      	mov	r7, r0
 8005408:	1c78      	adds	r0, r7, #1
 800540a:	d1d6      	bne.n	80053ba <_vfiprintf_r+0x19a>
 800540c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800540e:	07d9      	lsls	r1, r3, #31
 8005410:	d405      	bmi.n	800541e <_vfiprintf_r+0x1fe>
 8005412:	89ab      	ldrh	r3, [r5, #12]
 8005414:	059a      	lsls	r2, r3, #22
 8005416:	d402      	bmi.n	800541e <_vfiprintf_r+0x1fe>
 8005418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800541a:	f7fe fc07 	bl	8003c2c <__retarget_lock_release_recursive>
 800541e:	89ab      	ldrh	r3, [r5, #12]
 8005420:	065b      	lsls	r3, r3, #25
 8005422:	f53f af1f 	bmi.w	8005264 <_vfiprintf_r+0x44>
 8005426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005428:	e71e      	b.n	8005268 <_vfiprintf_r+0x48>
 800542a:	ab03      	add	r3, sp, #12
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	462a      	mov	r2, r5
 8005430:	4b05      	ldr	r3, [pc, #20]	@ (8005448 <_vfiprintf_r+0x228>)
 8005432:	a904      	add	r1, sp, #16
 8005434:	4630      	mov	r0, r6
 8005436:	f7fe f849 	bl	80034cc <_printf_i>
 800543a:	e7e4      	b.n	8005406 <_vfiprintf_r+0x1e6>
 800543c:	08005bf0 	.word	0x08005bf0
 8005440:	08005bfa 	.word	0x08005bfa
 8005444:	08002f9d 	.word	0x08002f9d
 8005448:	080051fb 	.word	0x080051fb
 800544c:	08005bf6 	.word	0x08005bf6

08005450 <__sflush_r>:
 8005450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005458:	0716      	lsls	r6, r2, #28
 800545a:	4605      	mov	r5, r0
 800545c:	460c      	mov	r4, r1
 800545e:	d454      	bmi.n	800550a <__sflush_r+0xba>
 8005460:	684b      	ldr	r3, [r1, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	dc02      	bgt.n	800546c <__sflush_r+0x1c>
 8005466:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	dd48      	ble.n	80054fe <__sflush_r+0xae>
 800546c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800546e:	2e00      	cmp	r6, #0
 8005470:	d045      	beq.n	80054fe <__sflush_r+0xae>
 8005472:	2300      	movs	r3, #0
 8005474:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005478:	682f      	ldr	r7, [r5, #0]
 800547a:	6a21      	ldr	r1, [r4, #32]
 800547c:	602b      	str	r3, [r5, #0]
 800547e:	d030      	beq.n	80054e2 <__sflush_r+0x92>
 8005480:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	0759      	lsls	r1, r3, #29
 8005486:	d505      	bpl.n	8005494 <__sflush_r+0x44>
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	1ad2      	subs	r2, r2, r3
 800548c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800548e:	b10b      	cbz	r3, 8005494 <__sflush_r+0x44>
 8005490:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005492:	1ad2      	subs	r2, r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005498:	6a21      	ldr	r1, [r4, #32]
 800549a:	4628      	mov	r0, r5
 800549c:	47b0      	blx	r6
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	d106      	bne.n	80054b2 <__sflush_r+0x62>
 80054a4:	6829      	ldr	r1, [r5, #0]
 80054a6:	291d      	cmp	r1, #29
 80054a8:	d82b      	bhi.n	8005502 <__sflush_r+0xb2>
 80054aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005554 <__sflush_r+0x104>)
 80054ac:	410a      	asrs	r2, r1
 80054ae:	07d6      	lsls	r6, r2, #31
 80054b0:	d427      	bmi.n	8005502 <__sflush_r+0xb2>
 80054b2:	2200      	movs	r2, #0
 80054b4:	6062      	str	r2, [r4, #4]
 80054b6:	04d9      	lsls	r1, r3, #19
 80054b8:	6922      	ldr	r2, [r4, #16]
 80054ba:	6022      	str	r2, [r4, #0]
 80054bc:	d504      	bpl.n	80054c8 <__sflush_r+0x78>
 80054be:	1c42      	adds	r2, r0, #1
 80054c0:	d101      	bne.n	80054c6 <__sflush_r+0x76>
 80054c2:	682b      	ldr	r3, [r5, #0]
 80054c4:	b903      	cbnz	r3, 80054c8 <__sflush_r+0x78>
 80054c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80054c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054ca:	602f      	str	r7, [r5, #0]
 80054cc:	b1b9      	cbz	r1, 80054fe <__sflush_r+0xae>
 80054ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054d2:	4299      	cmp	r1, r3
 80054d4:	d002      	beq.n	80054dc <__sflush_r+0x8c>
 80054d6:	4628      	mov	r0, r5
 80054d8:	f7ff f9f6 	bl	80048c8 <_free_r>
 80054dc:	2300      	movs	r3, #0
 80054de:	6363      	str	r3, [r4, #52]	@ 0x34
 80054e0:	e00d      	b.n	80054fe <__sflush_r+0xae>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b0      	blx	r6
 80054e8:	4602      	mov	r2, r0
 80054ea:	1c50      	adds	r0, r2, #1
 80054ec:	d1c9      	bne.n	8005482 <__sflush_r+0x32>
 80054ee:	682b      	ldr	r3, [r5, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0c6      	beq.n	8005482 <__sflush_r+0x32>
 80054f4:	2b1d      	cmp	r3, #29
 80054f6:	d001      	beq.n	80054fc <__sflush_r+0xac>
 80054f8:	2b16      	cmp	r3, #22
 80054fa:	d11e      	bne.n	800553a <__sflush_r+0xea>
 80054fc:	602f      	str	r7, [r5, #0]
 80054fe:	2000      	movs	r0, #0
 8005500:	e022      	b.n	8005548 <__sflush_r+0xf8>
 8005502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005506:	b21b      	sxth	r3, r3
 8005508:	e01b      	b.n	8005542 <__sflush_r+0xf2>
 800550a:	690f      	ldr	r7, [r1, #16]
 800550c:	2f00      	cmp	r7, #0
 800550e:	d0f6      	beq.n	80054fe <__sflush_r+0xae>
 8005510:	0793      	lsls	r3, r2, #30
 8005512:	680e      	ldr	r6, [r1, #0]
 8005514:	bf08      	it	eq
 8005516:	694b      	ldreq	r3, [r1, #20]
 8005518:	600f      	str	r7, [r1, #0]
 800551a:	bf18      	it	ne
 800551c:	2300      	movne	r3, #0
 800551e:	eba6 0807 	sub.w	r8, r6, r7
 8005522:	608b      	str	r3, [r1, #8]
 8005524:	f1b8 0f00 	cmp.w	r8, #0
 8005528:	dde9      	ble.n	80054fe <__sflush_r+0xae>
 800552a:	6a21      	ldr	r1, [r4, #32]
 800552c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800552e:	4643      	mov	r3, r8
 8005530:	463a      	mov	r2, r7
 8005532:	4628      	mov	r0, r5
 8005534:	47b0      	blx	r6
 8005536:	2800      	cmp	r0, #0
 8005538:	dc08      	bgt.n	800554c <__sflush_r+0xfc>
 800553a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800553e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005542:	81a3      	strh	r3, [r4, #12]
 8005544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800554c:	4407      	add	r7, r0
 800554e:	eba8 0800 	sub.w	r8, r8, r0
 8005552:	e7e7      	b.n	8005524 <__sflush_r+0xd4>
 8005554:	dfbffffe 	.word	0xdfbffffe

08005558 <_fflush_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	690b      	ldr	r3, [r1, #16]
 800555c:	4605      	mov	r5, r0
 800555e:	460c      	mov	r4, r1
 8005560:	b913      	cbnz	r3, 8005568 <_fflush_r+0x10>
 8005562:	2500      	movs	r5, #0
 8005564:	4628      	mov	r0, r5
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	b118      	cbz	r0, 8005572 <_fflush_r+0x1a>
 800556a:	6a03      	ldr	r3, [r0, #32]
 800556c:	b90b      	cbnz	r3, 8005572 <_fflush_r+0x1a>
 800556e:	f7fe f959 	bl	8003824 <__sinit>
 8005572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f3      	beq.n	8005562 <_fflush_r+0xa>
 800557a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800557c:	07d0      	lsls	r0, r2, #31
 800557e:	d404      	bmi.n	800558a <_fflush_r+0x32>
 8005580:	0599      	lsls	r1, r3, #22
 8005582:	d402      	bmi.n	800558a <_fflush_r+0x32>
 8005584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005586:	f7fe fb50 	bl	8003c2a <__retarget_lock_acquire_recursive>
 800558a:	4628      	mov	r0, r5
 800558c:	4621      	mov	r1, r4
 800558e:	f7ff ff5f 	bl	8005450 <__sflush_r>
 8005592:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005594:	07da      	lsls	r2, r3, #31
 8005596:	4605      	mov	r5, r0
 8005598:	d4e4      	bmi.n	8005564 <_fflush_r+0xc>
 800559a:	89a3      	ldrh	r3, [r4, #12]
 800559c:	059b      	lsls	r3, r3, #22
 800559e:	d4e1      	bmi.n	8005564 <_fflush_r+0xc>
 80055a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055a2:	f7fe fb43 	bl	8003c2c <__retarget_lock_release_recursive>
 80055a6:	e7dd      	b.n	8005564 <_fflush_r+0xc>

080055a8 <__swhatbuf_r>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	460c      	mov	r4, r1
 80055ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b0:	2900      	cmp	r1, #0
 80055b2:	b096      	sub	sp, #88	@ 0x58
 80055b4:	4615      	mov	r5, r2
 80055b6:	461e      	mov	r6, r3
 80055b8:	da0d      	bge.n	80055d6 <__swhatbuf_r+0x2e>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055c0:	f04f 0100 	mov.w	r1, #0
 80055c4:	bf14      	ite	ne
 80055c6:	2340      	movne	r3, #64	@ 0x40
 80055c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055cc:	2000      	movs	r0, #0
 80055ce:	6031      	str	r1, [r6, #0]
 80055d0:	602b      	str	r3, [r5, #0]
 80055d2:	b016      	add	sp, #88	@ 0x58
 80055d4:	bd70      	pop	{r4, r5, r6, pc}
 80055d6:	466a      	mov	r2, sp
 80055d8:	f000 f87c 	bl	80056d4 <_fstat_r>
 80055dc:	2800      	cmp	r0, #0
 80055de:	dbec      	blt.n	80055ba <__swhatbuf_r+0x12>
 80055e0:	9901      	ldr	r1, [sp, #4]
 80055e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055ea:	4259      	negs	r1, r3
 80055ec:	4159      	adcs	r1, r3
 80055ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055f2:	e7eb      	b.n	80055cc <__swhatbuf_r+0x24>

080055f4 <__smakebuf_r>:
 80055f4:	898b      	ldrh	r3, [r1, #12]
 80055f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055f8:	079d      	lsls	r5, r3, #30
 80055fa:	4606      	mov	r6, r0
 80055fc:	460c      	mov	r4, r1
 80055fe:	d507      	bpl.n	8005610 <__smakebuf_r+0x1c>
 8005600:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	2301      	movs	r3, #1
 800560a:	6163      	str	r3, [r4, #20]
 800560c:	b003      	add	sp, #12
 800560e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005610:	ab01      	add	r3, sp, #4
 8005612:	466a      	mov	r2, sp
 8005614:	f7ff ffc8 	bl	80055a8 <__swhatbuf_r>
 8005618:	9f00      	ldr	r7, [sp, #0]
 800561a:	4605      	mov	r5, r0
 800561c:	4639      	mov	r1, r7
 800561e:	4630      	mov	r0, r6
 8005620:	f7ff f9c6 	bl	80049b0 <_malloc_r>
 8005624:	b948      	cbnz	r0, 800563a <__smakebuf_r+0x46>
 8005626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800562a:	059a      	lsls	r2, r3, #22
 800562c:	d4ee      	bmi.n	800560c <__smakebuf_r+0x18>
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	f043 0302 	orr.w	r3, r3, #2
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	e7e2      	b.n	8005600 <__smakebuf_r+0xc>
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	6020      	str	r0, [r4, #0]
 800563e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	9b01      	ldr	r3, [sp, #4]
 8005646:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800564a:	b15b      	cbz	r3, 8005664 <__smakebuf_r+0x70>
 800564c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005650:	4630      	mov	r0, r6
 8005652:	f000 f851 	bl	80056f8 <_isatty_r>
 8005656:	b128      	cbz	r0, 8005664 <__smakebuf_r+0x70>
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	431d      	orrs	r5, r3
 8005668:	81a5      	strh	r5, [r4, #12]
 800566a:	e7cf      	b.n	800560c <__smakebuf_r+0x18>

0800566c <_putc_r>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	460d      	mov	r5, r1
 8005670:	4614      	mov	r4, r2
 8005672:	4606      	mov	r6, r0
 8005674:	b118      	cbz	r0, 800567e <_putc_r+0x12>
 8005676:	6a03      	ldr	r3, [r0, #32]
 8005678:	b90b      	cbnz	r3, 800567e <_putc_r+0x12>
 800567a:	f7fe f8d3 	bl	8003824 <__sinit>
 800567e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005680:	07d8      	lsls	r0, r3, #31
 8005682:	d405      	bmi.n	8005690 <_putc_r+0x24>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	0599      	lsls	r1, r3, #22
 8005688:	d402      	bmi.n	8005690 <_putc_r+0x24>
 800568a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800568c:	f7fe facd 	bl	8003c2a <__retarget_lock_acquire_recursive>
 8005690:	68a3      	ldr	r3, [r4, #8]
 8005692:	3b01      	subs	r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	60a3      	str	r3, [r4, #8]
 8005698:	da05      	bge.n	80056a6 <_putc_r+0x3a>
 800569a:	69a2      	ldr	r2, [r4, #24]
 800569c:	4293      	cmp	r3, r2
 800569e:	db12      	blt.n	80056c6 <_putc_r+0x5a>
 80056a0:	b2eb      	uxtb	r3, r5
 80056a2:	2b0a      	cmp	r3, #10
 80056a4:	d00f      	beq.n	80056c6 <_putc_r+0x5a>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	6022      	str	r2, [r4, #0]
 80056ac:	701d      	strb	r5, [r3, #0]
 80056ae:	b2ed      	uxtb	r5, r5
 80056b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056b2:	07da      	lsls	r2, r3, #31
 80056b4:	d405      	bmi.n	80056c2 <_putc_r+0x56>
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	059b      	lsls	r3, r3, #22
 80056ba:	d402      	bmi.n	80056c2 <_putc_r+0x56>
 80056bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056be:	f7fe fab5 	bl	8003c2c <__retarget_lock_release_recursive>
 80056c2:	4628      	mov	r0, r5
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
 80056c6:	4629      	mov	r1, r5
 80056c8:	4622      	mov	r2, r4
 80056ca:	4630      	mov	r0, r6
 80056cc:	f7fe f99b 	bl	8003a06 <__swbuf_r>
 80056d0:	4605      	mov	r5, r0
 80056d2:	e7ed      	b.n	80056b0 <_putc_r+0x44>

080056d4 <_fstat_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	@ (80056f4 <_fstat_r+0x20>)
 80056d8:	2300      	movs	r3, #0
 80056da:	4604      	mov	r4, r0
 80056dc:	4608      	mov	r0, r1
 80056de:	4611      	mov	r1, r2
 80056e0:	602b      	str	r3, [r5, #0]
 80056e2:	f7fb fdcc 	bl	800127e <_fstat>
 80056e6:	1c43      	adds	r3, r0, #1
 80056e8:	d102      	bne.n	80056f0 <_fstat_r+0x1c>
 80056ea:	682b      	ldr	r3, [r5, #0]
 80056ec:	b103      	cbz	r3, 80056f0 <_fstat_r+0x1c>
 80056ee:	6023      	str	r3, [r4, #0]
 80056f0:	bd38      	pop	{r3, r4, r5, pc}
 80056f2:	bf00      	nop
 80056f4:	200003d8 	.word	0x200003d8

080056f8 <_isatty_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d06      	ldr	r5, [pc, #24]	@ (8005714 <_isatty_r+0x1c>)
 80056fc:	2300      	movs	r3, #0
 80056fe:	4604      	mov	r4, r0
 8005700:	4608      	mov	r0, r1
 8005702:	602b      	str	r3, [r5, #0]
 8005704:	f7fb fdc0 	bl	8001288 <_isatty>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d102      	bne.n	8005712 <_isatty_r+0x1a>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	b103      	cbz	r3, 8005712 <_isatty_r+0x1a>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	200003d8 	.word	0x200003d8

08005718 <_sbrk_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4d06      	ldr	r5, [pc, #24]	@ (8005734 <_sbrk_r+0x1c>)
 800571c:	2300      	movs	r3, #0
 800571e:	4604      	mov	r4, r0
 8005720:	4608      	mov	r0, r1
 8005722:	602b      	str	r3, [r5, #0]
 8005724:	f7fb fdb4 	bl	8001290 <_sbrk>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d102      	bne.n	8005732 <_sbrk_r+0x1a>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	b103      	cbz	r3, 8005732 <_sbrk_r+0x1a>
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	200003d8 	.word	0x200003d8

08005738 <memcpy>:
 8005738:	440a      	add	r2, r1
 800573a:	4291      	cmp	r1, r2
 800573c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005740:	d100      	bne.n	8005744 <memcpy+0xc>
 8005742:	4770      	bx	lr
 8005744:	b510      	push	{r4, lr}
 8005746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800574a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800574e:	4291      	cmp	r1, r2
 8005750:	d1f9      	bne.n	8005746 <memcpy+0xe>
 8005752:	bd10      	pop	{r4, pc}

08005754 <__assert_func>:
 8005754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005756:	4614      	mov	r4, r2
 8005758:	461a      	mov	r2, r3
 800575a:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <__assert_func+0x2c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4605      	mov	r5, r0
 8005760:	68d8      	ldr	r0, [r3, #12]
 8005762:	b954      	cbnz	r4, 800577a <__assert_func+0x26>
 8005764:	4b07      	ldr	r3, [pc, #28]	@ (8005784 <__assert_func+0x30>)
 8005766:	461c      	mov	r4, r3
 8005768:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800576c:	9100      	str	r1, [sp, #0]
 800576e:	462b      	mov	r3, r5
 8005770:	4905      	ldr	r1, [pc, #20]	@ (8005788 <__assert_func+0x34>)
 8005772:	f000 f841 	bl	80057f8 <fiprintf>
 8005776:	f000 f851 	bl	800581c <abort>
 800577a:	4b04      	ldr	r3, [pc, #16]	@ (800578c <__assert_func+0x38>)
 800577c:	e7f4      	b.n	8005768 <__assert_func+0x14>
 800577e:	bf00      	nop
 8005780:	20000018 	.word	0x20000018
 8005784:	08005c46 	.word	0x08005c46
 8005788:	08005c18 	.word	0x08005c18
 800578c:	08005c0b 	.word	0x08005c0b

08005790 <_calloc_r>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	fba1 5402 	umull	r5, r4, r1, r2
 8005796:	b93c      	cbnz	r4, 80057a8 <_calloc_r+0x18>
 8005798:	4629      	mov	r1, r5
 800579a:	f7ff f909 	bl	80049b0 <_malloc_r>
 800579e:	4606      	mov	r6, r0
 80057a0:	b928      	cbnz	r0, 80057ae <_calloc_r+0x1e>
 80057a2:	2600      	movs	r6, #0
 80057a4:	4630      	mov	r0, r6
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	220c      	movs	r2, #12
 80057aa:	6002      	str	r2, [r0, #0]
 80057ac:	e7f9      	b.n	80057a2 <_calloc_r+0x12>
 80057ae:	462a      	mov	r2, r5
 80057b0:	4621      	mov	r1, r4
 80057b2:	f7fe f9bd 	bl	8003b30 <memset>
 80057b6:	e7f5      	b.n	80057a4 <_calloc_r+0x14>

080057b8 <__ascii_mbtowc>:
 80057b8:	b082      	sub	sp, #8
 80057ba:	b901      	cbnz	r1, 80057be <__ascii_mbtowc+0x6>
 80057bc:	a901      	add	r1, sp, #4
 80057be:	b142      	cbz	r2, 80057d2 <__ascii_mbtowc+0x1a>
 80057c0:	b14b      	cbz	r3, 80057d6 <__ascii_mbtowc+0x1e>
 80057c2:	7813      	ldrb	r3, [r2, #0]
 80057c4:	600b      	str	r3, [r1, #0]
 80057c6:	7812      	ldrb	r2, [r2, #0]
 80057c8:	1e10      	subs	r0, r2, #0
 80057ca:	bf18      	it	ne
 80057cc:	2001      	movne	r0, #1
 80057ce:	b002      	add	sp, #8
 80057d0:	4770      	bx	lr
 80057d2:	4610      	mov	r0, r2
 80057d4:	e7fb      	b.n	80057ce <__ascii_mbtowc+0x16>
 80057d6:	f06f 0001 	mvn.w	r0, #1
 80057da:	e7f8      	b.n	80057ce <__ascii_mbtowc+0x16>

080057dc <__ascii_wctomb>:
 80057dc:	4603      	mov	r3, r0
 80057de:	4608      	mov	r0, r1
 80057e0:	b141      	cbz	r1, 80057f4 <__ascii_wctomb+0x18>
 80057e2:	2aff      	cmp	r2, #255	@ 0xff
 80057e4:	d904      	bls.n	80057f0 <__ascii_wctomb+0x14>
 80057e6:	228a      	movs	r2, #138	@ 0x8a
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057ee:	4770      	bx	lr
 80057f0:	700a      	strb	r2, [r1, #0]
 80057f2:	2001      	movs	r0, #1
 80057f4:	4770      	bx	lr
	...

080057f8 <fiprintf>:
 80057f8:	b40e      	push	{r1, r2, r3}
 80057fa:	b503      	push	{r0, r1, lr}
 80057fc:	4601      	mov	r1, r0
 80057fe:	ab03      	add	r3, sp, #12
 8005800:	4805      	ldr	r0, [pc, #20]	@ (8005818 <fiprintf+0x20>)
 8005802:	f853 2b04 	ldr.w	r2, [r3], #4
 8005806:	6800      	ldr	r0, [r0, #0]
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	f7ff fd09 	bl	8005220 <_vfiprintf_r>
 800580e:	b002      	add	sp, #8
 8005810:	f85d eb04 	ldr.w	lr, [sp], #4
 8005814:	b003      	add	sp, #12
 8005816:	4770      	bx	lr
 8005818:	20000018 	.word	0x20000018

0800581c <abort>:
 800581c:	b508      	push	{r3, lr}
 800581e:	2006      	movs	r0, #6
 8005820:	f000 f82c 	bl	800587c <raise>
 8005824:	2001      	movs	r0, #1
 8005826:	f7fb fd11 	bl	800124c <_exit>

0800582a <_raise_r>:
 800582a:	291f      	cmp	r1, #31
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	4605      	mov	r5, r0
 8005830:	460c      	mov	r4, r1
 8005832:	d904      	bls.n	800583e <_raise_r+0x14>
 8005834:	2316      	movs	r3, #22
 8005836:	6003      	str	r3, [r0, #0]
 8005838:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800583c:	bd38      	pop	{r3, r4, r5, pc}
 800583e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005840:	b112      	cbz	r2, 8005848 <_raise_r+0x1e>
 8005842:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005846:	b94b      	cbnz	r3, 800585c <_raise_r+0x32>
 8005848:	4628      	mov	r0, r5
 800584a:	f000 f831 	bl	80058b0 <_getpid_r>
 800584e:	4622      	mov	r2, r4
 8005850:	4601      	mov	r1, r0
 8005852:	4628      	mov	r0, r5
 8005854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005858:	f000 b818 	b.w	800588c <_kill_r>
 800585c:	2b01      	cmp	r3, #1
 800585e:	d00a      	beq.n	8005876 <_raise_r+0x4c>
 8005860:	1c59      	adds	r1, r3, #1
 8005862:	d103      	bne.n	800586c <_raise_r+0x42>
 8005864:	2316      	movs	r3, #22
 8005866:	6003      	str	r3, [r0, #0]
 8005868:	2001      	movs	r0, #1
 800586a:	e7e7      	b.n	800583c <_raise_r+0x12>
 800586c:	2100      	movs	r1, #0
 800586e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005872:	4620      	mov	r0, r4
 8005874:	4798      	blx	r3
 8005876:	2000      	movs	r0, #0
 8005878:	e7e0      	b.n	800583c <_raise_r+0x12>
	...

0800587c <raise>:
 800587c:	4b02      	ldr	r3, [pc, #8]	@ (8005888 <raise+0xc>)
 800587e:	4601      	mov	r1, r0
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	f7ff bfd2 	b.w	800582a <_raise_r>
 8005886:	bf00      	nop
 8005888:	20000018 	.word	0x20000018

0800588c <_kill_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4d07      	ldr	r5, [pc, #28]	@ (80058ac <_kill_r+0x20>)
 8005890:	2300      	movs	r3, #0
 8005892:	4604      	mov	r4, r0
 8005894:	4608      	mov	r0, r1
 8005896:	4611      	mov	r1, r2
 8005898:	602b      	str	r3, [r5, #0]
 800589a:	f7fb fccf 	bl	800123c <_kill>
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	d102      	bne.n	80058a8 <_kill_r+0x1c>
 80058a2:	682b      	ldr	r3, [r5, #0]
 80058a4:	b103      	cbz	r3, 80058a8 <_kill_r+0x1c>
 80058a6:	6023      	str	r3, [r4, #0]
 80058a8:	bd38      	pop	{r3, r4, r5, pc}
 80058aa:	bf00      	nop
 80058ac:	200003d8 	.word	0x200003d8

080058b0 <_getpid_r>:
 80058b0:	f7fb bcc2 	b.w	8001238 <_getpid>

080058b4 <_init>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	bf00      	nop
 80058b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ba:	bc08      	pop	{r3}
 80058bc:	469e      	mov	lr, r3
 80058be:	4770      	bx	lr

080058c0 <_fini>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	bf00      	nop
 80058c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c6:	bc08      	pop	{r3}
 80058c8:	469e      	mov	lr, r3
 80058ca:	4770      	bx	lr
