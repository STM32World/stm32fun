
stm32world_i2c2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800428c  0800428c  0000528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004328  08004328  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004328  08004328  00005328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004330  08004330  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004330  08004330  00005330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004334  08004334  00005334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004338  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000228  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a58d  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001886  00000000  00000000  00010625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  00011eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a0  00000000  00000000  00012878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f6fc  00000000  00000000  00013018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bee8  00000000  00000000  00032714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc674  00000000  00000000  0003e5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fac70  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b0  00000000  00000000  000facb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  000fdd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004274 	.word	0x08004274

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004274 	.word	0x08004274

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000568:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800056c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d013      	beq.n	80005a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000580:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000588:	e000      	b.n	800058c <ITM_SendChar+0x2c>
    {
      __NOP();
 800058a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800058c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000596:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send stdout to USART1 and stderr to SWO
int _write(int fd, char *ptr, int len) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]

    if (fd == 1) {
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d111      	bne.n	80005e6 <_write+0x36>
        HAL_StatusTypeDef hstatus;
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ca:	68b9      	ldr	r1, [r7, #8]
 80005cc:	4814      	ldr	r0, [pc, #80]	@ (8000620 <_write+0x70>)
 80005ce:	f002 facb 	bl	8002b68 <HAL_UART_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	74fb      	strb	r3, [r7, #19]
        if (hstatus == HAL_OK)
 80005d6:	7cfb      	ldrb	r3, [r7, #19]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d101      	bne.n	80005e0 <_write+0x30>
            return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	e01a      	b.n	8000616 <_write+0x66>
        else
            return -1;
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e4:	e017      	b.n	8000616 <_write+0x66>
    } else if (fd == 2) {
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d112      	bne.n	8000612 <_write+0x62>
        for (int i = 0; i < len; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e009      	b.n	8000606 <_write+0x56>
            ITM_SendChar(ptr[i]); /* core_cm4.h */
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffb0 	bl	8000560 <ITM_SendChar>
        for (int i = 0; i < len; i++) {
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	3301      	adds	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	429a      	cmp	r2, r3
 800060c:	dbf1      	blt.n	80005f2 <_write+0x42>
        }
        return len;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	e001      	b.n	8000616 <_write+0x66>
    } else {
        return -1;
 8000612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
    return -1;
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000d8 	.word	0x200000d8

08000624 <read_calibration_data>:

void read_calibration_data() {
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af04      	add	r7, sp, #16

    uint8_t buf[22] = {0};
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	821a      	strh	r2, [r3, #16]
//    }
//
//    if (HAL_I2C_Master_Receive(&hi2c2, DEVICE_ADDRESS << 1, &buf, 22, HAL_MAX_DELAY) != HAL_OK) {
//        Error_Handler();
//    }
    if (HAL_I2C_Mem_Read(&hi2c2, DEVICE_ADDRESS << 1, CALIBRATION_ADDRESS, 1, &buf, 22, HAL_MAX_DELAY) != HAL_OK) {
 800063c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	2316      	movs	r3, #22
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	463b      	mov	r3, r7
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	22aa      	movs	r2, #170	@ 0xaa
 800064e:	21ee      	movs	r1, #238	@ 0xee
 8000650:	480a      	ldr	r0, [pc, #40]	@ (800067c <read_calibration_data+0x58>)
 8000652:	f000 ff6d 	bl	8001530 <HAL_I2C_Mem_Read>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <read_calibration_data+0x3c>
        Error_Handler();
 800065c:	f000 f980 	bl	8000960 <Error_Handler>
    }

    calibratio_data.ac1 = buf[0] << 8 + buf[1];
 8000660:	783b      	ldrb	r3, [r7, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	787b      	ldrb	r3, [r7, #1]
 8000666:	3308      	adds	r3, #8
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	b21a      	sxth	r2, r3
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <read_calibration_data+0x5c>)
 8000670:	801a      	strh	r2, [r3, #0]

}
 8000672:	bf00      	nop
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000084 	.word	0x20000084
 8000680:	20000120 	.word	0x20000120

08000684 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800068a:	f000 fb19 	bl	8000cc0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800068e:	f000 f86f 	bl	8000770 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000692:	f000 f92f 	bl	80008f4 <MX_GPIO_Init>
    MX_I2C2_Init();
 8000696:	f000 f8d5 	bl	8000844 <MX_I2C2_Init>
    MX_USART1_UART_Init();
 800069a:	f000 f901 	bl	80008a0 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */

    printf("\n\n\n-------------\nStarting i2c2\n");
 800069e:	482c      	ldr	r0, [pc, #176]	@ (8000750 <main+0xcc>)
 80006a0:	f002 ff50 	bl	8003544 <puts>

    printf("\nScan I2C2\n");
 80006a4:	482b      	ldr	r0, [pc, #172]	@ (8000754 <main+0xd0>)
 80006a6:	f002 ff4d 	bl	8003544 <puts>

    // Go through all possible i2c addresses
    for (uint8_t i = 0; i < 128; i++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	73fb      	strb	r3, [r7, #15]
 80006ae:	e023      	b.n	80006f8 <main+0x74>

        if (HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t) (i << 1), 3, 5) == HAL_OK) {
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	b299      	uxth	r1, r3
 80006b8:	2305      	movs	r3, #5
 80006ba:	2203      	movs	r2, #3
 80006bc:	4826      	ldr	r0, [pc, #152]	@ (8000758 <main+0xd4>)
 80006be:	f001 f969 	bl	8001994 <HAL_I2C_IsDeviceReady>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d105      	bne.n	80006d4 <main+0x50>
            // We got an ack
            printf("%2x ", i);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4823      	ldr	r0, [pc, #140]	@ (800075c <main+0xd8>)
 80006ce:	f002 fec9 	bl	8003464 <iprintf>
 80006d2:	e002      	b.n	80006da <main+0x56>
        } else {
            printf("-- ");
 80006d4:	4822      	ldr	r0, [pc, #136]	@ (8000760 <main+0xdc>)
 80006d6:	f002 fec5 	bl	8003464 <iprintf>
        }

        if (i > 0 && (i + 1) % 16 == 0)
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d008      	beq.n	80006f2 <main+0x6e>
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	3301      	adds	r3, #1
 80006e4:	f003 030f 	and.w	r3, r3, #15
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <main+0x6e>
            printf("\n");
 80006ec:	200a      	movs	r0, #10
 80006ee:	f002 fecb 	bl	8003488 <putchar>
    for (uint8_t i = 0; i < 128; i++) {
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	dad7      	bge.n	80006b0 <main+0x2c>

    }

    printf("\n");
 8000700:	200a      	movs	r0, #10
 8000702:	f002 fec1 	bl	8003488 <putchar>
//    printf("Setting int32_p\n");
//    *int32_p = -1;
//    printf("Buffer val = 0x%08lx - buffer = %02x %02x %02x %02x\n", *int32_p, buf[0], buf[1], buf[2], buf[3]);
//    printf("------\n");

    read_calibration_data();
 8000706:	f7ff ff8d 	bl	8000624 <read_calibration_data>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint32_t now = 0, loop_cnt = 0, next_tick = 1000;
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000716:	607b      	str	r3, [r7, #4]

    while (1) {

        now = uwTick;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <main+0xe0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	603b      	str	r3, [r7, #0]

        if (now >= next_tick) {
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	429a      	cmp	r2, r3
 8000724:	d30f      	bcc.n	8000746 <main+0xc2>

            printf("Tick %lu (loop = %lu)\n", now / 1000, loop_cnt);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	4a0f      	ldr	r2, [pc, #60]	@ (8000768 <main+0xe4>)
 800072a:	fba2 2303 	umull	r2, r3, r2, r3
 800072e:	099b      	lsrs	r3, r3, #6
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	4619      	mov	r1, r3
 8000734:	480d      	ldr	r0, [pc, #52]	@ (800076c <main+0xe8>)
 8000736:	f002 fe95 	bl	8003464 <iprintf>

            loop_cnt = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
            next_tick = now + 1000;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000744:	607b      	str	r3, [r7, #4]

        }

        ++loop_cnt;
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	3301      	adds	r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
        now = uwTick;
 800074c:	e7e4      	b.n	8000718 <main+0x94>
 800074e:	bf00      	nop
 8000750:	0800428c 	.word	0x0800428c
 8000754:	080042ac 	.word	0x080042ac
 8000758:	20000084 	.word	0x20000084
 800075c:	080042b8 	.word	0x080042b8
 8000760:	080042c0 	.word	0x080042c0
 8000764:	20000140 	.word	0x20000140
 8000768:	10624dd3 	.word	0x10624dd3
 800076c:	080042c4 	.word	0x080042c4

08000770 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	@ 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f002 ffc0 	bl	8003704 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b28      	ldr	r3, [pc, #160]	@ (800083c <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	4a27      	ldr	r2, [pc, #156]	@ (800083c <SystemClock_Config+0xcc>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a4:	4b25      	ldr	r3, [pc, #148]	@ (800083c <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a21      	ldr	r2, [pc, #132]	@ (8000840 <SystemClock_Config+0xd0>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 80007e0:	2308      	movs	r3, #8
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 80007e4:	23a8      	movs	r3, #168	@ 0xa8
 80007e6:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fcd1 	bl	800219c <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
            {
        Error_Handler();
 8000800:	f000 f8ae 	bl	8000960 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000810:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000814:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2105      	movs	r1, #5
 8000822:	4618      	mov	r0, r3
 8000824:	f001 ff32 	bl	800268c <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xc2>
            {
        Error_Handler();
 800082e:	f000 f897 	bl	8000960 <Error_Handler>
    }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	@ 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_I2C2_Init+0x50>)
 800084a:	4a13      	ldr	r2, [pc, #76]	@ (8000898 <MX_I2C2_Init+0x54>)
 800084c:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 400000;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_I2C2_Init+0x50>)
 8000850:	4a12      	ldr	r2, [pc, #72]	@ (800089c <MX_I2C2_Init+0x58>)
 8000852:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_I2C2_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_I2C2_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_I2C2_Init+0x50>)
 8000862:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000866:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_I2C2_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_I2C2_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_I2C2_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_I2C2_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_I2C2_Init+0x50>)
 8000882:	f000 fd11 	bl	80012a8 <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C2_Init+0x4c>
            {
        Error_Handler();
 800088c:	f000 f868 	bl	8000960 <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000084 	.word	0x20000084
 8000898:	40005800 	.word	0x40005800
 800089c:	00061a80 	.word	0x00061a80

080008a0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_USART1_UART_Init+0x4c>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <MX_USART1_UART_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 921600;
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_USART1_UART_Init+0x4c>)
 80008ac:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80008b0:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_USART1_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_USART1_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_USART1_UART_Init+0x4c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_USART1_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_USART1_UART_Init+0x4c>)
 80008d8:	f002 f8f6 	bl	8002ac8 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x46>
            {
        Error_Handler();
 80008e2:	f000 f83d 	bl	8000960 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000d8 	.word	0x200000d8
 80008f0:	40011000 	.word	0x40011000

080008f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_GPIO_Init+0x68>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a16      	ldr	r2, [pc, #88]	@ (800095c <MX_GPIO_Init+0x68>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_GPIO_Init+0x68>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_GPIO_Init+0x68>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a0f      	ldr	r2, [pc, #60]	@ (800095c <MX_GPIO_Init+0x68>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <MX_GPIO_Init+0x68>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_GPIO_Init+0x68>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a08      	ldr	r2, [pc, #32]	@ (800095c <MX_GPIO_Init+0x68>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_GPIO_Init+0x68>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <Error_Handler+0x8>

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	@ (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000980:	6453      	str	r3, [r2, #68]	@ 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a19      	ldr	r2, [pc, #100]	@ (8000a40 <HAL_I2C_MspInit+0x84>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d12c      	bne.n	8000a38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <HAL_I2C_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a17      	ldr	r2, [pc, #92]	@ (8000a44 <HAL_I2C_MspInit+0x88>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <HAL_I2C_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <HAL_I2C_MspInit+0x8c>)
 8000a18:	f000 faaa 	bl	8000f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a24:	4a07      	ldr	r2, [pc, #28]	@ (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	@ 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40005800 	.word	0x40005800
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	@ (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12c      	bne.n	8000ac8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	4a17      	ldr	r2, [pc, #92]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a78:	f043 0310 	orr.w	r3, r3, #16
 8000a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	f003 0310 	and.w	r3, r3, #16
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a10      	ldr	r2, [pc, #64]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aa6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <HAL_UART_MspInit+0x8c>)
 8000ac4:	f000 fa54 	bl	8000f70 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	@ 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <MemManage_Handler+0x4>

08000af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b32:	f000 f917 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e00a      	b.n	8000b62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b4c:	f3af 8000 	nop.w
 8000b50:	4601      	mov	r1, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1c5a      	adds	r2, r3, #1
 8000b56:	60ba      	str	r2, [r7, #8]
 8000b58:	b2ca      	uxtb	r2, r1
 8000b5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbf0      	blt.n	8000b4c <_read+0x12>
  }

  return len;
 8000b6a:	687b      	ldr	r3, [r7, #4]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_isatty>:

int _isatty(int file)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bb4:	2301      	movs	r3, #1
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b085      	sub	sp, #20
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	@ (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f002 fdc8 	bl	80037a0 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20020000 	.word	0x20020000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	2000013c 	.word	0x2000013c
 8000c44:	20000290 	.word	0x20000290

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	@ (8000cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f002 fd87 	bl	80037ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fcf1 	bl	8000684 <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cb0:	08004338 	.word	0x08004338
  ldr r2, =_sbss
 8000cb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cb8:	20000290 	.word	0x20000290

08000cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f90d 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fe3a 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f917 	bl	8000f56 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d40:	f000 f8ed 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	@ (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000140 	.word	0x20000140

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000140 	.word	0x20000140

08000da4 <__NVIC_SetPriorityGrouping>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_SetPriority>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	@ (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	@ (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	@ 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	@ 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff47 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff5c 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffb0 	bl	8000ec4 <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	e16b      	b.n	8001264 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f040 815a 	bne.w	800125e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d005      	beq.n	8000fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d130      	bne.n	8001024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b03      	cmp	r3, #3
 800102e:	d017      	beq.n	8001060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d123      	bne.n	80010b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	69b9      	ldr	r1, [r7, #24]
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80b4 	beq.w	800125e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b60      	ldr	r3, [pc, #384]	@ (800127c <HAL_GPIO_Init+0x30c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	4a5f      	ldr	r2, [pc, #380]	@ (800127c <HAL_GPIO_Init+0x30c>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001104:	6453      	str	r3, [r2, #68]	@ 0x44
 8001106:	4b5d      	ldr	r3, [pc, #372]	@ (800127c <HAL_GPIO_Init+0x30c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001112:	4a5b      	ldr	r2, [pc, #364]	@ (8001280 <HAL_GPIO_Init+0x310>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a52      	ldr	r2, [pc, #328]	@ (8001284 <HAL_GPIO_Init+0x314>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02b      	beq.n	8001196 <HAL_GPIO_Init+0x226>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a51      	ldr	r2, [pc, #324]	@ (8001288 <HAL_GPIO_Init+0x318>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x222>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a50      	ldr	r2, [pc, #320]	@ (800128c <HAL_GPIO_Init+0x31c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x21e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	@ (8001290 <HAL_GPIO_Init+0x320>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x21a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4e      	ldr	r2, [pc, #312]	@ (8001294 <HAL_GPIO_Init+0x324>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x216>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4d      	ldr	r2, [pc, #308]	@ (8001298 <HAL_GPIO_Init+0x328>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x212>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4c      	ldr	r2, [pc, #304]	@ (800129c <HAL_GPIO_Init+0x32c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x20e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4b      	ldr	r2, [pc, #300]	@ (80012a0 <HAL_GPIO_Init+0x330>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x20a>
 8001176:	2307      	movs	r3, #7
 8001178:	e00e      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800117a:	2308      	movs	r3, #8
 800117c:	e00c      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800117e:	2306      	movs	r3, #6
 8001180:	e00a      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001182:	2305      	movs	r3, #5
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001186:	2304      	movs	r3, #4
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001196:	2300      	movs	r3, #0
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	f002 0203 	and.w	r2, r2, #3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a8:	4935      	ldr	r1, [pc, #212]	@ (8001280 <HAL_GPIO_Init+0x310>)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011da:	4a32      	ldr	r2, [pc, #200]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e0:	4b30      	ldr	r3, [pc, #192]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001204:	4a27      	ldr	r2, [pc, #156]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800120a:	4b26      	ldr	r3, [pc, #152]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122e:	4a1d      	ldr	r2, [pc, #116]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001258:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3301      	adds	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2b0f      	cmp	r3, #15
 8001268:	f67f ae90 	bls.w	8000f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3724      	adds	r7, #36	@ 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40021400 	.word	0x40021400
 800129c:	40021800 	.word	0x40021800
 80012a0:	40021c00 	.word	0x40021c00
 80012a4:	40013c00 	.word	0x40013c00

080012a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e12b      	b.n	8001512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d106      	bne.n	80012d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fb74 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2224      	movs	r2, #36	@ 0x24
 80012d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800130a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800130c:	f001 fbb4 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8001310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a81      	ldr	r2, [pc, #516]	@ (800151c <HAL_I2C_Init+0x274>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d807      	bhi.n	800132c <HAL_I2C_Init+0x84>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a80      	ldr	r2, [pc, #512]	@ (8001520 <HAL_I2C_Init+0x278>)
 8001320:	4293      	cmp	r3, r2
 8001322:	bf94      	ite	ls
 8001324:	2301      	movls	r3, #1
 8001326:	2300      	movhi	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	e006      	b.n	800133a <HAL_I2C_Init+0x92>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4a7d      	ldr	r2, [pc, #500]	@ (8001524 <HAL_I2C_Init+0x27c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	bf94      	ite	ls
 8001334:	2301      	movls	r3, #1
 8001336:	2300      	movhi	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e0e7      	b.n	8001512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4a78      	ldr	r2, [pc, #480]	@ (8001528 <HAL_I2C_Init+0x280>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9b      	lsrs	r3, r3, #18
 800134c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	430a      	orrs	r2, r1
 8001360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a6a      	ldr	r2, [pc, #424]	@ (800151c <HAL_I2C_Init+0x274>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d802      	bhi.n	800137c <HAL_I2C_Init+0xd4>
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	3301      	adds	r3, #1
 800137a:	e009      	b.n	8001390 <HAL_I2C_Init+0xe8>
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	4a69      	ldr	r2, [pc, #420]	@ (800152c <HAL_I2C_Init+0x284>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	099b      	lsrs	r3, r3, #6
 800138e:	3301      	adds	r3, #1
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	430b      	orrs	r3, r1
 8001396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	495c      	ldr	r1, [pc, #368]	@ (800151c <HAL_I2C_Init+0x274>)
 80013ac:	428b      	cmp	r3, r1
 80013ae:	d819      	bhi.n	80013e4 <HAL_I2C_Init+0x13c>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1e59      	subs	r1, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80013be:	1c59      	adds	r1, r3, #1
 80013c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013c4:	400b      	ands	r3, r1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00a      	beq.n	80013e0 <HAL_I2C_Init+0x138>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1e59      	subs	r1, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d8:	3301      	adds	r3, #1
 80013da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013de:	e051      	b.n	8001484 <HAL_I2C_Init+0x1dc>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e04f      	b.n	8001484 <HAL_I2C_Init+0x1dc>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d111      	bne.n	8001410 <HAL_I2C_Init+0x168>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1e58      	subs	r0, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	440b      	add	r3, r1
 80013fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	e012      	b.n	8001436 <HAL_I2C_Init+0x18e>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1e58      	subs	r0, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	0099      	lsls	r1, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	fbb0 f3f3 	udiv	r3, r0, r3
 8001426:	3301      	adds	r3, #1
 8001428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_Init+0x196>
 800143a:	2301      	movs	r3, #1
 800143c:	e022      	b.n	8001484 <HAL_I2C_Init+0x1dc>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10e      	bne.n	8001464 <HAL_I2C_Init+0x1bc>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1e58      	subs	r0, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6859      	ldr	r1, [r3, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	440b      	add	r3, r1
 8001454:	fbb0 f3f3 	udiv	r3, r0, r3
 8001458:	3301      	adds	r3, #1
 800145a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800145e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001462:	e00f      	b.n	8001484 <HAL_I2C_Init+0x1dc>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1e58      	subs	r0, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	0099      	lsls	r1, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	fbb0 f3f3 	udiv	r3, r0, r3
 800147a:	3301      	adds	r3, #1
 800147c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001480:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	6809      	ldr	r1, [r1, #0]
 8001488:	4313      	orrs	r3, r2
 800148a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69da      	ldr	r2, [r3, #28]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6911      	ldr	r1, [r2, #16]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68d2      	ldr	r2, [r2, #12]
 80014be:	4311      	orrs	r1, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	430b      	orrs	r3, r1
 80014c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	000186a0 	.word	0x000186a0
 8001520:	001e847f 	.word	0x001e847f
 8001524:	003d08ff 	.word	0x003d08ff
 8001528:	431bde83 	.word	0x431bde83
 800152c:	10624dd3 	.word	0x10624dd3

08001530 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	@ 0x30
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	4608      	mov	r0, r1
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	4603      	mov	r3, r0
 8001540:	817b      	strh	r3, [r7, #10]
 8001542:	460b      	mov	r3, r1
 8001544:	813b      	strh	r3, [r7, #8]
 8001546:	4613      	mov	r3, r2
 8001548:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800154a:	f7ff fc1f 	bl	8000d8c <HAL_GetTick>
 800154e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b20      	cmp	r3, #32
 800155a:	f040 8214 	bne.w	8001986 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2319      	movs	r3, #25
 8001564:	2201      	movs	r2, #1
 8001566:	497b      	ldr	r1, [pc, #492]	@ (8001754 <HAL_I2C_Mem_Read+0x224>)
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 fc29 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001574:	2302      	movs	r3, #2
 8001576:	e207      	b.n	8001988 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_I2C_Mem_Read+0x56>
 8001582:	2302      	movs	r3, #2
 8001584:	e200      	b.n	8001988 <HAL_I2C_Mem_Read+0x458>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b01      	cmp	r3, #1
 800159a:	d007      	beq.n	80015ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2222      	movs	r2, #34	@ 0x22
 80015c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2240      	movs	r2, #64	@ 0x40
 80015c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80015dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001758 <HAL_I2C_Mem_Read+0x228>)
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015ee:	88f8      	ldrh	r0, [r7, #6]
 80015f0:	893a      	ldrh	r2, [r7, #8]
 80015f2:	8979      	ldrh	r1, [r7, #10]
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4603      	mov	r3, r0
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 faf6 	bl	8001bf0 <I2C_RequestMemoryRead>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e1bc      	b.n	8001988 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001612:	2b00      	cmp	r3, #0
 8001614:	d113      	bne.n	800163e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e190      	b.n	8001960 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001642:	2b01      	cmp	r3, #1
 8001644:	d11b      	bne.n	800167e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001654:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e170      	b.n	8001960 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001682:	2b02      	cmp	r3, #2
 8001684:	d11b      	bne.n	80016be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001694:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	e150      	b.n	8001960 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016d4:	e144      	b.n	8001960 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016da:	2b03      	cmp	r3, #3
 80016dc:	f200 80f1 	bhi.w	80018c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d123      	bne.n	8001730 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fcc9 	bl	8002084 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e145      	b.n	8001988 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001718:	3b01      	subs	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001724:	b29b      	uxth	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800172e:	e117      	b.n	8001960 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001734:	2b02      	cmp	r3, #2
 8001736:	d14e      	bne.n	80017d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800173e:	2200      	movs	r2, #0
 8001740:	4906      	ldr	r1, [pc, #24]	@ (800175c <HAL_I2C_Mem_Read+0x22c>)
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 fb3c 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d008      	beq.n	8001760 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e11a      	b.n	8001988 <HAL_I2C_Mem_Read+0x458>
 8001752:	bf00      	nop
 8001754:	00100002 	.word	0x00100002
 8001758:	ffff0000 	.word	0xffff0000
 800175c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800176e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017be:	3b01      	subs	r3, #1
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80017d4:	e0c4      	b.n	8001960 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017dc:	2200      	movs	r2, #0
 80017de:	496c      	ldr	r1, [pc, #432]	@ (8001990 <HAL_I2C_Mem_Read+0x460>)
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 faed 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0cb      	b.n	8001988 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181c:	3b01      	subs	r3, #1
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001828:	b29b      	uxth	r3, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001838:	2200      	movs	r2, #0
 800183a:	4955      	ldr	r1, [pc, #340]	@ (8001990 <HAL_I2C_Mem_Read+0x460>)
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 fabf 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e09d      	b.n	8001988 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800185a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80018c0:	e04e      	b.n	8001960 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fbdc 	bl	8002084 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e058      	b.n	8001988 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3b01      	subs	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b04      	cmp	r3, #4
 8001914:	d124      	bne.n	8001960 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191a:	2b03      	cmp	r3, #3
 800191c:	d107      	bne.n	800192e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800192c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	f47f aeb6 	bne.w	80016d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001986:	2302      	movs	r3, #2
  }
}
 8001988:	4618      	mov	r0, r3
 800198a:	3728      	adds	r7, #40	@ 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	00010004 	.word	0x00010004

08001994 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	@ 0x28
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	460b      	mov	r3, r1
 80019a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff f9f2 	bl	8000d8c <HAL_GetTick>
 80019a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b20      	cmp	r3, #32
 80019b8:	f040 8111 	bne.w	8001bde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2319      	movs	r3, #25
 80019c2:	2201      	movs	r2, #1
 80019c4:	4988      	ldr	r1, [pc, #544]	@ (8001be8 <HAL_I2C_IsDeviceReady+0x254>)
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f9fa 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80019d2:	2302      	movs	r3, #2
 80019d4:	e104      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_I2C_IsDeviceReady+0x50>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e0fd      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d007      	beq.n	8001a0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2224      	movs	r2, #36	@ 0x24
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a70      	ldr	r2, [pc, #448]	@ (8001bec <HAL_I2C_IsDeviceReady+0x258>)
 8001a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f9b8 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00d      	beq.n	8001a72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a64:	d103      	bne.n	8001a6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a6c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e0b6      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a82:	f7ff f983 	bl	8000d8c <HAL_GetTick>
 8001a86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ab6:	e025      	b.n	8001b04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ab8:	f7ff f968 	bl	8000d8c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d302      	bcc.n	8001ace <HAL_I2C_IsDeviceReady+0x13a>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	22a0      	movs	r2, #160	@ 0xa0
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b0e:	d005      	beq.n	8001b1c <HAL_I2C_IsDeviceReady+0x188>
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <HAL_I2C_IsDeviceReady+0x188>
 8001b16:	7dbb      	ldrb	r3, [r7, #22]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0cd      	beq.n	8001ab8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d129      	bne.n	8001b86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2319      	movs	r3, #25
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4921      	ldr	r1, [pc, #132]	@ (8001be8 <HAL_I2C_IsDeviceReady+0x254>)
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f92c 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e036      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e02c      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2319      	movs	r3, #25
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	490f      	ldr	r1, [pc, #60]	@ (8001be8 <HAL_I2C_IsDeviceReady+0x254>)
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f908 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e012      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	f4ff af32 	bcc.w	8001a2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
  }
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	00100002 	.word	0x00100002
 8001bec:	ffff0000 	.word	0xffff0000

08001bf0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	817b      	strh	r3, [r7, #10]
 8001c02:	460b      	mov	r3, r1
 8001c04:	813b      	strh	r3, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f8c2 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00d      	beq.n	8001c5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c50:	d103      	bne.n	8001c5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0aa      	b.n	8001db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c5e:	897b      	ldrh	r3, [r7, #10]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	6a3a      	ldr	r2, [r7, #32]
 8001c72:	4952      	ldr	r1, [pc, #328]	@ (8001dbc <I2C_RequestMemoryRead+0x1cc>)
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f91d 	bl	8001eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e097      	b.n	8001db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9c:	6a39      	ldr	r1, [r7, #32]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f9a8 	bl	8001ff4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00d      	beq.n	8001cc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d107      	bne.n	8001cc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e076      	b.n	8001db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ccc:	893b      	ldrh	r3, [r7, #8]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	e021      	b.n	8001d1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001cd8:	893b      	ldrh	r3, [r7, #8]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce8:	6a39      	ldr	r1, [r7, #32]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f982 	bl	8001ff4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00d      	beq.n	8001d12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d107      	bne.n	8001d0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e050      	b.n	8001db4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d12:	893b      	ldrh	r3, [r7, #8]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d1e:	6a39      	ldr	r1, [r7, #32]
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f967 	bl	8001ff4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00d      	beq.n	8001d48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d107      	bne.n	8001d44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e035      	b.n	8001db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f82b 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d7e:	d103      	bne.n	8001d88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e013      	b.n	8001db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d8c:	897b      	ldrh	r3, [r7, #10]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	4906      	ldr	r1, [pc, #24]	@ (8001dbc <I2C_RequestMemoryRead+0x1cc>)
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f886 	bl	8001eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	00010002 	.word	0x00010002

08001dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dd0:	e048      	b.n	8001e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dd8:	d044      	beq.n	8001e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dda:	f7fe ffd7 	bl	8000d8c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d302      	bcc.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d139      	bne.n	8001e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10d      	bne.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	4013      	ands	r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	e00c      	b.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	4013      	ands	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d116      	bne.n	8001e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f043 0220 	orr.w	r2, r3, #32
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e023      	b.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	0c1b      	lsrs	r3, r3, #16
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d10d      	bne.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	43da      	mvns	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	e00c      	b.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	43da      	mvns	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4013      	ands	r3, r2
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d093      	beq.n	8001dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ec2:	e071      	b.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed2:	d123      	bne.n	8001f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f043 0204 	orr.w	r2, r3, #4
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e067      	b.n	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f22:	d041      	beq.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f24:	f7fe ff32 	bl	8000d8c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d302      	bcc.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d136      	bne.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d10c      	bne.n	8001f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	e00b      	b.n	8001f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	43da      	mvns	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf14      	ite	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	2300      	moveq	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d016      	beq.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e021      	b.n	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10c      	bne.n	8001fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	e00b      	b.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f af6d 	bne.w	8001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002000:	e034      	b.n	800206c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f89b 	bl	800213e <I2C_IsAcknowledgeFailed>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e034      	b.n	800207c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002018:	d028      	beq.n	800206c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201a:	f7fe feb7 	bl	8000d8c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	429a      	cmp	r2, r3
 8002028:	d302      	bcc.n	8002030 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d11d      	bne.n	800206c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800203a:	2b80      	cmp	r3, #128	@ 0x80
 800203c:	d016      	beq.n	800206c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	f043 0220 	orr.w	r2, r3, #32
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e007      	b.n	800207c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002076:	2b80      	cmp	r3, #128	@ 0x80
 8002078:	d1c3      	bne.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002090:	e049      	b.n	8002126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b10      	cmp	r3, #16
 800209e:	d119      	bne.n	80020d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0210 	mvn.w	r2, #16
 80020a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e030      	b.n	8002136 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d4:	f7fe fe5a 	bl	8000d8c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d302      	bcc.n	80020ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d11d      	bne.n	8002126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f4:	2b40      	cmp	r3, #64	@ 0x40
 80020f6:	d016      	beq.n	8002126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f043 0220 	orr.w	r2, r3, #32
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e007      	b.n	8002136 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002130:	2b40      	cmp	r3, #64	@ 0x40
 8002132:	d1ae      	bne.n	8002092 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002154:	d11b      	bne.n	800218e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800215e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f043 0204 	orr.w	r2, r3, #4
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e267      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d075      	beq.n	80022a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ba:	4b88      	ldr	r3, [pc, #544]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d00c      	beq.n	80021e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c6:	4b85      	ldr	r3, [pc, #532]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d112      	bne.n	80021f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d2:	4b82      	ldr	r3, [pc, #520]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021de:	d10b      	bne.n	80021f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	4b7e      	ldr	r3, [pc, #504]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d05b      	beq.n	80022a4 <HAL_RCC_OscConfig+0x108>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d157      	bne.n	80022a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e242      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002200:	d106      	bne.n	8002210 <HAL_RCC_OscConfig+0x74>
 8002202:	4b76      	ldr	r3, [pc, #472]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a75      	ldr	r2, [pc, #468]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0xb0>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x98>
 800221a:	4b70      	ldr	r3, [pc, #448]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a6f      	ldr	r2, [pc, #444]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b6d      	ldr	r3, [pc, #436]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6c      	ldr	r2, [pc, #432]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0xb0>
 8002234:	4b69      	ldr	r3, [pc, #420]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a68      	ldr	r2, [pc, #416]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b66      	ldr	r3, [pc, #408]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a65      	ldr	r2, [pc, #404]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fd9a 	bl	8000d8c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7fe fd96 	bl	8000d8c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	@ 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e207      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b5b      	ldr	r3, [pc, #364]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0xc0>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fd86 	bl	8000d8c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe fd82 	bl	8000d8c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	@ 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1f3      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	4b51      	ldr	r3, [pc, #324]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0xe8>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d063      	beq.n	800237a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022be:	4b47      	ldr	r3, [pc, #284]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d11c      	bne.n	8002304 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ca:	4b44      	ldr	r3, [pc, #272]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d116      	bne.n	8002304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x152>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1c7      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b3b      	ldr	r3, [pc, #236]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4937      	ldr	r1, [pc, #220]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	e03a      	b.n	800237a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230c:	4b34      	ldr	r3, [pc, #208]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002312:	f7fe fd3b 	bl	8000d8c <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231a:	f7fe fd37 	bl	8000d8c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1a8      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	4b2b      	ldr	r3, [pc, #172]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002338:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4925      	ldr	r1, [pc, #148]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234e:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fd1a 	bl	8000d8c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7fe fd16 	bl	8000d8c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e187      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d036      	beq.n	80023f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_RCC_OscConfig+0x248>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002394:	f7fe fcfa 	bl	8000d8c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239c:	f7fe fcf6 	bl	8000d8c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e167      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80023b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x200>
 80023ba:	e01b      	b.n	80023f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_RCC_OscConfig+0x248>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7fe fce3 	bl	8000d8c <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	e00e      	b.n	80023e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ca:	f7fe fcdf 	bl	8000d8c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d907      	bls.n	80023e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e150      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
 80023dc:	40023800 	.word	0x40023800
 80023e0:	42470000 	.word	0x42470000
 80023e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	4b88      	ldr	r3, [pc, #544]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80023ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ea      	bne.n	80023ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8097 	beq.w	8002530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b81      	ldr	r3, [pc, #516]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b7d      	ldr	r3, [pc, #500]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a7c      	ldr	r2, [pc, #496]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b7a      	ldr	r3, [pc, #488]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b77      	ldr	r3, [pc, #476]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d118      	bne.n	8002470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243e:	4b74      	ldr	r3, [pc, #464]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a73      	ldr	r2, [pc, #460]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244a:	f7fe fc9f 	bl	8000d8c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002452:	f7fe fc9b 	bl	8000d8c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e10c      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	4b6a      	ldr	r3, [pc, #424]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x2ea>
 8002478:	4b64      	ldr	r3, [pc, #400]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	4a63      	ldr	r2, [pc, #396]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6713      	str	r3, [r2, #112]	@ 0x70
 8002484:	e01c      	b.n	80024c0 <HAL_RCC_OscConfig+0x324>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b05      	cmp	r3, #5
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x30c>
 800248e:	4b5f      	ldr	r3, [pc, #380]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	4a5e      	ldr	r2, [pc, #376]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	6713      	str	r3, [r2, #112]	@ 0x70
 800249a:	4b5c      	ldr	r3, [pc, #368]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	4a5b      	ldr	r2, [pc, #364]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0x324>
 80024a8:	4b58      	ldr	r3, [pc, #352]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	4a57      	ldr	r2, [pc, #348]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b4:	4b55      	ldr	r3, [pc, #340]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b8:	4a54      	ldr	r2, [pc, #336]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024ba:	f023 0304 	bic.w	r3, r3, #4
 80024be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe fc60 	bl	8000d8c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe fc5c 	bl	8000d8c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0cb      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e6:	4b49      	ldr	r3, [pc, #292]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ee      	beq.n	80024d0 <HAL_RCC_OscConfig+0x334>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fc4a 	bl	8000d8c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe fc46 	bl	8000d8c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e0b5      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002512:	4b3e      	ldr	r3, [pc, #248]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1ee      	bne.n	80024fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002524:	4b39      	ldr	r3, [pc, #228]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	4a38      	ldr	r2, [pc, #224]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800252e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a1 	beq.w	800267c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800253a:	4b34      	ldr	r3, [pc, #208]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d05c      	beq.n	8002600 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d141      	bne.n	80025d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <HAL_RCC_OscConfig+0x478>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fc1a 	bl	8000d8c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe fc16 	bl	8000d8c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e087      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	4b27      	ldr	r3, [pc, #156]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	3b01      	subs	r3, #1
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	491b      	ldr	r1, [pc, #108]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <HAL_RCC_OscConfig+0x478>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fbef 	bl	8000d8c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7fe fbeb 	bl	8000d8c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e05c      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c4:	4b11      	ldr	r3, [pc, #68]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x416>
 80025d0:	e054      	b.n	800267c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <HAL_RCC_OscConfig+0x478>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fbd8 	bl	8000d8c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fbd4 	bl	8000d8c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e045      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x444>
 80025fe:	e03d      	b.n	800267c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e038      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
 800260c:	40023800 	.word	0x40023800
 8002610:	40007000 	.word	0x40007000
 8002614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_RCC_OscConfig+0x4ec>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d028      	beq.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d121      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d11a      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800264e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002650:	4293      	cmp	r3, r2
 8002652:	d111      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	3b01      	subs	r3, #1
 8002662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d107      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0cc      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b68      	ldr	r3, [pc, #416]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d90c      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b65      	ldr	r3, [pc, #404]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b63      	ldr	r3, [pc, #396]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b8      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e0:	4b59      	ldr	r3, [pc, #356]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a58      	ldr	r2, [pc, #352]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f8:	4b53      	ldr	r3, [pc, #332]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4a52      	ldr	r2, [pc, #328]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b50      	ldr	r3, [pc, #320]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	494d      	ldr	r1, [pc, #308]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d044      	beq.n	80027ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b47      	ldr	r3, [pc, #284]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d119      	bne.n	800276a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07f      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d003      	beq.n	800274a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002746:	2b03      	cmp	r3, #3
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274a:	4b3f      	ldr	r3, [pc, #252]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06f      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275a:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e067      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276a:	4b37      	ldr	r3, [pc, #220]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4934      	ldr	r1, [pc, #208]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	4313      	orrs	r3, r2
 800277a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800277c:	f7fe fb06 	bl	8000d8c <HAL_GetTick>
 8002780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	e00a      	b.n	800279a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7fe fb02 	bl	8000d8c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e04f      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	4b2b      	ldr	r3, [pc, #172]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 020c 	and.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1eb      	bne.n	8002784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ac:	4b25      	ldr	r3, [pc, #148]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d20c      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e032      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b19      	ldr	r3, [pc, #100]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4916      	ldr	r1, [pc, #88]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fe:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	490e      	ldr	r1, [pc, #56]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002812:	f000 f821 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8002816:	4602      	mov	r2, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	490a      	ldr	r1, [pc, #40]	@ (800284c <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	5ccb      	ldrb	r3, [r1, r3]
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	4a09      	ldr	r2, [pc, #36]	@ (8002850 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800282e:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fa66 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023c00 	.word	0x40023c00
 8002848:	40023800 	.word	0x40023800
 800284c:	080042dc 	.word	0x080042dc
 8002850:	20000000 	.word	0x20000000
 8002854:	20000004 	.word	0x20000004

08002858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b094      	sub	sp, #80	@ 0x50
 800285e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002870:	4b79      	ldr	r3, [pc, #484]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d00d      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x40>
 800287c:	2b08      	cmp	r3, #8
 800287e:	f200 80e1 	bhi.w	8002a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x34>
 8002886:	2b04      	cmp	r3, #4
 8002888:	d003      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x3a>
 800288a:	e0db      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800288c:	4b73      	ldr	r3, [pc, #460]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800288e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002890:	e0db      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002892:	4b72      	ldr	r3, [pc, #456]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002894:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002896:	e0d8      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002898:	4b6f      	ldr	r3, [pc, #444]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d063      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	2200      	movs	r2, #0
 80028b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c2:	2300      	movs	r3, #0
 80028c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028ca:	4622      	mov	r2, r4
 80028cc:	462b      	mov	r3, r5
 80028ce:	f04f 0000 	mov.w	r0, #0
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	0159      	lsls	r1, r3, #5
 80028d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028dc:	0150      	lsls	r0, r2, #5
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4621      	mov	r1, r4
 80028e4:	1a51      	subs	r1, r2, r1
 80028e6:	6139      	str	r1, [r7, #16]
 80028e8:	4629      	mov	r1, r5
 80028ea:	eb63 0301 	sbc.w	r3, r3, r1
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028fc:	4659      	mov	r1, fp
 80028fe:	018b      	lsls	r3, r1, #6
 8002900:	4651      	mov	r1, sl
 8002902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002906:	4651      	mov	r1, sl
 8002908:	018a      	lsls	r2, r1, #6
 800290a:	4651      	mov	r1, sl
 800290c:	ebb2 0801 	subs.w	r8, r2, r1
 8002910:	4659      	mov	r1, fp
 8002912:	eb63 0901 	sbc.w	r9, r3, r1
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800292a:	4690      	mov	r8, r2
 800292c:	4699      	mov	r9, r3
 800292e:	4623      	mov	r3, r4
 8002930:	eb18 0303 	adds.w	r3, r8, r3
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	462b      	mov	r3, r5
 8002938:	eb49 0303 	adc.w	r3, r9, r3
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800294a:	4629      	mov	r1, r5
 800294c:	028b      	lsls	r3, r1, #10
 800294e:	4621      	mov	r1, r4
 8002950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002954:	4621      	mov	r1, r4
 8002956:	028a      	lsls	r2, r1, #10
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800295e:	2200      	movs	r2, #0
 8002960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002968:	f7fd fc82 	bl	8000270 <__aeabi_uldivmod>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4613      	mov	r3, r2
 8002972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002974:	e058      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002976:	4b38      	ldr	r3, [pc, #224]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	2200      	movs	r2, #0
 800297e:	4618      	mov	r0, r3
 8002980:	4611      	mov	r1, r2
 8002982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002986:	623b      	str	r3, [r7, #32]
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
 800298c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002990:	4642      	mov	r2, r8
 8002992:	464b      	mov	r3, r9
 8002994:	f04f 0000 	mov.w	r0, #0
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	0159      	lsls	r1, r3, #5
 800299e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a2:	0150      	lsls	r0, r2, #5
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4641      	mov	r1, r8
 80029aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ae:	4649      	mov	r1, r9
 80029b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029c8:	ebb2 040a 	subs.w	r4, r2, sl
 80029cc:	eb63 050b 	sbc.w	r5, r3, fp
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	00eb      	lsls	r3, r5, #3
 80029da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029de:	00e2      	lsls	r2, r4, #3
 80029e0:	4614      	mov	r4, r2
 80029e2:	461d      	mov	r5, r3
 80029e4:	4643      	mov	r3, r8
 80029e6:	18e3      	adds	r3, r4, r3
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	464b      	mov	r3, r9
 80029ec:	eb45 0303 	adc.w	r3, r5, r3
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029fe:	4629      	mov	r1, r5
 8002a00:	028b      	lsls	r3, r1, #10
 8002a02:	4621      	mov	r1, r4
 8002a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a08:	4621      	mov	r1, r4
 8002a0a:	028a      	lsls	r2, r1, #10
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a12:	2200      	movs	r2, #0
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	61fa      	str	r2, [r7, #28]
 8002a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1c:	f7fd fc28 	bl	8000270 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4613      	mov	r3, r2
 8002a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a42:	e002      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3750      	adds	r7, #80	@ 0x50
 8002a50:	46bd      	mov	sp, r7
 8002a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	00f42400 	.word	0x00f42400

08002a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a64:	4b03      	ldr	r3, [pc, #12]	@ (8002a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0a9b      	lsrs	r3, r3, #10
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4903      	ldr	r1, [pc, #12]	@ (8002a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080042ec 	.word	0x080042ec

08002aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa4:	f7ff ffdc 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0b5b      	lsrs	r3, r3, #13
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4903      	ldr	r1, [pc, #12]	@ (8002ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	080042ec 	.word	0x080042ec

08002ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e042      	b.n	8002b60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fd ffac 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2224      	movs	r2, #36	@ 0x24
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f973 	bl	8002df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d175      	bne.n	8002c74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_UART_Transmit+0x2c>
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e06e      	b.n	8002c76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2221      	movs	r2, #33	@ 0x21
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ba6:	f7fe f8f1 	bl	8000d8c <HAL_GetTick>
 8002baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	88fa      	ldrh	r2, [r7, #6]
 8002bb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	88fa      	ldrh	r2, [r7, #6]
 8002bb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc0:	d108      	bne.n	8002bd4 <HAL_UART_Transmit+0x6c>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d104      	bne.n	8002bd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	e003      	b.n	8002bdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bdc:	e02e      	b.n	8002c3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2200      	movs	r2, #0
 8002be6:	2180      	movs	r1, #128	@ 0x80
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f848 	bl	8002c7e <UART_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e03a      	b.n	8002c76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	3302      	adds	r3, #2
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	e007      	b.n	8002c2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1cb      	bne.n	8002bde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2140      	movs	r1, #64	@ 0x40
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f814 	bl	8002c7e <UART_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e006      	b.n	8002c76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e000      	b.n	8002c76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c8e:	e03b      	b.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c96:	d037      	beq.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c98:	f7fe f878 	bl	8000d8c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	6a3a      	ldr	r2, [r7, #32]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d302      	bcc.n	8002cae <UART_WaitOnFlagUntilTimeout+0x30>
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e03a      	b.n	8002d28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d023      	beq.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b80      	cmp	r3, #128	@ 0x80
 8002cc4:	d020      	beq.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b40      	cmp	r3, #64	@ 0x40
 8002cca:	d01d      	beq.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d116      	bne.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f81d 	bl	8002d30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e00f      	b.n	8002d28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4013      	ands	r3, r2
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d0b4      	beq.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b095      	sub	sp, #84	@ 0x54
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d58:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3314      	adds	r3, #20
 8002d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e5      	bne.n	8002d6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d119      	bne.n	8002ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f023 0310 	bic.w	r3, r3, #16
 8002dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dc8:	61ba      	str	r2, [r7, #24]
 8002dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	e841 2300 	strex	r3, r2, [r1]
 8002dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e5      	bne.n	8002da8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002dea:	bf00      	nop
 8002dec:	3754      	adds	r7, #84	@ 0x54
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dfc:	b0c0      	sub	sp, #256	@ 0x100
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e14:	68d9      	ldr	r1, [r3, #12]
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	ea40 0301 	orr.w	r3, r0, r1
 8002e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e50:	f021 010c 	bic.w	r1, r1, #12
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e72:	6999      	ldr	r1, [r3, #24]
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	ea40 0301 	orr.w	r3, r0, r1
 8002e7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b8f      	ldr	r3, [pc, #572]	@ (80030c4 <UART_SetConfig+0x2cc>)
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d005      	beq.n	8002e98 <UART_SetConfig+0xa0>
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b8d      	ldr	r3, [pc, #564]	@ (80030c8 <UART_SetConfig+0x2d0>)
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d104      	bne.n	8002ea2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e98:	f7ff fe02 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 8002e9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ea0:	e003      	b.n	8002eaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ea2:	f7ff fde9 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8002ea6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb4:	f040 810c 	bne.w	80030d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ec2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ec6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	1891      	adds	r1, r2, r2
 8002ed0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ed2:	415b      	adcs	r3, r3
 8002ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ed6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eda:	4621      	mov	r1, r4
 8002edc:	eb12 0801 	adds.w	r8, r2, r1
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	eb43 0901 	adc.w	r9, r3, r1
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efa:	4690      	mov	r8, r2
 8002efc:	4699      	mov	r9, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	eb18 0303 	adds.w	r3, r8, r3
 8002f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f08:	462b      	mov	r3, r5
 8002f0a:	eb49 0303 	adc.w	r3, r9, r3
 8002f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f26:	460b      	mov	r3, r1
 8002f28:	18db      	adds	r3, r3, r3
 8002f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	eb42 0303 	adc.w	r3, r2, r3
 8002f32:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f3c:	f7fd f998 	bl	8000270 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4b61      	ldr	r3, [pc, #388]	@ (80030cc <UART_SetConfig+0x2d4>)
 8002f46:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	011c      	lsls	r4, r3, #4
 8002f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	1891      	adds	r1, r2, r2
 8002f66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f68:	415b      	adcs	r3, r3
 8002f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f70:	4641      	mov	r1, r8
 8002f72:	eb12 0a01 	adds.w	sl, r2, r1
 8002f76:	4649      	mov	r1, r9
 8002f78:	eb43 0b01 	adc.w	fp, r3, r1
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f90:	4692      	mov	sl, r2
 8002f92:	469b      	mov	fp, r3
 8002f94:	4643      	mov	r3, r8
 8002f96:	eb1a 0303 	adds.w	r3, sl, r3
 8002f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	18db      	adds	r3, r3, r3
 8002fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	eb42 0303 	adc.w	r3, r2, r3
 8002fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fd2:	f7fd f94d 	bl	8000270 <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80030cc <UART_SetConfig+0x2d4>)
 8002fde:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2264      	movs	r2, #100	@ 0x64
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	1acb      	subs	r3, r1, r3
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ff2:	4b36      	ldr	r3, [pc, #216]	@ (80030cc <UART_SetConfig+0x2d4>)
 8002ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003000:	441c      	add	r4, r3
 8003002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003006:	2200      	movs	r2, #0
 8003008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800300c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003010:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003014:	4642      	mov	r2, r8
 8003016:	464b      	mov	r3, r9
 8003018:	1891      	adds	r1, r2, r2
 800301a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800301c:	415b      	adcs	r3, r3
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003024:	4641      	mov	r1, r8
 8003026:	1851      	adds	r1, r2, r1
 8003028:	6339      	str	r1, [r7, #48]	@ 0x30
 800302a:	4649      	mov	r1, r9
 800302c:	414b      	adcs	r3, r1
 800302e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800303c:	4659      	mov	r1, fp
 800303e:	00cb      	lsls	r3, r1, #3
 8003040:	4651      	mov	r1, sl
 8003042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003046:	4651      	mov	r1, sl
 8003048:	00ca      	lsls	r2, r1, #3
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	4603      	mov	r3, r0
 8003050:	4642      	mov	r2, r8
 8003052:	189b      	adds	r3, r3, r2
 8003054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003058:	464b      	mov	r3, r9
 800305a:	460a      	mov	r2, r1
 800305c:	eb42 0303 	adc.w	r3, r2, r3
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003070:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003074:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003078:	460b      	mov	r3, r1
 800307a:	18db      	adds	r3, r3, r3
 800307c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800307e:	4613      	mov	r3, r2
 8003080:	eb42 0303 	adc.w	r3, r2, r3
 8003084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800308a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800308e:	f7fd f8ef 	bl	8000270 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <UART_SetConfig+0x2d4>)
 8003098:	fba3 1302 	umull	r1, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2164      	movs	r1, #100	@ 0x64
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	3332      	adds	r3, #50	@ 0x32
 80030aa:	4a08      	ldr	r2, [pc, #32]	@ (80030cc <UART_SetConfig+0x2d4>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4422      	add	r2, r4
 80030be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030c0:	e106      	b.n	80032d0 <UART_SetConfig+0x4d8>
 80030c2:	bf00      	nop
 80030c4:	40011000 	.word	0x40011000
 80030c8:	40011400 	.word	0x40011400
 80030cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030e2:	4642      	mov	r2, r8
 80030e4:	464b      	mov	r3, r9
 80030e6:	1891      	adds	r1, r2, r2
 80030e8:	6239      	str	r1, [r7, #32]
 80030ea:	415b      	adcs	r3, r3
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030f2:	4641      	mov	r1, r8
 80030f4:	1854      	adds	r4, r2, r1
 80030f6:	4649      	mov	r1, r9
 80030f8:	eb43 0501 	adc.w	r5, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	00eb      	lsls	r3, r5, #3
 8003106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310a:	00e2      	lsls	r2, r4, #3
 800310c:	4614      	mov	r4, r2
 800310e:	461d      	mov	r5, r3
 8003110:	4643      	mov	r3, r8
 8003112:	18e3      	adds	r3, r4, r3
 8003114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003118:	464b      	mov	r3, r9
 800311a:	eb45 0303 	adc.w	r3, r5, r3
 800311e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800312e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800313e:	4629      	mov	r1, r5
 8003140:	008b      	lsls	r3, r1, #2
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003148:	4621      	mov	r1, r4
 800314a:	008a      	lsls	r2, r1, #2
 800314c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003150:	f7fd f88e 	bl	8000270 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4b60      	ldr	r3, [pc, #384]	@ (80032dc <UART_SetConfig+0x4e4>)
 800315a:	fba3 2302 	umull	r2, r3, r3, r2
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	011c      	lsls	r4, r3, #4
 8003162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003166:	2200      	movs	r2, #0
 8003168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800316c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003170:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	1891      	adds	r1, r2, r2
 800317a:	61b9      	str	r1, [r7, #24]
 800317c:	415b      	adcs	r3, r3
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003184:	4641      	mov	r1, r8
 8003186:	1851      	adds	r1, r2, r1
 8003188:	6139      	str	r1, [r7, #16]
 800318a:	4649      	mov	r1, r9
 800318c:	414b      	adcs	r3, r1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800319c:	4659      	mov	r1, fp
 800319e:	00cb      	lsls	r3, r1, #3
 80031a0:	4651      	mov	r1, sl
 80031a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a6:	4651      	mov	r1, sl
 80031a8:	00ca      	lsls	r2, r1, #3
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	4642      	mov	r2, r8
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031b8:	464b      	mov	r3, r9
 80031ba:	460a      	mov	r2, r1
 80031bc:	eb42 0303 	adc.w	r3, r2, r3
 80031c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031dc:	4649      	mov	r1, r9
 80031de:	008b      	lsls	r3, r1, #2
 80031e0:	4641      	mov	r1, r8
 80031e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e6:	4641      	mov	r1, r8
 80031e8:	008a      	lsls	r2, r1, #2
 80031ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031ee:	f7fd f83f 	bl	8000270 <__aeabi_uldivmod>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	4b38      	ldr	r3, [pc, #224]	@ (80032dc <UART_SetConfig+0x4e4>)
 80031fa:	fba3 2301 	umull	r2, r3, r3, r1
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2264      	movs	r2, #100	@ 0x64
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	1acb      	subs	r3, r1, r3
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	3332      	adds	r3, #50	@ 0x32
 800320c:	4a33      	ldr	r2, [pc, #204]	@ (80032dc <UART_SetConfig+0x4e4>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003218:	441c      	add	r4, r3
 800321a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800321e:	2200      	movs	r2, #0
 8003220:	673b      	str	r3, [r7, #112]	@ 0x70
 8003222:	677a      	str	r2, [r7, #116]	@ 0x74
 8003224:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	1891      	adds	r1, r2, r2
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	415b      	adcs	r3, r3
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003238:	4641      	mov	r1, r8
 800323a:	1851      	adds	r1, r2, r1
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	4649      	mov	r1, r9
 8003240:	414b      	adcs	r3, r1
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003250:	4659      	mov	r1, fp
 8003252:	00cb      	lsls	r3, r1, #3
 8003254:	4651      	mov	r1, sl
 8003256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325a:	4651      	mov	r1, sl
 800325c:	00ca      	lsls	r2, r1, #3
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	4603      	mov	r3, r0
 8003264:	4642      	mov	r2, r8
 8003266:	189b      	adds	r3, r3, r2
 8003268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800326a:	464b      	mov	r3, r9
 800326c:	460a      	mov	r2, r1
 800326e:	eb42 0303 	adc.w	r3, r2, r3
 8003272:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	663b      	str	r3, [r7, #96]	@ 0x60
 800327e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800328c:	4649      	mov	r1, r9
 800328e:	008b      	lsls	r3, r1, #2
 8003290:	4641      	mov	r1, r8
 8003292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003296:	4641      	mov	r1, r8
 8003298:	008a      	lsls	r2, r1, #2
 800329a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800329e:	f7fc ffe7 	bl	8000270 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4b0d      	ldr	r3, [pc, #52]	@ (80032dc <UART_SetConfig+0x4e4>)
 80032a8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2164      	movs	r1, #100	@ 0x64
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	3332      	adds	r3, #50	@ 0x32
 80032ba:	4a08      	ldr	r2, [pc, #32]	@ (80032dc <UART_SetConfig+0x4e4>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4422      	add	r2, r4
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032d6:	46bd      	mov	sp, r7
 80032d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032dc:	51eb851f 	.word	0x51eb851f

080032e0 <std>:
 80032e0:	2300      	movs	r3, #0
 80032e2:	b510      	push	{r4, lr}
 80032e4:	4604      	mov	r4, r0
 80032e6:	e9c0 3300 	strd	r3, r3, [r0]
 80032ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032ee:	6083      	str	r3, [r0, #8]
 80032f0:	8181      	strh	r1, [r0, #12]
 80032f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80032f4:	81c2      	strh	r2, [r0, #14]
 80032f6:	6183      	str	r3, [r0, #24]
 80032f8:	4619      	mov	r1, r3
 80032fa:	2208      	movs	r2, #8
 80032fc:	305c      	adds	r0, #92	@ 0x5c
 80032fe:	f000 fa01 	bl	8003704 <memset>
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <std+0x58>)
 8003304:	6263      	str	r3, [r4, #36]	@ 0x24
 8003306:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <std+0x5c>)
 8003308:	62a3      	str	r3, [r4, #40]	@ 0x28
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <std+0x60>)
 800330c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800330e:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <std+0x64>)
 8003310:	6323      	str	r3, [r4, #48]	@ 0x30
 8003312:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <std+0x68>)
 8003314:	6224      	str	r4, [r4, #32]
 8003316:	429c      	cmp	r4, r3
 8003318:	d006      	beq.n	8003328 <std+0x48>
 800331a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800331e:	4294      	cmp	r4, r2
 8003320:	d002      	beq.n	8003328 <std+0x48>
 8003322:	33d0      	adds	r3, #208	@ 0xd0
 8003324:	429c      	cmp	r4, r3
 8003326:	d105      	bne.n	8003334 <std+0x54>
 8003328:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800332c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003330:	f000 ba60 	b.w	80037f4 <__retarget_lock_init_recursive>
 8003334:	bd10      	pop	{r4, pc}
 8003336:	bf00      	nop
 8003338:	08003555 	.word	0x08003555
 800333c:	08003577 	.word	0x08003577
 8003340:	080035af 	.word	0x080035af
 8003344:	080035d3 	.word	0x080035d3
 8003348:	20000144 	.word	0x20000144

0800334c <stdio_exit_handler>:
 800334c:	4a02      	ldr	r2, [pc, #8]	@ (8003358 <stdio_exit_handler+0xc>)
 800334e:	4903      	ldr	r1, [pc, #12]	@ (800335c <stdio_exit_handler+0x10>)
 8003350:	4803      	ldr	r0, [pc, #12]	@ (8003360 <stdio_exit_handler+0x14>)
 8003352:	f000 b869 	b.w	8003428 <_fwalk_sglue>
 8003356:	bf00      	nop
 8003358:	2000000c 	.word	0x2000000c
 800335c:	08004095 	.word	0x08004095
 8003360:	2000001c 	.word	0x2000001c

08003364 <cleanup_stdio>:
 8003364:	6841      	ldr	r1, [r0, #4]
 8003366:	4b0c      	ldr	r3, [pc, #48]	@ (8003398 <cleanup_stdio+0x34>)
 8003368:	4299      	cmp	r1, r3
 800336a:	b510      	push	{r4, lr}
 800336c:	4604      	mov	r4, r0
 800336e:	d001      	beq.n	8003374 <cleanup_stdio+0x10>
 8003370:	f000 fe90 	bl	8004094 <_fflush_r>
 8003374:	68a1      	ldr	r1, [r4, #8]
 8003376:	4b09      	ldr	r3, [pc, #36]	@ (800339c <cleanup_stdio+0x38>)
 8003378:	4299      	cmp	r1, r3
 800337a:	d002      	beq.n	8003382 <cleanup_stdio+0x1e>
 800337c:	4620      	mov	r0, r4
 800337e:	f000 fe89 	bl	8004094 <_fflush_r>
 8003382:	68e1      	ldr	r1, [r4, #12]
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <cleanup_stdio+0x3c>)
 8003386:	4299      	cmp	r1, r3
 8003388:	d004      	beq.n	8003394 <cleanup_stdio+0x30>
 800338a:	4620      	mov	r0, r4
 800338c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003390:	f000 be80 	b.w	8004094 <_fflush_r>
 8003394:	bd10      	pop	{r4, pc}
 8003396:	bf00      	nop
 8003398:	20000144 	.word	0x20000144
 800339c:	200001ac 	.word	0x200001ac
 80033a0:	20000214 	.word	0x20000214

080033a4 <global_stdio_init.part.0>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <global_stdio_init.part.0+0x30>)
 80033a8:	4c0b      	ldr	r4, [pc, #44]	@ (80033d8 <global_stdio_init.part.0+0x34>)
 80033aa:	4a0c      	ldr	r2, [pc, #48]	@ (80033dc <global_stdio_init.part.0+0x38>)
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	4620      	mov	r0, r4
 80033b0:	2200      	movs	r2, #0
 80033b2:	2104      	movs	r1, #4
 80033b4:	f7ff ff94 	bl	80032e0 <std>
 80033b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033bc:	2201      	movs	r2, #1
 80033be:	2109      	movs	r1, #9
 80033c0:	f7ff ff8e 	bl	80032e0 <std>
 80033c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033c8:	2202      	movs	r2, #2
 80033ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033ce:	2112      	movs	r1, #18
 80033d0:	f7ff bf86 	b.w	80032e0 <std>
 80033d4:	2000027c 	.word	0x2000027c
 80033d8:	20000144 	.word	0x20000144
 80033dc:	0800334d 	.word	0x0800334d

080033e0 <__sfp_lock_acquire>:
 80033e0:	4801      	ldr	r0, [pc, #4]	@ (80033e8 <__sfp_lock_acquire+0x8>)
 80033e2:	f000 ba08 	b.w	80037f6 <__retarget_lock_acquire_recursive>
 80033e6:	bf00      	nop
 80033e8:	20000285 	.word	0x20000285

080033ec <__sfp_lock_release>:
 80033ec:	4801      	ldr	r0, [pc, #4]	@ (80033f4 <__sfp_lock_release+0x8>)
 80033ee:	f000 ba03 	b.w	80037f8 <__retarget_lock_release_recursive>
 80033f2:	bf00      	nop
 80033f4:	20000285 	.word	0x20000285

080033f8 <__sinit>:
 80033f8:	b510      	push	{r4, lr}
 80033fa:	4604      	mov	r4, r0
 80033fc:	f7ff fff0 	bl	80033e0 <__sfp_lock_acquire>
 8003400:	6a23      	ldr	r3, [r4, #32]
 8003402:	b11b      	cbz	r3, 800340c <__sinit+0x14>
 8003404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003408:	f7ff bff0 	b.w	80033ec <__sfp_lock_release>
 800340c:	4b04      	ldr	r3, [pc, #16]	@ (8003420 <__sinit+0x28>)
 800340e:	6223      	str	r3, [r4, #32]
 8003410:	4b04      	ldr	r3, [pc, #16]	@ (8003424 <__sinit+0x2c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f5      	bne.n	8003404 <__sinit+0xc>
 8003418:	f7ff ffc4 	bl	80033a4 <global_stdio_init.part.0>
 800341c:	e7f2      	b.n	8003404 <__sinit+0xc>
 800341e:	bf00      	nop
 8003420:	08003365 	.word	0x08003365
 8003424:	2000027c 	.word	0x2000027c

08003428 <_fwalk_sglue>:
 8003428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800342c:	4607      	mov	r7, r0
 800342e:	4688      	mov	r8, r1
 8003430:	4614      	mov	r4, r2
 8003432:	2600      	movs	r6, #0
 8003434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003438:	f1b9 0901 	subs.w	r9, r9, #1
 800343c:	d505      	bpl.n	800344a <_fwalk_sglue+0x22>
 800343e:	6824      	ldr	r4, [r4, #0]
 8003440:	2c00      	cmp	r4, #0
 8003442:	d1f7      	bne.n	8003434 <_fwalk_sglue+0xc>
 8003444:	4630      	mov	r0, r6
 8003446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800344a:	89ab      	ldrh	r3, [r5, #12]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d907      	bls.n	8003460 <_fwalk_sglue+0x38>
 8003450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003454:	3301      	adds	r3, #1
 8003456:	d003      	beq.n	8003460 <_fwalk_sglue+0x38>
 8003458:	4629      	mov	r1, r5
 800345a:	4638      	mov	r0, r7
 800345c:	47c0      	blx	r8
 800345e:	4306      	orrs	r6, r0
 8003460:	3568      	adds	r5, #104	@ 0x68
 8003462:	e7e9      	b.n	8003438 <_fwalk_sglue+0x10>

08003464 <iprintf>:
 8003464:	b40f      	push	{r0, r1, r2, r3}
 8003466:	b507      	push	{r0, r1, r2, lr}
 8003468:	4906      	ldr	r1, [pc, #24]	@ (8003484 <iprintf+0x20>)
 800346a:	ab04      	add	r3, sp, #16
 800346c:	6808      	ldr	r0, [r1, #0]
 800346e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003472:	6881      	ldr	r1, [r0, #8]
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	f000 fae3 	bl	8003a40 <_vfiprintf_r>
 800347a:	b003      	add	sp, #12
 800347c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003480:	b004      	add	sp, #16
 8003482:	4770      	bx	lr
 8003484:	20000018 	.word	0x20000018

08003488 <putchar>:
 8003488:	4b02      	ldr	r3, [pc, #8]	@ (8003494 <putchar+0xc>)
 800348a:	4601      	mov	r1, r0
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	6882      	ldr	r2, [r0, #8]
 8003490:	f000 be8a 	b.w	80041a8 <_putc_r>
 8003494:	20000018 	.word	0x20000018

08003498 <_puts_r>:
 8003498:	6a03      	ldr	r3, [r0, #32]
 800349a:	b570      	push	{r4, r5, r6, lr}
 800349c:	6884      	ldr	r4, [r0, #8]
 800349e:	4605      	mov	r5, r0
 80034a0:	460e      	mov	r6, r1
 80034a2:	b90b      	cbnz	r3, 80034a8 <_puts_r+0x10>
 80034a4:	f7ff ffa8 	bl	80033f8 <__sinit>
 80034a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034aa:	07db      	lsls	r3, r3, #31
 80034ac:	d405      	bmi.n	80034ba <_puts_r+0x22>
 80034ae:	89a3      	ldrh	r3, [r4, #12]
 80034b0:	0598      	lsls	r0, r3, #22
 80034b2:	d402      	bmi.n	80034ba <_puts_r+0x22>
 80034b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034b6:	f000 f99e 	bl	80037f6 <__retarget_lock_acquire_recursive>
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	0719      	lsls	r1, r3, #28
 80034be:	d502      	bpl.n	80034c6 <_puts_r+0x2e>
 80034c0:	6923      	ldr	r3, [r4, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d135      	bne.n	8003532 <_puts_r+0x9a>
 80034c6:	4621      	mov	r1, r4
 80034c8:	4628      	mov	r0, r5
 80034ca:	f000 f8c5 	bl	8003658 <__swsetup_r>
 80034ce:	b380      	cbz	r0, 8003532 <_puts_r+0x9a>
 80034d0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80034d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034d6:	07da      	lsls	r2, r3, #31
 80034d8:	d405      	bmi.n	80034e6 <_puts_r+0x4e>
 80034da:	89a3      	ldrh	r3, [r4, #12]
 80034dc:	059b      	lsls	r3, r3, #22
 80034de:	d402      	bmi.n	80034e6 <_puts_r+0x4e>
 80034e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034e2:	f000 f989 	bl	80037f8 <__retarget_lock_release_recursive>
 80034e6:	4628      	mov	r0, r5
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	da04      	bge.n	80034f8 <_puts_r+0x60>
 80034ee:	69a2      	ldr	r2, [r4, #24]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	dc17      	bgt.n	8003524 <_puts_r+0x8c>
 80034f4:	290a      	cmp	r1, #10
 80034f6:	d015      	beq.n	8003524 <_puts_r+0x8c>
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	6022      	str	r2, [r4, #0]
 80034fe:	7019      	strb	r1, [r3, #0]
 8003500:	68a3      	ldr	r3, [r4, #8]
 8003502:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003506:	3b01      	subs	r3, #1
 8003508:	60a3      	str	r3, [r4, #8]
 800350a:	2900      	cmp	r1, #0
 800350c:	d1ed      	bne.n	80034ea <_puts_r+0x52>
 800350e:	2b00      	cmp	r3, #0
 8003510:	da11      	bge.n	8003536 <_puts_r+0x9e>
 8003512:	4622      	mov	r2, r4
 8003514:	210a      	movs	r1, #10
 8003516:	4628      	mov	r0, r5
 8003518:	f000 f85f 	bl	80035da <__swbuf_r>
 800351c:	3001      	adds	r0, #1
 800351e:	d0d7      	beq.n	80034d0 <_puts_r+0x38>
 8003520:	250a      	movs	r5, #10
 8003522:	e7d7      	b.n	80034d4 <_puts_r+0x3c>
 8003524:	4622      	mov	r2, r4
 8003526:	4628      	mov	r0, r5
 8003528:	f000 f857 	bl	80035da <__swbuf_r>
 800352c:	3001      	adds	r0, #1
 800352e:	d1e7      	bne.n	8003500 <_puts_r+0x68>
 8003530:	e7ce      	b.n	80034d0 <_puts_r+0x38>
 8003532:	3e01      	subs	r6, #1
 8003534:	e7e4      	b.n	8003500 <_puts_r+0x68>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	6022      	str	r2, [r4, #0]
 800353c:	220a      	movs	r2, #10
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e7ee      	b.n	8003520 <_puts_r+0x88>
	...

08003544 <puts>:
 8003544:	4b02      	ldr	r3, [pc, #8]	@ (8003550 <puts+0xc>)
 8003546:	4601      	mov	r1, r0
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	f7ff bfa5 	b.w	8003498 <_puts_r>
 800354e:	bf00      	nop
 8003550:	20000018 	.word	0x20000018

08003554 <__sread>:
 8003554:	b510      	push	{r4, lr}
 8003556:	460c      	mov	r4, r1
 8003558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800355c:	f000 f8fc 	bl	8003758 <_read_r>
 8003560:	2800      	cmp	r0, #0
 8003562:	bfab      	itete	ge
 8003564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003566:	89a3      	ldrhlt	r3, [r4, #12]
 8003568:	181b      	addge	r3, r3, r0
 800356a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800356e:	bfac      	ite	ge
 8003570:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003572:	81a3      	strhlt	r3, [r4, #12]
 8003574:	bd10      	pop	{r4, pc}

08003576 <__swrite>:
 8003576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357a:	461f      	mov	r7, r3
 800357c:	898b      	ldrh	r3, [r1, #12]
 800357e:	05db      	lsls	r3, r3, #23
 8003580:	4605      	mov	r5, r0
 8003582:	460c      	mov	r4, r1
 8003584:	4616      	mov	r6, r2
 8003586:	d505      	bpl.n	8003594 <__swrite+0x1e>
 8003588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358c:	2302      	movs	r3, #2
 800358e:	2200      	movs	r2, #0
 8003590:	f000 f8d0 	bl	8003734 <_lseek_r>
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800359a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800359e:	81a3      	strh	r3, [r4, #12]
 80035a0:	4632      	mov	r2, r6
 80035a2:	463b      	mov	r3, r7
 80035a4:	4628      	mov	r0, r5
 80035a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035aa:	f000 b8e7 	b.w	800377c <_write_r>

080035ae <__sseek>:
 80035ae:	b510      	push	{r4, lr}
 80035b0:	460c      	mov	r4, r1
 80035b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b6:	f000 f8bd 	bl	8003734 <_lseek_r>
 80035ba:	1c43      	adds	r3, r0, #1
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	bf15      	itete	ne
 80035c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80035c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80035c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80035ca:	81a3      	strheq	r3, [r4, #12]
 80035cc:	bf18      	it	ne
 80035ce:	81a3      	strhne	r3, [r4, #12]
 80035d0:	bd10      	pop	{r4, pc}

080035d2 <__sclose>:
 80035d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d6:	f000 b89d 	b.w	8003714 <_close_r>

080035da <__swbuf_r>:
 80035da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035dc:	460e      	mov	r6, r1
 80035de:	4614      	mov	r4, r2
 80035e0:	4605      	mov	r5, r0
 80035e2:	b118      	cbz	r0, 80035ec <__swbuf_r+0x12>
 80035e4:	6a03      	ldr	r3, [r0, #32]
 80035e6:	b90b      	cbnz	r3, 80035ec <__swbuf_r+0x12>
 80035e8:	f7ff ff06 	bl	80033f8 <__sinit>
 80035ec:	69a3      	ldr	r3, [r4, #24]
 80035ee:	60a3      	str	r3, [r4, #8]
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	071a      	lsls	r2, r3, #28
 80035f4:	d501      	bpl.n	80035fa <__swbuf_r+0x20>
 80035f6:	6923      	ldr	r3, [r4, #16]
 80035f8:	b943      	cbnz	r3, 800360c <__swbuf_r+0x32>
 80035fa:	4621      	mov	r1, r4
 80035fc:	4628      	mov	r0, r5
 80035fe:	f000 f82b 	bl	8003658 <__swsetup_r>
 8003602:	b118      	cbz	r0, 800360c <__swbuf_r+0x32>
 8003604:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003608:	4638      	mov	r0, r7
 800360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	6922      	ldr	r2, [r4, #16]
 8003610:	1a98      	subs	r0, r3, r2
 8003612:	6963      	ldr	r3, [r4, #20]
 8003614:	b2f6      	uxtb	r6, r6
 8003616:	4283      	cmp	r3, r0
 8003618:	4637      	mov	r7, r6
 800361a:	dc05      	bgt.n	8003628 <__swbuf_r+0x4e>
 800361c:	4621      	mov	r1, r4
 800361e:	4628      	mov	r0, r5
 8003620:	f000 fd38 	bl	8004094 <_fflush_r>
 8003624:	2800      	cmp	r0, #0
 8003626:	d1ed      	bne.n	8003604 <__swbuf_r+0x2a>
 8003628:	68a3      	ldr	r3, [r4, #8]
 800362a:	3b01      	subs	r3, #1
 800362c:	60a3      	str	r3, [r4, #8]
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	6022      	str	r2, [r4, #0]
 8003634:	701e      	strb	r6, [r3, #0]
 8003636:	6962      	ldr	r2, [r4, #20]
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	429a      	cmp	r2, r3
 800363c:	d004      	beq.n	8003648 <__swbuf_r+0x6e>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	07db      	lsls	r3, r3, #31
 8003642:	d5e1      	bpl.n	8003608 <__swbuf_r+0x2e>
 8003644:	2e0a      	cmp	r6, #10
 8003646:	d1df      	bne.n	8003608 <__swbuf_r+0x2e>
 8003648:	4621      	mov	r1, r4
 800364a:	4628      	mov	r0, r5
 800364c:	f000 fd22 	bl	8004094 <_fflush_r>
 8003650:	2800      	cmp	r0, #0
 8003652:	d0d9      	beq.n	8003608 <__swbuf_r+0x2e>
 8003654:	e7d6      	b.n	8003604 <__swbuf_r+0x2a>
	...

08003658 <__swsetup_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4b29      	ldr	r3, [pc, #164]	@ (8003700 <__swsetup_r+0xa8>)
 800365c:	4605      	mov	r5, r0
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	460c      	mov	r4, r1
 8003662:	b118      	cbz	r0, 800366c <__swsetup_r+0x14>
 8003664:	6a03      	ldr	r3, [r0, #32]
 8003666:	b90b      	cbnz	r3, 800366c <__swsetup_r+0x14>
 8003668:	f7ff fec6 	bl	80033f8 <__sinit>
 800366c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003670:	0719      	lsls	r1, r3, #28
 8003672:	d422      	bmi.n	80036ba <__swsetup_r+0x62>
 8003674:	06da      	lsls	r2, r3, #27
 8003676:	d407      	bmi.n	8003688 <__swsetup_r+0x30>
 8003678:	2209      	movs	r2, #9
 800367a:	602a      	str	r2, [r5, #0]
 800367c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003686:	e033      	b.n	80036f0 <__swsetup_r+0x98>
 8003688:	0758      	lsls	r0, r3, #29
 800368a:	d512      	bpl.n	80036b2 <__swsetup_r+0x5a>
 800368c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800368e:	b141      	cbz	r1, 80036a2 <__swsetup_r+0x4a>
 8003690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003694:	4299      	cmp	r1, r3
 8003696:	d002      	beq.n	800369e <__swsetup_r+0x46>
 8003698:	4628      	mov	r0, r5
 800369a:	f000 f8af 	bl	80037fc <_free_r>
 800369e:	2300      	movs	r3, #0
 80036a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80036a8:	81a3      	strh	r3, [r4, #12]
 80036aa:	2300      	movs	r3, #0
 80036ac:	6063      	str	r3, [r4, #4]
 80036ae:	6923      	ldr	r3, [r4, #16]
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	f043 0308 	orr.w	r3, r3, #8
 80036b8:	81a3      	strh	r3, [r4, #12]
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	b94b      	cbnz	r3, 80036d2 <__swsetup_r+0x7a>
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036c8:	d003      	beq.n	80036d2 <__swsetup_r+0x7a>
 80036ca:	4621      	mov	r1, r4
 80036cc:	4628      	mov	r0, r5
 80036ce:	f000 fd2f 	bl	8004130 <__smakebuf_r>
 80036d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036d6:	f013 0201 	ands.w	r2, r3, #1
 80036da:	d00a      	beq.n	80036f2 <__swsetup_r+0x9a>
 80036dc:	2200      	movs	r2, #0
 80036de:	60a2      	str	r2, [r4, #8]
 80036e0:	6962      	ldr	r2, [r4, #20]
 80036e2:	4252      	negs	r2, r2
 80036e4:	61a2      	str	r2, [r4, #24]
 80036e6:	6922      	ldr	r2, [r4, #16]
 80036e8:	b942      	cbnz	r2, 80036fc <__swsetup_r+0xa4>
 80036ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80036ee:	d1c5      	bne.n	800367c <__swsetup_r+0x24>
 80036f0:	bd38      	pop	{r3, r4, r5, pc}
 80036f2:	0799      	lsls	r1, r3, #30
 80036f4:	bf58      	it	pl
 80036f6:	6962      	ldrpl	r2, [r4, #20]
 80036f8:	60a2      	str	r2, [r4, #8]
 80036fa:	e7f4      	b.n	80036e6 <__swsetup_r+0x8e>
 80036fc:	2000      	movs	r0, #0
 80036fe:	e7f7      	b.n	80036f0 <__swsetup_r+0x98>
 8003700:	20000018 	.word	0x20000018

08003704 <memset>:
 8003704:	4402      	add	r2, r0
 8003706:	4603      	mov	r3, r0
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <_close_r>:
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4d06      	ldr	r5, [pc, #24]	@ (8003730 <_close_r+0x1c>)
 8003718:	2300      	movs	r3, #0
 800371a:	4604      	mov	r4, r0
 800371c:	4608      	mov	r0, r1
 800371e:	602b      	str	r3, [r5, #0]
 8003720:	f7fd fa28 	bl	8000b74 <_close>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d102      	bne.n	800372e <_close_r+0x1a>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	b103      	cbz	r3, 800372e <_close_r+0x1a>
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	bd38      	pop	{r3, r4, r5, pc}
 8003730:	20000280 	.word	0x20000280

08003734 <_lseek_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4d07      	ldr	r5, [pc, #28]	@ (8003754 <_lseek_r+0x20>)
 8003738:	4604      	mov	r4, r0
 800373a:	4608      	mov	r0, r1
 800373c:	4611      	mov	r1, r2
 800373e:	2200      	movs	r2, #0
 8003740:	602a      	str	r2, [r5, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	f7fd fa3d 	bl	8000bc2 <_lseek>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d102      	bne.n	8003752 <_lseek_r+0x1e>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	b103      	cbz	r3, 8003752 <_lseek_r+0x1e>
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	20000280 	.word	0x20000280

08003758 <_read_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4d07      	ldr	r5, [pc, #28]	@ (8003778 <_read_r+0x20>)
 800375c:	4604      	mov	r4, r0
 800375e:	4608      	mov	r0, r1
 8003760:	4611      	mov	r1, r2
 8003762:	2200      	movs	r2, #0
 8003764:	602a      	str	r2, [r5, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	f7fd f9e7 	bl	8000b3a <_read>
 800376c:	1c43      	adds	r3, r0, #1
 800376e:	d102      	bne.n	8003776 <_read_r+0x1e>
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	b103      	cbz	r3, 8003776 <_read_r+0x1e>
 8003774:	6023      	str	r3, [r4, #0]
 8003776:	bd38      	pop	{r3, r4, r5, pc}
 8003778:	20000280 	.word	0x20000280

0800377c <_write_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	4d07      	ldr	r5, [pc, #28]	@ (800379c <_write_r+0x20>)
 8003780:	4604      	mov	r4, r0
 8003782:	4608      	mov	r0, r1
 8003784:	4611      	mov	r1, r2
 8003786:	2200      	movs	r2, #0
 8003788:	602a      	str	r2, [r5, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	f7fc ff10 	bl	80005b0 <_write>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_write_r+0x1e>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_write_r+0x1e>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	20000280 	.word	0x20000280

080037a0 <__errno>:
 80037a0:	4b01      	ldr	r3, [pc, #4]	@ (80037a8 <__errno+0x8>)
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000018 	.word	0x20000018

080037ac <__libc_init_array>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4d0d      	ldr	r5, [pc, #52]	@ (80037e4 <__libc_init_array+0x38>)
 80037b0:	4c0d      	ldr	r4, [pc, #52]	@ (80037e8 <__libc_init_array+0x3c>)
 80037b2:	1b64      	subs	r4, r4, r5
 80037b4:	10a4      	asrs	r4, r4, #2
 80037b6:	2600      	movs	r6, #0
 80037b8:	42a6      	cmp	r6, r4
 80037ba:	d109      	bne.n	80037d0 <__libc_init_array+0x24>
 80037bc:	4d0b      	ldr	r5, [pc, #44]	@ (80037ec <__libc_init_array+0x40>)
 80037be:	4c0c      	ldr	r4, [pc, #48]	@ (80037f0 <__libc_init_array+0x44>)
 80037c0:	f000 fd58 	bl	8004274 <_init>
 80037c4:	1b64      	subs	r4, r4, r5
 80037c6:	10a4      	asrs	r4, r4, #2
 80037c8:	2600      	movs	r6, #0
 80037ca:	42a6      	cmp	r6, r4
 80037cc:	d105      	bne.n	80037da <__libc_init_array+0x2e>
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d4:	4798      	blx	r3
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7ee      	b.n	80037b8 <__libc_init_array+0xc>
 80037da:	f855 3b04 	ldr.w	r3, [r5], #4
 80037de:	4798      	blx	r3
 80037e0:	3601      	adds	r6, #1
 80037e2:	e7f2      	b.n	80037ca <__libc_init_array+0x1e>
 80037e4:	08004330 	.word	0x08004330
 80037e8:	08004330 	.word	0x08004330
 80037ec:	08004330 	.word	0x08004330
 80037f0:	08004334 	.word	0x08004334

080037f4 <__retarget_lock_init_recursive>:
 80037f4:	4770      	bx	lr

080037f6 <__retarget_lock_acquire_recursive>:
 80037f6:	4770      	bx	lr

080037f8 <__retarget_lock_release_recursive>:
 80037f8:	4770      	bx	lr
	...

080037fc <_free_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4605      	mov	r5, r0
 8003800:	2900      	cmp	r1, #0
 8003802:	d041      	beq.n	8003888 <_free_r+0x8c>
 8003804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003808:	1f0c      	subs	r4, r1, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	bfb8      	it	lt
 800380e:	18e4      	addlt	r4, r4, r3
 8003810:	f000 f8e0 	bl	80039d4 <__malloc_lock>
 8003814:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <_free_r+0x90>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	b933      	cbnz	r3, 8003828 <_free_r+0x2c>
 800381a:	6063      	str	r3, [r4, #4]
 800381c:	6014      	str	r4, [r2, #0]
 800381e:	4628      	mov	r0, r5
 8003820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003824:	f000 b8dc 	b.w	80039e0 <__malloc_unlock>
 8003828:	42a3      	cmp	r3, r4
 800382a:	d908      	bls.n	800383e <_free_r+0x42>
 800382c:	6820      	ldr	r0, [r4, #0]
 800382e:	1821      	adds	r1, r4, r0
 8003830:	428b      	cmp	r3, r1
 8003832:	bf01      	itttt	eq
 8003834:	6819      	ldreq	r1, [r3, #0]
 8003836:	685b      	ldreq	r3, [r3, #4]
 8003838:	1809      	addeq	r1, r1, r0
 800383a:	6021      	streq	r1, [r4, #0]
 800383c:	e7ed      	b.n	800381a <_free_r+0x1e>
 800383e:	461a      	mov	r2, r3
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	b10b      	cbz	r3, 8003848 <_free_r+0x4c>
 8003844:	42a3      	cmp	r3, r4
 8003846:	d9fa      	bls.n	800383e <_free_r+0x42>
 8003848:	6811      	ldr	r1, [r2, #0]
 800384a:	1850      	adds	r0, r2, r1
 800384c:	42a0      	cmp	r0, r4
 800384e:	d10b      	bne.n	8003868 <_free_r+0x6c>
 8003850:	6820      	ldr	r0, [r4, #0]
 8003852:	4401      	add	r1, r0
 8003854:	1850      	adds	r0, r2, r1
 8003856:	4283      	cmp	r3, r0
 8003858:	6011      	str	r1, [r2, #0]
 800385a:	d1e0      	bne.n	800381e <_free_r+0x22>
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	6053      	str	r3, [r2, #4]
 8003862:	4408      	add	r0, r1
 8003864:	6010      	str	r0, [r2, #0]
 8003866:	e7da      	b.n	800381e <_free_r+0x22>
 8003868:	d902      	bls.n	8003870 <_free_r+0x74>
 800386a:	230c      	movs	r3, #12
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	e7d6      	b.n	800381e <_free_r+0x22>
 8003870:	6820      	ldr	r0, [r4, #0]
 8003872:	1821      	adds	r1, r4, r0
 8003874:	428b      	cmp	r3, r1
 8003876:	bf04      	itt	eq
 8003878:	6819      	ldreq	r1, [r3, #0]
 800387a:	685b      	ldreq	r3, [r3, #4]
 800387c:	6063      	str	r3, [r4, #4]
 800387e:	bf04      	itt	eq
 8003880:	1809      	addeq	r1, r1, r0
 8003882:	6021      	streq	r1, [r4, #0]
 8003884:	6054      	str	r4, [r2, #4]
 8003886:	e7ca      	b.n	800381e <_free_r+0x22>
 8003888:	bd38      	pop	{r3, r4, r5, pc}
 800388a:	bf00      	nop
 800388c:	2000028c 	.word	0x2000028c

08003890 <sbrk_aligned>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	4e0f      	ldr	r6, [pc, #60]	@ (80038d0 <sbrk_aligned+0x40>)
 8003894:	460c      	mov	r4, r1
 8003896:	6831      	ldr	r1, [r6, #0]
 8003898:	4605      	mov	r5, r0
 800389a:	b911      	cbnz	r1, 80038a2 <sbrk_aligned+0x12>
 800389c:	f000 fcda 	bl	8004254 <_sbrk_r>
 80038a0:	6030      	str	r0, [r6, #0]
 80038a2:	4621      	mov	r1, r4
 80038a4:	4628      	mov	r0, r5
 80038a6:	f000 fcd5 	bl	8004254 <_sbrk_r>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	d103      	bne.n	80038b6 <sbrk_aligned+0x26>
 80038ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80038b2:	4620      	mov	r0, r4
 80038b4:	bd70      	pop	{r4, r5, r6, pc}
 80038b6:	1cc4      	adds	r4, r0, #3
 80038b8:	f024 0403 	bic.w	r4, r4, #3
 80038bc:	42a0      	cmp	r0, r4
 80038be:	d0f8      	beq.n	80038b2 <sbrk_aligned+0x22>
 80038c0:	1a21      	subs	r1, r4, r0
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 fcc6 	bl	8004254 <_sbrk_r>
 80038c8:	3001      	adds	r0, #1
 80038ca:	d1f2      	bne.n	80038b2 <sbrk_aligned+0x22>
 80038cc:	e7ef      	b.n	80038ae <sbrk_aligned+0x1e>
 80038ce:	bf00      	nop
 80038d0:	20000288 	.word	0x20000288

080038d4 <_malloc_r>:
 80038d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d8:	1ccd      	adds	r5, r1, #3
 80038da:	f025 0503 	bic.w	r5, r5, #3
 80038de:	3508      	adds	r5, #8
 80038e0:	2d0c      	cmp	r5, #12
 80038e2:	bf38      	it	cc
 80038e4:	250c      	movcc	r5, #12
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	4606      	mov	r6, r0
 80038ea:	db01      	blt.n	80038f0 <_malloc_r+0x1c>
 80038ec:	42a9      	cmp	r1, r5
 80038ee:	d904      	bls.n	80038fa <_malloc_r+0x26>
 80038f0:	230c      	movs	r3, #12
 80038f2:	6033      	str	r3, [r6, #0]
 80038f4:	2000      	movs	r0, #0
 80038f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039d0 <_malloc_r+0xfc>
 80038fe:	f000 f869 	bl	80039d4 <__malloc_lock>
 8003902:	f8d8 3000 	ldr.w	r3, [r8]
 8003906:	461c      	mov	r4, r3
 8003908:	bb44      	cbnz	r4, 800395c <_malloc_r+0x88>
 800390a:	4629      	mov	r1, r5
 800390c:	4630      	mov	r0, r6
 800390e:	f7ff ffbf 	bl	8003890 <sbrk_aligned>
 8003912:	1c43      	adds	r3, r0, #1
 8003914:	4604      	mov	r4, r0
 8003916:	d158      	bne.n	80039ca <_malloc_r+0xf6>
 8003918:	f8d8 4000 	ldr.w	r4, [r8]
 800391c:	4627      	mov	r7, r4
 800391e:	2f00      	cmp	r7, #0
 8003920:	d143      	bne.n	80039aa <_malloc_r+0xd6>
 8003922:	2c00      	cmp	r4, #0
 8003924:	d04b      	beq.n	80039be <_malloc_r+0xea>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	4639      	mov	r1, r7
 800392a:	4630      	mov	r0, r6
 800392c:	eb04 0903 	add.w	r9, r4, r3
 8003930:	f000 fc90 	bl	8004254 <_sbrk_r>
 8003934:	4581      	cmp	r9, r0
 8003936:	d142      	bne.n	80039be <_malloc_r+0xea>
 8003938:	6821      	ldr	r1, [r4, #0]
 800393a:	1a6d      	subs	r5, r5, r1
 800393c:	4629      	mov	r1, r5
 800393e:	4630      	mov	r0, r6
 8003940:	f7ff ffa6 	bl	8003890 <sbrk_aligned>
 8003944:	3001      	adds	r0, #1
 8003946:	d03a      	beq.n	80039be <_malloc_r+0xea>
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	442b      	add	r3, r5
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	f8d8 3000 	ldr.w	r3, [r8]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	bb62      	cbnz	r2, 80039b0 <_malloc_r+0xdc>
 8003956:	f8c8 7000 	str.w	r7, [r8]
 800395a:	e00f      	b.n	800397c <_malloc_r+0xa8>
 800395c:	6822      	ldr	r2, [r4, #0]
 800395e:	1b52      	subs	r2, r2, r5
 8003960:	d420      	bmi.n	80039a4 <_malloc_r+0xd0>
 8003962:	2a0b      	cmp	r2, #11
 8003964:	d917      	bls.n	8003996 <_malloc_r+0xc2>
 8003966:	1961      	adds	r1, r4, r5
 8003968:	42a3      	cmp	r3, r4
 800396a:	6025      	str	r5, [r4, #0]
 800396c:	bf18      	it	ne
 800396e:	6059      	strne	r1, [r3, #4]
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	bf08      	it	eq
 8003974:	f8c8 1000 	streq.w	r1, [r8]
 8003978:	5162      	str	r2, [r4, r5]
 800397a:	604b      	str	r3, [r1, #4]
 800397c:	4630      	mov	r0, r6
 800397e:	f000 f82f 	bl	80039e0 <__malloc_unlock>
 8003982:	f104 000b 	add.w	r0, r4, #11
 8003986:	1d23      	adds	r3, r4, #4
 8003988:	f020 0007 	bic.w	r0, r0, #7
 800398c:	1ac2      	subs	r2, r0, r3
 800398e:	bf1c      	itt	ne
 8003990:	1a1b      	subne	r3, r3, r0
 8003992:	50a3      	strne	r3, [r4, r2]
 8003994:	e7af      	b.n	80038f6 <_malloc_r+0x22>
 8003996:	6862      	ldr	r2, [r4, #4]
 8003998:	42a3      	cmp	r3, r4
 800399a:	bf0c      	ite	eq
 800399c:	f8c8 2000 	streq.w	r2, [r8]
 80039a0:	605a      	strne	r2, [r3, #4]
 80039a2:	e7eb      	b.n	800397c <_malloc_r+0xa8>
 80039a4:	4623      	mov	r3, r4
 80039a6:	6864      	ldr	r4, [r4, #4]
 80039a8:	e7ae      	b.n	8003908 <_malloc_r+0x34>
 80039aa:	463c      	mov	r4, r7
 80039ac:	687f      	ldr	r7, [r7, #4]
 80039ae:	e7b6      	b.n	800391e <_malloc_r+0x4a>
 80039b0:	461a      	mov	r2, r3
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	42a3      	cmp	r3, r4
 80039b6:	d1fb      	bne.n	80039b0 <_malloc_r+0xdc>
 80039b8:	2300      	movs	r3, #0
 80039ba:	6053      	str	r3, [r2, #4]
 80039bc:	e7de      	b.n	800397c <_malloc_r+0xa8>
 80039be:	230c      	movs	r3, #12
 80039c0:	6033      	str	r3, [r6, #0]
 80039c2:	4630      	mov	r0, r6
 80039c4:	f000 f80c 	bl	80039e0 <__malloc_unlock>
 80039c8:	e794      	b.n	80038f4 <_malloc_r+0x20>
 80039ca:	6005      	str	r5, [r0, #0]
 80039cc:	e7d6      	b.n	800397c <_malloc_r+0xa8>
 80039ce:	bf00      	nop
 80039d0:	2000028c 	.word	0x2000028c

080039d4 <__malloc_lock>:
 80039d4:	4801      	ldr	r0, [pc, #4]	@ (80039dc <__malloc_lock+0x8>)
 80039d6:	f7ff bf0e 	b.w	80037f6 <__retarget_lock_acquire_recursive>
 80039da:	bf00      	nop
 80039dc:	20000284 	.word	0x20000284

080039e0 <__malloc_unlock>:
 80039e0:	4801      	ldr	r0, [pc, #4]	@ (80039e8 <__malloc_unlock+0x8>)
 80039e2:	f7ff bf09 	b.w	80037f8 <__retarget_lock_release_recursive>
 80039e6:	bf00      	nop
 80039e8:	20000284 	.word	0x20000284

080039ec <__sfputc_r>:
 80039ec:	6893      	ldr	r3, [r2, #8]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	b410      	push	{r4}
 80039f4:	6093      	str	r3, [r2, #8]
 80039f6:	da08      	bge.n	8003a0a <__sfputc_r+0x1e>
 80039f8:	6994      	ldr	r4, [r2, #24]
 80039fa:	42a3      	cmp	r3, r4
 80039fc:	db01      	blt.n	8003a02 <__sfputc_r+0x16>
 80039fe:	290a      	cmp	r1, #10
 8003a00:	d103      	bne.n	8003a0a <__sfputc_r+0x1e>
 8003a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a06:	f7ff bde8 	b.w	80035da <__swbuf_r>
 8003a0a:	6813      	ldr	r3, [r2, #0]
 8003a0c:	1c58      	adds	r0, r3, #1
 8003a0e:	6010      	str	r0, [r2, #0]
 8003a10:	7019      	strb	r1, [r3, #0]
 8003a12:	4608      	mov	r0, r1
 8003a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <__sfputs_r>:
 8003a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1c:	4606      	mov	r6, r0
 8003a1e:	460f      	mov	r7, r1
 8003a20:	4614      	mov	r4, r2
 8003a22:	18d5      	adds	r5, r2, r3
 8003a24:	42ac      	cmp	r4, r5
 8003a26:	d101      	bne.n	8003a2c <__sfputs_r+0x12>
 8003a28:	2000      	movs	r0, #0
 8003a2a:	e007      	b.n	8003a3c <__sfputs_r+0x22>
 8003a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a30:	463a      	mov	r2, r7
 8003a32:	4630      	mov	r0, r6
 8003a34:	f7ff ffda 	bl	80039ec <__sfputc_r>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d1f3      	bne.n	8003a24 <__sfputs_r+0xa>
 8003a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a40 <_vfiprintf_r>:
 8003a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a44:	460d      	mov	r5, r1
 8003a46:	b09d      	sub	sp, #116	@ 0x74
 8003a48:	4614      	mov	r4, r2
 8003a4a:	4698      	mov	r8, r3
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	b118      	cbz	r0, 8003a58 <_vfiprintf_r+0x18>
 8003a50:	6a03      	ldr	r3, [r0, #32]
 8003a52:	b90b      	cbnz	r3, 8003a58 <_vfiprintf_r+0x18>
 8003a54:	f7ff fcd0 	bl	80033f8 <__sinit>
 8003a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a5a:	07d9      	lsls	r1, r3, #31
 8003a5c:	d405      	bmi.n	8003a6a <_vfiprintf_r+0x2a>
 8003a5e:	89ab      	ldrh	r3, [r5, #12]
 8003a60:	059a      	lsls	r2, r3, #22
 8003a62:	d402      	bmi.n	8003a6a <_vfiprintf_r+0x2a>
 8003a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a66:	f7ff fec6 	bl	80037f6 <__retarget_lock_acquire_recursive>
 8003a6a:	89ab      	ldrh	r3, [r5, #12]
 8003a6c:	071b      	lsls	r3, r3, #28
 8003a6e:	d501      	bpl.n	8003a74 <_vfiprintf_r+0x34>
 8003a70:	692b      	ldr	r3, [r5, #16]
 8003a72:	b99b      	cbnz	r3, 8003a9c <_vfiprintf_r+0x5c>
 8003a74:	4629      	mov	r1, r5
 8003a76:	4630      	mov	r0, r6
 8003a78:	f7ff fdee 	bl	8003658 <__swsetup_r>
 8003a7c:	b170      	cbz	r0, 8003a9c <_vfiprintf_r+0x5c>
 8003a7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a80:	07dc      	lsls	r4, r3, #31
 8003a82:	d504      	bpl.n	8003a8e <_vfiprintf_r+0x4e>
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a88:	b01d      	add	sp, #116	@ 0x74
 8003a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8e:	89ab      	ldrh	r3, [r5, #12]
 8003a90:	0598      	lsls	r0, r3, #22
 8003a92:	d4f7      	bmi.n	8003a84 <_vfiprintf_r+0x44>
 8003a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a96:	f7ff feaf 	bl	80037f8 <__retarget_lock_release_recursive>
 8003a9a:	e7f3      	b.n	8003a84 <_vfiprintf_r+0x44>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aa0:	2320      	movs	r3, #32
 8003aa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aaa:	2330      	movs	r3, #48	@ 0x30
 8003aac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003c5c <_vfiprintf_r+0x21c>
 8003ab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ab4:	f04f 0901 	mov.w	r9, #1
 8003ab8:	4623      	mov	r3, r4
 8003aba:	469a      	mov	sl, r3
 8003abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ac0:	b10a      	cbz	r2, 8003ac6 <_vfiprintf_r+0x86>
 8003ac2:	2a25      	cmp	r2, #37	@ 0x25
 8003ac4:	d1f9      	bne.n	8003aba <_vfiprintf_r+0x7a>
 8003ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8003aca:	d00b      	beq.n	8003ae4 <_vfiprintf_r+0xa4>
 8003acc:	465b      	mov	r3, fp
 8003ace:	4622      	mov	r2, r4
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f7ff ffa1 	bl	8003a1a <__sfputs_r>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	f000 80a7 	beq.w	8003c2c <_vfiprintf_r+0x1ec>
 8003ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ae0:	445a      	add	r2, fp
 8003ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 809f 	beq.w	8003c2c <_vfiprintf_r+0x1ec>
 8003aee:	2300      	movs	r3, #0
 8003af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003af8:	f10a 0a01 	add.w	sl, sl, #1
 8003afc:	9304      	str	r3, [sp, #16]
 8003afe:	9307      	str	r3, [sp, #28]
 8003b00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b04:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b06:	4654      	mov	r4, sl
 8003b08:	2205      	movs	r2, #5
 8003b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b0e:	4853      	ldr	r0, [pc, #332]	@ (8003c5c <_vfiprintf_r+0x21c>)
 8003b10:	f7fc fb5e 	bl	80001d0 <memchr>
 8003b14:	9a04      	ldr	r2, [sp, #16]
 8003b16:	b9d8      	cbnz	r0, 8003b50 <_vfiprintf_r+0x110>
 8003b18:	06d1      	lsls	r1, r2, #27
 8003b1a:	bf44      	itt	mi
 8003b1c:	2320      	movmi	r3, #32
 8003b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b22:	0713      	lsls	r3, r2, #28
 8003b24:	bf44      	itt	mi
 8003b26:	232b      	movmi	r3, #43	@ 0x2b
 8003b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b32:	d015      	beq.n	8003b60 <_vfiprintf_r+0x120>
 8003b34:	9a07      	ldr	r2, [sp, #28]
 8003b36:	4654      	mov	r4, sl
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f04f 0c0a 	mov.w	ip, #10
 8003b3e:	4621      	mov	r1, r4
 8003b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b44:	3b30      	subs	r3, #48	@ 0x30
 8003b46:	2b09      	cmp	r3, #9
 8003b48:	d94b      	bls.n	8003be2 <_vfiprintf_r+0x1a2>
 8003b4a:	b1b0      	cbz	r0, 8003b7a <_vfiprintf_r+0x13a>
 8003b4c:	9207      	str	r2, [sp, #28]
 8003b4e:	e014      	b.n	8003b7a <_vfiprintf_r+0x13a>
 8003b50:	eba0 0308 	sub.w	r3, r0, r8
 8003b54:	fa09 f303 	lsl.w	r3, r9, r3
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	9304      	str	r3, [sp, #16]
 8003b5c:	46a2      	mov	sl, r4
 8003b5e:	e7d2      	b.n	8003b06 <_vfiprintf_r+0xc6>
 8003b60:	9b03      	ldr	r3, [sp, #12]
 8003b62:	1d19      	adds	r1, r3, #4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	9103      	str	r1, [sp, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bfbb      	ittet	lt
 8003b6c:	425b      	neglt	r3, r3
 8003b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8003b72:	9307      	strge	r3, [sp, #28]
 8003b74:	9307      	strlt	r3, [sp, #28]
 8003b76:	bfb8      	it	lt
 8003b78:	9204      	strlt	r2, [sp, #16]
 8003b7a:	7823      	ldrb	r3, [r4, #0]
 8003b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b7e:	d10a      	bne.n	8003b96 <_vfiprintf_r+0x156>
 8003b80:	7863      	ldrb	r3, [r4, #1]
 8003b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b84:	d132      	bne.n	8003bec <_vfiprintf_r+0x1ac>
 8003b86:	9b03      	ldr	r3, [sp, #12]
 8003b88:	1d1a      	adds	r2, r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	9203      	str	r2, [sp, #12]
 8003b8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b92:	3402      	adds	r4, #2
 8003b94:	9305      	str	r3, [sp, #20]
 8003b96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003c6c <_vfiprintf_r+0x22c>
 8003b9a:	7821      	ldrb	r1, [r4, #0]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	4650      	mov	r0, sl
 8003ba0:	f7fc fb16 	bl	80001d0 <memchr>
 8003ba4:	b138      	cbz	r0, 8003bb6 <_vfiprintf_r+0x176>
 8003ba6:	9b04      	ldr	r3, [sp, #16]
 8003ba8:	eba0 000a 	sub.w	r0, r0, sl
 8003bac:	2240      	movs	r2, #64	@ 0x40
 8003bae:	4082      	lsls	r2, r0
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	3401      	adds	r4, #1
 8003bb4:	9304      	str	r3, [sp, #16]
 8003bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bba:	4829      	ldr	r0, [pc, #164]	@ (8003c60 <_vfiprintf_r+0x220>)
 8003bbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bc0:	2206      	movs	r2, #6
 8003bc2:	f7fc fb05 	bl	80001d0 <memchr>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d03f      	beq.n	8003c4a <_vfiprintf_r+0x20a>
 8003bca:	4b26      	ldr	r3, [pc, #152]	@ (8003c64 <_vfiprintf_r+0x224>)
 8003bcc:	bb1b      	cbnz	r3, 8003c16 <_vfiprintf_r+0x1d6>
 8003bce:	9b03      	ldr	r3, [sp, #12]
 8003bd0:	3307      	adds	r3, #7
 8003bd2:	f023 0307 	bic.w	r3, r3, #7
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	9303      	str	r3, [sp, #12]
 8003bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bdc:	443b      	add	r3, r7
 8003bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8003be0:	e76a      	b.n	8003ab8 <_vfiprintf_r+0x78>
 8003be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003be6:	460c      	mov	r4, r1
 8003be8:	2001      	movs	r0, #1
 8003bea:	e7a8      	b.n	8003b3e <_vfiprintf_r+0xfe>
 8003bec:	2300      	movs	r3, #0
 8003bee:	3401      	adds	r4, #1
 8003bf0:	9305      	str	r3, [sp, #20]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f04f 0c0a 	mov.w	ip, #10
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bfe:	3a30      	subs	r2, #48	@ 0x30
 8003c00:	2a09      	cmp	r2, #9
 8003c02:	d903      	bls.n	8003c0c <_vfiprintf_r+0x1cc>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0c6      	beq.n	8003b96 <_vfiprintf_r+0x156>
 8003c08:	9105      	str	r1, [sp, #20]
 8003c0a:	e7c4      	b.n	8003b96 <_vfiprintf_r+0x156>
 8003c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c10:	4604      	mov	r4, r0
 8003c12:	2301      	movs	r3, #1
 8003c14:	e7f0      	b.n	8003bf8 <_vfiprintf_r+0x1b8>
 8003c16:	ab03      	add	r3, sp, #12
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	462a      	mov	r2, r5
 8003c1c:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <_vfiprintf_r+0x228>)
 8003c1e:	a904      	add	r1, sp, #16
 8003c20:	4630      	mov	r0, r6
 8003c22:	f3af 8000 	nop.w
 8003c26:	4607      	mov	r7, r0
 8003c28:	1c78      	adds	r0, r7, #1
 8003c2a:	d1d6      	bne.n	8003bda <_vfiprintf_r+0x19a>
 8003c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c2e:	07d9      	lsls	r1, r3, #31
 8003c30:	d405      	bmi.n	8003c3e <_vfiprintf_r+0x1fe>
 8003c32:	89ab      	ldrh	r3, [r5, #12]
 8003c34:	059a      	lsls	r2, r3, #22
 8003c36:	d402      	bmi.n	8003c3e <_vfiprintf_r+0x1fe>
 8003c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c3a:	f7ff fddd 	bl	80037f8 <__retarget_lock_release_recursive>
 8003c3e:	89ab      	ldrh	r3, [r5, #12]
 8003c40:	065b      	lsls	r3, r3, #25
 8003c42:	f53f af1f 	bmi.w	8003a84 <_vfiprintf_r+0x44>
 8003c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c48:	e71e      	b.n	8003a88 <_vfiprintf_r+0x48>
 8003c4a:	ab03      	add	r3, sp, #12
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	462a      	mov	r2, r5
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <_vfiprintf_r+0x228>)
 8003c52:	a904      	add	r1, sp, #16
 8003c54:	4630      	mov	r0, r6
 8003c56:	f000 f879 	bl	8003d4c <_printf_i>
 8003c5a:	e7e4      	b.n	8003c26 <_vfiprintf_r+0x1e6>
 8003c5c:	080042f4 	.word	0x080042f4
 8003c60:	080042fe 	.word	0x080042fe
 8003c64:	00000000 	.word	0x00000000
 8003c68:	08003a1b 	.word	0x08003a1b
 8003c6c:	080042fa 	.word	0x080042fa

08003c70 <_printf_common>:
 8003c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	4616      	mov	r6, r2
 8003c76:	4698      	mov	r8, r3
 8003c78:	688a      	ldr	r2, [r1, #8]
 8003c7a:	690b      	ldr	r3, [r1, #16]
 8003c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c80:	4293      	cmp	r3, r2
 8003c82:	bfb8      	it	lt
 8003c84:	4613      	movlt	r3, r2
 8003c86:	6033      	str	r3, [r6, #0]
 8003c88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c8c:	4607      	mov	r7, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	b10a      	cbz	r2, 8003c96 <_printf_common+0x26>
 8003c92:	3301      	adds	r3, #1
 8003c94:	6033      	str	r3, [r6, #0]
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	0699      	lsls	r1, r3, #26
 8003c9a:	bf42      	ittt	mi
 8003c9c:	6833      	ldrmi	r3, [r6, #0]
 8003c9e:	3302      	addmi	r3, #2
 8003ca0:	6033      	strmi	r3, [r6, #0]
 8003ca2:	6825      	ldr	r5, [r4, #0]
 8003ca4:	f015 0506 	ands.w	r5, r5, #6
 8003ca8:	d106      	bne.n	8003cb8 <_printf_common+0x48>
 8003caa:	f104 0a19 	add.w	sl, r4, #25
 8003cae:	68e3      	ldr	r3, [r4, #12]
 8003cb0:	6832      	ldr	r2, [r6, #0]
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	42ab      	cmp	r3, r5
 8003cb6:	dc26      	bgt.n	8003d06 <_printf_common+0x96>
 8003cb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	3b00      	subs	r3, #0
 8003cc0:	bf18      	it	ne
 8003cc2:	2301      	movne	r3, #1
 8003cc4:	0692      	lsls	r2, r2, #26
 8003cc6:	d42b      	bmi.n	8003d20 <_printf_common+0xb0>
 8003cc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ccc:	4641      	mov	r1, r8
 8003cce:	4638      	mov	r0, r7
 8003cd0:	47c8      	blx	r9
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	d01e      	beq.n	8003d14 <_printf_common+0xa4>
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	6922      	ldr	r2, [r4, #16]
 8003cda:	f003 0306 	and.w	r3, r3, #6
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	bf02      	ittt	eq
 8003ce2:	68e5      	ldreq	r5, [r4, #12]
 8003ce4:	6833      	ldreq	r3, [r6, #0]
 8003ce6:	1aed      	subeq	r5, r5, r3
 8003ce8:	68a3      	ldr	r3, [r4, #8]
 8003cea:	bf0c      	ite	eq
 8003cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cf0:	2500      	movne	r5, #0
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	bfc4      	itt	gt
 8003cf6:	1a9b      	subgt	r3, r3, r2
 8003cf8:	18ed      	addgt	r5, r5, r3
 8003cfa:	2600      	movs	r6, #0
 8003cfc:	341a      	adds	r4, #26
 8003cfe:	42b5      	cmp	r5, r6
 8003d00:	d11a      	bne.n	8003d38 <_printf_common+0xc8>
 8003d02:	2000      	movs	r0, #0
 8003d04:	e008      	b.n	8003d18 <_printf_common+0xa8>
 8003d06:	2301      	movs	r3, #1
 8003d08:	4652      	mov	r2, sl
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	47c8      	blx	r9
 8003d10:	3001      	adds	r0, #1
 8003d12:	d103      	bne.n	8003d1c <_printf_common+0xac>
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d1c:	3501      	adds	r5, #1
 8003d1e:	e7c6      	b.n	8003cae <_printf_common+0x3e>
 8003d20:	18e1      	adds	r1, r4, r3
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	2030      	movs	r0, #48	@ 0x30
 8003d26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d2a:	4422      	add	r2, r4
 8003d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d34:	3302      	adds	r3, #2
 8003d36:	e7c7      	b.n	8003cc8 <_printf_common+0x58>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	4638      	mov	r0, r7
 8003d40:	47c8      	blx	r9
 8003d42:	3001      	adds	r0, #1
 8003d44:	d0e6      	beq.n	8003d14 <_printf_common+0xa4>
 8003d46:	3601      	adds	r6, #1
 8003d48:	e7d9      	b.n	8003cfe <_printf_common+0x8e>
	...

08003d4c <_printf_i>:
 8003d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d50:	7e0f      	ldrb	r7, [r1, #24]
 8003d52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d54:	2f78      	cmp	r7, #120	@ 0x78
 8003d56:	4691      	mov	r9, r2
 8003d58:	4680      	mov	r8, r0
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	469a      	mov	sl, r3
 8003d5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d62:	d807      	bhi.n	8003d74 <_printf_i+0x28>
 8003d64:	2f62      	cmp	r7, #98	@ 0x62
 8003d66:	d80a      	bhi.n	8003d7e <_printf_i+0x32>
 8003d68:	2f00      	cmp	r7, #0
 8003d6a:	f000 80d2 	beq.w	8003f12 <_printf_i+0x1c6>
 8003d6e:	2f58      	cmp	r7, #88	@ 0x58
 8003d70:	f000 80b9 	beq.w	8003ee6 <_printf_i+0x19a>
 8003d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d7c:	e03a      	b.n	8003df4 <_printf_i+0xa8>
 8003d7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d82:	2b15      	cmp	r3, #21
 8003d84:	d8f6      	bhi.n	8003d74 <_printf_i+0x28>
 8003d86:	a101      	add	r1, pc, #4	@ (adr r1, 8003d8c <_printf_i+0x40>)
 8003d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d8c:	08003de5 	.word	0x08003de5
 8003d90:	08003df9 	.word	0x08003df9
 8003d94:	08003d75 	.word	0x08003d75
 8003d98:	08003d75 	.word	0x08003d75
 8003d9c:	08003d75 	.word	0x08003d75
 8003da0:	08003d75 	.word	0x08003d75
 8003da4:	08003df9 	.word	0x08003df9
 8003da8:	08003d75 	.word	0x08003d75
 8003dac:	08003d75 	.word	0x08003d75
 8003db0:	08003d75 	.word	0x08003d75
 8003db4:	08003d75 	.word	0x08003d75
 8003db8:	08003ef9 	.word	0x08003ef9
 8003dbc:	08003e23 	.word	0x08003e23
 8003dc0:	08003eb3 	.word	0x08003eb3
 8003dc4:	08003d75 	.word	0x08003d75
 8003dc8:	08003d75 	.word	0x08003d75
 8003dcc:	08003f1b 	.word	0x08003f1b
 8003dd0:	08003d75 	.word	0x08003d75
 8003dd4:	08003e23 	.word	0x08003e23
 8003dd8:	08003d75 	.word	0x08003d75
 8003ddc:	08003d75 	.word	0x08003d75
 8003de0:	08003ebb 	.word	0x08003ebb
 8003de4:	6833      	ldr	r3, [r6, #0]
 8003de6:	1d1a      	adds	r2, r3, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6032      	str	r2, [r6, #0]
 8003dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003df0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003df4:	2301      	movs	r3, #1
 8003df6:	e09d      	b.n	8003f34 <_printf_i+0x1e8>
 8003df8:	6833      	ldr	r3, [r6, #0]
 8003dfa:	6820      	ldr	r0, [r4, #0]
 8003dfc:	1d19      	adds	r1, r3, #4
 8003dfe:	6031      	str	r1, [r6, #0]
 8003e00:	0606      	lsls	r6, r0, #24
 8003e02:	d501      	bpl.n	8003e08 <_printf_i+0xbc>
 8003e04:	681d      	ldr	r5, [r3, #0]
 8003e06:	e003      	b.n	8003e10 <_printf_i+0xc4>
 8003e08:	0645      	lsls	r5, r0, #25
 8003e0a:	d5fb      	bpl.n	8003e04 <_printf_i+0xb8>
 8003e0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e10:	2d00      	cmp	r5, #0
 8003e12:	da03      	bge.n	8003e1c <_printf_i+0xd0>
 8003e14:	232d      	movs	r3, #45	@ 0x2d
 8003e16:	426d      	negs	r5, r5
 8003e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e1c:	4859      	ldr	r0, [pc, #356]	@ (8003f84 <_printf_i+0x238>)
 8003e1e:	230a      	movs	r3, #10
 8003e20:	e011      	b.n	8003e46 <_printf_i+0xfa>
 8003e22:	6821      	ldr	r1, [r4, #0]
 8003e24:	6833      	ldr	r3, [r6, #0]
 8003e26:	0608      	lsls	r0, r1, #24
 8003e28:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e2c:	d402      	bmi.n	8003e34 <_printf_i+0xe8>
 8003e2e:	0649      	lsls	r1, r1, #25
 8003e30:	bf48      	it	mi
 8003e32:	b2ad      	uxthmi	r5, r5
 8003e34:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e36:	4853      	ldr	r0, [pc, #332]	@ (8003f84 <_printf_i+0x238>)
 8003e38:	6033      	str	r3, [r6, #0]
 8003e3a:	bf14      	ite	ne
 8003e3c:	230a      	movne	r3, #10
 8003e3e:	2308      	moveq	r3, #8
 8003e40:	2100      	movs	r1, #0
 8003e42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e46:	6866      	ldr	r6, [r4, #4]
 8003e48:	60a6      	str	r6, [r4, #8]
 8003e4a:	2e00      	cmp	r6, #0
 8003e4c:	bfa2      	ittt	ge
 8003e4e:	6821      	ldrge	r1, [r4, #0]
 8003e50:	f021 0104 	bicge.w	r1, r1, #4
 8003e54:	6021      	strge	r1, [r4, #0]
 8003e56:	b90d      	cbnz	r5, 8003e5c <_printf_i+0x110>
 8003e58:	2e00      	cmp	r6, #0
 8003e5a:	d04b      	beq.n	8003ef4 <_printf_i+0x1a8>
 8003e5c:	4616      	mov	r6, r2
 8003e5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e62:	fb03 5711 	mls	r7, r3, r1, r5
 8003e66:	5dc7      	ldrb	r7, [r0, r7]
 8003e68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e6c:	462f      	mov	r7, r5
 8003e6e:	42bb      	cmp	r3, r7
 8003e70:	460d      	mov	r5, r1
 8003e72:	d9f4      	bls.n	8003e5e <_printf_i+0x112>
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d10b      	bne.n	8003e90 <_printf_i+0x144>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	07df      	lsls	r7, r3, #31
 8003e7c:	d508      	bpl.n	8003e90 <_printf_i+0x144>
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	6861      	ldr	r1, [r4, #4]
 8003e82:	4299      	cmp	r1, r3
 8003e84:	bfde      	ittt	le
 8003e86:	2330      	movle	r3, #48	@ 0x30
 8003e88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e8c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003e90:	1b92      	subs	r2, r2, r6
 8003e92:	6122      	str	r2, [r4, #16]
 8003e94:	f8cd a000 	str.w	sl, [sp]
 8003e98:	464b      	mov	r3, r9
 8003e9a:	aa03      	add	r2, sp, #12
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4640      	mov	r0, r8
 8003ea0:	f7ff fee6 	bl	8003c70 <_printf_common>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d14a      	bne.n	8003f3e <_printf_i+0x1f2>
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003eac:	b004      	add	sp, #16
 8003eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	f043 0320 	orr.w	r3, r3, #32
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	4833      	ldr	r0, [pc, #204]	@ (8003f88 <_printf_i+0x23c>)
 8003ebc:	2778      	movs	r7, #120	@ 0x78
 8003ebe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	6831      	ldr	r1, [r6, #0]
 8003ec6:	061f      	lsls	r7, r3, #24
 8003ec8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ecc:	d402      	bmi.n	8003ed4 <_printf_i+0x188>
 8003ece:	065f      	lsls	r7, r3, #25
 8003ed0:	bf48      	it	mi
 8003ed2:	b2ad      	uxthmi	r5, r5
 8003ed4:	6031      	str	r1, [r6, #0]
 8003ed6:	07d9      	lsls	r1, r3, #31
 8003ed8:	bf44      	itt	mi
 8003eda:	f043 0320 	orrmi.w	r3, r3, #32
 8003ede:	6023      	strmi	r3, [r4, #0]
 8003ee0:	b11d      	cbz	r5, 8003eea <_printf_i+0x19e>
 8003ee2:	2310      	movs	r3, #16
 8003ee4:	e7ac      	b.n	8003e40 <_printf_i+0xf4>
 8003ee6:	4827      	ldr	r0, [pc, #156]	@ (8003f84 <_printf_i+0x238>)
 8003ee8:	e7e9      	b.n	8003ebe <_printf_i+0x172>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	f023 0320 	bic.w	r3, r3, #32
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	e7f6      	b.n	8003ee2 <_printf_i+0x196>
 8003ef4:	4616      	mov	r6, r2
 8003ef6:	e7bd      	b.n	8003e74 <_printf_i+0x128>
 8003ef8:	6833      	ldr	r3, [r6, #0]
 8003efa:	6825      	ldr	r5, [r4, #0]
 8003efc:	6961      	ldr	r1, [r4, #20]
 8003efe:	1d18      	adds	r0, r3, #4
 8003f00:	6030      	str	r0, [r6, #0]
 8003f02:	062e      	lsls	r6, r5, #24
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	d501      	bpl.n	8003f0c <_printf_i+0x1c0>
 8003f08:	6019      	str	r1, [r3, #0]
 8003f0a:	e002      	b.n	8003f12 <_printf_i+0x1c6>
 8003f0c:	0668      	lsls	r0, r5, #25
 8003f0e:	d5fb      	bpl.n	8003f08 <_printf_i+0x1bc>
 8003f10:	8019      	strh	r1, [r3, #0]
 8003f12:	2300      	movs	r3, #0
 8003f14:	6123      	str	r3, [r4, #16]
 8003f16:	4616      	mov	r6, r2
 8003f18:	e7bc      	b.n	8003e94 <_printf_i+0x148>
 8003f1a:	6833      	ldr	r3, [r6, #0]
 8003f1c:	1d1a      	adds	r2, r3, #4
 8003f1e:	6032      	str	r2, [r6, #0]
 8003f20:	681e      	ldr	r6, [r3, #0]
 8003f22:	6862      	ldr	r2, [r4, #4]
 8003f24:	2100      	movs	r1, #0
 8003f26:	4630      	mov	r0, r6
 8003f28:	f7fc f952 	bl	80001d0 <memchr>
 8003f2c:	b108      	cbz	r0, 8003f32 <_printf_i+0x1e6>
 8003f2e:	1b80      	subs	r0, r0, r6
 8003f30:	6060      	str	r0, [r4, #4]
 8003f32:	6863      	ldr	r3, [r4, #4]
 8003f34:	6123      	str	r3, [r4, #16]
 8003f36:	2300      	movs	r3, #0
 8003f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f3c:	e7aa      	b.n	8003e94 <_printf_i+0x148>
 8003f3e:	6923      	ldr	r3, [r4, #16]
 8003f40:	4632      	mov	r2, r6
 8003f42:	4649      	mov	r1, r9
 8003f44:	4640      	mov	r0, r8
 8003f46:	47d0      	blx	sl
 8003f48:	3001      	adds	r0, #1
 8003f4a:	d0ad      	beq.n	8003ea8 <_printf_i+0x15c>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	079b      	lsls	r3, r3, #30
 8003f50:	d413      	bmi.n	8003f7a <_printf_i+0x22e>
 8003f52:	68e0      	ldr	r0, [r4, #12]
 8003f54:	9b03      	ldr	r3, [sp, #12]
 8003f56:	4298      	cmp	r0, r3
 8003f58:	bfb8      	it	lt
 8003f5a:	4618      	movlt	r0, r3
 8003f5c:	e7a6      	b.n	8003eac <_printf_i+0x160>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4632      	mov	r2, r6
 8003f62:	4649      	mov	r1, r9
 8003f64:	4640      	mov	r0, r8
 8003f66:	47d0      	blx	sl
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d09d      	beq.n	8003ea8 <_printf_i+0x15c>
 8003f6c:	3501      	adds	r5, #1
 8003f6e:	68e3      	ldr	r3, [r4, #12]
 8003f70:	9903      	ldr	r1, [sp, #12]
 8003f72:	1a5b      	subs	r3, r3, r1
 8003f74:	42ab      	cmp	r3, r5
 8003f76:	dcf2      	bgt.n	8003f5e <_printf_i+0x212>
 8003f78:	e7eb      	b.n	8003f52 <_printf_i+0x206>
 8003f7a:	2500      	movs	r5, #0
 8003f7c:	f104 0619 	add.w	r6, r4, #25
 8003f80:	e7f5      	b.n	8003f6e <_printf_i+0x222>
 8003f82:	bf00      	nop
 8003f84:	08004305 	.word	0x08004305
 8003f88:	08004316 	.word	0x08004316

08003f8c <__sflush_r>:
 8003f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f94:	0716      	lsls	r6, r2, #28
 8003f96:	4605      	mov	r5, r0
 8003f98:	460c      	mov	r4, r1
 8003f9a:	d454      	bmi.n	8004046 <__sflush_r+0xba>
 8003f9c:	684b      	ldr	r3, [r1, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	dc02      	bgt.n	8003fa8 <__sflush_r+0x1c>
 8003fa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	dd48      	ble.n	800403a <__sflush_r+0xae>
 8003fa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003faa:	2e00      	cmp	r6, #0
 8003fac:	d045      	beq.n	800403a <__sflush_r+0xae>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003fb4:	682f      	ldr	r7, [r5, #0]
 8003fb6:	6a21      	ldr	r1, [r4, #32]
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	d030      	beq.n	800401e <__sflush_r+0x92>
 8003fbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003fbe:	89a3      	ldrh	r3, [r4, #12]
 8003fc0:	0759      	lsls	r1, r3, #29
 8003fc2:	d505      	bpl.n	8003fd0 <__sflush_r+0x44>
 8003fc4:	6863      	ldr	r3, [r4, #4]
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003fca:	b10b      	cbz	r3, 8003fd0 <__sflush_r+0x44>
 8003fcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003fce:	1ad2      	subs	r2, r2, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fd4:	6a21      	ldr	r1, [r4, #32]
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	47b0      	blx	r6
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	d106      	bne.n	8003fee <__sflush_r+0x62>
 8003fe0:	6829      	ldr	r1, [r5, #0]
 8003fe2:	291d      	cmp	r1, #29
 8003fe4:	d82b      	bhi.n	800403e <__sflush_r+0xb2>
 8003fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8004090 <__sflush_r+0x104>)
 8003fe8:	410a      	asrs	r2, r1
 8003fea:	07d6      	lsls	r6, r2, #31
 8003fec:	d427      	bmi.n	800403e <__sflush_r+0xb2>
 8003fee:	2200      	movs	r2, #0
 8003ff0:	6062      	str	r2, [r4, #4]
 8003ff2:	04d9      	lsls	r1, r3, #19
 8003ff4:	6922      	ldr	r2, [r4, #16]
 8003ff6:	6022      	str	r2, [r4, #0]
 8003ff8:	d504      	bpl.n	8004004 <__sflush_r+0x78>
 8003ffa:	1c42      	adds	r2, r0, #1
 8003ffc:	d101      	bne.n	8004002 <__sflush_r+0x76>
 8003ffe:	682b      	ldr	r3, [r5, #0]
 8004000:	b903      	cbnz	r3, 8004004 <__sflush_r+0x78>
 8004002:	6560      	str	r0, [r4, #84]	@ 0x54
 8004004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004006:	602f      	str	r7, [r5, #0]
 8004008:	b1b9      	cbz	r1, 800403a <__sflush_r+0xae>
 800400a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800400e:	4299      	cmp	r1, r3
 8004010:	d002      	beq.n	8004018 <__sflush_r+0x8c>
 8004012:	4628      	mov	r0, r5
 8004014:	f7ff fbf2 	bl	80037fc <_free_r>
 8004018:	2300      	movs	r3, #0
 800401a:	6363      	str	r3, [r4, #52]	@ 0x34
 800401c:	e00d      	b.n	800403a <__sflush_r+0xae>
 800401e:	2301      	movs	r3, #1
 8004020:	4628      	mov	r0, r5
 8004022:	47b0      	blx	r6
 8004024:	4602      	mov	r2, r0
 8004026:	1c50      	adds	r0, r2, #1
 8004028:	d1c9      	bne.n	8003fbe <__sflush_r+0x32>
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0c6      	beq.n	8003fbe <__sflush_r+0x32>
 8004030:	2b1d      	cmp	r3, #29
 8004032:	d001      	beq.n	8004038 <__sflush_r+0xac>
 8004034:	2b16      	cmp	r3, #22
 8004036:	d11e      	bne.n	8004076 <__sflush_r+0xea>
 8004038:	602f      	str	r7, [r5, #0]
 800403a:	2000      	movs	r0, #0
 800403c:	e022      	b.n	8004084 <__sflush_r+0xf8>
 800403e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004042:	b21b      	sxth	r3, r3
 8004044:	e01b      	b.n	800407e <__sflush_r+0xf2>
 8004046:	690f      	ldr	r7, [r1, #16]
 8004048:	2f00      	cmp	r7, #0
 800404a:	d0f6      	beq.n	800403a <__sflush_r+0xae>
 800404c:	0793      	lsls	r3, r2, #30
 800404e:	680e      	ldr	r6, [r1, #0]
 8004050:	bf08      	it	eq
 8004052:	694b      	ldreq	r3, [r1, #20]
 8004054:	600f      	str	r7, [r1, #0]
 8004056:	bf18      	it	ne
 8004058:	2300      	movne	r3, #0
 800405a:	eba6 0807 	sub.w	r8, r6, r7
 800405e:	608b      	str	r3, [r1, #8]
 8004060:	f1b8 0f00 	cmp.w	r8, #0
 8004064:	dde9      	ble.n	800403a <__sflush_r+0xae>
 8004066:	6a21      	ldr	r1, [r4, #32]
 8004068:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800406a:	4643      	mov	r3, r8
 800406c:	463a      	mov	r2, r7
 800406e:	4628      	mov	r0, r5
 8004070:	47b0      	blx	r6
 8004072:	2800      	cmp	r0, #0
 8004074:	dc08      	bgt.n	8004088 <__sflush_r+0xfc>
 8004076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800407a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800407e:	81a3      	strh	r3, [r4, #12]
 8004080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004088:	4407      	add	r7, r0
 800408a:	eba8 0800 	sub.w	r8, r8, r0
 800408e:	e7e7      	b.n	8004060 <__sflush_r+0xd4>
 8004090:	dfbffffe 	.word	0xdfbffffe

08004094 <_fflush_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	690b      	ldr	r3, [r1, #16]
 8004098:	4605      	mov	r5, r0
 800409a:	460c      	mov	r4, r1
 800409c:	b913      	cbnz	r3, 80040a4 <_fflush_r+0x10>
 800409e:	2500      	movs	r5, #0
 80040a0:	4628      	mov	r0, r5
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
 80040a4:	b118      	cbz	r0, 80040ae <_fflush_r+0x1a>
 80040a6:	6a03      	ldr	r3, [r0, #32]
 80040a8:	b90b      	cbnz	r3, 80040ae <_fflush_r+0x1a>
 80040aa:	f7ff f9a5 	bl	80033f8 <__sinit>
 80040ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f3      	beq.n	800409e <_fflush_r+0xa>
 80040b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80040b8:	07d0      	lsls	r0, r2, #31
 80040ba:	d404      	bmi.n	80040c6 <_fflush_r+0x32>
 80040bc:	0599      	lsls	r1, r3, #22
 80040be:	d402      	bmi.n	80040c6 <_fflush_r+0x32>
 80040c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040c2:	f7ff fb98 	bl	80037f6 <__retarget_lock_acquire_recursive>
 80040c6:	4628      	mov	r0, r5
 80040c8:	4621      	mov	r1, r4
 80040ca:	f7ff ff5f 	bl	8003f8c <__sflush_r>
 80040ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040d0:	07da      	lsls	r2, r3, #31
 80040d2:	4605      	mov	r5, r0
 80040d4:	d4e4      	bmi.n	80040a0 <_fflush_r+0xc>
 80040d6:	89a3      	ldrh	r3, [r4, #12]
 80040d8:	059b      	lsls	r3, r3, #22
 80040da:	d4e1      	bmi.n	80040a0 <_fflush_r+0xc>
 80040dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040de:	f7ff fb8b 	bl	80037f8 <__retarget_lock_release_recursive>
 80040e2:	e7dd      	b.n	80040a0 <_fflush_r+0xc>

080040e4 <__swhatbuf_r>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	460c      	mov	r4, r1
 80040e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ec:	2900      	cmp	r1, #0
 80040ee:	b096      	sub	sp, #88	@ 0x58
 80040f0:	4615      	mov	r5, r2
 80040f2:	461e      	mov	r6, r3
 80040f4:	da0d      	bge.n	8004112 <__swhatbuf_r+0x2e>
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	bf14      	ite	ne
 8004102:	2340      	movne	r3, #64	@ 0x40
 8004104:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004108:	2000      	movs	r0, #0
 800410a:	6031      	str	r1, [r6, #0]
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	b016      	add	sp, #88	@ 0x58
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	466a      	mov	r2, sp
 8004114:	f000 f87c 	bl	8004210 <_fstat_r>
 8004118:	2800      	cmp	r0, #0
 800411a:	dbec      	blt.n	80040f6 <__swhatbuf_r+0x12>
 800411c:	9901      	ldr	r1, [sp, #4]
 800411e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004122:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004126:	4259      	negs	r1, r3
 8004128:	4159      	adcs	r1, r3
 800412a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800412e:	e7eb      	b.n	8004108 <__swhatbuf_r+0x24>

08004130 <__smakebuf_r>:
 8004130:	898b      	ldrh	r3, [r1, #12]
 8004132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004134:	079d      	lsls	r5, r3, #30
 8004136:	4606      	mov	r6, r0
 8004138:	460c      	mov	r4, r1
 800413a:	d507      	bpl.n	800414c <__smakebuf_r+0x1c>
 800413c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	6123      	str	r3, [r4, #16]
 8004144:	2301      	movs	r3, #1
 8004146:	6163      	str	r3, [r4, #20]
 8004148:	b003      	add	sp, #12
 800414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414c:	ab01      	add	r3, sp, #4
 800414e:	466a      	mov	r2, sp
 8004150:	f7ff ffc8 	bl	80040e4 <__swhatbuf_r>
 8004154:	9f00      	ldr	r7, [sp, #0]
 8004156:	4605      	mov	r5, r0
 8004158:	4639      	mov	r1, r7
 800415a:	4630      	mov	r0, r6
 800415c:	f7ff fbba 	bl	80038d4 <_malloc_r>
 8004160:	b948      	cbnz	r0, 8004176 <__smakebuf_r+0x46>
 8004162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004166:	059a      	lsls	r2, r3, #22
 8004168:	d4ee      	bmi.n	8004148 <__smakebuf_r+0x18>
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	f043 0302 	orr.w	r3, r3, #2
 8004172:	81a3      	strh	r3, [r4, #12]
 8004174:	e7e2      	b.n	800413c <__smakebuf_r+0xc>
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	6020      	str	r0, [r4, #0]
 800417a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800417e:	81a3      	strh	r3, [r4, #12]
 8004180:	9b01      	ldr	r3, [sp, #4]
 8004182:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004186:	b15b      	cbz	r3, 80041a0 <__smakebuf_r+0x70>
 8004188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800418c:	4630      	mov	r0, r6
 800418e:	f000 f851 	bl	8004234 <_isatty_r>
 8004192:	b128      	cbz	r0, 80041a0 <__smakebuf_r+0x70>
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	81a3      	strh	r3, [r4, #12]
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	431d      	orrs	r5, r3
 80041a4:	81a5      	strh	r5, [r4, #12]
 80041a6:	e7cf      	b.n	8004148 <__smakebuf_r+0x18>

080041a8 <_putc_r>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	460d      	mov	r5, r1
 80041ac:	4614      	mov	r4, r2
 80041ae:	4606      	mov	r6, r0
 80041b0:	b118      	cbz	r0, 80041ba <_putc_r+0x12>
 80041b2:	6a03      	ldr	r3, [r0, #32]
 80041b4:	b90b      	cbnz	r3, 80041ba <_putc_r+0x12>
 80041b6:	f7ff f91f 	bl	80033f8 <__sinit>
 80041ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041bc:	07d8      	lsls	r0, r3, #31
 80041be:	d405      	bmi.n	80041cc <_putc_r+0x24>
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	0599      	lsls	r1, r3, #22
 80041c4:	d402      	bmi.n	80041cc <_putc_r+0x24>
 80041c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041c8:	f7ff fb15 	bl	80037f6 <__retarget_lock_acquire_recursive>
 80041cc:	68a3      	ldr	r3, [r4, #8]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	60a3      	str	r3, [r4, #8]
 80041d4:	da05      	bge.n	80041e2 <_putc_r+0x3a>
 80041d6:	69a2      	ldr	r2, [r4, #24]
 80041d8:	4293      	cmp	r3, r2
 80041da:	db12      	blt.n	8004202 <_putc_r+0x5a>
 80041dc:	b2eb      	uxtb	r3, r5
 80041de:	2b0a      	cmp	r3, #10
 80041e0:	d00f      	beq.n	8004202 <_putc_r+0x5a>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	6022      	str	r2, [r4, #0]
 80041e8:	701d      	strb	r5, [r3, #0]
 80041ea:	b2ed      	uxtb	r5, r5
 80041ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041ee:	07da      	lsls	r2, r3, #31
 80041f0:	d405      	bmi.n	80041fe <_putc_r+0x56>
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	059b      	lsls	r3, r3, #22
 80041f6:	d402      	bmi.n	80041fe <_putc_r+0x56>
 80041f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041fa:	f7ff fafd 	bl	80037f8 <__retarget_lock_release_recursive>
 80041fe:	4628      	mov	r0, r5
 8004200:	bd70      	pop	{r4, r5, r6, pc}
 8004202:	4629      	mov	r1, r5
 8004204:	4622      	mov	r2, r4
 8004206:	4630      	mov	r0, r6
 8004208:	f7ff f9e7 	bl	80035da <__swbuf_r>
 800420c:	4605      	mov	r5, r0
 800420e:	e7ed      	b.n	80041ec <_putc_r+0x44>

08004210 <_fstat_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4d07      	ldr	r5, [pc, #28]	@ (8004230 <_fstat_r+0x20>)
 8004214:	2300      	movs	r3, #0
 8004216:	4604      	mov	r4, r0
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	602b      	str	r3, [r5, #0]
 800421e:	f7fc fcb5 	bl	8000b8c <_fstat>
 8004222:	1c43      	adds	r3, r0, #1
 8004224:	d102      	bne.n	800422c <_fstat_r+0x1c>
 8004226:	682b      	ldr	r3, [r5, #0]
 8004228:	b103      	cbz	r3, 800422c <_fstat_r+0x1c>
 800422a:	6023      	str	r3, [r4, #0]
 800422c:	bd38      	pop	{r3, r4, r5, pc}
 800422e:	bf00      	nop
 8004230:	20000280 	.word	0x20000280

08004234 <_isatty_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4d06      	ldr	r5, [pc, #24]	@ (8004250 <_isatty_r+0x1c>)
 8004238:	2300      	movs	r3, #0
 800423a:	4604      	mov	r4, r0
 800423c:	4608      	mov	r0, r1
 800423e:	602b      	str	r3, [r5, #0]
 8004240:	f7fc fcb4 	bl	8000bac <_isatty>
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	d102      	bne.n	800424e <_isatty_r+0x1a>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	b103      	cbz	r3, 800424e <_isatty_r+0x1a>
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	20000280 	.word	0x20000280

08004254 <_sbrk_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	4d06      	ldr	r5, [pc, #24]	@ (8004270 <_sbrk_r+0x1c>)
 8004258:	2300      	movs	r3, #0
 800425a:	4604      	mov	r4, r0
 800425c:	4608      	mov	r0, r1
 800425e:	602b      	str	r3, [r5, #0]
 8004260:	f7fc fcbc 	bl	8000bdc <_sbrk>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_sbrk_r+0x1a>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_sbrk_r+0x1a>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	20000280 	.word	0x20000280

08004274 <_init>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr

08004280 <_fini>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	bf00      	nop
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr
