
stm32world_i2c2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002aa8  08002aa8  00003aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002b44  08002b44  00003b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b4c  08002b4c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b4c  08002b4c  00003b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b50  08002b50  00003b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002b54  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          0000020c  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d13b  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a5e  00000000  00000000  000111d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000066b1  00000000  00000000  00012c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000988  00000000  00000000  000192e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000767  00000000  00000000  00019c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f542  00000000  00000000  0001a3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010348  00000000  00000000  00039919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bbe3a  00000000  00000000  00049c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00105a9b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000227c  00000000  00000000  00105ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  00107d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a90 	.word	0x08002a90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002a90 	.word	0x08002a90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000560:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000564:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000568:	f013 0f01 	tst.w	r3, #1
 800056c:	d011      	beq.n	8000592 <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800056e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000572:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000576:	f013 0f01 	tst.w	r3, #1
 800057a:	d101      	bne.n	8000580 <ITM_SendChar+0x20>
 800057c:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 800057e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000580:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f9      	beq.n	800057e <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800058a:	b2c3      	uxtb	r3, r0
 800058c:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000590:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 8000592:	4770      	bx	lr

08000594 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000594:	b084      	sub	sp, #16
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	2200      	movs	r2, #0
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <MX_GPIO_Init+0x48>)
 800059c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800059e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80005a2:	6319      	str	r1, [r3, #48]	@ 0x30
 80005a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80005a6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80005aa:	9101      	str	r1, [sp, #4]
 80005ac:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	9202      	str	r2, [sp, #8]
 80005b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80005b2:	f041 0102 	orr.w	r1, r1, #2
 80005b6:	6319      	str	r1, [r3, #48]	@ 0x30
 80005b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80005ba:	f001 0102 	and.w	r1, r1, #2
 80005be:	9102      	str	r1, [sp, #8]
 80005c0:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	9203      	str	r2, [sp, #12]
 80005c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c6:	f042 0201 	orr.w	r2, r2, #1
 80005ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	9303      	str	r3, [sp, #12]
 80005d4:	9b03      	ldr	r3, [sp, #12]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80005d6:	b004      	add	sp, #16
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <_write>:
int _write(int fd, char *ptr, int len) {
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	460e      	mov	r6, r1
 80005e4:	4615      	mov	r5, r2
    if (fd == 1) {
 80005e6:	2801      	cmp	r0, #1
 80005e8:	d003      	beq.n	80005f2 <_write+0x12>
    } else if (fd == 2) {
 80005ea:	2802      	cmp	r0, #2
 80005ec:	d10b      	bne.n	8000606 <_write+0x26>
        for (int i = 0; i < len; i++) {
 80005ee:	2400      	movs	r4, #0
 80005f0:	e010      	b.n	8000614 <_write+0x34>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f6:	b292      	uxth	r2, r2
 80005f8:	4808      	ldr	r0, [pc, #32]	@ (800061c <_write+0x3c>)
 80005fa:	f001 fa18 	bl	8001a2e <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 80005fe:	b158      	cbz	r0, 8000618 <_write+0x38>
            return -1;
 8000600:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000604:	e008      	b.n	8000618 <_write+0x38>
        return -1;
 8000606:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800060a:	e005      	b.n	8000618 <_write+0x38>
            ITM_SendChar(ptr[i]); /* core_cm4.h */
 800060c:	5d30      	ldrb	r0, [r6, r4]
 800060e:	f7ff ffa7 	bl	8000560 <ITM_SendChar>
        for (int i = 0; i < len; i++) {
 8000612:	3401      	adds	r4, #1
 8000614:	42ac      	cmp	r4, r5
 8000616:	dbf9      	blt.n	800060c <_write+0x2c>
}
 8000618:	4628      	mov	r0, r5
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	20000084 	.word	0x20000084

08000620 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000622:	e7fe      	b.n	8000622 <Error_Handler+0x2>

08000624 <MX_I2C2_Init>:
{
 8000624:	b508      	push	{r3, lr}
    hi2c2.Instance = I2C2;
 8000626:	480a      	ldr	r0, [pc, #40]	@ (8000650 <MX_I2C2_Init+0x2c>)
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <MX_I2C2_Init+0x30>)
 800062a:	6003      	str	r3, [r0, #0]
    hi2c2.Init.ClockSpeed = 400000;
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <MX_I2C2_Init+0x34>)
 800062e:	6043      	str	r3, [r0, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	2300      	movs	r3, #0
 8000632:	6083      	str	r3, [r0, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8000634:	60c3      	str	r3, [r0, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000636:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800063a:	6102      	str	r2, [r0, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	6143      	str	r3, [r0, #20]
    hi2c2.Init.OwnAddress2 = 0;
 800063e:	6183      	str	r3, [r0, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	61c3      	str	r3, [r0, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000642:	6203      	str	r3, [r0, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000644:	f000 fbe8 	bl	8000e18 <HAL_I2C_Init>
 8000648:	b900      	cbnz	r0, 800064c <MX_I2C2_Init+0x28>
}
 800064a:	bd08      	pop	{r3, pc}
        Error_Handler();
 800064c:	f7ff ffe8 	bl	8000620 <Error_Handler>
 8000650:	200000cc 	.word	0x200000cc
 8000654:	40005800 	.word	0x40005800
 8000658:	00061a80 	.word	0x00061a80

0800065c <MX_USART1_UART_Init>:
{
 800065c:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800065e:	480a      	ldr	r0, [pc, #40]	@ (8000688 <MX_USART1_UART_Init+0x2c>)
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <MX_USART1_UART_Init+0x30>)
 8000662:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8000664:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000668:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	2300      	movs	r3, #0
 800066c:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800066e:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000670:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000672:	220c      	movs	r2, #12
 8000674:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800067a:	f001 f9a8 	bl	80019ce <HAL_UART_Init>
 800067e:	b900      	cbnz	r0, 8000682 <MX_USART1_UART_Init+0x26>
}
 8000680:	bd08      	pop	{r3, pc}
        Error_Handler();
 8000682:	f7ff ffcd 	bl	8000620 <Error_Handler>
 8000686:	bf00      	nop
 8000688:	20000084 	.word	0x20000084
 800068c:	40011000 	.word	0x40011000

08000690 <SystemClock_Config>:
{
 8000690:	b500      	push	{lr}
 8000692:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000694:	2230      	movs	r2, #48	@ 0x30
 8000696:	2100      	movs	r1, #0
 8000698:	a808      	add	r0, sp, #32
 800069a:	f001 fc41 	bl	8001f20 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800069e:	2300      	movs	r3, #0
 80006a0:	9303      	str	r3, [sp, #12]
 80006a2:	9304      	str	r3, [sp, #16]
 80006a4:	9305      	str	r3, [sp, #20]
 80006a6:	9306      	str	r3, [sp, #24]
 80006a8:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <SystemClock_Config+0xa0>)
 80006ae:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80006b0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80006b4:	6411      	str	r1, [r2, #64]	@ 0x40
 80006b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80006b8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80006bc:	9201      	str	r2, [sp, #4]
 80006be:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <SystemClock_Config+0xa4>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d2:	9302      	str	r3, [sp, #8]
 80006d4:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006de:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006e8:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 80006ea:	2208      	movs	r2, #8
 80006ec:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 80006ee:	22a8      	movs	r2, #168	@ 0xa8
 80006f0:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	a808      	add	r0, sp, #32
 80006fa:	f000 fd35 	bl	8001168 <HAL_RCC_OscConfig>
 80006fe:	b998      	cbnz	r0, 8000728 <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000710:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	2105      	movs	r1, #5
 800071a:	a803      	add	r0, sp, #12
 800071c:	f000 ff88 	bl	8001630 <HAL_RCC_ClockConfig>
 8000720:	b920      	cbnz	r0, 800072c <SystemClock_Config+0x9c>
}
 8000722:	b015      	add	sp, #84	@ 0x54
 8000724:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000728:	f7ff ff7a 	bl	8000620 <Error_Handler>
        Error_Handler();
 800072c:	f7ff ff78 	bl	8000620 <Error_Handler>
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <main>:
{
 8000738:	b510      	push	{r4, lr}
    HAL_Init();
 800073a:	f000 f98b 	bl	8000a54 <HAL_Init>
    SystemClock_Config();
 800073e:	f7ff ffa7 	bl	8000690 <SystemClock_Config>
    MX_GPIO_Init();
 8000742:	f7ff ff27 	bl	8000594 <MX_GPIO_Init>
    MX_I2C2_Init();
 8000746:	f7ff ff6d 	bl	8000624 <MX_I2C2_Init>
    MX_USART1_UART_Init();
 800074a:	f7ff ff87 	bl	800065c <MX_USART1_UART_Init>
    printf("\n\n\n-------------\nStarting i2c2\n");
 800074e:	481f      	ldr	r0, [pc, #124]	@ (80007cc <main+0x94>)
 8000750:	f001 fb06 	bl	8001d60 <puts>
    printf("\nScan I2C2\n");
 8000754:	481e      	ldr	r0, [pc, #120]	@ (80007d0 <main+0x98>)
 8000756:	f001 fb03 	bl	8001d60 <puts>
    for (uint8_t i = 0; i < 128; i++) {
 800075a:	2400      	movs	r4, #0
 800075c:	e005      	b.n	800076a <main+0x32>
            printf("-- ");
 800075e:	481d      	ldr	r0, [pc, #116]	@ (80007d4 <main+0x9c>)
 8000760:	f001 fa8e 	bl	8001c80 <iprintf>
 8000764:	e010      	b.n	8000788 <main+0x50>
    for (uint8_t i = 0; i < 128; i++) {
 8000766:	3401      	adds	r4, #1
 8000768:	b2e4      	uxtb	r4, r4
 800076a:	f014 0f80 	tst.w	r4, #128	@ 0x80
 800076e:	d115      	bne.n	800079c <main+0x64>
        if (HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t) (i << 1), 3, 5) == HAL_OK) {
 8000770:	2305      	movs	r3, #5
 8000772:	2203      	movs	r2, #3
 8000774:	0061      	lsls	r1, r4, #1
 8000776:	4818      	ldr	r0, [pc, #96]	@ (80007d8 <main+0xa0>)
 8000778:	f000 fc2c 	bl	8000fd4 <HAL_I2C_IsDeviceReady>
 800077c:	2800      	cmp	r0, #0
 800077e:	d1ee      	bne.n	800075e <main+0x26>
            printf("%2x ", i);
 8000780:	4621      	mov	r1, r4
 8000782:	4816      	ldr	r0, [pc, #88]	@ (80007dc <main+0xa4>)
 8000784:	f001 fa7c 	bl	8001c80 <iprintf>
        if (i > 0 && (i + 1) % 16 == 0)
 8000788:	2c00      	cmp	r4, #0
 800078a:	d0ec      	beq.n	8000766 <main+0x2e>
 800078c:	1c63      	adds	r3, r4, #1
 800078e:	f013 0f0f 	tst.w	r3, #15
 8000792:	d1e8      	bne.n	8000766 <main+0x2e>
            printf("\n");
 8000794:	200a      	movs	r0, #10
 8000796:	f001 fa85 	bl	8001ca4 <putchar>
 800079a:	e7e4      	b.n	8000766 <main+0x2e>
    printf("\n");
 800079c:	200a      	movs	r0, #10
 800079e:	f001 fa81 	bl	8001ca4 <putchar>
    uint32_t now = 0, loop_cnt = 0, next_tick = 1000;
 80007a2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007a6:	2200      	movs	r2, #0
 80007a8:	e00a      	b.n	80007c0 <main+0x88>
            printf("Tick %lu (loop = %lu)\n", now / 1000, loop_cnt);
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <main+0xa8>)
 80007ac:	fba1 3104 	umull	r3, r1, r1, r4
 80007b0:	0989      	lsrs	r1, r1, #6
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <main+0xac>)
 80007b4:	f001 fa64 	bl	8001c80 <iprintf>
            next_tick = now + 1000;
 80007b8:	f504 717a 	add.w	r1, r4, #1000	@ 0x3e8
            loop_cnt = 0;
 80007bc:	2200      	movs	r2, #0
        ++loop_cnt;
 80007be:	3201      	adds	r2, #1
        now = uwTick;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <main+0xb0>)
 80007c2:	681c      	ldr	r4, [r3, #0]
        if (now >= next_tick) {
 80007c4:	42a1      	cmp	r1, r4
 80007c6:	d8fa      	bhi.n	80007be <main+0x86>
 80007c8:	e7ef      	b.n	80007aa <main+0x72>
 80007ca:	bf00      	nop
 80007cc:	08002aa8 	.word	0x08002aa8
 80007d0:	08002ac8 	.word	0x08002ac8
 80007d4:	08002adc 	.word	0x08002adc
 80007d8:	200000cc 	.word	0x200000cc
 80007dc:	08002ad4 	.word	0x08002ad4
 80007e0:	10624dd3 	.word	0x10624dd3
 80007e4:	08002ae0 	.word	0x08002ae0
 80007e8:	20000124 	.word	0x20000124

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2100      	movs	r1, #0
 80007f0:	9100      	str	r1, [sp, #0]
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <HAL_MspInit+0x34>)
 80007f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80007fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007fe:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000802:	9200      	str	r2, [sp, #0]
 8000804:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	9101      	str	r1, [sp, #4]
 8000808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800080a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800080e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	b002      	add	sp, #8
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000824:	b530      	push	{r4, r5, lr}
 8000826:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	2300      	movs	r3, #0
 800082a:	9303      	str	r3, [sp, #12]
 800082c:	9304      	str	r3, [sp, #16]
 800082e:	9305      	str	r3, [sp, #20]
 8000830:	9306      	str	r3, [sp, #24]
 8000832:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8000834:	6802      	ldr	r2, [r0, #0]
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <HAL_I2C_MspInit+0x64>)
 8000838:	429a      	cmp	r2, r3
 800083a:	d001      	beq.n	8000840 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800083c:	b009      	add	sp, #36	@ 0x24
 800083e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	2500      	movs	r5, #0
 8000842:	9501      	str	r5, [sp, #4]
 8000844:	4c11      	ldr	r4, [pc, #68]	@ (800088c <HAL_I2C_MspInit+0x68>)
 8000846:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6323      	str	r3, [r4, #48]	@ 0x30
 800084e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000858:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800085c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085e:	2312      	movs	r3, #18
 8000860:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000866:	2304      	movs	r3, #4
 8000868:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	a903      	add	r1, sp, #12
 800086c:	4808      	ldr	r0, [pc, #32]	@ (8000890 <HAL_I2C_MspInit+0x6c>)
 800086e:	f000 f987 	bl	8000b80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000872:	9502      	str	r5, [sp, #8]
 8000874:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000876:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800087a:	6423      	str	r3, [r4, #64]	@ 0x40
 800087c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800087e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	9b02      	ldr	r3, [sp, #8]
}
 8000886:	e7d9      	b.n	800083c <HAL_I2C_MspInit+0x18>
 8000888:	40005800 	.word	0x40005800
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b500      	push	{lr}
 8000896:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	2300      	movs	r3, #0
 800089a:	9303      	str	r3, [sp, #12]
 800089c:	9304      	str	r3, [sp, #16]
 800089e:	9305      	str	r3, [sp, #20]
 80008a0:	9306      	str	r3, [sp, #24]
 80008a2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80008a4:	6802      	ldr	r2, [r0, #0]
 80008a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80008aa:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d002      	beq.n	80008b8 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80008b2:	b009      	add	sp, #36	@ 0x24
 80008b4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b8:	2100      	movs	r1, #0
 80008ba:	9101      	str	r1, [sp, #4]
 80008bc:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80008c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008c2:	f042 0210 	orr.w	r2, r2, #16
 80008c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80008c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008ca:	f002 0210 	and.w	r2, r2, #16
 80008ce:	9201      	str	r2, [sp, #4]
 80008d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	9102      	str	r1, [sp, #8]
 80008d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008d6:	f042 0201 	orr.w	r2, r2, #1
 80008da:	631a      	str	r2, [r3, #48]	@ 0x30
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008e6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008f4:	2307      	movs	r3, #7
 80008f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	a903      	add	r1, sp, #12
 80008fa:	4802      	ldr	r0, [pc, #8]	@ (8000904 <HAL_UART_MspInit+0x70>)
 80008fc:	f000 f940 	bl	8000b80 <HAL_GPIO_Init>
}
 8000900:	e7d7      	b.n	80008b2 <HAL_UART_MspInit+0x1e>
 8000902:	bf00      	nop
 8000904:	40020000 	.word	0x40020000

08000908 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler>

0800090a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler>

0800090c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler>

0800090e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler>

08000910 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <UsageFault_Handler>

08000912 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	4770      	bx	lr

08000914 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	4770      	bx	lr

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 f8b5 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bd08      	pop	{r3, pc}

08000920 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	460c      	mov	r4, r1
 8000924:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000926:	2500      	movs	r5, #0
 8000928:	e006      	b.n	8000938 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800092a:	f3af 8000 	nop.w
 800092e:	4621      	mov	r1, r4
 8000930:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000934:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000936:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000938:	42b5      	cmp	r5, r6
 800093a:	dbf6      	blt.n	800092a <_read+0xa>
  }

  return len;
}
 800093c:	4630      	mov	r0, r6
 800093e:	bd70      	pop	{r4, r5, r6, pc}

08000940 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000944:	4770      	bx	lr

08000946 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000946:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800094c:	2000      	movs	r0, #0
 800094e:	4770      	bx	lr

08000950 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000950:	2001      	movs	r0, #1
 8000952:	4770      	bx	lr

08000954 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000954:	2000      	movs	r0, #0
 8000956:	4770      	bx	lr

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b510      	push	{r4, lr}
 800095a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800095c:	4a0c      	ldr	r2, [pc, #48]	@ (8000990 <_sbrk+0x38>)
 800095e:	490d      	ldr	r1, [pc, #52]	@ (8000994 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000960:	480d      	ldr	r0, [pc, #52]	@ (8000998 <_sbrk+0x40>)
 8000962:	6800      	ldr	r0, [r0, #0]
 8000964:	b140      	cbz	r0, 8000978 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	480c      	ldr	r0, [pc, #48]	@ (8000998 <_sbrk+0x40>)
 8000968:	6800      	ldr	r0, [r0, #0]
 800096a:	4403      	add	r3, r0
 800096c:	1a52      	subs	r2, r2, r1
 800096e:	4293      	cmp	r3, r2
 8000970:	d806      	bhi.n	8000980 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000972:	4a09      	ldr	r2, [pc, #36]	@ (8000998 <_sbrk+0x40>)
 8000974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000976:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000978:	4807      	ldr	r0, [pc, #28]	@ (8000998 <_sbrk+0x40>)
 800097a:	4c08      	ldr	r4, [pc, #32]	@ (800099c <_sbrk+0x44>)
 800097c:	6004      	str	r4, [r0, #0]
 800097e:	e7f2      	b.n	8000966 <_sbrk+0xe>
    errno = ENOMEM;
 8000980:	f001 fb1c 	bl	8001fbc <__errno>
 8000984:	230c      	movs	r3, #12
 8000986:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800098c:	e7f3      	b.n	8000976 <_sbrk+0x1e>
 800098e:	bf00      	nop
 8000990:	20020000 	.word	0x20020000
 8000994:	00000400 	.word	0x00000400
 8000998:	20000120 	.word	0x20000120
 800099c:	20000278 	.word	0x20000278

080009a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4a03      	ldr	r2, [pc, #12]	@ (80009b0 <SystemInit+0x10>)
 80009a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80009a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009aa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009b8:	f7ff fff2 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	@ (80009f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f001 faf1 	bl	8001fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f7ff fea7 	bl	8000738 <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009f8:	08002b54 	.word	0x08002b54
  ldr r2, =_sbss
 80009fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a00:	20000274 	.word	0x20000274

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>
	...

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <HAL_InitTick+0x40>)
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a18:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <HAL_InitTick+0x44>)
 8000a1a:	6810      	ldr	r0, [r2, #0]
 8000a1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a20:	f000 f89a 	bl	8000b58 <HAL_SYSTICK_Config>
 8000a24:	b968      	cbnz	r0, 8000a42 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	2c0f      	cmp	r4, #15
 8000a28:	d901      	bls.n	8000a2e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	e00a      	b.n	8000a44 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4621      	mov	r1, r4
 8000a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a36:	f000 f87f 	bl	8000b38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <HAL_InitTick+0x48>)
 8000a3c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2000      	movs	r0, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a42:	2001      	movs	r0, #1
}
 8000a44:	bd10      	pop	{r4, pc}
 8000a46:	bf00      	nop
 8000a48:	20000004 	.word	0x20000004
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008

08000a54 <HAL_Init>:
{
 8000a54:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <HAL_Init+0x30>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a66:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a6e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f000 f84f 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a76:	200f      	movs	r0, #15
 8000a78:	f7ff ffc6 	bl	8000a08 <HAL_InitTick>
  HAL_MspInit();
 8000a7c:	f7ff feb6 	bl	80007ec <HAL_MspInit>
}
 8000a80:	2000      	movs	r0, #0
 8000a82:	bd08      	pop	{r3, pc}
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a88:	4a03      	ldr	r2, [pc, #12]	@ (8000a98 <HAL_IncTick+0x10>)
 8000a8a:	6811      	ldr	r1, [r2, #0]
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <HAL_IncTick+0x14>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	440b      	add	r3, r1
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000124 	.word	0x20000124
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000aa0:	4b01      	ldr	r3, [pc, #4]	@ (8000aa8 <HAL_GetTick+0x8>)
 8000aa2:	6818      	ldr	r0, [r3, #0]
}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000124 	.word	0x20000124

08000aac <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8000aac:	2800      	cmp	r0, #0
 8000aae:	db08      	blt.n	8000ac2 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	0109      	lsls	r1, r1, #4
 8000ab2:	b2c9      	uxtb	r1, r1
 8000ab4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000ab8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000abc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000ac0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	f000 000f 	and.w	r0, r0, #15
 8000ac6:	0109      	lsls	r1, r1, #4
 8000ac8:	b2c9      	uxtb	r1, r1
 8000aca:	4b01      	ldr	r3, [pc, #4]	@ (8000ad0 <__NVIC_SetPriority+0x24>)
 8000acc:	5419      	strb	r1, [r3, r0]
}
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed14 	.word	0xe000ed14

08000ad4 <NVIC_EncodePriority>:
{
 8000ad4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad6:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ada:	f1c0 0c07 	rsb	ip, r0, #7
 8000ade:	f1bc 0f04 	cmp.w	ip, #4
 8000ae2:	bf28      	it	cs
 8000ae4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae8:	1d03      	adds	r3, r0, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d90f      	bls.n	8000b0e <NVIC_EncodePriority+0x3a>
 8000aee:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000af4:	fa0e f00c 	lsl.w	r0, lr, ip
 8000af8:	ea21 0100 	bic.w	r1, r1, r0
 8000afc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afe:	fa0e fe03 	lsl.w	lr, lr, r3
 8000b02:	ea22 020e 	bic.w	r2, r2, lr
}
 8000b06:	ea41 0002 	orr.w	r0, r1, r2
 8000b0a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e7ee      	b.n	8000af0 <NVIC_EncodePriority+0x1c>
	...

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b16:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b18:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b1c:	041b      	lsls	r3, r3, #16
 8000b1e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	0200      	lsls	r0, r0, #8
 8000b22:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b26:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000b30:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <HAL_NVIC_SetPriority+0x1c>)
 8000b3e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b40:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000b44:	f7ff ffc6 	bl	8000ad4 <NVIC_EncodePriority>
 8000b48:	4601      	mov	r1, r0
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff ffae 	bl	8000aac <__NVIC_SetPriority>
}
 8000b50:	bd10      	pop	{r4, pc}
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	3801      	subs	r0, #1
 8000b5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b5e:	d20b      	bcs.n	8000b78 <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b60:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000b64:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <HAL_SYSTICK_Config+0x24>)
 8000b68:	21f0      	movs	r1, #240	@ 0xf0
 8000b6a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6e:	2000      	movs	r0, #0
 8000b70:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	2207      	movs	r2, #7
 8000b74:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 8000b76:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b78:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	f200 80e9 	bhi.w	8000d5a <HAL_GPIO_Init+0x1da>
{
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	e065      	b.n	8000c5a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b8e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b90:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b94:	2403      	movs	r4, #3
 8000b96:	fa04 f40e 	lsl.w	r4, r4, lr
 8000b9a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b9e:	68cc      	ldr	r4, [r1, #12]
 8000ba0:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ba4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000ba6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000baa:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bae:	684a      	ldr	r2, [r1, #4]
 8000bb0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000bb8:	6042      	str	r2, [r0, #4]
 8000bba:	e05c      	b.n	8000c76 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bbc:	08dc      	lsrs	r4, r3, #3
 8000bbe:	3408      	adds	r4, #8
 8000bc0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bc4:	f003 0507 	and.w	r5, r3, #7
 8000bc8:	00ad      	lsls	r5, r5, #2
 8000bca:	f04f 0e0f 	mov.w	lr, #15
 8000bce:	fa0e fe05 	lsl.w	lr, lr, r5
 8000bd2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bd6:	690a      	ldr	r2, [r1, #16]
 8000bd8:	40aa      	lsls	r2, r5
 8000bda:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000bde:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000be2:	e05c      	b.n	8000c9e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000be4:	2207      	movs	r2, #7
 8000be6:	e000      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000be8:	2200      	movs	r2, #0
 8000bea:	fa02 f20e 	lsl.w	r2, r2, lr
 8000bee:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bf0:	3402      	adds	r4, #2
 8000bf2:	4d5a      	ldr	r5, [pc, #360]	@ (8000d5c <HAL_GPIO_Init+0x1dc>)
 8000bf4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf8:	4a59      	ldr	r2, [pc, #356]	@ (8000d60 <HAL_GPIO_Init+0x1e0>)
 8000bfa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bfc:	ea6f 020c 	mvn.w	r2, ip
 8000c00:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c04:	684e      	ldr	r6, [r1, #4]
 8000c06:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000c0a:	d001      	beq.n	8000c10 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000c0c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000c10:	4c53      	ldr	r4, [pc, #332]	@ (8000d60 <HAL_GPIO_Init+0x1e0>)
 8000c12:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000c14:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c16:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c1a:	684e      	ldr	r6, [r1, #4]
 8000c1c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000c20:	d001      	beq.n	8000c26 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000c22:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000c26:	4c4e      	ldr	r4, [pc, #312]	@ (8000d60 <HAL_GPIO_Init+0x1e0>)
 8000c28:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000c2a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c2c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c30:	684e      	ldr	r6, [r1, #4]
 8000c32:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000c36:	d001      	beq.n	8000c3c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000c38:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000c3c:	4c48      	ldr	r4, [pc, #288]	@ (8000d60 <HAL_GPIO_Init+0x1e0>)
 8000c3e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c40:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c42:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c44:	684d      	ldr	r5, [r1, #4]
 8000c46:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000c4a:	d001      	beq.n	8000c50 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000c4c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000c50:	4c43      	ldr	r4, [pc, #268]	@ (8000d60 <HAL_GPIO_Init+0x1e0>)
 8000c52:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c54:	3301      	adds	r3, #1
 8000c56:	2b0f      	cmp	r3, #15
 8000c58:	d87d      	bhi.n	8000d56 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	680c      	ldr	r4, [r1, #0]
 8000c60:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000c64:	ea32 0404 	bics.w	r4, r2, r4
 8000c68:	d1f4      	bne.n	8000c54 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6a:	684c      	ldr	r4, [r1, #4]
 8000c6c:	f004 0403 	and.w	r4, r4, #3
 8000c70:	3c01      	subs	r4, #1
 8000c72:	2c01      	cmp	r4, #1
 8000c74:	d98b      	bls.n	8000b8e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c76:	684a      	ldr	r2, [r1, #4]
 8000c78:	f002 0203 	and.w	r2, r2, #3
 8000c7c:	2a03      	cmp	r2, #3
 8000c7e:	d009      	beq.n	8000c94 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000c80:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c82:	005d      	lsls	r5, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	40aa      	lsls	r2, r5
 8000c88:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8c:	688a      	ldr	r2, [r1, #8]
 8000c8e:	40aa      	lsls	r2, r5
 8000c90:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000c92:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c94:	684a      	ldr	r2, [r1, #4]
 8000c96:	f002 0203 	and.w	r2, r2, #3
 8000c9a:	2a02      	cmp	r2, #2
 8000c9c:	d08e      	beq.n	8000bbc <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000c9e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000caa:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cae:	684a      	ldr	r2, [r1, #4]
 8000cb0:	f002 0203 	and.w	r2, r2, #3
 8000cb4:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cb8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000cba:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cbc:	684a      	ldr	r2, [r1, #4]
 8000cbe:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000cc2:	d0c7      	beq.n	8000c54 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	9201      	str	r2, [sp, #4]
 8000cc8:	4a26      	ldr	r2, [pc, #152]	@ (8000d64 <HAL_GPIO_Init+0x1e4>)
 8000cca:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000ccc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000cd0:	6454      	str	r4, [r2, #68]	@ 0x44
 8000cd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000cd4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000cd8:	9201      	str	r2, [sp, #4]
 8000cda:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000cdc:	089c      	lsrs	r4, r3, #2
 8000cde:	1ca5      	adds	r5, r4, #2
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d5c <HAL_GPIO_Init+0x1dc>)
 8000ce2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce6:	f003 0e03 	and.w	lr, r3, #3
 8000cea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cf4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <HAL_GPIO_Init+0x1e8>)
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	f43f af74 	beq.w	8000be8 <HAL_GPIO_Init+0x68>
 8000d00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d01a      	beq.n	8000d3e <HAL_GPIO_Init+0x1be>
 8000d08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d018      	beq.n	8000d42 <HAL_GPIO_Init+0x1c2>
 8000d10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d016      	beq.n	8000d46 <HAL_GPIO_Init+0x1c6>
 8000d18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d014      	beq.n	8000d4a <HAL_GPIO_Init+0x1ca>
 8000d20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d012      	beq.n	8000d4e <HAL_GPIO_Init+0x1ce>
 8000d28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d010      	beq.n	8000d52 <HAL_GPIO_Init+0x1d2>
 8000d30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f43f af55 	beq.w	8000be4 <HAL_GPIO_Init+0x64>
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	e755      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000d3e:	2201      	movs	r2, #1
 8000d40:	e753      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000d42:	2202      	movs	r2, #2
 8000d44:	e751      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000d46:	2203      	movs	r2, #3
 8000d48:	e74f      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	e74d      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000d4e:	2205      	movs	r2, #5
 8000d50:	e74b      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000d52:	2206      	movs	r2, #6
 8000d54:	e749      	b.n	8000bea <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000d56:	b002      	add	sp, #8
 8000d58:	bd70      	pop	{r4, r5, r6, pc}
 8000d5a:	4770      	bx	lr
 8000d5c:	40013800 	.word	0x40013800
 8000d60:	40013c00 	.word	0x40013c00
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d70:	4606      	mov	r6, r0
 8000d72:	460c      	mov	r4, r1
 8000d74:	4617      	mov	r7, r2
 8000d76:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d78:	e03b      	b.n	8000df2 <I2C_WaitOnFlagUntilTimeout+0x86>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d7a:	f7ff fe91 	bl	8000aa0 <HAL_GetTick>
 8000d7e:	9b06      	ldr	r3, [sp, #24]
 8000d80:	1ac0      	subs	r0, r0, r3
 8000d82:	4540      	cmp	r0, r8
 8000d84:	d802      	bhi.n	8000d8c <I2C_WaitOnFlagUntilTimeout+0x20>
 8000d86:	f1b8 0f00 	cmp.w	r8, #0
 8000d8a:	d132      	bne.n	8000df2 <I2C_WaitOnFlagUntilTimeout+0x86>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000d8c:	2d01      	cmp	r5, #1
 8000d8e:	d018      	beq.n	8000dc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8000d90:	6833      	ldr	r3, [r6, #0]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	ea24 0303 	bic.w	r3, r4, r3
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	fab3 f383 	clz	r3, r3
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	429f      	cmp	r7, r3
 8000da2:	d126      	bne.n	8000df2 <I2C_WaitOnFlagUntilTimeout+0x86>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8000da8:	2220      	movs	r2, #32
 8000daa:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000dae:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000db2:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8000db4:	f042 0220 	orr.w	r2, r2, #32
 8000db8:	6432      	str	r2, [r6, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000dba:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c

          return HAL_ERROR;
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	e027      	b.n	8000e12 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000dc2:	6833      	ldr	r3, [r6, #0]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	ea24 0303 	bic.w	r3, r4, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	fab3 f383 	clz	r3, r3
 8000dd0:	095b      	lsrs	r3, r3, #5
 8000dd2:	e7e5      	b.n	8000da0 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000dd4:	6833      	ldr	r3, [r6, #0]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	ea24 0c03 	bic.w	ip, r4, r3
 8000ddc:	fa1f fc8c 	uxth.w	ip, ip
 8000de0:	fabc fc8c 	clz	ip, ip
 8000de4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000de8:	4567      	cmp	r7, ip
 8000dea:	d111      	bne.n	8000e10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8000dec:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8000df0:	d1c3      	bne.n	8000d7a <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000df2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8000df6:	2d01      	cmp	r5, #1
 8000df8:	d0ec      	beq.n	8000dd4 <I2C_WaitOnFlagUntilTimeout+0x68>
 8000dfa:	6833      	ldr	r3, [r6, #0]
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	ea24 0c03 	bic.w	ip, r4, r3
 8000e02:	fa1f fc8c 	uxth.w	ip, ip
 8000e06:	fabc fc8c 	clz	ip, ip
 8000e0a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000e0e:	e7eb      	b.n	8000de8 <I2C_WaitOnFlagUntilTimeout+0x7c>
        }
      }
    }
  }
  return HAL_OK;
 8000e10:	2000      	movs	r0, #0
}
 8000e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000e18 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	f000 80cc 	beq.w	8000fb6 <HAL_I2C_Init+0x19e>
{
 8000e1e:	b570      	push	{r4, r5, r6, lr}
 8000e20:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e22:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d077      	beq.n	8000f1a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e2a:	2324      	movs	r3, #36	@ 0x24
 8000e2c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000e30:	6822      	ldr	r2, [r4, #0]
 8000e32:	6813      	ldr	r3, [r2, #0]
 8000e34:	f023 0301 	bic.w	r3, r3, #1
 8000e38:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e3a:	6822      	ldr	r2, [r4, #0]
 8000e3c:	6813      	ldr	r3, [r2, #0]
 8000e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e42:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e44:	6822      	ldr	r2, [r4, #0]
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000e4c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e4e:	f000 fca5 	bl	800179c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e52:	6862      	ldr	r2, [r4, #4]
 8000e54:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc0 <HAL_I2C_Init+0x1a8>)
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d864      	bhi.n	8000f24 <HAL_I2C_Init+0x10c>
 8000e5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc4 <HAL_I2C_Init+0x1ac>)
 8000e5c:	4298      	cmp	r0, r3
 8000e5e:	bf8c      	ite	hi
 8000e60:	2300      	movhi	r3, #0
 8000e62:	2301      	movls	r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f040 80a8 	bne.w	8000fba <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8000e6a:	4957      	ldr	r1, [pc, #348]	@ (8000fc8 <HAL_I2C_Init+0x1b0>)
 8000e6c:	fba1 3100 	umull	r3, r1, r1, r0
 8000e70:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e72:	6825      	ldr	r5, [r4, #0]
 8000e74:	686a      	ldr	r2, [r5, #4]
 8000e76:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8000e7a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8000e7e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e80:	6821      	ldr	r1, [r4, #0]
 8000e82:	6a0a      	ldr	r2, [r1, #32]
 8000e84:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8000e88:	6866      	ldr	r6, [r4, #4]
 8000e8a:	4d4d      	ldr	r5, [pc, #308]	@ (8000fc0 <HAL_I2C_Init+0x1a8>)
 8000e8c:	42ae      	cmp	r6, r5
 8000e8e:	d84f      	bhi.n	8000f30 <HAL_I2C_Init+0x118>
 8000e90:	3301      	adds	r3, #1
 8000e92:	4313      	orrs	r3, r2
 8000e94:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e96:	6821      	ldr	r1, [r4, #0]
 8000e98:	69ca      	ldr	r2, [r1, #28]
 8000e9a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8000e9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000ea2:	6865      	ldr	r5, [r4, #4]
 8000ea4:	4b46      	ldr	r3, [pc, #280]	@ (8000fc0 <HAL_I2C_Init+0x1a8>)
 8000ea6:	429d      	cmp	r5, r3
 8000ea8:	d84c      	bhi.n	8000f44 <HAL_I2C_Init+0x12c>
 8000eaa:	1e43      	subs	r3, r0, #1
 8000eac:	006d      	lsls	r5, r5, #1
 8000eae:	fbb3 f3f5 	udiv	r3, r3, r5
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8000eb8:	4203      	tst	r3, r0
 8000eba:	d078      	beq.n	8000fae <HAL_I2C_Init+0x196>
 8000ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ec4:	6821      	ldr	r1, [r4, #0]
 8000ec6:	680b      	ldr	r3, [r1, #0]
 8000ec8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000ecc:	69e2      	ldr	r2, [r4, #28]
 8000ece:	6a20      	ldr	r0, [r4, #32]
 8000ed0:	4302      	orrs	r2, r0
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ed6:	6821      	ldr	r1, [r4, #0]
 8000ed8:	688b      	ldr	r3, [r1, #8]
 8000eda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000ede:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000ee2:	6922      	ldr	r2, [r4, #16]
 8000ee4:	68e0      	ldr	r0, [r4, #12]
 8000ee6:	4302      	orrs	r2, r0
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000eec:	6821      	ldr	r1, [r4, #0]
 8000eee:	68cb      	ldr	r3, [r1, #12]
 8000ef0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000ef4:	6962      	ldr	r2, [r4, #20]
 8000ef6:	69a0      	ldr	r0, [r4, #24]
 8000ef8:	4302      	orrs	r2, r0
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000efe:	6822      	ldr	r2, [r4, #0]
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f08:	2000      	movs	r0, #0
 8000f0a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f12:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f14:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8000f18:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000f1a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8000f1e:	f7ff fc81 	bl	8000824 <HAL_I2C_MspInit>
 8000f22:	e782      	b.n	8000e2a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f24:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <HAL_I2C_Init+0x1b4>)
 8000f26:	4298      	cmp	r0, r3
 8000f28:	bf8c      	ite	hi
 8000f2a:	2300      	movhi	r3, #0
 8000f2c:	2301      	movls	r3, #1
 8000f2e:	e799      	b.n	8000e64 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f30:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8000f34:	fb05 f303 	mul.w	r3, r5, r3
 8000f38:	4d25      	ldr	r5, [pc, #148]	@ (8000fd0 <HAL_I2C_Init+0x1b8>)
 8000f3a:	fba5 5303 	umull	r5, r3, r5, r3
 8000f3e:	099b      	lsrs	r3, r3, #6
 8000f40:	3301      	adds	r3, #1
 8000f42:	e7a6      	b.n	8000e92 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f44:	68a6      	ldr	r6, [r4, #8]
 8000f46:	b9be      	cbnz	r6, 8000f78 <HAL_I2C_Init+0x160>
 8000f48:	1e43      	subs	r3, r0, #1
 8000f4a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8000f4e:	fbb3 f3fc 	udiv	r3, r3, ip
 8000f52:	3301      	adds	r3, #1
 8000f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f58:	fab3 f383 	clz	r3, r3
 8000f5c:	095b      	lsrs	r3, r3, #5
 8000f5e:	bb43      	cbnz	r3, 8000fb2 <HAL_I2C_Init+0x19a>
 8000f60:	b9c6      	cbnz	r6, 8000f94 <HAL_I2C_Init+0x17c>
 8000f62:	1e43      	subs	r3, r0, #1
 8000f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000f68:	fbb3 f3f5 	udiv	r3, r3, r5
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f76:	e7a3      	b.n	8000ec0 <HAL_I2C_Init+0xa8>
 8000f78:	1e43      	subs	r3, r0, #1
 8000f7a:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8000f7e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8000f82:	fbb3 f3fc 	udiv	r3, r3, ip
 8000f86:	3301      	adds	r3, #1
 8000f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f8c:	fab3 f383 	clz	r3, r3
 8000f90:	095b      	lsrs	r3, r3, #5
 8000f92:	e7e4      	b.n	8000f5e <HAL_I2C_Init+0x146>
 8000f94:	1e43      	subs	r3, r0, #1
 8000f96:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000f9a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000f9e:	fbb3 f3f5 	udiv	r3, r3, r5
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fac:	e788      	b.n	8000ec0 <HAL_I2C_Init+0xa8>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e786      	b.n	8000ec0 <HAL_I2C_Init+0xa8>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e784      	b.n	8000ec0 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8000fb6:	2001      	movs	r0, #1
}
 8000fb8:	4770      	bx	lr
    return HAL_ERROR;
 8000fba:	2001      	movs	r0, #1
 8000fbc:	e7ac      	b.n	8000f18 <HAL_I2C_Init+0x100>
 8000fbe:	bf00      	nop
 8000fc0:	000186a0 	.word	0x000186a0
 8000fc4:	001e847f 	.word	0x001e847f
 8000fc8:	431bde83 	.word	0x431bde83
 8000fcc:	003d08ff 	.word	0x003d08ff
 8000fd0:	10624dd3 	.word	0x10624dd3

08000fd4 <HAL_I2C_IsDeviceReady>:
{
 8000fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	4604      	mov	r4, r0
 8000fdc:	4688      	mov	r8, r1
 8000fde:	4691      	mov	r9, r2
 8000fe0:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8000fe2:	f7ff fd5d 	bl	8000aa0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe6:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b20      	cmp	r3, #32
 8000fee:	d003      	beq.n	8000ff8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8000ff0:	2002      	movs	r0, #2
}
 8000ff2:	b005      	add	sp, #20
 8000ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ff8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ffa:	9000      	str	r0, [sp, #0]
 8000ffc:	2319      	movs	r3, #25
 8000ffe:	2201      	movs	r2, #1
 8001000:	4957      	ldr	r1, [pc, #348]	@ (8001160 <HAL_I2C_IsDeviceReady+0x18c>)
 8001002:	4620      	mov	r0, r4
 8001004:	f7ff feb2 	bl	8000d6c <I2C_WaitOnFlagUntilTimeout>
 8001008:	2800      	cmp	r0, #0
 800100a:	f040 80a0 	bne.w	800114e <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 800100e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001012:	2b01      	cmp	r3, #1
 8001014:	f000 809d 	beq.w	8001152 <HAL_I2C_IsDeviceReady+0x17e>
 8001018:	2301      	movs	r3, #1
 800101a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f012 0f01 	tst.w	r2, #1
 8001026:	d103      	bne.n	8001030 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001030:	6822      	ldr	r2, [r4, #0]
 8001032:	6813      	ldr	r3, [r2, #0]
 8001034:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001038:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800103a:	2324      	movs	r3, #36	@ 0x24
 800103c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001040:	2700      	movs	r7, #0
 8001042:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001044:	4b47      	ldr	r3, [pc, #284]	@ (8001164 <HAL_I2C_IsDeviceReady+0x190>)
 8001046:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001048:	e040      	b.n	80010cc <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001052:	d002      	beq.n	800105a <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001058:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 800105a:	2003      	movs	r0, #3
 800105c:	e7c9      	b.n	8000ff2 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800105e:	23a0      	movs	r3, #160	@ 0xa0
 8001060:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001064:	6822      	ldr	r2, [r4, #0]
 8001066:	6953      	ldr	r3, [r2, #20]
 8001068:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800106c:	6952      	ldr	r2, [r2, #20]
 800106e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001072:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8001076:	fa5f fc8c 	uxtb.w	ip, ip
 800107a:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 800107e:	d009      	beq.n	8001094 <HAL_I2C_IsDeviceReady+0xc0>
 8001080:	b943      	cbnz	r3, 8001094 <HAL_I2C_IsDeviceReady+0xc0>
 8001082:	b93a      	cbnz	r2, 8001094 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001084:	f7ff fd0c 	bl	8000aa0 <HAL_GetTick>
 8001088:	1b80      	subs	r0, r0, r6
 800108a:	42a8      	cmp	r0, r5
 800108c:	d8e7      	bhi.n	800105e <HAL_I2C_IsDeviceReady+0x8a>
 800108e:	2d00      	cmp	r5, #0
 8001090:	d1e8      	bne.n	8001064 <HAL_I2C_IsDeviceReady+0x90>
 8001092:	e7e4      	b.n	800105e <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8001094:	2320      	movs	r3, #32
 8001096:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	f012 0f02 	tst.w	r2, #2
 80010a2:	d131      	bne.n	8001108 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80010b2:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010b4:	9600      	str	r6, [sp, #0]
 80010b6:	2319      	movs	r3, #25
 80010b8:	2201      	movs	r2, #1
 80010ba:	4929      	ldr	r1, [pc, #164]	@ (8001160 <HAL_I2C_IsDeviceReady+0x18c>)
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff fe55 	bl	8000d6c <I2C_WaitOnFlagUntilTimeout>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d149      	bne.n	800115a <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 80010c6:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80010c8:	454f      	cmp	r7, r9
 80010ca:	d238      	bcs.n	800113e <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010cc:	6822      	ldr	r2, [r4, #0]
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d4:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80010d6:	9600      	str	r6, [sp, #0]
 80010d8:	462b      	mov	r3, r5
 80010da:	2200      	movs	r2, #0
 80010dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80010e0:	4620      	mov	r0, r4
 80010e2:	f7ff fe43 	bl	8000d6c <I2C_WaitOnFlagUntilTimeout>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	d1af      	bne.n	800104a <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 80010f0:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80010f2:	f7ff fcd5 	bl	8000aa0 <HAL_GetTick>
 80010f6:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80010f8:	6822      	ldr	r2, [r4, #0]
 80010fa:	6953      	ldr	r3, [r2, #20]
 80010fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001100:	6952      	ldr	r2, [r2, #20]
 8001102:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001106:	e7b4      	b.n	8001072 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800110e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001110:	2300      	movs	r3, #0
 8001112:	9303      	str	r3, [sp, #12]
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	9203      	str	r2, [sp, #12]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	9303      	str	r3, [sp, #12]
 800111e:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001120:	9600      	str	r6, [sp, #0]
 8001122:	2319      	movs	r3, #25
 8001124:	2201      	movs	r2, #1
 8001126:	490e      	ldr	r1, [pc, #56]	@ (8001160 <HAL_I2C_IsDeviceReady+0x18c>)
 8001128:	4620      	mov	r0, r4
 800112a:	f7ff fe1f 	bl	8000d6c <I2C_WaitOnFlagUntilTimeout>
 800112e:	b990      	cbnz	r0, 8001156 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8001130:	2320      	movs	r3, #32
 8001132:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8001136:	2300      	movs	r3, #0
 8001138:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 800113c:	e759      	b.n	8000ff2 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 800113e:	2320      	movs	r3, #32
 8001140:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8001144:	2300      	movs	r3, #0
 8001146:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 800114a:	2001      	movs	r0, #1
 800114c:	e751      	b.n	8000ff2 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 800114e:	2002      	movs	r0, #2
 8001150:	e74f      	b.n	8000ff2 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8001152:	2002      	movs	r0, #2
 8001154:	e74d      	b.n	8000ff2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8001156:	2001      	movs	r0, #1
 8001158:	e74b      	b.n	8000ff2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800115a:	2001      	movs	r0, #1
 800115c:	e749      	b.n	8000ff2 <HAL_I2C_IsDeviceReady+0x1e>
 800115e:	bf00      	nop
 8001160:	00100002 	.word	0x00100002
 8001164:	ffff0000 	.word	0xffff0000

08001168 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001168:	2800      	cmp	r0, #0
 800116a:	f000 81e0 	beq.w	800152e <HAL_RCC_OscConfig+0x3c6>
{
 800116e:	b570      	push	{r4, r5, r6, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001174:	6803      	ldr	r3, [r0, #0]
 8001176:	f013 0f01 	tst.w	r3, #1
 800117a:	d03b      	beq.n	80011f4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800117c:	4b9f      	ldr	r3, [pc, #636]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b04      	cmp	r3, #4
 8001186:	d02c      	beq.n	80011e2 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001188:	4b9c      	ldr	r3, [pc, #624]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001190:	2b08      	cmp	r3, #8
 8001192:	d021      	beq.n	80011d8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800119a:	d04f      	beq.n	800123c <HAL_RCC_OscConfig+0xd4>
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011a0:	d052      	beq.n	8001248 <HAL_RCC_OscConfig+0xe0>
 80011a2:	4b96      	ldr	r3, [pc, #600]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80011b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d050      	beq.n	800125c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fc71 	bl	8000aa0 <HAL_GetTick>
 80011be:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c0:	4b8e      	ldr	r3, [pc, #568]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80011c8:	d114      	bne.n	80011f4 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ca:	f7ff fc69 	bl	8000aa0 <HAL_GetTick>
 80011ce:	1b40      	subs	r0, r0, r5
 80011d0:	2864      	cmp	r0, #100	@ 0x64
 80011d2:	d9f5      	bls.n	80011c0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80011d4:	2003      	movs	r0, #3
 80011d6:	e1b1      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d8:	4b88      	ldr	r3, [pc, #544]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80011e0:	d0d8      	beq.n	8001194 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e2:	4b86      	ldr	r3, [pc, #536]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80011ea:	d003      	beq.n	80011f4 <HAL_RCC_OscConfig+0x8c>
 80011ec:	6863      	ldr	r3, [r4, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 819f 	beq.w	8001532 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	f013 0f02 	tst.w	r3, #2
 80011fa:	d054      	beq.n	80012a6 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011fc:	4b7f      	ldr	r3, [pc, #508]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f013 0f0c 	tst.w	r3, #12
 8001204:	d03e      	beq.n	8001284 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001206:	4b7d      	ldr	r3, [pc, #500]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800120e:	2b08      	cmp	r3, #8
 8001210:	d033      	beq.n	800127a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001212:	68e3      	ldr	r3, [r4, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d068      	beq.n	80012ea <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	4b79      	ldr	r3, [pc, #484]	@ (8001400 <HAL_RCC_OscConfig+0x298>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121e:	f7ff fc3f 	bl	8000aa0 <HAL_GetTick>
 8001222:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	4b75      	ldr	r3, [pc, #468]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f013 0f02 	tst.w	r3, #2
 800122c:	d154      	bne.n	80012d8 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fc37 	bl	8000aa0 <HAL_GetTick>
 8001232:	1b40      	subs	r0, r0, r5
 8001234:	2802      	cmp	r0, #2
 8001236:	d9f5      	bls.n	8001224 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001238:	2003      	movs	r0, #3
 800123a:	e17f      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	4a6f      	ldr	r2, [pc, #444]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 800123e:	6813      	ldr	r3, [r2, #0]
 8001240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e7b5      	b.n	80011b4 <HAL_RCC_OscConfig+0x4c>
 8001248:	4b6c      	ldr	r3, [pc, #432]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e7ab      	b.n	80011b4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800125c:	f7ff fc20 	bl	8000aa0 <HAL_GetTick>
 8001260:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	4b66      	ldr	r3, [pc, #408]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800126a:	d0c3      	beq.n	80011f4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fc18 	bl	8000aa0 <HAL_GetTick>
 8001270:	1b40      	subs	r0, r0, r5
 8001272:	2864      	cmp	r0, #100	@ 0x64
 8001274:	d9f5      	bls.n	8001262 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001276:	2003      	movs	r0, #3
 8001278:	e160      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127a:	4b60      	ldr	r3, [pc, #384]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001282:	d1c6      	bne.n	8001212 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001284:	4b5d      	ldr	r3, [pc, #372]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f013 0f02 	tst.w	r3, #2
 800128c:	d003      	beq.n	8001296 <HAL_RCC_OscConfig+0x12e>
 800128e:	68e3      	ldr	r3, [r4, #12]
 8001290:	2b01      	cmp	r3, #1
 8001292:	f040 8150 	bne.w	8001536 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4a59      	ldr	r2, [pc, #356]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 8001298:	6813      	ldr	r3, [r2, #0]
 800129a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800129e:	6921      	ldr	r1, [r4, #16]
 80012a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012a4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	f013 0f08 	tst.w	r3, #8
 80012ac:	d042      	beq.n	8001334 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012ae:	6963      	ldr	r3, [r4, #20]
 80012b0:	b36b      	cbz	r3, 800130e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b2:	4b53      	ldr	r3, [pc, #332]	@ (8001400 <HAL_RCC_OscConfig+0x298>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ba:	f7ff fbf1 	bl	8000aa0 <HAL_GetTick>
 80012be:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c0:	4b4e      	ldr	r3, [pc, #312]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 80012c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c4:	f013 0f02 	tst.w	r3, #2
 80012c8:	d134      	bne.n	8001334 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ca:	f7ff fbe9 	bl	8000aa0 <HAL_GetTick>
 80012ce:	1b40      	subs	r0, r0, r5
 80012d0:	2802      	cmp	r0, #2
 80012d2:	d9f5      	bls.n	80012c0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80012d4:	2003      	movs	r0, #3
 80012d6:	e131      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d8:	4a48      	ldr	r2, [pc, #288]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 80012da:	6813      	ldr	r3, [r2, #0]
 80012dc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80012e0:	6921      	ldr	r1, [r4, #16]
 80012e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e7dd      	b.n	80012a6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80012ea:	4b45      	ldr	r3, [pc, #276]	@ (8001400 <HAL_RCC_OscConfig+0x298>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012f0:	f7ff fbd6 	bl	8000aa0 <HAL_GetTick>
 80012f4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	4b41      	ldr	r3, [pc, #260]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f013 0f02 	tst.w	r3, #2
 80012fe:	d0d2      	beq.n	80012a6 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fbce 	bl	8000aa0 <HAL_GetTick>
 8001304:	1b40      	subs	r0, r0, r5
 8001306:	2802      	cmp	r0, #2
 8001308:	d9f5      	bls.n	80012f6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800130a:	2003      	movs	r0, #3
 800130c:	e116      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130e:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <HAL_RCC_OscConfig+0x298>)
 8001310:	2200      	movs	r2, #0
 8001312:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fbc3 	bl	8000aa0 <HAL_GetTick>
 800131a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	4b37      	ldr	r3, [pc, #220]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 800131e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001320:	f013 0f02 	tst.w	r3, #2
 8001324:	d006      	beq.n	8001334 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001326:	f7ff fbbb 	bl	8000aa0 <HAL_GetTick>
 800132a:	1b40      	subs	r0, r0, r5
 800132c:	2802      	cmp	r0, #2
 800132e:	d9f5      	bls.n	800131c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001330:	2003      	movs	r0, #3
 8001332:	e103      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	f013 0f04 	tst.w	r3, #4
 800133a:	d077      	beq.n	800142c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133c:	4b2f      	ldr	r3, [pc, #188]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001344:	d133      	bne.n	80013ae <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 800134c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800134e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001352:	641a      	str	r2, [r3, #64]	@ 0x40
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800135e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	4b28      	ldr	r3, [pc, #160]	@ (8001404 <HAL_RCC_OscConfig+0x29c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001368:	d023      	beq.n	80013b2 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136a:	68a3      	ldr	r3, [r4, #8]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d034      	beq.n	80013da <HAL_RCC_OscConfig+0x272>
 8001370:	2b05      	cmp	r3, #5
 8001372:	d038      	beq.n	80013e6 <HAL_RCC_OscConfig+0x27e>
 8001374:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 8001376:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	671a      	str	r2, [r3, #112]	@ 0x70
 800137e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001380:	f022 0204 	bic.w	r2, r2, #4
 8001384:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001386:	68a3      	ldr	r3, [r4, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d03d      	beq.n	8001408 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fb88 	bl	8000aa0 <HAL_GetTick>
 8001390:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001392:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001396:	f013 0f02 	tst.w	r3, #2
 800139a:	d146      	bne.n	800142a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fb80 	bl	8000aa0 <HAL_GetTick>
 80013a0:	1b80      	subs	r0, r0, r6
 80013a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013a6:	4298      	cmp	r0, r3
 80013a8:	d9f3      	bls.n	8001392 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80013aa:	2003      	movs	r0, #3
 80013ac:	e0c6      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80013ae:	2500      	movs	r5, #0
 80013b0:	e7d6      	b.n	8001360 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b2:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <HAL_RCC_OscConfig+0x29c>)
 80013b4:	6813      	ldr	r3, [r2, #0]
 80013b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ba:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013bc:	f7ff fb70 	bl	8000aa0 <HAL_GetTick>
 80013c0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <HAL_RCC_OscConfig+0x29c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80013ca:	d1ce      	bne.n	800136a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013cc:	f7ff fb68 	bl	8000aa0 <HAL_GetTick>
 80013d0:	1b80      	subs	r0, r0, r6
 80013d2:	2802      	cmp	r0, #2
 80013d4:	d9f5      	bls.n	80013c2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80013d6:	2003      	movs	r0, #3
 80013d8:	e0b0      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013da:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 80013dc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e4:	e7cf      	b.n	8001386 <HAL_RCC_OscConfig+0x21e>
 80013e6:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <HAL_RCC_OscConfig+0x294>)
 80013e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80013ea:	f042 0204 	orr.w	r2, r2, #4
 80013ee:	671a      	str	r2, [r3, #112]	@ 0x70
 80013f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80013f8:	e7c5      	b.n	8001386 <HAL_RCC_OscConfig+0x21e>
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	42470000 	.word	0x42470000
 8001404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff fb4a 	bl	8000aa0 <HAL_GetTick>
 800140c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	4b52      	ldr	r3, [pc, #328]	@ (8001558 <HAL_RCC_OscConfig+0x3f0>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001412:	f013 0f02 	tst.w	r3, #2
 8001416:	d008      	beq.n	800142a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001418:	f7ff fb42 	bl	8000aa0 <HAL_GetTick>
 800141c:	1b80      	subs	r0, r0, r6
 800141e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001422:	4298      	cmp	r0, r3
 8001424:	d9f3      	bls.n	800140e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001426:	2003      	movs	r0, #3
 8001428:	e088      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800142a:	b9ed      	cbnz	r5, 8001468 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142c:	69a3      	ldr	r3, [r4, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8083 	beq.w	800153a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001434:	4a48      	ldr	r2, [pc, #288]	@ (8001558 <HAL_RCC_OscConfig+0x3f0>)
 8001436:	6892      	ldr	r2, [r2, #8]
 8001438:	f002 020c 	and.w	r2, r2, #12
 800143c:	2a08      	cmp	r2, #8
 800143e:	d051      	beq.n	80014e4 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001440:	2b02      	cmp	r3, #2
 8001442:	d017      	beq.n	8001474 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001444:	4b45      	ldr	r3, [pc, #276]	@ (800155c <HAL_RCC_OscConfig+0x3f4>)
 8001446:	2200      	movs	r2, #0
 8001448:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7ff fb29 	bl	8000aa0 <HAL_GetTick>
 800144e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001450:	4b41      	ldr	r3, [pc, #260]	@ (8001558 <HAL_RCC_OscConfig+0x3f0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001458:	d042      	beq.n	80014e0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fb21 	bl	8000aa0 <HAL_GetTick>
 800145e:	1b00      	subs	r0, r0, r4
 8001460:	2802      	cmp	r0, #2
 8001462:	d9f5      	bls.n	8001450 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001464:	2003      	movs	r0, #3
 8001466:	e069      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001468:	4a3b      	ldr	r2, [pc, #236]	@ (8001558 <HAL_RCC_OscConfig+0x3f0>)
 800146a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800146c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
 8001472:	e7db      	b.n	800142c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001474:	4b39      	ldr	r3, [pc, #228]	@ (800155c <HAL_RCC_OscConfig+0x3f4>)
 8001476:	2200      	movs	r2, #0
 8001478:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800147a:	f7ff fb11 	bl	8000aa0 <HAL_GetTick>
 800147e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001480:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <HAL_RCC_OscConfig+0x3f0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001488:	d006      	beq.n	8001498 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff fb09 	bl	8000aa0 <HAL_GetTick>
 800148e:	1b40      	subs	r0, r0, r5
 8001490:	2802      	cmp	r0, #2
 8001492:	d9f5      	bls.n	8001480 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001494:	2003      	movs	r0, #3
 8001496:	e051      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001498:	69e3      	ldr	r3, [r4, #28]
 800149a:	6a22      	ldr	r2, [r4, #32]
 800149c:	4313      	orrs	r3, r2
 800149e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80014a0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014a4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80014a6:	0852      	lsrs	r2, r2, #1
 80014a8:	3a01      	subs	r2, #1
 80014aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80014b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014b4:	4a28      	ldr	r2, [pc, #160]	@ (8001558 <HAL_RCC_OscConfig+0x3f0>)
 80014b6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80014b8:	4b28      	ldr	r3, [pc, #160]	@ (800155c <HAL_RCC_OscConfig+0x3f4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80014be:	f7ff faef 	bl	8000aa0 <HAL_GetTick>
 80014c2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	4b24      	ldr	r3, [pc, #144]	@ (8001558 <HAL_RCC_OscConfig+0x3f0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80014cc:	d106      	bne.n	80014dc <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff fae7 	bl	8000aa0 <HAL_GetTick>
 80014d2:	1b00      	subs	r0, r0, r4
 80014d4:	2802      	cmp	r0, #2
 80014d6:	d9f5      	bls.n	80014c4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80014d8:	2003      	movs	r0, #3
 80014da:	e02f      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80014dc:	2000      	movs	r0, #0
 80014de:	e02d      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
 80014e0:	2000      	movs	r0, #0
 80014e2:	e02b      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d02b      	beq.n	8001540 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_RCC_OscConfig+0x3f0>)
 80014ea:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ec:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80014f0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f2:	4291      	cmp	r1, r2
 80014f4:	d126      	bne.n	8001544 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014fa:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fc:	428a      	cmp	r2, r1
 80014fe:	d123      	bne.n	8001548 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001500:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001502:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001506:	401a      	ands	r2, r3
 8001508:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800150c:	d11e      	bne.n	800154c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800150e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001512:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001514:	0852      	lsrs	r2, r2, #1
 8001516:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001518:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800151c:	d118      	bne.n	8001550 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800151e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001522:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001524:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001528:	d114      	bne.n	8001554 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800152a:	2000      	movs	r0, #0
 800152c:	e006      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800152e:	2001      	movs	r0, #1
}
 8001530:	4770      	bx	lr
        return HAL_ERROR;
 8001532:	2001      	movs	r0, #1
 8001534:	e002      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001536:	2001      	movs	r0, #1
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800153a:	2000      	movs	r0, #0
}
 800153c:	b002      	add	sp, #8
 800153e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001540:	2001      	movs	r0, #1
 8001542:	e7fb      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001544:	2001      	movs	r0, #1
 8001546:	e7f9      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
 8001548:	2001      	movs	r0, #1
 800154a:	e7f7      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
 800154c:	2001      	movs	r0, #1
 800154e:	e7f5      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
 8001550:	2001      	movs	r0, #1
 8001552:	e7f3      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
 8001554:	2001      	movs	r0, #1
 8001556:	e7f1      	b.n	800153c <HAL_RCC_OscConfig+0x3d4>
 8001558:	40023800 	.word	0x40023800
 800155c:	42470000 	.word	0x42470000

08001560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001562:	4b31      	ldr	r3, [pc, #196]	@ (8001628 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b08      	cmp	r3, #8
 800156c:	d001      	beq.n	8001572 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800156e:	482f      	ldr	r0, [pc, #188]	@ (800162c <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001570:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001572:	4b2d      	ldr	r3, [pc, #180]	@ (8001628 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001580:	d02c      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001582:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001584:	6858      	ldr	r0, [r3, #4]
 8001586:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800158a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800158e:	ebbc 0c00 	subs.w	ip, ip, r0
 8001592:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001596:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800159a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800159e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80015a2:	ebb1 010c 	subs.w	r1, r1, ip
 80015a6:	eb63 030e 	sbc.w	r3, r3, lr
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015b0:	00c9      	lsls	r1, r1, #3
 80015b2:	eb11 0c00 	adds.w	ip, r1, r0
 80015b6:	f143 0300 	adc.w	r3, r3, #0
 80015ba:	0299      	lsls	r1, r3, #10
 80015bc:	2300      	movs	r3, #0
 80015be:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80015c2:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80015c6:	f7fe fe53 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015d2:	3301      	adds	r3, #1
 80015d4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80015d6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80015da:	e7c9      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015de:	6858      	ldr	r0, [r3, #4]
 80015e0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80015e4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80015e8:	ebbc 0c00 	subs.w	ip, ip, r0
 80015ec:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80015f0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80015f4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80015f8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80015fc:	ebb1 010c 	subs.w	r1, r1, ip
 8001600:	eb63 030e 	sbc.w	r3, r3, lr
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800160a:	00c9      	lsls	r1, r1, #3
 800160c:	eb11 0c00 	adds.w	ip, r1, r0
 8001610:	f143 0300 	adc.w	r3, r3, #0
 8001614:	0299      	lsls	r1, r3, #10
 8001616:	2300      	movs	r3, #0
 8001618:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800161c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001620:	f7fe fe26 	bl	8000270 <__aeabi_uldivmod>
 8001624:	e7d1      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x6a>
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	00f42400 	.word	0x00f42400

08001630 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001630:	2800      	cmp	r0, #0
 8001632:	f000 809b 	beq.w	800176c <HAL_RCC_ClockConfig+0x13c>
{
 8001636:	b570      	push	{r4, r5, r6, lr}
 8001638:	460d      	mov	r5, r1
 800163a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b4f      	ldr	r3, [pc, #316]	@ (800177c <HAL_RCC_ClockConfig+0x14c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	428b      	cmp	r3, r1
 8001646:	d208      	bcs.n	800165a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001648:	b2cb      	uxtb	r3, r1
 800164a:	4a4c      	ldr	r2, [pc, #304]	@ (800177c <HAL_RCC_ClockConfig+0x14c>)
 800164c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	6813      	ldr	r3, [r2, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	428b      	cmp	r3, r1
 8001656:	f040 808b 	bne.w	8001770 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	f013 0f02 	tst.w	r3, #2
 8001660:	d017      	beq.n	8001692 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001662:	f013 0f04 	tst.w	r3, #4
 8001666:	d004      	beq.n	8001672 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4a45      	ldr	r2, [pc, #276]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 800166a:	6893      	ldr	r3, [r2, #8]
 800166c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001670:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	f013 0f08 	tst.w	r3, #8
 8001678:	d004      	beq.n	8001684 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800167a:	4a41      	ldr	r2, [pc, #260]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 800167c:	6893      	ldr	r3, [r2, #8]
 800167e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001682:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001684:	4a3e      	ldr	r2, [pc, #248]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 8001686:	6893      	ldr	r3, [r2, #8]
 8001688:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800168c:	68a1      	ldr	r1, [r4, #8]
 800168e:	430b      	orrs	r3, r1
 8001690:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	f013 0f01 	tst.w	r3, #1
 8001698:	d032      	beq.n	8001700 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	6863      	ldr	r3, [r4, #4]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d021      	beq.n	80016e4 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a0:	1e9a      	subs	r2, r3, #2
 80016a2:	2a01      	cmp	r2, #1
 80016a4:	d925      	bls.n	80016f2 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4a36      	ldr	r2, [pc, #216]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	f012 0f02 	tst.w	r2, #2
 80016ae:	d061      	beq.n	8001774 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b0:	4933      	ldr	r1, [pc, #204]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 80016b2:	688a      	ldr	r2, [r1, #8]
 80016b4:	f022 0203 	bic.w	r2, r2, #3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80016bc:	f7ff f9f0 	bl	8000aa0 <HAL_GetTick>
 80016c0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	6862      	ldr	r2, [r4, #4]
 80016cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016d0:	d016      	beq.n	8001700 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d2:	f7ff f9e5 	bl	8000aa0 <HAL_GetTick>
 80016d6:	1b80      	subs	r0, r0, r6
 80016d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016dc:	4298      	cmp	r0, r3
 80016de:	d9f0      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80016e0:	2003      	movs	r0, #3
 80016e2:	e042      	b.n	800176a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e4:	4a26      	ldr	r2, [pc, #152]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80016ec:	d1e0      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80016ee:	2001      	movs	r0, #1
 80016f0:	e03b      	b.n	800176a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4a23      	ldr	r2, [pc, #140]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80016fa:	d1d9      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
 80016fe:	e034      	b.n	800176a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <HAL_RCC_ClockConfig+0x14c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	42ab      	cmp	r3, r5
 800170a:	d907      	bls.n	800171c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170c:	b2ea      	uxtb	r2, r5
 800170e:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <HAL_RCC_ClockConfig+0x14c>)
 8001710:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	42ab      	cmp	r3, r5
 800171a:	d12d      	bne.n	8001778 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	f013 0f04 	tst.w	r3, #4
 8001722:	d006      	beq.n	8001732 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001724:	4a16      	ldr	r2, [pc, #88]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 8001726:	6893      	ldr	r3, [r2, #8]
 8001728:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800172c:	68e1      	ldr	r1, [r4, #12]
 800172e:	430b      	orrs	r3, r1
 8001730:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	f013 0f08 	tst.w	r3, #8
 8001738:	d007      	beq.n	800174a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800173a:	4a11      	ldr	r2, [pc, #68]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 800173c:	6893      	ldr	r3, [r2, #8]
 800173e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001742:	6921      	ldr	r1, [r4, #16]
 8001744:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001748:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800174a:	f7ff ff09 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 800174e:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <HAL_RCC_ClockConfig+0x150>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001756:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <HAL_RCC_ClockConfig+0x154>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	40d8      	lsrs	r0, r3
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_RCC_ClockConfig+0x158>)
 800175e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001760:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <HAL_RCC_ClockConfig+0x15c>)
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	f7ff f950 	bl	8000a08 <HAL_InitTick>
  return HAL_OK;
 8001768:	2000      	movs	r0, #0
}
 800176a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800176c:	2001      	movs	r0, #1
}
 800176e:	4770      	bx	lr
      return HAL_ERROR;
 8001770:	2001      	movs	r0, #1
 8001772:	e7fa      	b.n	800176a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001774:	2001      	movs	r0, #1
 8001776:	e7f8      	b.n	800176a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001778:	2001      	movs	r0, #1
 800177a:	e7f6      	b.n	800176a <HAL_RCC_ClockConfig+0x13a>
 800177c:	40023c00 	.word	0x40023c00
 8001780:	40023800 	.word	0x40023800
 8001784:	08002b00 	.word	0x08002b00
 8001788:	20000000 	.word	0x20000000
 800178c:	20000008 	.word	0x20000008

08001790 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001790:	4b01      	ldr	r3, [pc, #4]	@ (8001798 <HAL_RCC_GetHCLKFreq+0x8>)
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000000 	.word	0x20000000

0800179c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800179c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800179e:	f7ff fff7 	bl	8001790 <HAL_RCC_GetHCLKFreq>
 80017a2:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017aa:	4a03      	ldr	r2, [pc, #12]	@ (80017b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
}
 80017ae:	40d8      	lsrs	r0, r3
 80017b0:	bd08      	pop	{r3, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	08002af8 	.word	0x08002af8

080017bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017be:	f7ff ffe7 	bl	8001790 <HAL_RCC_GetHCLKFreq>
 80017c2:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80017ca:	4a03      	ldr	r2, [pc, #12]	@ (80017d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
}
 80017ce:	40d8      	lsrs	r0, r3
 80017d0:	bd08      	pop	{r3, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	08002af8 	.word	0x08002af8

080017dc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017dc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017de:	f102 030c 	add.w	r3, r2, #12
 80017e2:	e853 3f00 	ldrex	r3, [r3]
 80017e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017ea:	320c      	adds	r2, #12
 80017ec:	e842 3100 	strex	r1, r3, [r2]
 80017f0:	2900      	cmp	r1, #0
 80017f2:	d1f3      	bne.n	80017dc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017f4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017f6:	f102 0314 	add.w	r3, r2, #20
 80017fa:	e853 3f00 	ldrex	r3, [r3]
 80017fe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001802:	3214      	adds	r2, #20
 8001804:	e842 3100 	strex	r1, r3, [r2]
 8001808:	2900      	cmp	r1, #0
 800180a:	d1f3      	bne.n	80017f4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800180c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800180e:	2b01      	cmp	r3, #1
 8001810:	d005      	beq.n	800181e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001812:	2320      	movs	r3, #32
 8001814:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001818:	2300      	movs	r3, #0
 800181a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800181c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800181e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001820:	f102 030c 	add.w	r3, r2, #12
 8001824:	e853 3f00 	ldrex	r3, [r3]
 8001828:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800182c:	320c      	adds	r2, #12
 800182e:	e842 3100 	strex	r1, r3, [r2]
 8001832:	2900      	cmp	r1, #0
 8001834:	d1f3      	bne.n	800181e <UART_EndRxTransfer+0x42>
 8001836:	e7ec      	b.n	8001812 <UART_EndRxTransfer+0x36>

08001838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001838:	b510      	push	{r4, lr}
 800183a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800183c:	6802      	ldr	r2, [r0, #0]
 800183e:	6913      	ldr	r3, [r2, #16]
 8001840:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001844:	68c1      	ldr	r1, [r0, #12]
 8001846:	430b      	orrs	r3, r1
 8001848:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800184a:	6883      	ldr	r3, [r0, #8]
 800184c:	6902      	ldr	r2, [r0, #16]
 800184e:	431a      	orrs	r2, r3
 8001850:	6943      	ldr	r3, [r0, #20]
 8001852:	431a      	orrs	r2, r3
 8001854:	69c3      	ldr	r3, [r0, #28]
 8001856:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001858:	6801      	ldr	r1, [r0, #0]
 800185a:	68cb      	ldr	r3, [r1, #12]
 800185c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001860:	f023 030c 	bic.w	r3, r3, #12
 8001864:	4313      	orrs	r3, r2
 8001866:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001868:	6802      	ldr	r2, [r0, #0]
 800186a:	6953      	ldr	r3, [r2, #20]
 800186c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001870:	6981      	ldr	r1, [r0, #24]
 8001872:	430b      	orrs	r3, r1
 8001874:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001876:	6803      	ldr	r3, [r0, #0]
 8001878:	4a31      	ldr	r2, [pc, #196]	@ (8001940 <UART_SetConfig+0x108>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d006      	beq.n	800188c <UART_SetConfig+0x54>
 800187e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001882:	4293      	cmp	r3, r2
 8001884:	d002      	beq.n	800188c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001886:	f7ff ff89 	bl	800179c <HAL_RCC_GetPCLK1Freq>
 800188a:	e001      	b.n	8001890 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800188c:	f7ff ff96 	bl	80017bc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001890:	69e3      	ldr	r3, [r4, #28]
 8001892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001896:	d029      	beq.n	80018ec <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001898:	2100      	movs	r1, #0
 800189a:	1803      	adds	r3, r0, r0
 800189c:	4149      	adcs	r1, r1
 800189e:	181b      	adds	r3, r3, r0
 80018a0:	f141 0100 	adc.w	r1, r1, #0
 80018a4:	00c9      	lsls	r1, r1, #3
 80018a6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1818      	adds	r0, r3, r0
 80018ae:	6863      	ldr	r3, [r4, #4]
 80018b0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80018b4:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80018b8:	f141 0100 	adc.w	r1, r1, #0
 80018bc:	f7fe fcd8 	bl	8000270 <__aeabi_uldivmod>
 80018c0:	4a20      	ldr	r2, [pc, #128]	@ (8001944 <UART_SetConfig+0x10c>)
 80018c2:	fba2 3100 	umull	r3, r1, r2, r0
 80018c6:	0949      	lsrs	r1, r1, #5
 80018c8:	2364      	movs	r3, #100	@ 0x64
 80018ca:	fb03 0311 	mls	r3, r3, r1, r0
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	3332      	adds	r3, #50	@ 0x32
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018dc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	6821      	ldr	r1, [r4, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }
}
 80018ea:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80018ec:	2300      	movs	r3, #0
 80018ee:	1802      	adds	r2, r0, r0
 80018f0:	eb43 0103 	adc.w	r1, r3, r3
 80018f4:	1812      	adds	r2, r2, r0
 80018f6:	f141 0100 	adc.w	r1, r1, #0
 80018fa:	00c9      	lsls	r1, r1, #3
 80018fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001900:	00d2      	lsls	r2, r2, #3
 8001902:	1810      	adds	r0, r2, r0
 8001904:	f141 0100 	adc.w	r1, r1, #0
 8001908:	6862      	ldr	r2, [r4, #4]
 800190a:	1892      	adds	r2, r2, r2
 800190c:	415b      	adcs	r3, r3
 800190e:	f7fe fcaf 	bl	8000270 <__aeabi_uldivmod>
 8001912:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <UART_SetConfig+0x10c>)
 8001914:	fba2 3100 	umull	r3, r1, r2, r0
 8001918:	0949      	lsrs	r1, r1, #5
 800191a:	2364      	movs	r3, #100	@ 0x64
 800191c:	fb03 0311 	mls	r3, r3, r1, r0
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	3332      	adds	r3, #50	@ 0x32
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	095b      	lsrs	r3, r3, #5
 800192a:	005a      	lsls	r2, r3, #1
 800192c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001930:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	6821      	ldr	r1, [r4, #0]
 800193a:	4413      	add	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
 800193e:	e7d4      	b.n	80018ea <UART_SetConfig+0xb2>
 8001940:	40011000 	.word	0x40011000
 8001944:	51eb851f 	.word	0x51eb851f

08001948 <UART_WaitOnFlagUntilTimeout>:
{
 8001948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800194c:	b083      	sub	sp, #12
 800194e:	4605      	mov	r5, r0
 8001950:	460e      	mov	r6, r1
 8001952:	4617      	mov	r7, r2
 8001954:	4699      	mov	r9, r3
 8001956:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800195a:	682b      	ldr	r3, [r5, #0]
 800195c:	681c      	ldr	r4, [r3, #0]
 800195e:	ea36 0404 	bics.w	r4, r6, r4
 8001962:	bf0c      	ite	eq
 8001964:	2401      	moveq	r4, #1
 8001966:	2400      	movne	r4, #0
 8001968:	42bc      	cmp	r4, r7
 800196a:	d128      	bne.n	80019be <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800196c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001970:	d0f3      	beq.n	800195a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001972:	f7ff f895 	bl	8000aa0 <HAL_GetTick>
 8001976:	eba0 0009 	sub.w	r0, r0, r9
 800197a:	4540      	cmp	r0, r8
 800197c:	d823      	bhi.n	80019c6 <UART_WaitOnFlagUntilTimeout+0x7e>
 800197e:	f1b8 0f00 	cmp.w	r8, #0
 8001982:	d022      	beq.n	80019ca <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	f012 0f04 	tst.w	r2, #4
 800198c:	d0e5      	beq.n	800195a <UART_WaitOnFlagUntilTimeout+0x12>
 800198e:	2e80      	cmp	r6, #128	@ 0x80
 8001990:	d0e3      	beq.n	800195a <UART_WaitOnFlagUntilTimeout+0x12>
 8001992:	2e40      	cmp	r6, #64	@ 0x40
 8001994:	d0e1      	beq.n	800195a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	f012 0f08 	tst.w	r2, #8
 800199c:	d0dd      	beq.n	800195a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800199e:	2400      	movs	r4, #0
 80019a0:	9401      	str	r4, [sp, #4]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	9201      	str	r2, [sp, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80019ac:	4628      	mov	r0, r5
 80019ae:	f7ff ff15 	bl	80017dc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80019b2:	2308      	movs	r3, #8
 80019b4:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80019b6:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80019ba:	2001      	movs	r0, #1
 80019bc:	e000      	b.n	80019c0 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80019be:	2000      	movs	r0, #0
}
 80019c0:	b003      	add	sp, #12
 80019c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80019c6:	2003      	movs	r0, #3
 80019c8:	e7fa      	b.n	80019c0 <UART_WaitOnFlagUntilTimeout+0x78>
 80019ca:	2003      	movs	r0, #3
 80019cc:	e7f8      	b.n	80019c0 <UART_WaitOnFlagUntilTimeout+0x78>

080019ce <HAL_UART_Init>:
  if (huart == NULL)
 80019ce:	b360      	cbz	r0, 8001a2a <HAL_UART_Init+0x5c>
{
 80019d0:	b510      	push	{r4, lr}
 80019d2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80019d4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80019d8:	b313      	cbz	r3, 8001a20 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80019da:	2324      	movs	r3, #36	@ 0x24
 80019dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80019e0:	6822      	ldr	r2, [r4, #0]
 80019e2:	68d3      	ldr	r3, [r2, #12]
 80019e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80019e8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff ff24 	bl	8001838 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019f0:	6822      	ldr	r2, [r4, #0]
 80019f2:	6913      	ldr	r3, [r2, #16]
 80019f4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80019f8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fa:	6822      	ldr	r2, [r4, #0]
 80019fc:	6953      	ldr	r3, [r2, #20]
 80019fe:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001a02:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001a04:	6822      	ldr	r2, [r4, #0]
 8001a06:	68d3      	ldr	r3, [r2, #12]
 8001a08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a0c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0e:	2000      	movs	r0, #0
 8001a10:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a12:	2320      	movs	r3, #32
 8001a14:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a1c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001a1e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001a20:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001a24:	f7fe ff36 	bl	8000894 <HAL_UART_MspInit>
 8001a28:	e7d7      	b.n	80019da <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001a2a:	2001      	movs	r0, #1
}
 8001a2c:	4770      	bx	lr

08001a2e <HAL_UART_Transmit>:
{
 8001a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001a36:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b20      	cmp	r3, #32
 8001a3e:	d156      	bne.n	8001aee <HAL_UART_Transmit+0xc0>
 8001a40:	4604      	mov	r4, r0
 8001a42:	460d      	mov	r5, r1
 8001a44:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001a46:	2900      	cmp	r1, #0
 8001a48:	d055      	beq.n	8001af6 <HAL_UART_Transmit+0xc8>
 8001a4a:	b90a      	cbnz	r2, 8001a50 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	e04f      	b.n	8001af0 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a54:	2321      	movs	r3, #33	@ 0x21
 8001a56:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001a5a:	f7ff f821 	bl	8000aa0 <HAL_GetTick>
 8001a5e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001a60:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a64:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a68:	68a3      	ldr	r3, [r4, #8]
 8001a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a6e:	d002      	beq.n	8001a76 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001a70:	f04f 0800 	mov.w	r8, #0
 8001a74:	e014      	b.n	8001aa0 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a76:	6923      	ldr	r3, [r4, #16]
 8001a78:	b32b      	cbz	r3, 8001ac6 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8001a7a:	f04f 0800 	mov.w	r8, #0
 8001a7e:	e00f      	b.n	8001aa0 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8001a80:	2320      	movs	r3, #32
 8001a82:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001a86:	2003      	movs	r0, #3
 8001a88:	e032      	b.n	8001af0 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a8a:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001a8e:	6822      	ldr	r2, [r4, #0]
 8001a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a94:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001a96:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001a98:	b292      	uxth	r2, r2
 8001a9a:	3a01      	subs	r2, #1
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001aa0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	b193      	cbz	r3, 8001acc <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aa6:	9600      	str	r6, [sp, #0]
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2180      	movs	r1, #128	@ 0x80
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7ff ff4a 	bl	8001948 <UART_WaitOnFlagUntilTimeout>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d1e3      	bne.n	8001a80 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8001ab8:	2d00      	cmp	r5, #0
 8001aba:	d0e6      	beq.n	8001a8a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001abc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ac4:	e7e7      	b.n	8001a96 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8001ac6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001ac8:	2500      	movs	r5, #0
 8001aca:	e7e9      	b.n	8001aa0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001acc:	9600      	str	r6, [sp, #0]
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2140      	movs	r1, #64	@ 0x40
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7ff ff37 	bl	8001948 <UART_WaitOnFlagUntilTimeout>
 8001ada:	b918      	cbnz	r0, 8001ae4 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001adc:	2320      	movs	r3, #32
 8001ade:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001ae2:	e005      	b.n	8001af0 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001aea:	2003      	movs	r0, #3
 8001aec:	e000      	b.n	8001af0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8001aee:	2002      	movs	r0, #2
}
 8001af0:	b002      	add	sp, #8
 8001af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001af6:	2001      	movs	r0, #1
 8001af8:	e7fa      	b.n	8001af0 <HAL_UART_Transmit+0xc2>
	...

08001afc <std>:
 8001afc:	2300      	movs	r3, #0
 8001afe:	b510      	push	{r4, lr}
 8001b00:	4604      	mov	r4, r0
 8001b02:	e9c0 3300 	strd	r3, r3, [r0]
 8001b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b0a:	6083      	str	r3, [r0, #8]
 8001b0c:	8181      	strh	r1, [r0, #12]
 8001b0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001b10:	81c2      	strh	r2, [r0, #14]
 8001b12:	6183      	str	r3, [r0, #24]
 8001b14:	4619      	mov	r1, r3
 8001b16:	2208      	movs	r2, #8
 8001b18:	305c      	adds	r0, #92	@ 0x5c
 8001b1a:	f000 fa01 	bl	8001f20 <memset>
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <std+0x58>)
 8001b20:	6263      	str	r3, [r4, #36]	@ 0x24
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <std+0x5c>)
 8001b24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <std+0x60>)
 8001b28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <std+0x64>)
 8001b2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <std+0x68>)
 8001b30:	6224      	str	r4, [r4, #32]
 8001b32:	429c      	cmp	r4, r3
 8001b34:	d006      	beq.n	8001b44 <std+0x48>
 8001b36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001b3a:	4294      	cmp	r4, r2
 8001b3c:	d002      	beq.n	8001b44 <std+0x48>
 8001b3e:	33d0      	adds	r3, #208	@ 0xd0
 8001b40:	429c      	cmp	r4, r3
 8001b42:	d105      	bne.n	8001b50 <std+0x54>
 8001b44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b4c:	f000 ba60 	b.w	8002010 <__retarget_lock_init_recursive>
 8001b50:	bd10      	pop	{r4, pc}
 8001b52:	bf00      	nop
 8001b54:	08001d71 	.word	0x08001d71
 8001b58:	08001d93 	.word	0x08001d93
 8001b5c:	08001dcb 	.word	0x08001dcb
 8001b60:	08001def 	.word	0x08001def
 8001b64:	20000128 	.word	0x20000128

08001b68 <stdio_exit_handler>:
 8001b68:	4a02      	ldr	r2, [pc, #8]	@ (8001b74 <stdio_exit_handler+0xc>)
 8001b6a:	4903      	ldr	r1, [pc, #12]	@ (8001b78 <stdio_exit_handler+0x10>)
 8001b6c:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <stdio_exit_handler+0x14>)
 8001b6e:	f000 b869 	b.w	8001c44 <_fwalk_sglue>
 8001b72:	bf00      	nop
 8001b74:	2000000c 	.word	0x2000000c
 8001b78:	080028b1 	.word	0x080028b1
 8001b7c:	2000001c 	.word	0x2000001c

08001b80 <cleanup_stdio>:
 8001b80:	6841      	ldr	r1, [r0, #4]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <cleanup_stdio+0x34>)
 8001b84:	4299      	cmp	r1, r3
 8001b86:	b510      	push	{r4, lr}
 8001b88:	4604      	mov	r4, r0
 8001b8a:	d001      	beq.n	8001b90 <cleanup_stdio+0x10>
 8001b8c:	f000 fe90 	bl	80028b0 <_fflush_r>
 8001b90:	68a1      	ldr	r1, [r4, #8]
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <cleanup_stdio+0x38>)
 8001b94:	4299      	cmp	r1, r3
 8001b96:	d002      	beq.n	8001b9e <cleanup_stdio+0x1e>
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f000 fe89 	bl	80028b0 <_fflush_r>
 8001b9e:	68e1      	ldr	r1, [r4, #12]
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <cleanup_stdio+0x3c>)
 8001ba2:	4299      	cmp	r1, r3
 8001ba4:	d004      	beq.n	8001bb0 <cleanup_stdio+0x30>
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bac:	f000 be80 	b.w	80028b0 <_fflush_r>
 8001bb0:	bd10      	pop	{r4, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000128 	.word	0x20000128
 8001bb8:	20000190 	.word	0x20000190
 8001bbc:	200001f8 	.word	0x200001f8

08001bc0 <global_stdio_init.part.0>:
 8001bc0:	b510      	push	{r4, lr}
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <global_stdio_init.part.0+0x30>)
 8001bc4:	4c0b      	ldr	r4, [pc, #44]	@ (8001bf4 <global_stdio_init.part.0+0x34>)
 8001bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf8 <global_stdio_init.part.0+0x38>)
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	4620      	mov	r0, r4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2104      	movs	r1, #4
 8001bd0:	f7ff ff94 	bl	8001afc <std>
 8001bd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2109      	movs	r1, #9
 8001bdc:	f7ff ff8e 	bl	8001afc <std>
 8001be0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001be4:	2202      	movs	r2, #2
 8001be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bea:	2112      	movs	r1, #18
 8001bec:	f7ff bf86 	b.w	8001afc <std>
 8001bf0:	20000260 	.word	0x20000260
 8001bf4:	20000128 	.word	0x20000128
 8001bf8:	08001b69 	.word	0x08001b69

08001bfc <__sfp_lock_acquire>:
 8001bfc:	4801      	ldr	r0, [pc, #4]	@ (8001c04 <__sfp_lock_acquire+0x8>)
 8001bfe:	f000 ba08 	b.w	8002012 <__retarget_lock_acquire_recursive>
 8001c02:	bf00      	nop
 8001c04:	20000269 	.word	0x20000269

08001c08 <__sfp_lock_release>:
 8001c08:	4801      	ldr	r0, [pc, #4]	@ (8001c10 <__sfp_lock_release+0x8>)
 8001c0a:	f000 ba03 	b.w	8002014 <__retarget_lock_release_recursive>
 8001c0e:	bf00      	nop
 8001c10:	20000269 	.word	0x20000269

08001c14 <__sinit>:
 8001c14:	b510      	push	{r4, lr}
 8001c16:	4604      	mov	r4, r0
 8001c18:	f7ff fff0 	bl	8001bfc <__sfp_lock_acquire>
 8001c1c:	6a23      	ldr	r3, [r4, #32]
 8001c1e:	b11b      	cbz	r3, 8001c28 <__sinit+0x14>
 8001c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c24:	f7ff bff0 	b.w	8001c08 <__sfp_lock_release>
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <__sinit+0x28>)
 8001c2a:	6223      	str	r3, [r4, #32]
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <__sinit+0x2c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f5      	bne.n	8001c20 <__sinit+0xc>
 8001c34:	f7ff ffc4 	bl	8001bc0 <global_stdio_init.part.0>
 8001c38:	e7f2      	b.n	8001c20 <__sinit+0xc>
 8001c3a:	bf00      	nop
 8001c3c:	08001b81 	.word	0x08001b81
 8001c40:	20000260 	.word	0x20000260

08001c44 <_fwalk_sglue>:
 8001c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c48:	4607      	mov	r7, r0
 8001c4a:	4688      	mov	r8, r1
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	2600      	movs	r6, #0
 8001c50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c54:	f1b9 0901 	subs.w	r9, r9, #1
 8001c58:	d505      	bpl.n	8001c66 <_fwalk_sglue+0x22>
 8001c5a:	6824      	ldr	r4, [r4, #0]
 8001c5c:	2c00      	cmp	r4, #0
 8001c5e:	d1f7      	bne.n	8001c50 <_fwalk_sglue+0xc>
 8001c60:	4630      	mov	r0, r6
 8001c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c66:	89ab      	ldrh	r3, [r5, #12]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d907      	bls.n	8001c7c <_fwalk_sglue+0x38>
 8001c6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c70:	3301      	adds	r3, #1
 8001c72:	d003      	beq.n	8001c7c <_fwalk_sglue+0x38>
 8001c74:	4629      	mov	r1, r5
 8001c76:	4638      	mov	r0, r7
 8001c78:	47c0      	blx	r8
 8001c7a:	4306      	orrs	r6, r0
 8001c7c:	3568      	adds	r5, #104	@ 0x68
 8001c7e:	e7e9      	b.n	8001c54 <_fwalk_sglue+0x10>

08001c80 <iprintf>:
 8001c80:	b40f      	push	{r0, r1, r2, r3}
 8001c82:	b507      	push	{r0, r1, r2, lr}
 8001c84:	4906      	ldr	r1, [pc, #24]	@ (8001ca0 <iprintf+0x20>)
 8001c86:	ab04      	add	r3, sp, #16
 8001c88:	6808      	ldr	r0, [r1, #0]
 8001c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c8e:	6881      	ldr	r1, [r0, #8]
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	f000 fae3 	bl	800225c <_vfiprintf_r>
 8001c96:	b003      	add	sp, #12
 8001c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c9c:	b004      	add	sp, #16
 8001c9e:	4770      	bx	lr
 8001ca0:	20000018 	.word	0x20000018

08001ca4 <putchar>:
 8001ca4:	4b02      	ldr	r3, [pc, #8]	@ (8001cb0 <putchar+0xc>)
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	6882      	ldr	r2, [r0, #8]
 8001cac:	f000 be8a 	b.w	80029c4 <_putc_r>
 8001cb0:	20000018 	.word	0x20000018

08001cb4 <_puts_r>:
 8001cb4:	6a03      	ldr	r3, [r0, #32]
 8001cb6:	b570      	push	{r4, r5, r6, lr}
 8001cb8:	6884      	ldr	r4, [r0, #8]
 8001cba:	4605      	mov	r5, r0
 8001cbc:	460e      	mov	r6, r1
 8001cbe:	b90b      	cbnz	r3, 8001cc4 <_puts_r+0x10>
 8001cc0:	f7ff ffa8 	bl	8001c14 <__sinit>
 8001cc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001cc6:	07db      	lsls	r3, r3, #31
 8001cc8:	d405      	bmi.n	8001cd6 <_puts_r+0x22>
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	0598      	lsls	r0, r3, #22
 8001cce:	d402      	bmi.n	8001cd6 <_puts_r+0x22>
 8001cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001cd2:	f000 f99e 	bl	8002012 <__retarget_lock_acquire_recursive>
 8001cd6:	89a3      	ldrh	r3, [r4, #12]
 8001cd8:	0719      	lsls	r1, r3, #28
 8001cda:	d502      	bpl.n	8001ce2 <_puts_r+0x2e>
 8001cdc:	6923      	ldr	r3, [r4, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d135      	bne.n	8001d4e <_puts_r+0x9a>
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	f000 f8c5 	bl	8001e74 <__swsetup_r>
 8001cea:	b380      	cbz	r0, 8001d4e <_puts_r+0x9a>
 8001cec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001cf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001cf2:	07da      	lsls	r2, r3, #31
 8001cf4:	d405      	bmi.n	8001d02 <_puts_r+0x4e>
 8001cf6:	89a3      	ldrh	r3, [r4, #12]
 8001cf8:	059b      	lsls	r3, r3, #22
 8001cfa:	d402      	bmi.n	8001d02 <_puts_r+0x4e>
 8001cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001cfe:	f000 f989 	bl	8002014 <__retarget_lock_release_recursive>
 8001d02:	4628      	mov	r0, r5
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da04      	bge.n	8001d14 <_puts_r+0x60>
 8001d0a:	69a2      	ldr	r2, [r4, #24]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dc17      	bgt.n	8001d40 <_puts_r+0x8c>
 8001d10:	290a      	cmp	r1, #10
 8001d12:	d015      	beq.n	8001d40 <_puts_r+0x8c>
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	6022      	str	r2, [r4, #0]
 8001d1a:	7019      	strb	r1, [r3, #0]
 8001d1c:	68a3      	ldr	r3, [r4, #8]
 8001d1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001d22:	3b01      	subs	r3, #1
 8001d24:	60a3      	str	r3, [r4, #8]
 8001d26:	2900      	cmp	r1, #0
 8001d28:	d1ed      	bne.n	8001d06 <_puts_r+0x52>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	da11      	bge.n	8001d52 <_puts_r+0x9e>
 8001d2e:	4622      	mov	r2, r4
 8001d30:	210a      	movs	r1, #10
 8001d32:	4628      	mov	r0, r5
 8001d34:	f000 f85f 	bl	8001df6 <__swbuf_r>
 8001d38:	3001      	adds	r0, #1
 8001d3a:	d0d7      	beq.n	8001cec <_puts_r+0x38>
 8001d3c:	250a      	movs	r5, #10
 8001d3e:	e7d7      	b.n	8001cf0 <_puts_r+0x3c>
 8001d40:	4622      	mov	r2, r4
 8001d42:	4628      	mov	r0, r5
 8001d44:	f000 f857 	bl	8001df6 <__swbuf_r>
 8001d48:	3001      	adds	r0, #1
 8001d4a:	d1e7      	bne.n	8001d1c <_puts_r+0x68>
 8001d4c:	e7ce      	b.n	8001cec <_puts_r+0x38>
 8001d4e:	3e01      	subs	r6, #1
 8001d50:	e7e4      	b.n	8001d1c <_puts_r+0x68>
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	6022      	str	r2, [r4, #0]
 8001d58:	220a      	movs	r2, #10
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e7ee      	b.n	8001d3c <_puts_r+0x88>
	...

08001d60 <puts>:
 8001d60:	4b02      	ldr	r3, [pc, #8]	@ (8001d6c <puts+0xc>)
 8001d62:	4601      	mov	r1, r0
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	f7ff bfa5 	b.w	8001cb4 <_puts_r>
 8001d6a:	bf00      	nop
 8001d6c:	20000018 	.word	0x20000018

08001d70 <__sread>:
 8001d70:	b510      	push	{r4, lr}
 8001d72:	460c      	mov	r4, r1
 8001d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d78:	f000 f8fc 	bl	8001f74 <_read_r>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	bfab      	itete	ge
 8001d80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001d82:	89a3      	ldrhlt	r3, [r4, #12]
 8001d84:	181b      	addge	r3, r3, r0
 8001d86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001d8a:	bfac      	ite	ge
 8001d8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001d8e:	81a3      	strhlt	r3, [r4, #12]
 8001d90:	bd10      	pop	{r4, pc}

08001d92 <__swrite>:
 8001d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d96:	461f      	mov	r7, r3
 8001d98:	898b      	ldrh	r3, [r1, #12]
 8001d9a:	05db      	lsls	r3, r3, #23
 8001d9c:	4605      	mov	r5, r0
 8001d9e:	460c      	mov	r4, r1
 8001da0:	4616      	mov	r6, r2
 8001da2:	d505      	bpl.n	8001db0 <__swrite+0x1e>
 8001da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001da8:	2302      	movs	r3, #2
 8001daa:	2200      	movs	r2, #0
 8001dac:	f000 f8d0 	bl	8001f50 <_lseek_r>
 8001db0:	89a3      	ldrh	r3, [r4, #12]
 8001db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001db6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dba:	81a3      	strh	r3, [r4, #12]
 8001dbc:	4632      	mov	r2, r6
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc6:	f000 b8e7 	b.w	8001f98 <_write_r>

08001dca <__sseek>:
 8001dca:	b510      	push	{r4, lr}
 8001dcc:	460c      	mov	r4, r1
 8001dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dd2:	f000 f8bd 	bl	8001f50 <_lseek_r>
 8001dd6:	1c43      	adds	r3, r0, #1
 8001dd8:	89a3      	ldrh	r3, [r4, #12]
 8001dda:	bf15      	itete	ne
 8001ddc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001dde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001de2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001de6:	81a3      	strheq	r3, [r4, #12]
 8001de8:	bf18      	it	ne
 8001dea:	81a3      	strhne	r3, [r4, #12]
 8001dec:	bd10      	pop	{r4, pc}

08001dee <__sclose>:
 8001dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df2:	f000 b89d 	b.w	8001f30 <_close_r>

08001df6 <__swbuf_r>:
 8001df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df8:	460e      	mov	r6, r1
 8001dfa:	4614      	mov	r4, r2
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	b118      	cbz	r0, 8001e08 <__swbuf_r+0x12>
 8001e00:	6a03      	ldr	r3, [r0, #32]
 8001e02:	b90b      	cbnz	r3, 8001e08 <__swbuf_r+0x12>
 8001e04:	f7ff ff06 	bl	8001c14 <__sinit>
 8001e08:	69a3      	ldr	r3, [r4, #24]
 8001e0a:	60a3      	str	r3, [r4, #8]
 8001e0c:	89a3      	ldrh	r3, [r4, #12]
 8001e0e:	071a      	lsls	r2, r3, #28
 8001e10:	d501      	bpl.n	8001e16 <__swbuf_r+0x20>
 8001e12:	6923      	ldr	r3, [r4, #16]
 8001e14:	b943      	cbnz	r3, 8001e28 <__swbuf_r+0x32>
 8001e16:	4621      	mov	r1, r4
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f000 f82b 	bl	8001e74 <__swsetup_r>
 8001e1e:	b118      	cbz	r0, 8001e28 <__swbuf_r+0x32>
 8001e20:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001e24:	4638      	mov	r0, r7
 8001e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	6922      	ldr	r2, [r4, #16]
 8001e2c:	1a98      	subs	r0, r3, r2
 8001e2e:	6963      	ldr	r3, [r4, #20]
 8001e30:	b2f6      	uxtb	r6, r6
 8001e32:	4283      	cmp	r3, r0
 8001e34:	4637      	mov	r7, r6
 8001e36:	dc05      	bgt.n	8001e44 <__swbuf_r+0x4e>
 8001e38:	4621      	mov	r1, r4
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	f000 fd38 	bl	80028b0 <_fflush_r>
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d1ed      	bne.n	8001e20 <__swbuf_r+0x2a>
 8001e44:	68a3      	ldr	r3, [r4, #8]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	60a3      	str	r3, [r4, #8]
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	6022      	str	r2, [r4, #0]
 8001e50:	701e      	strb	r6, [r3, #0]
 8001e52:	6962      	ldr	r2, [r4, #20]
 8001e54:	1c43      	adds	r3, r0, #1
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d004      	beq.n	8001e64 <__swbuf_r+0x6e>
 8001e5a:	89a3      	ldrh	r3, [r4, #12]
 8001e5c:	07db      	lsls	r3, r3, #31
 8001e5e:	d5e1      	bpl.n	8001e24 <__swbuf_r+0x2e>
 8001e60:	2e0a      	cmp	r6, #10
 8001e62:	d1df      	bne.n	8001e24 <__swbuf_r+0x2e>
 8001e64:	4621      	mov	r1, r4
 8001e66:	4628      	mov	r0, r5
 8001e68:	f000 fd22 	bl	80028b0 <_fflush_r>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d0d9      	beq.n	8001e24 <__swbuf_r+0x2e>
 8001e70:	e7d6      	b.n	8001e20 <__swbuf_r+0x2a>
	...

08001e74 <__swsetup_r>:
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	4b29      	ldr	r3, [pc, #164]	@ (8001f1c <__swsetup_r+0xa8>)
 8001e78:	4605      	mov	r5, r0
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	460c      	mov	r4, r1
 8001e7e:	b118      	cbz	r0, 8001e88 <__swsetup_r+0x14>
 8001e80:	6a03      	ldr	r3, [r0, #32]
 8001e82:	b90b      	cbnz	r3, 8001e88 <__swsetup_r+0x14>
 8001e84:	f7ff fec6 	bl	8001c14 <__sinit>
 8001e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e8c:	0719      	lsls	r1, r3, #28
 8001e8e:	d422      	bmi.n	8001ed6 <__swsetup_r+0x62>
 8001e90:	06da      	lsls	r2, r3, #27
 8001e92:	d407      	bmi.n	8001ea4 <__swsetup_r+0x30>
 8001e94:	2209      	movs	r2, #9
 8001e96:	602a      	str	r2, [r5, #0]
 8001e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e9c:	81a3      	strh	r3, [r4, #12]
 8001e9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ea2:	e033      	b.n	8001f0c <__swsetup_r+0x98>
 8001ea4:	0758      	lsls	r0, r3, #29
 8001ea6:	d512      	bpl.n	8001ece <__swsetup_r+0x5a>
 8001ea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001eaa:	b141      	cbz	r1, 8001ebe <__swsetup_r+0x4a>
 8001eac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001eb0:	4299      	cmp	r1, r3
 8001eb2:	d002      	beq.n	8001eba <__swsetup_r+0x46>
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f000 f8af 	bl	8002018 <_free_r>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ebe:	89a3      	ldrh	r3, [r4, #12]
 8001ec0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001ec4:	81a3      	strh	r3, [r4, #12]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6063      	str	r3, [r4, #4]
 8001eca:	6923      	ldr	r3, [r4, #16]
 8001ecc:	6023      	str	r3, [r4, #0]
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	81a3      	strh	r3, [r4, #12]
 8001ed6:	6923      	ldr	r3, [r4, #16]
 8001ed8:	b94b      	cbnz	r3, 8001eee <__swsetup_r+0x7a>
 8001eda:	89a3      	ldrh	r3, [r4, #12]
 8001edc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ee4:	d003      	beq.n	8001eee <__swsetup_r+0x7a>
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	4628      	mov	r0, r5
 8001eea:	f000 fd2f 	bl	800294c <__smakebuf_r>
 8001eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ef2:	f013 0201 	ands.w	r2, r3, #1
 8001ef6:	d00a      	beq.n	8001f0e <__swsetup_r+0x9a>
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60a2      	str	r2, [r4, #8]
 8001efc:	6962      	ldr	r2, [r4, #20]
 8001efe:	4252      	negs	r2, r2
 8001f00:	61a2      	str	r2, [r4, #24]
 8001f02:	6922      	ldr	r2, [r4, #16]
 8001f04:	b942      	cbnz	r2, 8001f18 <__swsetup_r+0xa4>
 8001f06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001f0a:	d1c5      	bne.n	8001e98 <__swsetup_r+0x24>
 8001f0c:	bd38      	pop	{r3, r4, r5, pc}
 8001f0e:	0799      	lsls	r1, r3, #30
 8001f10:	bf58      	it	pl
 8001f12:	6962      	ldrpl	r2, [r4, #20]
 8001f14:	60a2      	str	r2, [r4, #8]
 8001f16:	e7f4      	b.n	8001f02 <__swsetup_r+0x8e>
 8001f18:	2000      	movs	r0, #0
 8001f1a:	e7f7      	b.n	8001f0c <__swsetup_r+0x98>
 8001f1c:	20000018 	.word	0x20000018

08001f20 <memset>:
 8001f20:	4402      	add	r2, r0
 8001f22:	4603      	mov	r3, r0
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d100      	bne.n	8001f2a <memset+0xa>
 8001f28:	4770      	bx	lr
 8001f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f2e:	e7f9      	b.n	8001f24 <memset+0x4>

08001f30 <_close_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	4d06      	ldr	r5, [pc, #24]	@ (8001f4c <_close_r+0x1c>)
 8001f34:	2300      	movs	r3, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	602b      	str	r3, [r5, #0]
 8001f3c:	f7fe fd00 	bl	8000940 <_close>
 8001f40:	1c43      	adds	r3, r0, #1
 8001f42:	d102      	bne.n	8001f4a <_close_r+0x1a>
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	b103      	cbz	r3, 8001f4a <_close_r+0x1a>
 8001f48:	6023      	str	r3, [r4, #0]
 8001f4a:	bd38      	pop	{r3, r4, r5, pc}
 8001f4c:	20000264 	.word	0x20000264

08001f50 <_lseek_r>:
 8001f50:	b538      	push	{r3, r4, r5, lr}
 8001f52:	4d07      	ldr	r5, [pc, #28]	@ (8001f70 <_lseek_r+0x20>)
 8001f54:	4604      	mov	r4, r0
 8001f56:	4608      	mov	r0, r1
 8001f58:	4611      	mov	r1, r2
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	602a      	str	r2, [r5, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f7fe fcf8 	bl	8000954 <_lseek>
 8001f64:	1c43      	adds	r3, r0, #1
 8001f66:	d102      	bne.n	8001f6e <_lseek_r+0x1e>
 8001f68:	682b      	ldr	r3, [r5, #0]
 8001f6a:	b103      	cbz	r3, 8001f6e <_lseek_r+0x1e>
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	bd38      	pop	{r3, r4, r5, pc}
 8001f70:	20000264 	.word	0x20000264

08001f74 <_read_r>:
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	4d07      	ldr	r5, [pc, #28]	@ (8001f94 <_read_r+0x20>)
 8001f78:	4604      	mov	r4, r0
 8001f7a:	4608      	mov	r0, r1
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	2200      	movs	r2, #0
 8001f80:	602a      	str	r2, [r5, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f7fe fccc 	bl	8000920 <_read>
 8001f88:	1c43      	adds	r3, r0, #1
 8001f8a:	d102      	bne.n	8001f92 <_read_r+0x1e>
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	b103      	cbz	r3, 8001f92 <_read_r+0x1e>
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
 8001f94:	20000264 	.word	0x20000264

08001f98 <_write_r>:
 8001f98:	b538      	push	{r3, r4, r5, lr}
 8001f9a:	4d07      	ldr	r5, [pc, #28]	@ (8001fb8 <_write_r+0x20>)
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	4608      	mov	r0, r1
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	602a      	str	r2, [r5, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f7fe fb1a 	bl	80005e0 <_write>
 8001fac:	1c43      	adds	r3, r0, #1
 8001fae:	d102      	bne.n	8001fb6 <_write_r+0x1e>
 8001fb0:	682b      	ldr	r3, [r5, #0]
 8001fb2:	b103      	cbz	r3, 8001fb6 <_write_r+0x1e>
 8001fb4:	6023      	str	r3, [r4, #0]
 8001fb6:	bd38      	pop	{r3, r4, r5, pc}
 8001fb8:	20000264 	.word	0x20000264

08001fbc <__errno>:
 8001fbc:	4b01      	ldr	r3, [pc, #4]	@ (8001fc4 <__errno+0x8>)
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000018 	.word	0x20000018

08001fc8 <__libc_init_array>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4d0d      	ldr	r5, [pc, #52]	@ (8002000 <__libc_init_array+0x38>)
 8001fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8002004 <__libc_init_array+0x3c>)
 8001fce:	1b64      	subs	r4, r4, r5
 8001fd0:	10a4      	asrs	r4, r4, #2
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	42a6      	cmp	r6, r4
 8001fd6:	d109      	bne.n	8001fec <__libc_init_array+0x24>
 8001fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8002008 <__libc_init_array+0x40>)
 8001fda:	4c0c      	ldr	r4, [pc, #48]	@ (800200c <__libc_init_array+0x44>)
 8001fdc:	f000 fd58 	bl	8002a90 <_init>
 8001fe0:	1b64      	subs	r4, r4, r5
 8001fe2:	10a4      	asrs	r4, r4, #2
 8001fe4:	2600      	movs	r6, #0
 8001fe6:	42a6      	cmp	r6, r4
 8001fe8:	d105      	bne.n	8001ff6 <__libc_init_array+0x2e>
 8001fea:	bd70      	pop	{r4, r5, r6, pc}
 8001fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff0:	4798      	blx	r3
 8001ff2:	3601      	adds	r6, #1
 8001ff4:	e7ee      	b.n	8001fd4 <__libc_init_array+0xc>
 8001ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ffa:	4798      	blx	r3
 8001ffc:	3601      	adds	r6, #1
 8001ffe:	e7f2      	b.n	8001fe6 <__libc_init_array+0x1e>
 8002000:	08002b4c 	.word	0x08002b4c
 8002004:	08002b4c 	.word	0x08002b4c
 8002008:	08002b4c 	.word	0x08002b4c
 800200c:	08002b50 	.word	0x08002b50

08002010 <__retarget_lock_init_recursive>:
 8002010:	4770      	bx	lr

08002012 <__retarget_lock_acquire_recursive>:
 8002012:	4770      	bx	lr

08002014 <__retarget_lock_release_recursive>:
 8002014:	4770      	bx	lr
	...

08002018 <_free_r>:
 8002018:	b538      	push	{r3, r4, r5, lr}
 800201a:	4605      	mov	r5, r0
 800201c:	2900      	cmp	r1, #0
 800201e:	d041      	beq.n	80020a4 <_free_r+0x8c>
 8002020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002024:	1f0c      	subs	r4, r1, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	bfb8      	it	lt
 800202a:	18e4      	addlt	r4, r4, r3
 800202c:	f000 f8e0 	bl	80021f0 <__malloc_lock>
 8002030:	4a1d      	ldr	r2, [pc, #116]	@ (80020a8 <_free_r+0x90>)
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	b933      	cbnz	r3, 8002044 <_free_r+0x2c>
 8002036:	6063      	str	r3, [r4, #4]
 8002038:	6014      	str	r4, [r2, #0]
 800203a:	4628      	mov	r0, r5
 800203c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002040:	f000 b8dc 	b.w	80021fc <__malloc_unlock>
 8002044:	42a3      	cmp	r3, r4
 8002046:	d908      	bls.n	800205a <_free_r+0x42>
 8002048:	6820      	ldr	r0, [r4, #0]
 800204a:	1821      	adds	r1, r4, r0
 800204c:	428b      	cmp	r3, r1
 800204e:	bf01      	itttt	eq
 8002050:	6819      	ldreq	r1, [r3, #0]
 8002052:	685b      	ldreq	r3, [r3, #4]
 8002054:	1809      	addeq	r1, r1, r0
 8002056:	6021      	streq	r1, [r4, #0]
 8002058:	e7ed      	b.n	8002036 <_free_r+0x1e>
 800205a:	461a      	mov	r2, r3
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	b10b      	cbz	r3, 8002064 <_free_r+0x4c>
 8002060:	42a3      	cmp	r3, r4
 8002062:	d9fa      	bls.n	800205a <_free_r+0x42>
 8002064:	6811      	ldr	r1, [r2, #0]
 8002066:	1850      	adds	r0, r2, r1
 8002068:	42a0      	cmp	r0, r4
 800206a:	d10b      	bne.n	8002084 <_free_r+0x6c>
 800206c:	6820      	ldr	r0, [r4, #0]
 800206e:	4401      	add	r1, r0
 8002070:	1850      	adds	r0, r2, r1
 8002072:	4283      	cmp	r3, r0
 8002074:	6011      	str	r1, [r2, #0]
 8002076:	d1e0      	bne.n	800203a <_free_r+0x22>
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	6053      	str	r3, [r2, #4]
 800207e:	4408      	add	r0, r1
 8002080:	6010      	str	r0, [r2, #0]
 8002082:	e7da      	b.n	800203a <_free_r+0x22>
 8002084:	d902      	bls.n	800208c <_free_r+0x74>
 8002086:	230c      	movs	r3, #12
 8002088:	602b      	str	r3, [r5, #0]
 800208a:	e7d6      	b.n	800203a <_free_r+0x22>
 800208c:	6820      	ldr	r0, [r4, #0]
 800208e:	1821      	adds	r1, r4, r0
 8002090:	428b      	cmp	r3, r1
 8002092:	bf04      	itt	eq
 8002094:	6819      	ldreq	r1, [r3, #0]
 8002096:	685b      	ldreq	r3, [r3, #4]
 8002098:	6063      	str	r3, [r4, #4]
 800209a:	bf04      	itt	eq
 800209c:	1809      	addeq	r1, r1, r0
 800209e:	6021      	streq	r1, [r4, #0]
 80020a0:	6054      	str	r4, [r2, #4]
 80020a2:	e7ca      	b.n	800203a <_free_r+0x22>
 80020a4:	bd38      	pop	{r3, r4, r5, pc}
 80020a6:	bf00      	nop
 80020a8:	20000270 	.word	0x20000270

080020ac <sbrk_aligned>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	4e0f      	ldr	r6, [pc, #60]	@ (80020ec <sbrk_aligned+0x40>)
 80020b0:	460c      	mov	r4, r1
 80020b2:	6831      	ldr	r1, [r6, #0]
 80020b4:	4605      	mov	r5, r0
 80020b6:	b911      	cbnz	r1, 80020be <sbrk_aligned+0x12>
 80020b8:	f000 fcda 	bl	8002a70 <_sbrk_r>
 80020bc:	6030      	str	r0, [r6, #0]
 80020be:	4621      	mov	r1, r4
 80020c0:	4628      	mov	r0, r5
 80020c2:	f000 fcd5 	bl	8002a70 <_sbrk_r>
 80020c6:	1c43      	adds	r3, r0, #1
 80020c8:	d103      	bne.n	80020d2 <sbrk_aligned+0x26>
 80020ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80020ce:	4620      	mov	r0, r4
 80020d0:	bd70      	pop	{r4, r5, r6, pc}
 80020d2:	1cc4      	adds	r4, r0, #3
 80020d4:	f024 0403 	bic.w	r4, r4, #3
 80020d8:	42a0      	cmp	r0, r4
 80020da:	d0f8      	beq.n	80020ce <sbrk_aligned+0x22>
 80020dc:	1a21      	subs	r1, r4, r0
 80020de:	4628      	mov	r0, r5
 80020e0:	f000 fcc6 	bl	8002a70 <_sbrk_r>
 80020e4:	3001      	adds	r0, #1
 80020e6:	d1f2      	bne.n	80020ce <sbrk_aligned+0x22>
 80020e8:	e7ef      	b.n	80020ca <sbrk_aligned+0x1e>
 80020ea:	bf00      	nop
 80020ec:	2000026c 	.word	0x2000026c

080020f0 <_malloc_r>:
 80020f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020f4:	1ccd      	adds	r5, r1, #3
 80020f6:	f025 0503 	bic.w	r5, r5, #3
 80020fa:	3508      	adds	r5, #8
 80020fc:	2d0c      	cmp	r5, #12
 80020fe:	bf38      	it	cc
 8002100:	250c      	movcc	r5, #12
 8002102:	2d00      	cmp	r5, #0
 8002104:	4606      	mov	r6, r0
 8002106:	db01      	blt.n	800210c <_malloc_r+0x1c>
 8002108:	42a9      	cmp	r1, r5
 800210a:	d904      	bls.n	8002116 <_malloc_r+0x26>
 800210c:	230c      	movs	r3, #12
 800210e:	6033      	str	r3, [r6, #0]
 8002110:	2000      	movs	r0, #0
 8002112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80021ec <_malloc_r+0xfc>
 800211a:	f000 f869 	bl	80021f0 <__malloc_lock>
 800211e:	f8d8 3000 	ldr.w	r3, [r8]
 8002122:	461c      	mov	r4, r3
 8002124:	bb44      	cbnz	r4, 8002178 <_malloc_r+0x88>
 8002126:	4629      	mov	r1, r5
 8002128:	4630      	mov	r0, r6
 800212a:	f7ff ffbf 	bl	80020ac <sbrk_aligned>
 800212e:	1c43      	adds	r3, r0, #1
 8002130:	4604      	mov	r4, r0
 8002132:	d158      	bne.n	80021e6 <_malloc_r+0xf6>
 8002134:	f8d8 4000 	ldr.w	r4, [r8]
 8002138:	4627      	mov	r7, r4
 800213a:	2f00      	cmp	r7, #0
 800213c:	d143      	bne.n	80021c6 <_malloc_r+0xd6>
 800213e:	2c00      	cmp	r4, #0
 8002140:	d04b      	beq.n	80021da <_malloc_r+0xea>
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	4639      	mov	r1, r7
 8002146:	4630      	mov	r0, r6
 8002148:	eb04 0903 	add.w	r9, r4, r3
 800214c:	f000 fc90 	bl	8002a70 <_sbrk_r>
 8002150:	4581      	cmp	r9, r0
 8002152:	d142      	bne.n	80021da <_malloc_r+0xea>
 8002154:	6821      	ldr	r1, [r4, #0]
 8002156:	1a6d      	subs	r5, r5, r1
 8002158:	4629      	mov	r1, r5
 800215a:	4630      	mov	r0, r6
 800215c:	f7ff ffa6 	bl	80020ac <sbrk_aligned>
 8002160:	3001      	adds	r0, #1
 8002162:	d03a      	beq.n	80021da <_malloc_r+0xea>
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	442b      	add	r3, r5
 8002168:	6023      	str	r3, [r4, #0]
 800216a:	f8d8 3000 	ldr.w	r3, [r8]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	bb62      	cbnz	r2, 80021cc <_malloc_r+0xdc>
 8002172:	f8c8 7000 	str.w	r7, [r8]
 8002176:	e00f      	b.n	8002198 <_malloc_r+0xa8>
 8002178:	6822      	ldr	r2, [r4, #0]
 800217a:	1b52      	subs	r2, r2, r5
 800217c:	d420      	bmi.n	80021c0 <_malloc_r+0xd0>
 800217e:	2a0b      	cmp	r2, #11
 8002180:	d917      	bls.n	80021b2 <_malloc_r+0xc2>
 8002182:	1961      	adds	r1, r4, r5
 8002184:	42a3      	cmp	r3, r4
 8002186:	6025      	str	r5, [r4, #0]
 8002188:	bf18      	it	ne
 800218a:	6059      	strne	r1, [r3, #4]
 800218c:	6863      	ldr	r3, [r4, #4]
 800218e:	bf08      	it	eq
 8002190:	f8c8 1000 	streq.w	r1, [r8]
 8002194:	5162      	str	r2, [r4, r5]
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	4630      	mov	r0, r6
 800219a:	f000 f82f 	bl	80021fc <__malloc_unlock>
 800219e:	f104 000b 	add.w	r0, r4, #11
 80021a2:	1d23      	adds	r3, r4, #4
 80021a4:	f020 0007 	bic.w	r0, r0, #7
 80021a8:	1ac2      	subs	r2, r0, r3
 80021aa:	bf1c      	itt	ne
 80021ac:	1a1b      	subne	r3, r3, r0
 80021ae:	50a3      	strne	r3, [r4, r2]
 80021b0:	e7af      	b.n	8002112 <_malloc_r+0x22>
 80021b2:	6862      	ldr	r2, [r4, #4]
 80021b4:	42a3      	cmp	r3, r4
 80021b6:	bf0c      	ite	eq
 80021b8:	f8c8 2000 	streq.w	r2, [r8]
 80021bc:	605a      	strne	r2, [r3, #4]
 80021be:	e7eb      	b.n	8002198 <_malloc_r+0xa8>
 80021c0:	4623      	mov	r3, r4
 80021c2:	6864      	ldr	r4, [r4, #4]
 80021c4:	e7ae      	b.n	8002124 <_malloc_r+0x34>
 80021c6:	463c      	mov	r4, r7
 80021c8:	687f      	ldr	r7, [r7, #4]
 80021ca:	e7b6      	b.n	800213a <_malloc_r+0x4a>
 80021cc:	461a      	mov	r2, r3
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	42a3      	cmp	r3, r4
 80021d2:	d1fb      	bne.n	80021cc <_malloc_r+0xdc>
 80021d4:	2300      	movs	r3, #0
 80021d6:	6053      	str	r3, [r2, #4]
 80021d8:	e7de      	b.n	8002198 <_malloc_r+0xa8>
 80021da:	230c      	movs	r3, #12
 80021dc:	6033      	str	r3, [r6, #0]
 80021de:	4630      	mov	r0, r6
 80021e0:	f000 f80c 	bl	80021fc <__malloc_unlock>
 80021e4:	e794      	b.n	8002110 <_malloc_r+0x20>
 80021e6:	6005      	str	r5, [r0, #0]
 80021e8:	e7d6      	b.n	8002198 <_malloc_r+0xa8>
 80021ea:	bf00      	nop
 80021ec:	20000270 	.word	0x20000270

080021f0 <__malloc_lock>:
 80021f0:	4801      	ldr	r0, [pc, #4]	@ (80021f8 <__malloc_lock+0x8>)
 80021f2:	f7ff bf0e 	b.w	8002012 <__retarget_lock_acquire_recursive>
 80021f6:	bf00      	nop
 80021f8:	20000268 	.word	0x20000268

080021fc <__malloc_unlock>:
 80021fc:	4801      	ldr	r0, [pc, #4]	@ (8002204 <__malloc_unlock+0x8>)
 80021fe:	f7ff bf09 	b.w	8002014 <__retarget_lock_release_recursive>
 8002202:	bf00      	nop
 8002204:	20000268 	.word	0x20000268

08002208 <__sfputc_r>:
 8002208:	6893      	ldr	r3, [r2, #8]
 800220a:	3b01      	subs	r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	b410      	push	{r4}
 8002210:	6093      	str	r3, [r2, #8]
 8002212:	da08      	bge.n	8002226 <__sfputc_r+0x1e>
 8002214:	6994      	ldr	r4, [r2, #24]
 8002216:	42a3      	cmp	r3, r4
 8002218:	db01      	blt.n	800221e <__sfputc_r+0x16>
 800221a:	290a      	cmp	r1, #10
 800221c:	d103      	bne.n	8002226 <__sfputc_r+0x1e>
 800221e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002222:	f7ff bde8 	b.w	8001df6 <__swbuf_r>
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	1c58      	adds	r0, r3, #1
 800222a:	6010      	str	r0, [r2, #0]
 800222c:	7019      	strb	r1, [r3, #0]
 800222e:	4608      	mov	r0, r1
 8002230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002234:	4770      	bx	lr

08002236 <__sfputs_r>:
 8002236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002238:	4606      	mov	r6, r0
 800223a:	460f      	mov	r7, r1
 800223c:	4614      	mov	r4, r2
 800223e:	18d5      	adds	r5, r2, r3
 8002240:	42ac      	cmp	r4, r5
 8002242:	d101      	bne.n	8002248 <__sfputs_r+0x12>
 8002244:	2000      	movs	r0, #0
 8002246:	e007      	b.n	8002258 <__sfputs_r+0x22>
 8002248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800224c:	463a      	mov	r2, r7
 800224e:	4630      	mov	r0, r6
 8002250:	f7ff ffda 	bl	8002208 <__sfputc_r>
 8002254:	1c43      	adds	r3, r0, #1
 8002256:	d1f3      	bne.n	8002240 <__sfputs_r+0xa>
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800225c <_vfiprintf_r>:
 800225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002260:	460d      	mov	r5, r1
 8002262:	b09d      	sub	sp, #116	@ 0x74
 8002264:	4614      	mov	r4, r2
 8002266:	4698      	mov	r8, r3
 8002268:	4606      	mov	r6, r0
 800226a:	b118      	cbz	r0, 8002274 <_vfiprintf_r+0x18>
 800226c:	6a03      	ldr	r3, [r0, #32]
 800226e:	b90b      	cbnz	r3, 8002274 <_vfiprintf_r+0x18>
 8002270:	f7ff fcd0 	bl	8001c14 <__sinit>
 8002274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002276:	07d9      	lsls	r1, r3, #31
 8002278:	d405      	bmi.n	8002286 <_vfiprintf_r+0x2a>
 800227a:	89ab      	ldrh	r3, [r5, #12]
 800227c:	059a      	lsls	r2, r3, #22
 800227e:	d402      	bmi.n	8002286 <_vfiprintf_r+0x2a>
 8002280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002282:	f7ff fec6 	bl	8002012 <__retarget_lock_acquire_recursive>
 8002286:	89ab      	ldrh	r3, [r5, #12]
 8002288:	071b      	lsls	r3, r3, #28
 800228a:	d501      	bpl.n	8002290 <_vfiprintf_r+0x34>
 800228c:	692b      	ldr	r3, [r5, #16]
 800228e:	b99b      	cbnz	r3, 80022b8 <_vfiprintf_r+0x5c>
 8002290:	4629      	mov	r1, r5
 8002292:	4630      	mov	r0, r6
 8002294:	f7ff fdee 	bl	8001e74 <__swsetup_r>
 8002298:	b170      	cbz	r0, 80022b8 <_vfiprintf_r+0x5c>
 800229a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800229c:	07dc      	lsls	r4, r3, #31
 800229e:	d504      	bpl.n	80022aa <_vfiprintf_r+0x4e>
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022a4:	b01d      	add	sp, #116	@ 0x74
 80022a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022aa:	89ab      	ldrh	r3, [r5, #12]
 80022ac:	0598      	lsls	r0, r3, #22
 80022ae:	d4f7      	bmi.n	80022a0 <_vfiprintf_r+0x44>
 80022b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022b2:	f7ff feaf 	bl	8002014 <__retarget_lock_release_recursive>
 80022b6:	e7f3      	b.n	80022a0 <_vfiprintf_r+0x44>
 80022b8:	2300      	movs	r3, #0
 80022ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80022bc:	2320      	movs	r3, #32
 80022be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80022c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80022c6:	2330      	movs	r3, #48	@ 0x30
 80022c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002478 <_vfiprintf_r+0x21c>
 80022cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80022d0:	f04f 0901 	mov.w	r9, #1
 80022d4:	4623      	mov	r3, r4
 80022d6:	469a      	mov	sl, r3
 80022d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022dc:	b10a      	cbz	r2, 80022e2 <_vfiprintf_r+0x86>
 80022de:	2a25      	cmp	r2, #37	@ 0x25
 80022e0:	d1f9      	bne.n	80022d6 <_vfiprintf_r+0x7a>
 80022e2:	ebba 0b04 	subs.w	fp, sl, r4
 80022e6:	d00b      	beq.n	8002300 <_vfiprintf_r+0xa4>
 80022e8:	465b      	mov	r3, fp
 80022ea:	4622      	mov	r2, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	4630      	mov	r0, r6
 80022f0:	f7ff ffa1 	bl	8002236 <__sfputs_r>
 80022f4:	3001      	adds	r0, #1
 80022f6:	f000 80a7 	beq.w	8002448 <_vfiprintf_r+0x1ec>
 80022fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80022fc:	445a      	add	r2, fp
 80022fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8002300:	f89a 3000 	ldrb.w	r3, [sl]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 809f 	beq.w	8002448 <_vfiprintf_r+0x1ec>
 800230a:	2300      	movs	r3, #0
 800230c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002314:	f10a 0a01 	add.w	sl, sl, #1
 8002318:	9304      	str	r3, [sp, #16]
 800231a:	9307      	str	r3, [sp, #28]
 800231c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002320:	931a      	str	r3, [sp, #104]	@ 0x68
 8002322:	4654      	mov	r4, sl
 8002324:	2205      	movs	r2, #5
 8002326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800232a:	4853      	ldr	r0, [pc, #332]	@ (8002478 <_vfiprintf_r+0x21c>)
 800232c:	f7fd ff50 	bl	80001d0 <memchr>
 8002330:	9a04      	ldr	r2, [sp, #16]
 8002332:	b9d8      	cbnz	r0, 800236c <_vfiprintf_r+0x110>
 8002334:	06d1      	lsls	r1, r2, #27
 8002336:	bf44      	itt	mi
 8002338:	2320      	movmi	r3, #32
 800233a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800233e:	0713      	lsls	r3, r2, #28
 8002340:	bf44      	itt	mi
 8002342:	232b      	movmi	r3, #43	@ 0x2b
 8002344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002348:	f89a 3000 	ldrb.w	r3, [sl]
 800234c:	2b2a      	cmp	r3, #42	@ 0x2a
 800234e:	d015      	beq.n	800237c <_vfiprintf_r+0x120>
 8002350:	9a07      	ldr	r2, [sp, #28]
 8002352:	4654      	mov	r4, sl
 8002354:	2000      	movs	r0, #0
 8002356:	f04f 0c0a 	mov.w	ip, #10
 800235a:	4621      	mov	r1, r4
 800235c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002360:	3b30      	subs	r3, #48	@ 0x30
 8002362:	2b09      	cmp	r3, #9
 8002364:	d94b      	bls.n	80023fe <_vfiprintf_r+0x1a2>
 8002366:	b1b0      	cbz	r0, 8002396 <_vfiprintf_r+0x13a>
 8002368:	9207      	str	r2, [sp, #28]
 800236a:	e014      	b.n	8002396 <_vfiprintf_r+0x13a>
 800236c:	eba0 0308 	sub.w	r3, r0, r8
 8002370:	fa09 f303 	lsl.w	r3, r9, r3
 8002374:	4313      	orrs	r3, r2
 8002376:	9304      	str	r3, [sp, #16]
 8002378:	46a2      	mov	sl, r4
 800237a:	e7d2      	b.n	8002322 <_vfiprintf_r+0xc6>
 800237c:	9b03      	ldr	r3, [sp, #12]
 800237e:	1d19      	adds	r1, r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	9103      	str	r1, [sp, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	bfbb      	ittet	lt
 8002388:	425b      	neglt	r3, r3
 800238a:	f042 0202 	orrlt.w	r2, r2, #2
 800238e:	9307      	strge	r3, [sp, #28]
 8002390:	9307      	strlt	r3, [sp, #28]
 8002392:	bfb8      	it	lt
 8002394:	9204      	strlt	r2, [sp, #16]
 8002396:	7823      	ldrb	r3, [r4, #0]
 8002398:	2b2e      	cmp	r3, #46	@ 0x2e
 800239a:	d10a      	bne.n	80023b2 <_vfiprintf_r+0x156>
 800239c:	7863      	ldrb	r3, [r4, #1]
 800239e:	2b2a      	cmp	r3, #42	@ 0x2a
 80023a0:	d132      	bne.n	8002408 <_vfiprintf_r+0x1ac>
 80023a2:	9b03      	ldr	r3, [sp, #12]
 80023a4:	1d1a      	adds	r2, r3, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	9203      	str	r2, [sp, #12]
 80023aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80023ae:	3402      	adds	r4, #2
 80023b0:	9305      	str	r3, [sp, #20]
 80023b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002488 <_vfiprintf_r+0x22c>
 80023b6:	7821      	ldrb	r1, [r4, #0]
 80023b8:	2203      	movs	r2, #3
 80023ba:	4650      	mov	r0, sl
 80023bc:	f7fd ff08 	bl	80001d0 <memchr>
 80023c0:	b138      	cbz	r0, 80023d2 <_vfiprintf_r+0x176>
 80023c2:	9b04      	ldr	r3, [sp, #16]
 80023c4:	eba0 000a 	sub.w	r0, r0, sl
 80023c8:	2240      	movs	r2, #64	@ 0x40
 80023ca:	4082      	lsls	r2, r0
 80023cc:	4313      	orrs	r3, r2
 80023ce:	3401      	adds	r4, #1
 80023d0:	9304      	str	r3, [sp, #16]
 80023d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023d6:	4829      	ldr	r0, [pc, #164]	@ (800247c <_vfiprintf_r+0x220>)
 80023d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80023dc:	2206      	movs	r2, #6
 80023de:	f7fd fef7 	bl	80001d0 <memchr>
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d03f      	beq.n	8002466 <_vfiprintf_r+0x20a>
 80023e6:	4b26      	ldr	r3, [pc, #152]	@ (8002480 <_vfiprintf_r+0x224>)
 80023e8:	bb1b      	cbnz	r3, 8002432 <_vfiprintf_r+0x1d6>
 80023ea:	9b03      	ldr	r3, [sp, #12]
 80023ec:	3307      	adds	r3, #7
 80023ee:	f023 0307 	bic.w	r3, r3, #7
 80023f2:	3308      	adds	r3, #8
 80023f4:	9303      	str	r3, [sp, #12]
 80023f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80023f8:	443b      	add	r3, r7
 80023fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80023fc:	e76a      	b.n	80022d4 <_vfiprintf_r+0x78>
 80023fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002402:	460c      	mov	r4, r1
 8002404:	2001      	movs	r0, #1
 8002406:	e7a8      	b.n	800235a <_vfiprintf_r+0xfe>
 8002408:	2300      	movs	r3, #0
 800240a:	3401      	adds	r4, #1
 800240c:	9305      	str	r3, [sp, #20]
 800240e:	4619      	mov	r1, r3
 8002410:	f04f 0c0a 	mov.w	ip, #10
 8002414:	4620      	mov	r0, r4
 8002416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800241a:	3a30      	subs	r2, #48	@ 0x30
 800241c:	2a09      	cmp	r2, #9
 800241e:	d903      	bls.n	8002428 <_vfiprintf_r+0x1cc>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0c6      	beq.n	80023b2 <_vfiprintf_r+0x156>
 8002424:	9105      	str	r1, [sp, #20]
 8002426:	e7c4      	b.n	80023b2 <_vfiprintf_r+0x156>
 8002428:	fb0c 2101 	mla	r1, ip, r1, r2
 800242c:	4604      	mov	r4, r0
 800242e:	2301      	movs	r3, #1
 8002430:	e7f0      	b.n	8002414 <_vfiprintf_r+0x1b8>
 8002432:	ab03      	add	r3, sp, #12
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	462a      	mov	r2, r5
 8002438:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <_vfiprintf_r+0x228>)
 800243a:	a904      	add	r1, sp, #16
 800243c:	4630      	mov	r0, r6
 800243e:	f3af 8000 	nop.w
 8002442:	4607      	mov	r7, r0
 8002444:	1c78      	adds	r0, r7, #1
 8002446:	d1d6      	bne.n	80023f6 <_vfiprintf_r+0x19a>
 8002448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800244a:	07d9      	lsls	r1, r3, #31
 800244c:	d405      	bmi.n	800245a <_vfiprintf_r+0x1fe>
 800244e:	89ab      	ldrh	r3, [r5, #12]
 8002450:	059a      	lsls	r2, r3, #22
 8002452:	d402      	bmi.n	800245a <_vfiprintf_r+0x1fe>
 8002454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002456:	f7ff fddd 	bl	8002014 <__retarget_lock_release_recursive>
 800245a:	89ab      	ldrh	r3, [r5, #12]
 800245c:	065b      	lsls	r3, r3, #25
 800245e:	f53f af1f 	bmi.w	80022a0 <_vfiprintf_r+0x44>
 8002462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002464:	e71e      	b.n	80022a4 <_vfiprintf_r+0x48>
 8002466:	ab03      	add	r3, sp, #12
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	462a      	mov	r2, r5
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <_vfiprintf_r+0x228>)
 800246e:	a904      	add	r1, sp, #16
 8002470:	4630      	mov	r0, r6
 8002472:	f000 f879 	bl	8002568 <_printf_i>
 8002476:	e7e4      	b.n	8002442 <_vfiprintf_r+0x1e6>
 8002478:	08002b10 	.word	0x08002b10
 800247c:	08002b1a 	.word	0x08002b1a
 8002480:	00000000 	.word	0x00000000
 8002484:	08002237 	.word	0x08002237
 8002488:	08002b16 	.word	0x08002b16

0800248c <_printf_common>:
 800248c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002490:	4616      	mov	r6, r2
 8002492:	4698      	mov	r8, r3
 8002494:	688a      	ldr	r2, [r1, #8]
 8002496:	690b      	ldr	r3, [r1, #16]
 8002498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800249c:	4293      	cmp	r3, r2
 800249e:	bfb8      	it	lt
 80024a0:	4613      	movlt	r3, r2
 80024a2:	6033      	str	r3, [r6, #0]
 80024a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80024a8:	4607      	mov	r7, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	b10a      	cbz	r2, 80024b2 <_printf_common+0x26>
 80024ae:	3301      	adds	r3, #1
 80024b0:	6033      	str	r3, [r6, #0]
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	0699      	lsls	r1, r3, #26
 80024b6:	bf42      	ittt	mi
 80024b8:	6833      	ldrmi	r3, [r6, #0]
 80024ba:	3302      	addmi	r3, #2
 80024bc:	6033      	strmi	r3, [r6, #0]
 80024be:	6825      	ldr	r5, [r4, #0]
 80024c0:	f015 0506 	ands.w	r5, r5, #6
 80024c4:	d106      	bne.n	80024d4 <_printf_common+0x48>
 80024c6:	f104 0a19 	add.w	sl, r4, #25
 80024ca:	68e3      	ldr	r3, [r4, #12]
 80024cc:	6832      	ldr	r2, [r6, #0]
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	42ab      	cmp	r3, r5
 80024d2:	dc26      	bgt.n	8002522 <_printf_common+0x96>
 80024d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80024d8:	6822      	ldr	r2, [r4, #0]
 80024da:	3b00      	subs	r3, #0
 80024dc:	bf18      	it	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	0692      	lsls	r2, r2, #26
 80024e2:	d42b      	bmi.n	800253c <_printf_common+0xb0>
 80024e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80024e8:	4641      	mov	r1, r8
 80024ea:	4638      	mov	r0, r7
 80024ec:	47c8      	blx	r9
 80024ee:	3001      	adds	r0, #1
 80024f0:	d01e      	beq.n	8002530 <_printf_common+0xa4>
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	6922      	ldr	r2, [r4, #16]
 80024f6:	f003 0306 	and.w	r3, r3, #6
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	bf02      	ittt	eq
 80024fe:	68e5      	ldreq	r5, [r4, #12]
 8002500:	6833      	ldreq	r3, [r6, #0]
 8002502:	1aed      	subeq	r5, r5, r3
 8002504:	68a3      	ldr	r3, [r4, #8]
 8002506:	bf0c      	ite	eq
 8002508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800250c:	2500      	movne	r5, #0
 800250e:	4293      	cmp	r3, r2
 8002510:	bfc4      	itt	gt
 8002512:	1a9b      	subgt	r3, r3, r2
 8002514:	18ed      	addgt	r5, r5, r3
 8002516:	2600      	movs	r6, #0
 8002518:	341a      	adds	r4, #26
 800251a:	42b5      	cmp	r5, r6
 800251c:	d11a      	bne.n	8002554 <_printf_common+0xc8>
 800251e:	2000      	movs	r0, #0
 8002520:	e008      	b.n	8002534 <_printf_common+0xa8>
 8002522:	2301      	movs	r3, #1
 8002524:	4652      	mov	r2, sl
 8002526:	4641      	mov	r1, r8
 8002528:	4638      	mov	r0, r7
 800252a:	47c8      	blx	r9
 800252c:	3001      	adds	r0, #1
 800252e:	d103      	bne.n	8002538 <_printf_common+0xac>
 8002530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002538:	3501      	adds	r5, #1
 800253a:	e7c6      	b.n	80024ca <_printf_common+0x3e>
 800253c:	18e1      	adds	r1, r4, r3
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	2030      	movs	r0, #48	@ 0x30
 8002542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002546:	4422      	add	r2, r4
 8002548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800254c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002550:	3302      	adds	r3, #2
 8002552:	e7c7      	b.n	80024e4 <_printf_common+0x58>
 8002554:	2301      	movs	r3, #1
 8002556:	4622      	mov	r2, r4
 8002558:	4641      	mov	r1, r8
 800255a:	4638      	mov	r0, r7
 800255c:	47c8      	blx	r9
 800255e:	3001      	adds	r0, #1
 8002560:	d0e6      	beq.n	8002530 <_printf_common+0xa4>
 8002562:	3601      	adds	r6, #1
 8002564:	e7d9      	b.n	800251a <_printf_common+0x8e>
	...

08002568 <_printf_i>:
 8002568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800256c:	7e0f      	ldrb	r7, [r1, #24]
 800256e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002570:	2f78      	cmp	r7, #120	@ 0x78
 8002572:	4691      	mov	r9, r2
 8002574:	4680      	mov	r8, r0
 8002576:	460c      	mov	r4, r1
 8002578:	469a      	mov	sl, r3
 800257a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800257e:	d807      	bhi.n	8002590 <_printf_i+0x28>
 8002580:	2f62      	cmp	r7, #98	@ 0x62
 8002582:	d80a      	bhi.n	800259a <_printf_i+0x32>
 8002584:	2f00      	cmp	r7, #0
 8002586:	f000 80d2 	beq.w	800272e <_printf_i+0x1c6>
 800258a:	2f58      	cmp	r7, #88	@ 0x58
 800258c:	f000 80b9 	beq.w	8002702 <_printf_i+0x19a>
 8002590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002598:	e03a      	b.n	8002610 <_printf_i+0xa8>
 800259a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800259e:	2b15      	cmp	r3, #21
 80025a0:	d8f6      	bhi.n	8002590 <_printf_i+0x28>
 80025a2:	a101      	add	r1, pc, #4	@ (adr r1, 80025a8 <_printf_i+0x40>)
 80025a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025a8:	08002601 	.word	0x08002601
 80025ac:	08002615 	.word	0x08002615
 80025b0:	08002591 	.word	0x08002591
 80025b4:	08002591 	.word	0x08002591
 80025b8:	08002591 	.word	0x08002591
 80025bc:	08002591 	.word	0x08002591
 80025c0:	08002615 	.word	0x08002615
 80025c4:	08002591 	.word	0x08002591
 80025c8:	08002591 	.word	0x08002591
 80025cc:	08002591 	.word	0x08002591
 80025d0:	08002591 	.word	0x08002591
 80025d4:	08002715 	.word	0x08002715
 80025d8:	0800263f 	.word	0x0800263f
 80025dc:	080026cf 	.word	0x080026cf
 80025e0:	08002591 	.word	0x08002591
 80025e4:	08002591 	.word	0x08002591
 80025e8:	08002737 	.word	0x08002737
 80025ec:	08002591 	.word	0x08002591
 80025f0:	0800263f 	.word	0x0800263f
 80025f4:	08002591 	.word	0x08002591
 80025f8:	08002591 	.word	0x08002591
 80025fc:	080026d7 	.word	0x080026d7
 8002600:	6833      	ldr	r3, [r6, #0]
 8002602:	1d1a      	adds	r2, r3, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6032      	str	r2, [r6, #0]
 8002608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800260c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002610:	2301      	movs	r3, #1
 8002612:	e09d      	b.n	8002750 <_printf_i+0x1e8>
 8002614:	6833      	ldr	r3, [r6, #0]
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	1d19      	adds	r1, r3, #4
 800261a:	6031      	str	r1, [r6, #0]
 800261c:	0606      	lsls	r6, r0, #24
 800261e:	d501      	bpl.n	8002624 <_printf_i+0xbc>
 8002620:	681d      	ldr	r5, [r3, #0]
 8002622:	e003      	b.n	800262c <_printf_i+0xc4>
 8002624:	0645      	lsls	r5, r0, #25
 8002626:	d5fb      	bpl.n	8002620 <_printf_i+0xb8>
 8002628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800262c:	2d00      	cmp	r5, #0
 800262e:	da03      	bge.n	8002638 <_printf_i+0xd0>
 8002630:	232d      	movs	r3, #45	@ 0x2d
 8002632:	426d      	negs	r5, r5
 8002634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002638:	4859      	ldr	r0, [pc, #356]	@ (80027a0 <_printf_i+0x238>)
 800263a:	230a      	movs	r3, #10
 800263c:	e011      	b.n	8002662 <_printf_i+0xfa>
 800263e:	6821      	ldr	r1, [r4, #0]
 8002640:	6833      	ldr	r3, [r6, #0]
 8002642:	0608      	lsls	r0, r1, #24
 8002644:	f853 5b04 	ldr.w	r5, [r3], #4
 8002648:	d402      	bmi.n	8002650 <_printf_i+0xe8>
 800264a:	0649      	lsls	r1, r1, #25
 800264c:	bf48      	it	mi
 800264e:	b2ad      	uxthmi	r5, r5
 8002650:	2f6f      	cmp	r7, #111	@ 0x6f
 8002652:	4853      	ldr	r0, [pc, #332]	@ (80027a0 <_printf_i+0x238>)
 8002654:	6033      	str	r3, [r6, #0]
 8002656:	bf14      	ite	ne
 8002658:	230a      	movne	r3, #10
 800265a:	2308      	moveq	r3, #8
 800265c:	2100      	movs	r1, #0
 800265e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002662:	6866      	ldr	r6, [r4, #4]
 8002664:	60a6      	str	r6, [r4, #8]
 8002666:	2e00      	cmp	r6, #0
 8002668:	bfa2      	ittt	ge
 800266a:	6821      	ldrge	r1, [r4, #0]
 800266c:	f021 0104 	bicge.w	r1, r1, #4
 8002670:	6021      	strge	r1, [r4, #0]
 8002672:	b90d      	cbnz	r5, 8002678 <_printf_i+0x110>
 8002674:	2e00      	cmp	r6, #0
 8002676:	d04b      	beq.n	8002710 <_printf_i+0x1a8>
 8002678:	4616      	mov	r6, r2
 800267a:	fbb5 f1f3 	udiv	r1, r5, r3
 800267e:	fb03 5711 	mls	r7, r3, r1, r5
 8002682:	5dc7      	ldrb	r7, [r0, r7]
 8002684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002688:	462f      	mov	r7, r5
 800268a:	42bb      	cmp	r3, r7
 800268c:	460d      	mov	r5, r1
 800268e:	d9f4      	bls.n	800267a <_printf_i+0x112>
 8002690:	2b08      	cmp	r3, #8
 8002692:	d10b      	bne.n	80026ac <_printf_i+0x144>
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	07df      	lsls	r7, r3, #31
 8002698:	d508      	bpl.n	80026ac <_printf_i+0x144>
 800269a:	6923      	ldr	r3, [r4, #16]
 800269c:	6861      	ldr	r1, [r4, #4]
 800269e:	4299      	cmp	r1, r3
 80026a0:	bfde      	ittt	le
 80026a2:	2330      	movle	r3, #48	@ 0x30
 80026a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80026ac:	1b92      	subs	r2, r2, r6
 80026ae:	6122      	str	r2, [r4, #16]
 80026b0:	f8cd a000 	str.w	sl, [sp]
 80026b4:	464b      	mov	r3, r9
 80026b6:	aa03      	add	r2, sp, #12
 80026b8:	4621      	mov	r1, r4
 80026ba:	4640      	mov	r0, r8
 80026bc:	f7ff fee6 	bl	800248c <_printf_common>
 80026c0:	3001      	adds	r0, #1
 80026c2:	d14a      	bne.n	800275a <_printf_i+0x1f2>
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026c8:	b004      	add	sp, #16
 80026ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	f043 0320 	orr.w	r3, r3, #32
 80026d4:	6023      	str	r3, [r4, #0]
 80026d6:	4833      	ldr	r0, [pc, #204]	@ (80027a4 <_printf_i+0x23c>)
 80026d8:	2778      	movs	r7, #120	@ 0x78
 80026da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	6831      	ldr	r1, [r6, #0]
 80026e2:	061f      	lsls	r7, r3, #24
 80026e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80026e8:	d402      	bmi.n	80026f0 <_printf_i+0x188>
 80026ea:	065f      	lsls	r7, r3, #25
 80026ec:	bf48      	it	mi
 80026ee:	b2ad      	uxthmi	r5, r5
 80026f0:	6031      	str	r1, [r6, #0]
 80026f2:	07d9      	lsls	r1, r3, #31
 80026f4:	bf44      	itt	mi
 80026f6:	f043 0320 	orrmi.w	r3, r3, #32
 80026fa:	6023      	strmi	r3, [r4, #0]
 80026fc:	b11d      	cbz	r5, 8002706 <_printf_i+0x19e>
 80026fe:	2310      	movs	r3, #16
 8002700:	e7ac      	b.n	800265c <_printf_i+0xf4>
 8002702:	4827      	ldr	r0, [pc, #156]	@ (80027a0 <_printf_i+0x238>)
 8002704:	e7e9      	b.n	80026da <_printf_i+0x172>
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	f023 0320 	bic.w	r3, r3, #32
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	e7f6      	b.n	80026fe <_printf_i+0x196>
 8002710:	4616      	mov	r6, r2
 8002712:	e7bd      	b.n	8002690 <_printf_i+0x128>
 8002714:	6833      	ldr	r3, [r6, #0]
 8002716:	6825      	ldr	r5, [r4, #0]
 8002718:	6961      	ldr	r1, [r4, #20]
 800271a:	1d18      	adds	r0, r3, #4
 800271c:	6030      	str	r0, [r6, #0]
 800271e:	062e      	lsls	r6, r5, #24
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	d501      	bpl.n	8002728 <_printf_i+0x1c0>
 8002724:	6019      	str	r1, [r3, #0]
 8002726:	e002      	b.n	800272e <_printf_i+0x1c6>
 8002728:	0668      	lsls	r0, r5, #25
 800272a:	d5fb      	bpl.n	8002724 <_printf_i+0x1bc>
 800272c:	8019      	strh	r1, [r3, #0]
 800272e:	2300      	movs	r3, #0
 8002730:	6123      	str	r3, [r4, #16]
 8002732:	4616      	mov	r6, r2
 8002734:	e7bc      	b.n	80026b0 <_printf_i+0x148>
 8002736:	6833      	ldr	r3, [r6, #0]
 8002738:	1d1a      	adds	r2, r3, #4
 800273a:	6032      	str	r2, [r6, #0]
 800273c:	681e      	ldr	r6, [r3, #0]
 800273e:	6862      	ldr	r2, [r4, #4]
 8002740:	2100      	movs	r1, #0
 8002742:	4630      	mov	r0, r6
 8002744:	f7fd fd44 	bl	80001d0 <memchr>
 8002748:	b108      	cbz	r0, 800274e <_printf_i+0x1e6>
 800274a:	1b80      	subs	r0, r0, r6
 800274c:	6060      	str	r0, [r4, #4]
 800274e:	6863      	ldr	r3, [r4, #4]
 8002750:	6123      	str	r3, [r4, #16]
 8002752:	2300      	movs	r3, #0
 8002754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002758:	e7aa      	b.n	80026b0 <_printf_i+0x148>
 800275a:	6923      	ldr	r3, [r4, #16]
 800275c:	4632      	mov	r2, r6
 800275e:	4649      	mov	r1, r9
 8002760:	4640      	mov	r0, r8
 8002762:	47d0      	blx	sl
 8002764:	3001      	adds	r0, #1
 8002766:	d0ad      	beq.n	80026c4 <_printf_i+0x15c>
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	079b      	lsls	r3, r3, #30
 800276c:	d413      	bmi.n	8002796 <_printf_i+0x22e>
 800276e:	68e0      	ldr	r0, [r4, #12]
 8002770:	9b03      	ldr	r3, [sp, #12]
 8002772:	4298      	cmp	r0, r3
 8002774:	bfb8      	it	lt
 8002776:	4618      	movlt	r0, r3
 8002778:	e7a6      	b.n	80026c8 <_printf_i+0x160>
 800277a:	2301      	movs	r3, #1
 800277c:	4632      	mov	r2, r6
 800277e:	4649      	mov	r1, r9
 8002780:	4640      	mov	r0, r8
 8002782:	47d0      	blx	sl
 8002784:	3001      	adds	r0, #1
 8002786:	d09d      	beq.n	80026c4 <_printf_i+0x15c>
 8002788:	3501      	adds	r5, #1
 800278a:	68e3      	ldr	r3, [r4, #12]
 800278c:	9903      	ldr	r1, [sp, #12]
 800278e:	1a5b      	subs	r3, r3, r1
 8002790:	42ab      	cmp	r3, r5
 8002792:	dcf2      	bgt.n	800277a <_printf_i+0x212>
 8002794:	e7eb      	b.n	800276e <_printf_i+0x206>
 8002796:	2500      	movs	r5, #0
 8002798:	f104 0619 	add.w	r6, r4, #25
 800279c:	e7f5      	b.n	800278a <_printf_i+0x222>
 800279e:	bf00      	nop
 80027a0:	08002b21 	.word	0x08002b21
 80027a4:	08002b32 	.word	0x08002b32

080027a8 <__sflush_r>:
 80027a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80027ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027b0:	0716      	lsls	r6, r2, #28
 80027b2:	4605      	mov	r5, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	d454      	bmi.n	8002862 <__sflush_r+0xba>
 80027b8:	684b      	ldr	r3, [r1, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	dc02      	bgt.n	80027c4 <__sflush_r+0x1c>
 80027be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	dd48      	ble.n	8002856 <__sflush_r+0xae>
 80027c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80027c6:	2e00      	cmp	r6, #0
 80027c8:	d045      	beq.n	8002856 <__sflush_r+0xae>
 80027ca:	2300      	movs	r3, #0
 80027cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80027d0:	682f      	ldr	r7, [r5, #0]
 80027d2:	6a21      	ldr	r1, [r4, #32]
 80027d4:	602b      	str	r3, [r5, #0]
 80027d6:	d030      	beq.n	800283a <__sflush_r+0x92>
 80027d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80027da:	89a3      	ldrh	r3, [r4, #12]
 80027dc:	0759      	lsls	r1, r3, #29
 80027de:	d505      	bpl.n	80027ec <__sflush_r+0x44>
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	1ad2      	subs	r2, r2, r3
 80027e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80027e6:	b10b      	cbz	r3, 80027ec <__sflush_r+0x44>
 80027e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027ea:	1ad2      	subs	r2, r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80027f0:	6a21      	ldr	r1, [r4, #32]
 80027f2:	4628      	mov	r0, r5
 80027f4:	47b0      	blx	r6
 80027f6:	1c43      	adds	r3, r0, #1
 80027f8:	89a3      	ldrh	r3, [r4, #12]
 80027fa:	d106      	bne.n	800280a <__sflush_r+0x62>
 80027fc:	6829      	ldr	r1, [r5, #0]
 80027fe:	291d      	cmp	r1, #29
 8002800:	d82b      	bhi.n	800285a <__sflush_r+0xb2>
 8002802:	4a2a      	ldr	r2, [pc, #168]	@ (80028ac <__sflush_r+0x104>)
 8002804:	410a      	asrs	r2, r1
 8002806:	07d6      	lsls	r6, r2, #31
 8002808:	d427      	bmi.n	800285a <__sflush_r+0xb2>
 800280a:	2200      	movs	r2, #0
 800280c:	6062      	str	r2, [r4, #4]
 800280e:	04d9      	lsls	r1, r3, #19
 8002810:	6922      	ldr	r2, [r4, #16]
 8002812:	6022      	str	r2, [r4, #0]
 8002814:	d504      	bpl.n	8002820 <__sflush_r+0x78>
 8002816:	1c42      	adds	r2, r0, #1
 8002818:	d101      	bne.n	800281e <__sflush_r+0x76>
 800281a:	682b      	ldr	r3, [r5, #0]
 800281c:	b903      	cbnz	r3, 8002820 <__sflush_r+0x78>
 800281e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002822:	602f      	str	r7, [r5, #0]
 8002824:	b1b9      	cbz	r1, 8002856 <__sflush_r+0xae>
 8002826:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800282a:	4299      	cmp	r1, r3
 800282c:	d002      	beq.n	8002834 <__sflush_r+0x8c>
 800282e:	4628      	mov	r0, r5
 8002830:	f7ff fbf2 	bl	8002018 <_free_r>
 8002834:	2300      	movs	r3, #0
 8002836:	6363      	str	r3, [r4, #52]	@ 0x34
 8002838:	e00d      	b.n	8002856 <__sflush_r+0xae>
 800283a:	2301      	movs	r3, #1
 800283c:	4628      	mov	r0, r5
 800283e:	47b0      	blx	r6
 8002840:	4602      	mov	r2, r0
 8002842:	1c50      	adds	r0, r2, #1
 8002844:	d1c9      	bne.n	80027da <__sflush_r+0x32>
 8002846:	682b      	ldr	r3, [r5, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0c6      	beq.n	80027da <__sflush_r+0x32>
 800284c:	2b1d      	cmp	r3, #29
 800284e:	d001      	beq.n	8002854 <__sflush_r+0xac>
 8002850:	2b16      	cmp	r3, #22
 8002852:	d11e      	bne.n	8002892 <__sflush_r+0xea>
 8002854:	602f      	str	r7, [r5, #0]
 8002856:	2000      	movs	r0, #0
 8002858:	e022      	b.n	80028a0 <__sflush_r+0xf8>
 800285a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800285e:	b21b      	sxth	r3, r3
 8002860:	e01b      	b.n	800289a <__sflush_r+0xf2>
 8002862:	690f      	ldr	r7, [r1, #16]
 8002864:	2f00      	cmp	r7, #0
 8002866:	d0f6      	beq.n	8002856 <__sflush_r+0xae>
 8002868:	0793      	lsls	r3, r2, #30
 800286a:	680e      	ldr	r6, [r1, #0]
 800286c:	bf08      	it	eq
 800286e:	694b      	ldreq	r3, [r1, #20]
 8002870:	600f      	str	r7, [r1, #0]
 8002872:	bf18      	it	ne
 8002874:	2300      	movne	r3, #0
 8002876:	eba6 0807 	sub.w	r8, r6, r7
 800287a:	608b      	str	r3, [r1, #8]
 800287c:	f1b8 0f00 	cmp.w	r8, #0
 8002880:	dde9      	ble.n	8002856 <__sflush_r+0xae>
 8002882:	6a21      	ldr	r1, [r4, #32]
 8002884:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002886:	4643      	mov	r3, r8
 8002888:	463a      	mov	r2, r7
 800288a:	4628      	mov	r0, r5
 800288c:	47b0      	blx	r6
 800288e:	2800      	cmp	r0, #0
 8002890:	dc08      	bgt.n	80028a4 <__sflush_r+0xfc>
 8002892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800289a:	81a3      	strh	r3, [r4, #12]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028a4:	4407      	add	r7, r0
 80028a6:	eba8 0800 	sub.w	r8, r8, r0
 80028aa:	e7e7      	b.n	800287c <__sflush_r+0xd4>
 80028ac:	dfbffffe 	.word	0xdfbffffe

080028b0 <_fflush_r>:
 80028b0:	b538      	push	{r3, r4, r5, lr}
 80028b2:	690b      	ldr	r3, [r1, #16]
 80028b4:	4605      	mov	r5, r0
 80028b6:	460c      	mov	r4, r1
 80028b8:	b913      	cbnz	r3, 80028c0 <_fflush_r+0x10>
 80028ba:	2500      	movs	r5, #0
 80028bc:	4628      	mov	r0, r5
 80028be:	bd38      	pop	{r3, r4, r5, pc}
 80028c0:	b118      	cbz	r0, 80028ca <_fflush_r+0x1a>
 80028c2:	6a03      	ldr	r3, [r0, #32]
 80028c4:	b90b      	cbnz	r3, 80028ca <_fflush_r+0x1a>
 80028c6:	f7ff f9a5 	bl	8001c14 <__sinit>
 80028ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f3      	beq.n	80028ba <_fflush_r+0xa>
 80028d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80028d4:	07d0      	lsls	r0, r2, #31
 80028d6:	d404      	bmi.n	80028e2 <_fflush_r+0x32>
 80028d8:	0599      	lsls	r1, r3, #22
 80028da:	d402      	bmi.n	80028e2 <_fflush_r+0x32>
 80028dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028de:	f7ff fb98 	bl	8002012 <__retarget_lock_acquire_recursive>
 80028e2:	4628      	mov	r0, r5
 80028e4:	4621      	mov	r1, r4
 80028e6:	f7ff ff5f 	bl	80027a8 <__sflush_r>
 80028ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028ec:	07da      	lsls	r2, r3, #31
 80028ee:	4605      	mov	r5, r0
 80028f0:	d4e4      	bmi.n	80028bc <_fflush_r+0xc>
 80028f2:	89a3      	ldrh	r3, [r4, #12]
 80028f4:	059b      	lsls	r3, r3, #22
 80028f6:	d4e1      	bmi.n	80028bc <_fflush_r+0xc>
 80028f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028fa:	f7ff fb8b 	bl	8002014 <__retarget_lock_release_recursive>
 80028fe:	e7dd      	b.n	80028bc <_fflush_r+0xc>

08002900 <__swhatbuf_r>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	460c      	mov	r4, r1
 8002904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002908:	2900      	cmp	r1, #0
 800290a:	b096      	sub	sp, #88	@ 0x58
 800290c:	4615      	mov	r5, r2
 800290e:	461e      	mov	r6, r3
 8002910:	da0d      	bge.n	800292e <__swhatbuf_r+0x2e>
 8002912:	89a3      	ldrh	r3, [r4, #12]
 8002914:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	bf14      	ite	ne
 800291e:	2340      	movne	r3, #64	@ 0x40
 8002920:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002924:	2000      	movs	r0, #0
 8002926:	6031      	str	r1, [r6, #0]
 8002928:	602b      	str	r3, [r5, #0]
 800292a:	b016      	add	sp, #88	@ 0x58
 800292c:	bd70      	pop	{r4, r5, r6, pc}
 800292e:	466a      	mov	r2, sp
 8002930:	f000 f87c 	bl	8002a2c <_fstat_r>
 8002934:	2800      	cmp	r0, #0
 8002936:	dbec      	blt.n	8002912 <__swhatbuf_r+0x12>
 8002938:	9901      	ldr	r1, [sp, #4]
 800293a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800293e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002942:	4259      	negs	r1, r3
 8002944:	4159      	adcs	r1, r3
 8002946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800294a:	e7eb      	b.n	8002924 <__swhatbuf_r+0x24>

0800294c <__smakebuf_r>:
 800294c:	898b      	ldrh	r3, [r1, #12]
 800294e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002950:	079d      	lsls	r5, r3, #30
 8002952:	4606      	mov	r6, r0
 8002954:	460c      	mov	r4, r1
 8002956:	d507      	bpl.n	8002968 <__smakebuf_r+0x1c>
 8002958:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800295c:	6023      	str	r3, [r4, #0]
 800295e:	6123      	str	r3, [r4, #16]
 8002960:	2301      	movs	r3, #1
 8002962:	6163      	str	r3, [r4, #20]
 8002964:	b003      	add	sp, #12
 8002966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002968:	ab01      	add	r3, sp, #4
 800296a:	466a      	mov	r2, sp
 800296c:	f7ff ffc8 	bl	8002900 <__swhatbuf_r>
 8002970:	9f00      	ldr	r7, [sp, #0]
 8002972:	4605      	mov	r5, r0
 8002974:	4639      	mov	r1, r7
 8002976:	4630      	mov	r0, r6
 8002978:	f7ff fbba 	bl	80020f0 <_malloc_r>
 800297c:	b948      	cbnz	r0, 8002992 <__smakebuf_r+0x46>
 800297e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002982:	059a      	lsls	r2, r3, #22
 8002984:	d4ee      	bmi.n	8002964 <__smakebuf_r+0x18>
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	f043 0302 	orr.w	r3, r3, #2
 800298e:	81a3      	strh	r3, [r4, #12]
 8002990:	e7e2      	b.n	8002958 <__smakebuf_r+0xc>
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	6020      	str	r0, [r4, #0]
 8002996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800299a:	81a3      	strh	r3, [r4, #12]
 800299c:	9b01      	ldr	r3, [sp, #4]
 800299e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80029a2:	b15b      	cbz	r3, 80029bc <__smakebuf_r+0x70>
 80029a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029a8:	4630      	mov	r0, r6
 80029aa:	f000 f851 	bl	8002a50 <_isatty_r>
 80029ae:	b128      	cbz	r0, 80029bc <__smakebuf_r+0x70>
 80029b0:	89a3      	ldrh	r3, [r4, #12]
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	81a3      	strh	r3, [r4, #12]
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	431d      	orrs	r5, r3
 80029c0:	81a5      	strh	r5, [r4, #12]
 80029c2:	e7cf      	b.n	8002964 <__smakebuf_r+0x18>

080029c4 <_putc_r>:
 80029c4:	b570      	push	{r4, r5, r6, lr}
 80029c6:	460d      	mov	r5, r1
 80029c8:	4614      	mov	r4, r2
 80029ca:	4606      	mov	r6, r0
 80029cc:	b118      	cbz	r0, 80029d6 <_putc_r+0x12>
 80029ce:	6a03      	ldr	r3, [r0, #32]
 80029d0:	b90b      	cbnz	r3, 80029d6 <_putc_r+0x12>
 80029d2:	f7ff f91f 	bl	8001c14 <__sinit>
 80029d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80029d8:	07d8      	lsls	r0, r3, #31
 80029da:	d405      	bmi.n	80029e8 <_putc_r+0x24>
 80029dc:	89a3      	ldrh	r3, [r4, #12]
 80029de:	0599      	lsls	r1, r3, #22
 80029e0:	d402      	bmi.n	80029e8 <_putc_r+0x24>
 80029e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029e4:	f7ff fb15 	bl	8002012 <__retarget_lock_acquire_recursive>
 80029e8:	68a3      	ldr	r3, [r4, #8]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	60a3      	str	r3, [r4, #8]
 80029f0:	da05      	bge.n	80029fe <_putc_r+0x3a>
 80029f2:	69a2      	ldr	r2, [r4, #24]
 80029f4:	4293      	cmp	r3, r2
 80029f6:	db12      	blt.n	8002a1e <_putc_r+0x5a>
 80029f8:	b2eb      	uxtb	r3, r5
 80029fa:	2b0a      	cmp	r3, #10
 80029fc:	d00f      	beq.n	8002a1e <_putc_r+0x5a>
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	6022      	str	r2, [r4, #0]
 8002a04:	701d      	strb	r5, [r3, #0]
 8002a06:	b2ed      	uxtb	r5, r5
 8002a08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a0a:	07da      	lsls	r2, r3, #31
 8002a0c:	d405      	bmi.n	8002a1a <_putc_r+0x56>
 8002a0e:	89a3      	ldrh	r3, [r4, #12]
 8002a10:	059b      	lsls	r3, r3, #22
 8002a12:	d402      	bmi.n	8002a1a <_putc_r+0x56>
 8002a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a16:	f7ff fafd 	bl	8002014 <__retarget_lock_release_recursive>
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	bd70      	pop	{r4, r5, r6, pc}
 8002a1e:	4629      	mov	r1, r5
 8002a20:	4622      	mov	r2, r4
 8002a22:	4630      	mov	r0, r6
 8002a24:	f7ff f9e7 	bl	8001df6 <__swbuf_r>
 8002a28:	4605      	mov	r5, r0
 8002a2a:	e7ed      	b.n	8002a08 <_putc_r+0x44>

08002a2c <_fstat_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4d07      	ldr	r5, [pc, #28]	@ (8002a4c <_fstat_r+0x20>)
 8002a30:	2300      	movs	r3, #0
 8002a32:	4604      	mov	r4, r0
 8002a34:	4608      	mov	r0, r1
 8002a36:	4611      	mov	r1, r2
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	f7fd ff84 	bl	8000946 <_fstat>
 8002a3e:	1c43      	adds	r3, r0, #1
 8002a40:	d102      	bne.n	8002a48 <_fstat_r+0x1c>
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	b103      	cbz	r3, 8002a48 <_fstat_r+0x1c>
 8002a46:	6023      	str	r3, [r4, #0]
 8002a48:	bd38      	pop	{r3, r4, r5, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000264 	.word	0x20000264

08002a50 <_isatty_r>:
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4d06      	ldr	r5, [pc, #24]	@ (8002a6c <_isatty_r+0x1c>)
 8002a54:	2300      	movs	r3, #0
 8002a56:	4604      	mov	r4, r0
 8002a58:	4608      	mov	r0, r1
 8002a5a:	602b      	str	r3, [r5, #0]
 8002a5c:	f7fd ff78 	bl	8000950 <_isatty>
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	d102      	bne.n	8002a6a <_isatty_r+0x1a>
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	b103      	cbz	r3, 8002a6a <_isatty_r+0x1a>
 8002a68:	6023      	str	r3, [r4, #0]
 8002a6a:	bd38      	pop	{r3, r4, r5, pc}
 8002a6c:	20000264 	.word	0x20000264

08002a70 <_sbrk_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	4d06      	ldr	r5, [pc, #24]	@ (8002a8c <_sbrk_r+0x1c>)
 8002a74:	2300      	movs	r3, #0
 8002a76:	4604      	mov	r4, r0
 8002a78:	4608      	mov	r0, r1
 8002a7a:	602b      	str	r3, [r5, #0]
 8002a7c:	f7fd ff6c 	bl	8000958 <_sbrk>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d102      	bne.n	8002a8a <_sbrk_r+0x1a>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	b103      	cbz	r3, 8002a8a <_sbrk_r+0x1a>
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	20000264 	.word	0x20000264

08002a90 <_init>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	bf00      	nop
 8002a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	469e      	mov	lr, r3
 8002a9a:	4770      	bx	lr

08002a9c <_fini>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr
