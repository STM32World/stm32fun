
stm32world_bitband.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002358  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080024e8  080024e8  000034e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002570  08002570  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002570  08002570  00003570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002578  08002578  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002578  08002578  00003578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800257c  0800257c  0000357c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002580  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          000001b8  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000918d  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001728  00000000  00000000  0000d225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00003ab0  00000000  00000000  0000e94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006c0  00000000  00000000  00012400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000050e  00000000  00000000  00012ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001efd0  00000000  00000000  00012fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a73c  00000000  00000000  00031f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b9839  00000000  00000000  0003c6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000f5f13  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000017fc  00000000  00000000  000f5f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  000f7754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080024d0 	.word	0x080024d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080024d0 	.word	0x080024d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	2400      	movs	r4, #0
 8000566:	9405      	str	r4, [sp, #20]
 8000568:	9406      	str	r4, [sp, #24]
 800056a:	9407      	str	r4, [sp, #28]
 800056c:	9408      	str	r4, [sp, #32]
 800056e:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	9401      	str	r4, [sp, #4]
 8000572:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <MX_GPIO_Init+0x8c>)
 8000574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000576:	f042 0204 	orr.w	r2, r2, #4
 800057a:	631a      	str	r2, [r3, #48]	@ 0x30
 800057c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800057e:	f002 0204 	and.w	r2, r2, #4
 8000582:	9201      	str	r2, [sp, #4]
 8000584:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	9402      	str	r4, [sp, #8]
 8000588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800058e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000592:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000596:	9202      	str	r2, [sp, #8]
 8000598:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	9403      	str	r4, [sp, #12]
 800059c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059e:	f042 0201 	orr.w	r2, r2, #1
 80005a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a6:	f002 0201 	and.w	r2, r2, #1
 80005aa:	9203      	str	r2, [sp, #12]
 80005ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	9404      	str	r4, [sp, #16]
 80005b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b2:	f042 0202 	orr.w	r2, r2, #2
 80005b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	9304      	str	r3, [sp, #16]
 80005c0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005c2:	4d0b      	ldr	r5, [pc, #44]	@ (80005f0 <MX_GPIO_Init+0x90>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ca:	4628      	mov	r0, r5
 80005cc:	f000 fb80 	bl	8000cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005de:	a905      	add	r1, sp, #20
 80005e0:	4628      	mov	r0, r5
 80005e2:	f000 fa7f 	bl	8000ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e6:	b00b      	add	sp, #44	@ 0x2c
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020800 	.word	0x40020800

080005f4 <_write>:
    if (fd == 1 || fd == 2) {
 80005f4:	3801      	subs	r0, #1
 80005f6:	2801      	cmp	r0, #1
 80005f8:	d80a      	bhi.n	8000610 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 80005fa:	b510      	push	{r4, lr}
 80005fc:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000602:	b292      	uxth	r2, r2
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <_write+0x28>)
 8000606:	f000 ffcc 	bl	80015a2 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800060a:	b920      	cbnz	r0, 8000616 <_write+0x22>
            return len;
 800060c:	4620      	mov	r0, r4
}
 800060e:	bd10      	pop	{r4, pc}
    return -1;
 8000610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000614:	4770      	bx	lr
            return -1;
 8000616:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800061a:	e7f8      	b.n	800060e <_write+0x1a>
 800061c:	20000084 	.word	0x20000084

08000620 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000622:	e7fe      	b.n	8000622 <Error_Handler+0x2>

08000624 <MX_USART1_UART_Init>:
{
 8000624:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000626:	480a      	ldr	r0, [pc, #40]	@ (8000650 <MX_USART1_UART_Init+0x2c>)
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <MX_USART1_UART_Init+0x30>)
 800062a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800062c:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000630:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	2300      	movs	r3, #0
 8000634:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000636:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000638:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800063a:	220c      	movs	r2, #12
 800063c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000642:	f000 ff7e 	bl	8001542 <HAL_UART_Init>
 8000646:	b900      	cbnz	r0, 800064a <MX_USART1_UART_Init+0x26>
}
 8000648:	bd08      	pop	{r3, pc}
    Error_Handler();
 800064a:	f7ff ffe9 	bl	8000620 <Error_Handler>
 800064e:	bf00      	nop
 8000650:	20000084 	.word	0x20000084
 8000654:	40011000 	.word	0x40011000

08000658 <SystemClock_Config>:
{
 8000658:	b500      	push	{lr}
 800065a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065c:	2230      	movs	r2, #48	@ 0x30
 800065e:	2100      	movs	r1, #0
 8000660:	a808      	add	r0, sp, #32
 8000662:	f001 f91c 	bl	800189e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	2300      	movs	r3, #0
 8000668:	9303      	str	r3, [sp, #12]
 800066a:	9304      	str	r3, [sp, #16]
 800066c:	9305      	str	r3, [sp, #20]
 800066e:	9306      	str	r3, [sp, #24]
 8000670:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	4a20      	ldr	r2, [pc, #128]	@ (80006f8 <SystemClock_Config+0xa0>)
 8000676:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000678:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800067c:	6411      	str	r1, [r2, #64]	@ 0x40
 800067e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000680:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000684:	9201      	str	r2, [sp, #4]
 8000686:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <SystemClock_Config+0xa4>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800069a:	9302      	str	r3, [sp, #8]
 800069c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069e:	2301      	movs	r3, #1
 80006a0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006b0:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b2:	2208      	movs	r2, #8
 80006b4:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b6:	22a8      	movs	r2, #168	@ 0xa8
 80006b8:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ba:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	a808      	add	r0, sp, #32
 80006c2:	f000 fb0b 	bl	8000cdc <HAL_RCC_OscConfig>
 80006c6:	b998      	cbnz	r0, 80006f0 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006de:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e0:	2105      	movs	r1, #5
 80006e2:	a803      	add	r0, sp, #12
 80006e4:	f000 fd5e 	bl	80011a4 <HAL_RCC_ClockConfig>
 80006e8:	b920      	cbnz	r0, 80006f4 <SystemClock_Config+0x9c>
}
 80006ea:	b015      	add	sp, #84	@ 0x54
 80006ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006f0:	f7ff ff96 	bl	8000620 <Error_Handler>
    Error_Handler();
 80006f4:	f7ff ff94 	bl	8000620 <Error_Handler>
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <main>:
{
 8000700:	b530      	push	{r4, r5, lr}
 8000702:	b087      	sub	sp, #28
  HAL_Init();
 8000704:	f000 f958 	bl	80009b8 <HAL_Init>
  SystemClock_Config();
 8000708:	f7ff ffa6 	bl	8000658 <SystemClock_Config>
  MX_GPIO_Init();
 800070c:	f7ff ff28 	bl	8000560 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000710:	f7ff ff88 	bl	8000624 <MX_USART1_UART_Init>
  const uint8_t v_values[] = {
 8000714:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <main+0xa8>)
 8000716:	e893 0003 	ldmia.w	r3, {r0, r1}
 800071a:	ab06      	add	r3, sp, #24
 800071c:	e903 0003 	stmdb	r3, {r0, r1}
  uint8_t v = 0;
 8000720:	2500      	movs	r5, #0
 8000722:	f88d 500f 	strb.w	r5, [sp, #15]
  uint32_t now = 0, next_tick = 1000;
 8000726:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800072a:	e001      	b.n	8000730 <main+0x30>
            next_tick = now + 1000;
 800072c:	f504 727a 	add.w	r2, r4, #1000	@ 0x3e8
        now = uwTick;
 8000730:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <main+0xac>)
 8000732:	681c      	ldr	r4, [r3, #0]
        if (now >= next_tick) {
 8000734:	42a2      	cmp	r2, r4
 8000736:	d8fb      	bhi.n	8000730 <main+0x30>
            *((uint8_t *)BITBAND_SRAM(&v, 7)) = (v_values[v_counter] & 0b10000000) >> 7;
 8000738:	f105 0318 	add.w	r3, r5, #24
 800073c:	446b      	add	r3, sp
 800073e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000742:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <main+0xb0>)
 8000744:	446a      	add	r2, sp
 8000746:	0152      	lsls	r2, r2, #5
 8000748:	09d9      	lsrs	r1, r3, #7
 800074a:	7711      	strb	r1, [r2, #28]
            *((uint8_t *)BITBAND_SRAM(&v, 6)) = (v_values[v_counter] & 0b01000000) >> 6;
 800074c:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8000750:	7611      	strb	r1, [r2, #24]
            *((uint8_t *)BITBAND_SRAM(&v, 5)) = (v_values[v_counter] & 0b00100000) >> 5;
 8000752:	f3c3 1140 	ubfx	r1, r3, #5, #1
 8000756:	7511      	strb	r1, [r2, #20]
            *((uint8_t *)BITBAND_SRAM(&v, 4)) = (v_values[v_counter] & 0b00010000) >> 4;
 8000758:	f3c3 1100 	ubfx	r1, r3, #4, #1
 800075c:	7411      	strb	r1, [r2, #16]
            *((uint8_t *)BITBAND_SRAM(&v, 3)) = (v_values[v_counter] & 0b00001000) >> 3;
 800075e:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 8000762:	7311      	strb	r1, [r2, #12]
            *((uint8_t *)BITBAND_SRAM(&v, 2)) = (v_values[v_counter] & 0b00000100) >> 2;
 8000764:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8000768:	7211      	strb	r1, [r2, #8]
            *((uint8_t *)BITBAND_SRAM(&v, 1)) = (v_values[v_counter] & 0b00000010) >> 1;
 800076a:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800076e:	7111      	strb	r1, [r2, #4]
            *((uint8_t *)BITBAND_SRAM(&v, 0)) = (v_values[v_counter] & 0b00000001);
 8000770:	f003 0101 	and.w	r1, r3, #1
 8000774:	7011      	strb	r1, [r2, #0]
            printf("Tick %lu count = %d bits = 0x%02x v = 0x%02x\n", now / 1000, v_counter, v_values[v_counter], v);
 8000776:	490f      	ldr	r1, [pc, #60]	@ (80007b4 <main+0xb4>)
 8000778:	fba1 2104 	umull	r2, r1, r1, r4
 800077c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000780:	9200      	str	r2, [sp, #0]
 8000782:	462a      	mov	r2, r5
 8000784:	0989      	lsrs	r1, r1, #6
 8000786:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <main+0xb8>)
 8000788:	f001 f834 	bl	80017f4 <iprintf>
            *led_pin = !*led_pin;
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <main+0xbc>)
 800078e:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 8000792:	fab3 f383 	clz	r3, r3
 8000796:	095b      	lsrs	r3, r3, #5
 8000798:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
            ++v_counter;
 800079c:	3501      	adds	r5, #1
 800079e:	b2ed      	uxtb	r5, r5
            if (v_counter >= sizeof(v_values) / sizeof(v_values[0])) v_counter = 0;
 80007a0:	2d07      	cmp	r5, #7
 80007a2:	d9c3      	bls.n	800072c <main+0x2c>
 80007a4:	2500      	movs	r5, #0
 80007a6:	e7c1      	b.n	800072c <main+0x2c>
 80007a8:	08002518 	.word	0x08002518
 80007ac:	200000d0 	.word	0x200000d0
 80007b0:	e110000f 	.word	0xe110000f
 80007b4:	10624dd3 	.word	0x10624dd3
 80007b8:	080024e8 	.word	0x080024e8
 80007bc:	42410200 	.word	0x42410200

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2100      	movs	r1, #0
 80007c4:	9100      	str	r1, [sp, #0]
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <HAL_MspInit+0x34>)
 80007c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80007d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007d2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80007d6:	9200      	str	r2, [sp, #0]
 80007d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	9101      	str	r1, [sp, #4]
 80007dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80007e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	b002      	add	sp, #8
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b500      	push	{lr}
 80007fa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	2300      	movs	r3, #0
 80007fe:	9303      	str	r3, [sp, #12]
 8000800:	9304      	str	r3, [sp, #16]
 8000802:	9305      	str	r3, [sp, #20]
 8000804:	9306      	str	r3, [sp, #24]
 8000806:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000808:	6802      	ldr	r2, [r0, #0]
 800080a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800080e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000812:	429a      	cmp	r2, r3
 8000814:	d002      	beq.n	800081c <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000816:	b009      	add	sp, #36	@ 0x24
 8000818:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800081c:	2100      	movs	r1, #0
 800081e:	9101      	str	r1, [sp, #4]
 8000820:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000826:	f042 0210 	orr.w	r2, r2, #16
 800082a:	645a      	str	r2, [r3, #68]	@ 0x44
 800082c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800082e:	f002 0210 	and.w	r2, r2, #16
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	9102      	str	r1, [sp, #8]
 8000838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800083a:	f042 0201 	orr.w	r2, r2, #1
 800083e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800084a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800084e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000858:	2307      	movs	r3, #7
 800085a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	a903      	add	r1, sp, #12
 800085e:	4802      	ldr	r0, [pc, #8]	@ (8000868 <HAL_UART_MspInit+0x70>)
 8000860:	f000 f940 	bl	8000ae4 <HAL_GPIO_Init>
}
 8000864:	e7d7      	b.n	8000816 <HAL_UART_MspInit+0x1e>
 8000866:	bf00      	nop
 8000868:	40020000 	.word	0x40020000

0800086c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler>

0800086e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler>

08000870 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler>

08000872 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler>

08000874 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler>

08000876 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	4770      	bx	lr

08000878 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087e:	f000 f8b5 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000882:	bd08      	pop	{r3, pc}

08000884 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	460c      	mov	r4, r1
 8000888:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2500      	movs	r5, #0
 800088c:	e006      	b.n	800089c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800088e:	f3af 8000 	nop.w
 8000892:	4621      	mov	r1, r4
 8000894:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000898:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800089a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089c:	42b5      	cmp	r5, r6
 800089e:	dbf6      	blt.n	800088e <_read+0xa>
  }

  return len;
}
 80008a0:	4630      	mov	r0, r6
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008a8:	4770      	bx	lr

080008aa <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80008aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ae:	604b      	str	r3, [r1, #4]
  return 0;
}
 80008b0:	2000      	movs	r0, #0
 80008b2:	4770      	bx	lr

080008b4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80008b4:	2001      	movs	r0, #1
 80008b6:	4770      	bx	lr

080008b8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80008b8:	2000      	movs	r0, #0
 80008ba:	4770      	bx	lr

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b510      	push	{r4, lr}
 80008be:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c0:	4a0c      	ldr	r2, [pc, #48]	@ (80008f4 <_sbrk+0x38>)
 80008c2:	490d      	ldr	r1, [pc, #52]	@ (80008f8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c4:	480d      	ldr	r0, [pc, #52]	@ (80008fc <_sbrk+0x40>)
 80008c6:	6800      	ldr	r0, [r0, #0]
 80008c8:	b140      	cbz	r0, 80008dc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ca:	480c      	ldr	r0, [pc, #48]	@ (80008fc <_sbrk+0x40>)
 80008cc:	6800      	ldr	r0, [r0, #0]
 80008ce:	4403      	add	r3, r0
 80008d0:	1a52      	subs	r2, r2, r1
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d806      	bhi.n	80008e4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80008d6:	4a09      	ldr	r2, [pc, #36]	@ (80008fc <_sbrk+0x40>)
 80008d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80008da:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80008dc:	4807      	ldr	r0, [pc, #28]	@ (80008fc <_sbrk+0x40>)
 80008de:	4c08      	ldr	r4, [pc, #32]	@ (8000900 <_sbrk+0x44>)
 80008e0:	6004      	str	r4, [r0, #0]
 80008e2:	e7f2      	b.n	80008ca <_sbrk+0xe>
    errno = ENOMEM;
 80008e4:	f001 f82a 	bl	800193c <__errno>
 80008e8:	230c      	movs	r3, #12
 80008ea:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008f0:	e7f3      	b.n	80008da <_sbrk+0x1e>
 80008f2:	bf00      	nop
 80008f4:	20020000 	.word	0x20020000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	200000cc 	.word	0x200000cc
 8000900:	20000220 	.word	0x20000220

08000904 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4a03      	ldr	r2, [pc, #12]	@ (8000914 <SystemInit+0x10>)
 8000906:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800090a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800090e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000950 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800091c:	f7ff fff2 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000922:	490d      	ldr	r1, [pc, #52]	@ (8000958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000924:	4a0d      	ldr	r2, [pc, #52]	@ (800095c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000938:	4c0a      	ldr	r4, [pc, #40]	@ (8000964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000946:	f000 ffff 	bl	8001948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff fed9 	bl	8000700 <main>
  bx  lr    
 800094e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800095c:	08002580 	.word	0x08002580
  ldr r2, =_sbss
 8000960:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000964:	20000220 	.word	0x20000220

08000968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b510      	push	{r4, lr}
 800096e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <HAL_InitTick+0x40>)
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000978:	fbb3 f3f2 	udiv	r3, r3, r2
 800097c:	4a0c      	ldr	r2, [pc, #48]	@ (80009b0 <HAL_InitTick+0x44>)
 800097e:	6810      	ldr	r0, [r2, #0]
 8000980:	fbb0 f0f3 	udiv	r0, r0, r3
 8000984:	f000 f89a 	bl	8000abc <HAL_SYSTICK_Config>
 8000988:	b968      	cbnz	r0, 80009a6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	2c0f      	cmp	r4, #15
 800098c:	d901      	bls.n	8000992 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800098e:	2001      	movs	r0, #1
 8000990:	e00a      	b.n	80009a8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000992:	2200      	movs	r2, #0
 8000994:	4621      	mov	r1, r4
 8000996:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099a:	f000 f87f 	bl	8000a9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099e:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <HAL_InitTick+0x48>)
 80009a0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2000      	movs	r0, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80009a6:	2001      	movs	r0, #1
}
 80009a8:	bd10      	pop	{r4, pc}
 80009aa:	bf00      	nop
 80009ac:	20000004 	.word	0x20000004
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000008 	.word	0x20000008

080009b8 <HAL_Init>:
{
 80009b8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <HAL_Init+0x30>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80009ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80009d2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f84f 	bl	8000a78 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	200f      	movs	r0, #15
 80009dc:	f7ff ffc6 	bl	800096c <HAL_InitTick>
  HAL_MspInit();
 80009e0:	f7ff feee 	bl	80007c0 <HAL_MspInit>
}
 80009e4:	2000      	movs	r0, #0
 80009e6:	bd08      	pop	{r3, pc}
 80009e8:	40023c00 	.word	0x40023c00

080009ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009ec:	4a03      	ldr	r2, [pc, #12]	@ (80009fc <HAL_IncTick+0x10>)
 80009ee:	6811      	ldr	r1, [r2, #0]
 80009f0:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <HAL_IncTick+0x14>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	440b      	add	r3, r1
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200000d0 	.word	0x200000d0
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a04:	4b01      	ldr	r3, [pc, #4]	@ (8000a0c <HAL_GetTick+0x8>)
 8000a06:	6818      	ldr	r0, [r3, #0]
}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	200000d0 	.word	0x200000d0

08000a10 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a10:	2800      	cmp	r0, #0
 8000a12:	db08      	blt.n	8000a26 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	0109      	lsls	r1, r1, #4
 8000a16:	b2c9      	uxtb	r1, r1
 8000a18:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000a1c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000a20:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000a24:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	f000 000f 	and.w	r0, r0, #15
 8000a2a:	0109      	lsls	r1, r1, #4
 8000a2c:	b2c9      	uxtb	r1, r1
 8000a2e:	4b01      	ldr	r3, [pc, #4]	@ (8000a34 <__NVIC_SetPriority+0x24>)
 8000a30:	5419      	strb	r1, [r3, r0]
  }
}
 8000a32:	4770      	bx	lr
 8000a34:	e000ed14 	.word	0xe000ed14

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a3e:	f1c0 0c07 	rsb	ip, r0, #7
 8000a42:	f1bc 0f04 	cmp.w	ip, #4
 8000a46:	bf28      	it	cs
 8000a48:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4c:	1d03      	adds	r3, r0, #4
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d90f      	bls.n	8000a72 <NVIC_EncodePriority+0x3a>
 8000a52:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000a58:	fa0e f00c 	lsl.w	r0, lr, ip
 8000a5c:	ea21 0100 	bic.w	r1, r1, r0
 8000a60:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a62:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a66:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000a6a:	ea41 0002 	orr.w	r0, r1, r2
 8000a6e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	2300      	movs	r3, #0
 8000a74:	e7ee      	b.n	8000a54 <NVIC_EncodePriority+0x1c>
	...

08000a78 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a7a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a80:	041b      	lsls	r3, r3, #16
 8000a82:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	0200      	lsls	r0, r0, #8
 8000a86:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a94:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <HAL_NVIC_SetPriority+0x1c>)
 8000aa2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000aa8:	f7ff ffc6 	bl	8000a38 <NVIC_EncodePriority>
 8000aac:	4601      	mov	r1, r0
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f7ff ffae 	bl	8000a10 <__NVIC_SetPriority>
}
 8000ab4:	bd10      	pop	{r4, pc}
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	3801      	subs	r0, #1
 8000abe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ac2:	d20b      	bcs.n	8000adc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000ac8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <HAL_SYSTICK_Config+0x24>)
 8000acc:	21f0      	movs	r1, #240	@ 0xf0
 8000ace:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	2207      	movs	r2, #7
 8000ad8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ada:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000adc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	2b0f      	cmp	r3, #15
 8000ae8:	f200 80e9 	bhi.w	8000cbe <HAL_GPIO_Init+0x1da>
{
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	e065      	b.n	8000bbe <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000af2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000af4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000af8:	2403      	movs	r4, #3
 8000afa:	fa04 f40e 	lsl.w	r4, r4, lr
 8000afe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b02:	68cc      	ldr	r4, [r1, #12]
 8000b04:	fa04 f40e 	lsl.w	r4, r4, lr
 8000b08:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000b0a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b0c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b0e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b12:	684a      	ldr	r2, [r1, #4]
 8000b14:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000b1c:	6042      	str	r2, [r0, #4]
 8000b1e:	e05c      	b.n	8000bda <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b20:	08dc      	lsrs	r4, r3, #3
 8000b22:	3408      	adds	r4, #8
 8000b24:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b28:	f003 0507 	and.w	r5, r3, #7
 8000b2c:	00ad      	lsls	r5, r5, #2
 8000b2e:	f04f 0e0f 	mov.w	lr, #15
 8000b32:	fa0e fe05 	lsl.w	lr, lr, r5
 8000b36:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b3a:	690a      	ldr	r2, [r1, #16]
 8000b3c:	40aa      	lsls	r2, r5
 8000b3e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000b42:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000b46:	e05c      	b.n	8000c02 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b48:	2207      	movs	r2, #7
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x6a>
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b52:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b54:	3402      	adds	r4, #2
 8000b56:	4d5a      	ldr	r5, [pc, #360]	@ (8000cc0 <HAL_GPIO_Init+0x1dc>)
 8000b58:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b5c:	4a59      	ldr	r2, [pc, #356]	@ (8000cc4 <HAL_GPIO_Init+0x1e0>)
 8000b5e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b60:	ea6f 020c 	mvn.w	r2, ip
 8000b64:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b68:	684e      	ldr	r6, [r1, #4]
 8000b6a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000b6e:	d001      	beq.n	8000b74 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000b70:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000b74:	4c53      	ldr	r4, [pc, #332]	@ (8000cc4 <HAL_GPIO_Init+0x1e0>)
 8000b76:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000b78:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b7a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b7e:	684e      	ldr	r6, [r1, #4]
 8000b80:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000b84:	d001      	beq.n	8000b8a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000b86:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000b8a:	4c4e      	ldr	r4, [pc, #312]	@ (8000cc4 <HAL_GPIO_Init+0x1e0>)
 8000b8c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000b8e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b90:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b94:	684e      	ldr	r6, [r1, #4]
 8000b96:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000b9a:	d001      	beq.n	8000ba0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000b9c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000ba0:	4c48      	ldr	r4, [pc, #288]	@ (8000cc4 <HAL_GPIO_Init+0x1e0>)
 8000ba2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ba4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ba6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ba8:	684d      	ldr	r5, [r1, #4]
 8000baa:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000bae:	d001      	beq.n	8000bb4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000bb0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000bb4:	4c43      	ldr	r4, [pc, #268]	@ (8000cc4 <HAL_GPIO_Init+0x1e0>)
 8000bb6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb8:	3301      	adds	r3, #1
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	d87d      	bhi.n	8000cba <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc2:	680c      	ldr	r4, [r1, #0]
 8000bc4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000bc8:	ea32 0404 	bics.w	r4, r2, r4
 8000bcc:	d1f4      	bne.n	8000bb8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bce:	684c      	ldr	r4, [r1, #4]
 8000bd0:	f004 0403 	and.w	r4, r4, #3
 8000bd4:	3c01      	subs	r4, #1
 8000bd6:	2c01      	cmp	r4, #1
 8000bd8:	d98b      	bls.n	8000af2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bda:	684a      	ldr	r2, [r1, #4]
 8000bdc:	f002 0203 	and.w	r2, r2, #3
 8000be0:	2a03      	cmp	r2, #3
 8000be2:	d009      	beq.n	8000bf8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000be4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000be6:	005d      	lsls	r5, r3, #1
 8000be8:	2203      	movs	r2, #3
 8000bea:	40aa      	lsls	r2, r5
 8000bec:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bf0:	688a      	ldr	r2, [r1, #8]
 8000bf2:	40aa      	lsls	r2, r5
 8000bf4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000bf6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf8:	684a      	ldr	r2, [r1, #4]
 8000bfa:	f002 0203 	and.w	r2, r2, #3
 8000bfe:	2a02      	cmp	r2, #2
 8000c00:	d08e      	beq.n	8000b20 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000c02:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c04:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c0e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c12:	684a      	ldr	r2, [r1, #4]
 8000c14:	f002 0203 	and.w	r2, r2, #3
 8000c18:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c1c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000c1e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c20:	684a      	ldr	r2, [r1, #4]
 8000c22:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000c26:	d0c7      	beq.n	8000bb8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	2200      	movs	r2, #0
 8000c2a:	9201      	str	r2, [sp, #4]
 8000c2c:	4a26      	ldr	r2, [pc, #152]	@ (8000cc8 <HAL_GPIO_Init+0x1e4>)
 8000c2e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000c30:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000c34:	6454      	str	r4, [r2, #68]	@ 0x44
 8000c36:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000c38:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000c3c:	9201      	str	r2, [sp, #4]
 8000c3e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c40:	089c      	lsrs	r4, r3, #2
 8000c42:	1ca5      	adds	r5, r4, #2
 8000c44:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc0 <HAL_GPIO_Init+0x1dc>)
 8000c46:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c4a:	f003 0e03 	and.w	lr, r3, #3
 8000c4e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c58:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <HAL_GPIO_Init+0x1e8>)
 8000c5e:	4290      	cmp	r0, r2
 8000c60:	f43f af74 	beq.w	8000b4c <HAL_GPIO_Init+0x68>
 8000c64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	d01a      	beq.n	8000ca2 <HAL_GPIO_Init+0x1be>
 8000c6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d018      	beq.n	8000ca6 <HAL_GPIO_Init+0x1c2>
 8000c74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c78:	4290      	cmp	r0, r2
 8000c7a:	d016      	beq.n	8000caa <HAL_GPIO_Init+0x1c6>
 8000c7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d014      	beq.n	8000cae <HAL_GPIO_Init+0x1ca>
 8000c84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c88:	4290      	cmp	r0, r2
 8000c8a:	d012      	beq.n	8000cb2 <HAL_GPIO_Init+0x1ce>
 8000c8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d010      	beq.n	8000cb6 <HAL_GPIO_Init+0x1d2>
 8000c94:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c98:	4290      	cmp	r0, r2
 8000c9a:	f43f af55 	beq.w	8000b48 <HAL_GPIO_Init+0x64>
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	e755      	b.n	8000b4e <HAL_GPIO_Init+0x6a>
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	e753      	b.n	8000b4e <HAL_GPIO_Init+0x6a>
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	e751      	b.n	8000b4e <HAL_GPIO_Init+0x6a>
 8000caa:	2203      	movs	r2, #3
 8000cac:	e74f      	b.n	8000b4e <HAL_GPIO_Init+0x6a>
 8000cae:	2204      	movs	r2, #4
 8000cb0:	e74d      	b.n	8000b4e <HAL_GPIO_Init+0x6a>
 8000cb2:	2205      	movs	r2, #5
 8000cb4:	e74b      	b.n	8000b4e <HAL_GPIO_Init+0x6a>
 8000cb6:	2206      	movs	r2, #6
 8000cb8:	e749      	b.n	8000b4e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000cba:	b002      	add	sp, #8
 8000cbc:	bd70      	pop	{r4, r5, r6, pc}
 8000cbe:	4770      	bx	lr
 8000cc0:	40013800 	.word	0x40013800
 8000cc4:	40013c00 	.word	0x40013c00
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cd0:	b10a      	cbz	r2, 8000cd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cd2:	6181      	str	r1, [r0, #24]
 8000cd4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cd6:	0409      	lsls	r1, r1, #16
 8000cd8:	6181      	str	r1, [r0, #24]
  }
}
 8000cda:	4770      	bx	lr

08000cdc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	f000 81e0 	beq.w	80010a2 <HAL_RCC_OscConfig+0x3c6>
{
 8000ce2:	b570      	push	{r4, r5, r6, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce8:	6803      	ldr	r3, [r0, #0]
 8000cea:	f013 0f01 	tst.w	r3, #1
 8000cee:	d03b      	beq.n	8000d68 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000cf0:	4b9f      	ldr	r3, [pc, #636]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d02c      	beq.n	8000d56 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cfc:	4b9c      	ldr	r3, [pc, #624]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d021      	beq.n	8000d4c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d08:	6863      	ldr	r3, [r4, #4]
 8000d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d0e:	d04f      	beq.n	8000db0 <HAL_RCC_OscConfig+0xd4>
 8000d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d14:	d052      	beq.n	8000dbc <HAL_RCC_OscConfig+0xe0>
 8000d16:	4b96      	ldr	r3, [pc, #600]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000d26:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d28:	6863      	ldr	r3, [r4, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d050      	beq.n	8000dd0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fe69 	bl	8000a04 <HAL_GetTick>
 8000d32:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d34:	4b8e      	ldr	r3, [pc, #568]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d3c:	d114      	bne.n	8000d68 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3e:	f7ff fe61 	bl	8000a04 <HAL_GetTick>
 8000d42:	1b40      	subs	r0, r0, r5
 8000d44:	2864      	cmp	r0, #100	@ 0x64
 8000d46:	d9f5      	bls.n	8000d34 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000d48:	2003      	movs	r0, #3
 8000d4a:	e1b1      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d4c:	4b88      	ldr	r3, [pc, #544]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000d54:	d0d8      	beq.n	8000d08 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d56:	4b86      	ldr	r3, [pc, #536]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d5e:	d003      	beq.n	8000d68 <HAL_RCC_OscConfig+0x8c>
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 819f 	beq.w	80010a6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	f013 0f02 	tst.w	r3, #2
 8000d6e:	d054      	beq.n	8000e1a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d70:	4b7f      	ldr	r3, [pc, #508]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f013 0f0c 	tst.w	r3, #12
 8000d78:	d03e      	beq.n	8000df8 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d033      	beq.n	8000dee <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d86:	68e3      	ldr	r3, [r4, #12]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d068      	beq.n	8000e5e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d8c:	4b79      	ldr	r3, [pc, #484]	@ (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d92:	f7ff fe37 	bl	8000a04 <HAL_GetTick>
 8000d96:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d98:	4b75      	ldr	r3, [pc, #468]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f013 0f02 	tst.w	r3, #2
 8000da0:	d154      	bne.n	8000e4c <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da2:	f7ff fe2f 	bl	8000a04 <HAL_GetTick>
 8000da6:	1b40      	subs	r0, r0, r5
 8000da8:	2802      	cmp	r0, #2
 8000daa:	d9f5      	bls.n	8000d98 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000dac:	2003      	movs	r0, #3
 8000dae:	e17f      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db0:	4a6f      	ldr	r2, [pc, #444]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e7b5      	b.n	8000d28 <HAL_RCC_OscConfig+0x4c>
 8000dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e7ab      	b.n	8000d28 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fe18 	bl	8000a04 <HAL_GetTick>
 8000dd4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	4b66      	ldr	r3, [pc, #408]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000dde:	d0c3      	beq.n	8000d68 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fe10 	bl	8000a04 <HAL_GetTick>
 8000de4:	1b40      	subs	r0, r0, r5
 8000de6:	2864      	cmp	r0, #100	@ 0x64
 8000de8:	d9f5      	bls.n	8000dd6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000dea:	2003      	movs	r0, #3
 8000dec:	e160      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dee:	4b60      	ldr	r3, [pc, #384]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000df6:	d1c6      	bne.n	8000d86 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df8:	4b5d      	ldr	r3, [pc, #372]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f013 0f02 	tst.w	r3, #2
 8000e00:	d003      	beq.n	8000e0a <HAL_RCC_OscConfig+0x12e>
 8000e02:	68e3      	ldr	r3, [r4, #12]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	f040 8150 	bne.w	80010aa <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	4a59      	ldr	r2, [pc, #356]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000e0c:	6813      	ldr	r3, [r2, #0]
 8000e0e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000e12:	6921      	ldr	r1, [r4, #16]
 8000e14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e18:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	f013 0f08 	tst.w	r3, #8
 8000e20:	d042      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e22:	6963      	ldr	r3, [r4, #20]
 8000e24:	b36b      	cbz	r3, 8000e82 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e26:	4b53      	ldr	r3, [pc, #332]	@ (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fde9 	bl	8000a04 <HAL_GetTick>
 8000e32:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e34:	4b4e      	ldr	r3, [pc, #312]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e38:	f013 0f02 	tst.w	r3, #2
 8000e3c:	d134      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e3e:	f7ff fde1 	bl	8000a04 <HAL_GetTick>
 8000e42:	1b40      	subs	r0, r0, r5
 8000e44:	2802      	cmp	r0, #2
 8000e46:	d9f5      	bls.n	8000e34 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000e48:	2003      	movs	r0, #3
 8000e4a:	e131      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4c:	4a48      	ldr	r2, [pc, #288]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000e4e:	6813      	ldr	r3, [r2, #0]
 8000e50:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000e54:	6921      	ldr	r1, [r4, #16]
 8000e56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	e7dd      	b.n	8000e1a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000e5e:	4b45      	ldr	r3, [pc, #276]	@ (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e64:	f7ff fdce 	bl	8000a04 <HAL_GetTick>
 8000e68:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6a:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f013 0f02 	tst.w	r3, #2
 8000e72:	d0d2      	beq.n	8000e1a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e74:	f7ff fdc6 	bl	8000a04 <HAL_GetTick>
 8000e78:	1b40      	subs	r0, r0, r5
 8000e7a:	2802      	cmp	r0, #2
 8000e7c:	d9f5      	bls.n	8000e6a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000e7e:	2003      	movs	r0, #3
 8000e80:	e116      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e82:	4b3c      	ldr	r3, [pc, #240]	@ (8000f74 <HAL_RCC_OscConfig+0x298>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fdbb 	bl	8000a04 <HAL_GetTick>
 8000e8e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e90:	4b37      	ldr	r3, [pc, #220]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e94:	f013 0f02 	tst.w	r3, #2
 8000e98:	d006      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fdb3 	bl	8000a04 <HAL_GetTick>
 8000e9e:	1b40      	subs	r0, r0, r5
 8000ea0:	2802      	cmp	r0, #2
 8000ea2:	d9f5      	bls.n	8000e90 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	e103      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	f013 0f04 	tst.w	r3, #4
 8000eae:	d077      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000eb8:	d133      	bne.n	8000f22 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000ec0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ec2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ec6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ed2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed4:	4b28      	ldr	r3, [pc, #160]	@ (8000f78 <HAL_RCC_OscConfig+0x29c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000edc:	d023      	beq.n	8000f26 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ede:	68a3      	ldr	r3, [r4, #8]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d034      	beq.n	8000f4e <HAL_RCC_OscConfig+0x272>
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	d038      	beq.n	8000f5a <HAL_RCC_OscConfig+0x27e>
 8000ee8:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000eea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000eec:	f022 0201 	bic.w	r2, r2, #1
 8000ef0:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ef2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000ef4:	f022 0204 	bic.w	r2, r2, #4
 8000ef8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000efa:	68a3      	ldr	r3, [r4, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d03d      	beq.n	8000f7c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f00:	f7ff fd80 	bl	8000a04 <HAL_GetTick>
 8000f04:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f0a:	f013 0f02 	tst.w	r3, #2
 8000f0e:	d146      	bne.n	8000f9e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f10:	f7ff fd78 	bl	8000a04 <HAL_GetTick>
 8000f14:	1b80      	subs	r0, r0, r6
 8000f16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f1a:	4298      	cmp	r0, r3
 8000f1c:	d9f3      	bls.n	8000f06 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000f1e:	2003      	movs	r0, #3
 8000f20:	e0c6      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000f22:	2500      	movs	r5, #0
 8000f24:	e7d6      	b.n	8000ed4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f26:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <HAL_RCC_OscConfig+0x29c>)
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f30:	f7ff fd68 	bl	8000a04 <HAL_GetTick>
 8000f34:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <HAL_RCC_OscConfig+0x29c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000f3e:	d1ce      	bne.n	8000ede <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f40:	f7ff fd60 	bl	8000a04 <HAL_GetTick>
 8000f44:	1b80      	subs	r0, r0, r6
 8000f46:	2802      	cmp	r0, #2
 8000f48:	d9f5      	bls.n	8000f36 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	e0b0      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000f50:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f58:	e7cf      	b.n	8000efa <HAL_RCC_OscConfig+0x21e>
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_RCC_OscConfig+0x294>)
 8000f5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f5e:	f042 0204 	orr.w	r2, r2, #4
 8000f62:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f6c:	e7c5      	b.n	8000efa <HAL_RCC_OscConfig+0x21e>
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	42470000 	.word	0x42470000
 8000f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fd42 	bl	8000a04 <HAL_GetTick>
 8000f80:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f82:	4b52      	ldr	r3, [pc, #328]	@ (80010cc <HAL_RCC_OscConfig+0x3f0>)
 8000f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f86:	f013 0f02 	tst.w	r3, #2
 8000f8a:	d008      	beq.n	8000f9e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fd3a 	bl	8000a04 <HAL_GetTick>
 8000f90:	1b80      	subs	r0, r0, r6
 8000f92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f96:	4298      	cmp	r0, r3
 8000f98:	d9f3      	bls.n	8000f82 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	e088      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000f9e:	b9ed      	cbnz	r5, 8000fdc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa0:	69a3      	ldr	r3, [r4, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8083 	beq.w	80010ae <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fa8:	4a48      	ldr	r2, [pc, #288]	@ (80010cc <HAL_RCC_OscConfig+0x3f0>)
 8000faa:	6892      	ldr	r2, [r2, #8]
 8000fac:	f002 020c 	and.w	r2, r2, #12
 8000fb0:	2a08      	cmp	r2, #8
 8000fb2:	d051      	beq.n	8001058 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d017      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb8:	4b45      	ldr	r3, [pc, #276]	@ (80010d0 <HAL_RCC_OscConfig+0x3f4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fd21 	bl	8000a04 <HAL_GetTick>
 8000fc2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc4:	4b41      	ldr	r3, [pc, #260]	@ (80010cc <HAL_RCC_OscConfig+0x3f0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000fcc:	d042      	beq.n	8001054 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fce:	f7ff fd19 	bl	8000a04 <HAL_GetTick>
 8000fd2:	1b00      	subs	r0, r0, r4
 8000fd4:	2802      	cmp	r0, #2
 8000fd6:	d9f5      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000fd8:	2003      	movs	r0, #3
 8000fda:	e069      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80010cc <HAL_RCC_OscConfig+0x3f0>)
 8000fde:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe6:	e7db      	b.n	8000fa0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8000fe8:	4b39      	ldr	r3, [pc, #228]	@ (80010d0 <HAL_RCC_OscConfig+0x3f4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000fee:	f7ff fd09 	bl	8000a04 <HAL_GetTick>
 8000ff2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff4:	4b35      	ldr	r3, [pc, #212]	@ (80010cc <HAL_RCC_OscConfig+0x3f0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000ffc:	d006      	beq.n	800100c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff fd01 	bl	8000a04 <HAL_GetTick>
 8001002:	1b40      	subs	r0, r0, r5
 8001004:	2802      	cmp	r0, #2
 8001006:	d9f5      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001008:	2003      	movs	r0, #3
 800100a:	e051      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800100c:	69e3      	ldr	r3, [r4, #28]
 800100e:	6a22      	ldr	r2, [r4, #32]
 8001010:	4313      	orrs	r3, r2
 8001012:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001014:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001018:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800101a:	0852      	lsrs	r2, r2, #1
 800101c:	3a01      	subs	r2, #1
 800101e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001022:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001024:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001028:	4a28      	ldr	r2, [pc, #160]	@ (80010cc <HAL_RCC_OscConfig+0x3f0>)
 800102a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800102c:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <HAL_RCC_OscConfig+0x3f4>)
 800102e:	2201      	movs	r2, #1
 8001030:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001032:	f7ff fce7 	bl	8000a04 <HAL_GetTick>
 8001036:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <HAL_RCC_OscConfig+0x3f0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001040:	d106      	bne.n	8001050 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fcdf 	bl	8000a04 <HAL_GetTick>
 8001046:	1b00      	subs	r0, r0, r4
 8001048:	2802      	cmp	r0, #2
 800104a:	d9f5      	bls.n	8001038 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800104c:	2003      	movs	r0, #3
 800104e:	e02f      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001050:	2000      	movs	r0, #0
 8001052:	e02d      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
 8001054:	2000      	movs	r0, #0
 8001056:	e02b      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001058:	2b01      	cmp	r3, #1
 800105a:	d02b      	beq.n	80010b4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <HAL_RCC_OscConfig+0x3f0>)
 800105e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001060:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001064:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001066:	4291      	cmp	r1, r2
 8001068:	d126      	bne.n	80010b8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800106a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800106e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001070:	428a      	cmp	r2, r1
 8001072:	d123      	bne.n	80010bc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001074:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001076:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800107a:	401a      	ands	r2, r3
 800107c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001080:	d11e      	bne.n	80010c0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001082:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001086:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001088:	0852      	lsrs	r2, r2, #1
 800108a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800108c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001090:	d118      	bne.n	80010c4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001092:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001096:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001098:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800109c:	d114      	bne.n	80010c8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800109e:	2000      	movs	r0, #0
 80010a0:	e006      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80010a2:	2001      	movs	r0, #1
}
 80010a4:	4770      	bx	lr
        return HAL_ERROR;
 80010a6:	2001      	movs	r0, #1
 80010a8:	e002      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80010aa:	2001      	movs	r0, #1
 80010ac:	e000      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80010ae:	2000      	movs	r0, #0
}
 80010b0:	b002      	add	sp, #8
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80010b4:	2001      	movs	r0, #1
 80010b6:	e7fb      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
 80010ba:	e7f9      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
 80010bc:	2001      	movs	r0, #1
 80010be:	e7f7      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
 80010c0:	2001      	movs	r0, #1
 80010c2:	e7f5      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
 80010c4:	2001      	movs	r0, #1
 80010c6:	e7f3      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
 80010c8:	2001      	movs	r0, #1
 80010ca:	e7f1      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
 80010cc:	40023800 	.word	0x40023800
 80010d0:	42470000 	.word	0x42470000

080010d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010d4:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010d6:	4b31      	ldr	r3, [pc, #196]	@ (800119c <HAL_RCC_GetSysClockFreq+0xc8>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010e2:	482f      	ldr	r0, [pc, #188]	@ (80011a0 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010e4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <HAL_RCC_GetSysClockFreq+0xc8>)
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80010f4:	d02c      	beq.n	8001150 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010f6:	4b29      	ldr	r3, [pc, #164]	@ (800119c <HAL_RCC_GetSysClockFreq+0xc8>)
 80010f8:	6858      	ldr	r0, [r3, #4]
 80010fa:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80010fe:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001102:	ebbc 0c00 	subs.w	ip, ip, r0
 8001106:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800110a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800110e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001112:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001116:	ebb1 010c 	subs.w	r1, r1, ip
 800111a:	eb63 030e 	sbc.w	r3, r3, lr
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001124:	00c9      	lsls	r1, r1, #3
 8001126:	eb11 0c00 	adds.w	ip, r1, r0
 800112a:	f143 0300 	adc.w	r3, r3, #0
 800112e:	0299      	lsls	r1, r3, #10
 8001130:	2300      	movs	r3, #0
 8001132:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001136:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800113a:	f7ff f899 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001146:	3301      	adds	r3, #1
 8001148:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800114a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800114e:	e7c9      	b.n	80010e4 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001152:	6858      	ldr	r0, [r3, #4]
 8001154:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001158:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800115c:	ebbc 0c00 	subs.w	ip, ip, r0
 8001160:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001164:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001168:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800116c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001170:	ebb1 010c 	subs.w	r1, r1, ip
 8001174:	eb63 030e 	sbc.w	r3, r3, lr
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800117e:	00c9      	lsls	r1, r1, #3
 8001180:	eb11 0c00 	adds.w	ip, r1, r0
 8001184:	f143 0300 	adc.w	r3, r3, #0
 8001188:	0299      	lsls	r1, r3, #10
 800118a:	2300      	movs	r3, #0
 800118c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001190:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001194:	f7ff f86c 	bl	8000270 <__aeabi_uldivmod>
 8001198:	e7d1      	b.n	800113e <HAL_RCC_GetSysClockFreq+0x6a>
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	00f42400 	.word	0x00f42400

080011a4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80011a4:	2800      	cmp	r0, #0
 80011a6:	f000 809b 	beq.w	80012e0 <HAL_RCC_ClockConfig+0x13c>
{
 80011aa:	b570      	push	{r4, r5, r6, lr}
 80011ac:	460d      	mov	r5, r1
 80011ae:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011b0:	4b4f      	ldr	r3, [pc, #316]	@ (80012f0 <HAL_RCC_ClockConfig+0x14c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	428b      	cmp	r3, r1
 80011ba:	d208      	bcs.n	80011ce <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011bc:	b2cb      	uxtb	r3, r1
 80011be:	4a4c      	ldr	r2, [pc, #304]	@ (80012f0 <HAL_RCC_ClockConfig+0x14c>)
 80011c0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	428b      	cmp	r3, r1
 80011ca:	f040 808b 	bne.w	80012e4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	f013 0f02 	tst.w	r3, #2
 80011d4:	d017      	beq.n	8001206 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d6:	f013 0f04 	tst.w	r3, #4
 80011da:	d004      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011dc:	4a45      	ldr	r2, [pc, #276]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 80011de:	6893      	ldr	r3, [r2, #8]
 80011e0:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011e4:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f013 0f08 	tst.w	r3, #8
 80011ec:	d004      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ee:	4a41      	ldr	r2, [pc, #260]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 80011f0:	6893      	ldr	r3, [r2, #8]
 80011f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011f6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	4a3e      	ldr	r2, [pc, #248]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 80011fa:	6893      	ldr	r3, [r2, #8]
 80011fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001200:	68a1      	ldr	r1, [r4, #8]
 8001202:	430b      	orrs	r3, r1
 8001204:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	f013 0f01 	tst.w	r3, #1
 800120c:	d032      	beq.n	8001274 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120e:	6863      	ldr	r3, [r4, #4]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d021      	beq.n	8001258 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001214:	1e9a      	subs	r2, r3, #2
 8001216:	2a01      	cmp	r2, #1
 8001218:	d925      	bls.n	8001266 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	4a36      	ldr	r2, [pc, #216]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	f012 0f02 	tst.w	r2, #2
 8001222:	d061      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001224:	4933      	ldr	r1, [pc, #204]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 8001226:	688a      	ldr	r2, [r1, #8]
 8001228:	f022 0203 	bic.w	r2, r2, #3
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001230:	f7ff fbe8 	bl	8000a04 <HAL_GetTick>
 8001234:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001236:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	6862      	ldr	r2, [r4, #4]
 8001240:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001244:	d016      	beq.n	8001274 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001246:	f7ff fbdd 	bl	8000a04 <HAL_GetTick>
 800124a:	1b80      	subs	r0, r0, r6
 800124c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001250:	4298      	cmp	r0, r3
 8001252:	d9f0      	bls.n	8001236 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001254:	2003      	movs	r0, #3
 8001256:	e042      	b.n	80012de <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001258:	4a26      	ldr	r2, [pc, #152]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001260:	d1e0      	bne.n	8001224 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001262:	2001      	movs	r0, #1
 8001264:	e03b      	b.n	80012de <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001266:	4a23      	ldr	r2, [pc, #140]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800126e:	d1d9      	bne.n	8001224 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
 8001272:	e034      	b.n	80012de <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001274:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <HAL_RCC_ClockConfig+0x14c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	42ab      	cmp	r3, r5
 800127e:	d907      	bls.n	8001290 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001280:	b2ea      	uxtb	r2, r5
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_RCC_ClockConfig+0x14c>)
 8001284:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	42ab      	cmp	r3, r5
 800128e:	d12d      	bne.n	80012ec <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	f013 0f04 	tst.w	r3, #4
 8001296:	d006      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001298:	4a16      	ldr	r2, [pc, #88]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 800129a:	6893      	ldr	r3, [r2, #8]
 800129c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80012a0:	68e1      	ldr	r1, [r4, #12]
 80012a2:	430b      	orrs	r3, r1
 80012a4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	f013 0f08 	tst.w	r3, #8
 80012ac:	d007      	beq.n	80012be <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ae:	4a11      	ldr	r2, [pc, #68]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 80012b0:	6893      	ldr	r3, [r2, #8]
 80012b2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80012b6:	6921      	ldr	r1, [r4, #16]
 80012b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012bc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012be:	f7ff ff09 	bl	80010d4 <HAL_RCC_GetSysClockFreq>
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <HAL_RCC_ClockConfig+0x150>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012ca:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <HAL_RCC_ClockConfig+0x154>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	40d8      	lsrs	r0, r3
 80012d0:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_RCC_ClockConfig+0x158>)
 80012d2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_RCC_ClockConfig+0x15c>)
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	f7ff fb48 	bl	800096c <HAL_InitTick>
  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
}
 80012de:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80012e0:	2001      	movs	r0, #1
}
 80012e2:	4770      	bx	lr
      return HAL_ERROR;
 80012e4:	2001      	movs	r0, #1
 80012e6:	e7fa      	b.n	80012de <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	e7f8      	b.n	80012de <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
 80012ee:	e7f6      	b.n	80012de <HAL_RCC_ClockConfig+0x13a>
 80012f0:	40023c00 	.word	0x40023c00
 80012f4:	40023800 	.word	0x40023800
 80012f8:	0800252c 	.word	0x0800252c
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000008 	.word	0x20000008

08001304 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001304:	4b01      	ldr	r3, [pc, #4]	@ (800130c <HAL_RCC_GetHCLKFreq+0x8>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000

08001310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001310:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001312:	f7ff fff7 	bl	8001304 <HAL_RCC_GetHCLKFreq>
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800131e:	4a03      	ldr	r2, [pc, #12]	@ (800132c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
}
 8001322:	40d8      	lsrs	r0, r3
 8001324:	bd08      	pop	{r3, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	08002524 	.word	0x08002524

08001330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001330:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001332:	f7ff ffe7 	bl	8001304 <HAL_RCC_GetHCLKFreq>
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800133e:	4a03      	ldr	r2, [pc, #12]	@ (800134c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
}
 8001342:	40d8      	lsrs	r0, r3
 8001344:	bd08      	pop	{r3, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	08002524 	.word	0x08002524

08001350 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001350:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001352:	f102 030c 	add.w	r3, r2, #12
 8001356:	e853 3f00 	ldrex	r3, [r3]
 800135a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800135e:	320c      	adds	r2, #12
 8001360:	e842 3100 	strex	r1, r3, [r2]
 8001364:	2900      	cmp	r1, #0
 8001366:	d1f3      	bne.n	8001350 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001368:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800136a:	f102 0314 	add.w	r3, r2, #20
 800136e:	e853 3f00 	ldrex	r3, [r3]
 8001372:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001376:	3214      	adds	r2, #20
 8001378:	e842 3100 	strex	r1, r3, [r2]
 800137c:	2900      	cmp	r1, #0
 800137e:	d1f3      	bne.n	8001368 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001380:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001382:	2b01      	cmp	r3, #1
 8001384:	d005      	beq.n	8001392 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001386:	2320      	movs	r3, #32
 8001388:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800138c:	2300      	movs	r3, #0
 800138e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001390:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001392:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001394:	f102 030c 	add.w	r3, r2, #12
 8001398:	e853 3f00 	ldrex	r3, [r3]
 800139c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013a0:	320c      	adds	r2, #12
 80013a2:	e842 3100 	strex	r1, r3, [r2]
 80013a6:	2900      	cmp	r1, #0
 80013a8:	d1f3      	bne.n	8001392 <UART_EndRxTransfer+0x42>
 80013aa:	e7ec      	b.n	8001386 <UART_EndRxTransfer+0x36>

080013ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013ac:	b510      	push	{r4, lr}
 80013ae:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013b0:	6802      	ldr	r2, [r0, #0]
 80013b2:	6913      	ldr	r3, [r2, #16]
 80013b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013b8:	68c1      	ldr	r1, [r0, #12]
 80013ba:	430b      	orrs	r3, r1
 80013bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013be:	6883      	ldr	r3, [r0, #8]
 80013c0:	6902      	ldr	r2, [r0, #16]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	6943      	ldr	r3, [r0, #20]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	69c3      	ldr	r3, [r0, #28]
 80013ca:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80013cc:	6801      	ldr	r1, [r0, #0]
 80013ce:	68cb      	ldr	r3, [r1, #12]
 80013d0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80013d4:	f023 030c 	bic.w	r3, r3, #12
 80013d8:	4313      	orrs	r3, r2
 80013da:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013dc:	6802      	ldr	r2, [r0, #0]
 80013de:	6953      	ldr	r3, [r2, #20]
 80013e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013e4:	6981      	ldr	r1, [r0, #24]
 80013e6:	430b      	orrs	r3, r1
 80013e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80013ea:	6803      	ldr	r3, [r0, #0]
 80013ec:	4a31      	ldr	r2, [pc, #196]	@ (80014b4 <UART_SetConfig+0x108>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d006      	beq.n	8001400 <UART_SetConfig+0x54>
 80013f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d002      	beq.n	8001400 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80013fa:	f7ff ff89 	bl	8001310 <HAL_RCC_GetPCLK1Freq>
 80013fe:	e001      	b.n	8001404 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001400:	f7ff ff96 	bl	8001330 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001404:	69e3      	ldr	r3, [r4, #28]
 8001406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800140a:	d029      	beq.n	8001460 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800140c:	2100      	movs	r1, #0
 800140e:	1803      	adds	r3, r0, r0
 8001410:	4149      	adcs	r1, r1
 8001412:	181b      	adds	r3, r3, r0
 8001414:	f141 0100 	adc.w	r1, r1, #0
 8001418:	00c9      	lsls	r1, r1, #3
 800141a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	1818      	adds	r0, r3, r0
 8001422:	6863      	ldr	r3, [r4, #4]
 8001424:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001428:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800142c:	f141 0100 	adc.w	r1, r1, #0
 8001430:	f7fe ff1e 	bl	8000270 <__aeabi_uldivmod>
 8001434:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <UART_SetConfig+0x10c>)
 8001436:	fba2 3100 	umull	r3, r1, r2, r0
 800143a:	0949      	lsrs	r1, r1, #5
 800143c:	2364      	movs	r3, #100	@ 0x64
 800143e:	fb03 0311 	mls	r3, r3, r1, r0
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	3332      	adds	r3, #50	@ 0x32
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001450:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	6821      	ldr	r1, [r4, #0]
 800145a:	4413      	add	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }
}
 800145e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001460:	2300      	movs	r3, #0
 8001462:	1802      	adds	r2, r0, r0
 8001464:	eb43 0103 	adc.w	r1, r3, r3
 8001468:	1812      	adds	r2, r2, r0
 800146a:	f141 0100 	adc.w	r1, r1, #0
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001474:	00d2      	lsls	r2, r2, #3
 8001476:	1810      	adds	r0, r2, r0
 8001478:	f141 0100 	adc.w	r1, r1, #0
 800147c:	6862      	ldr	r2, [r4, #4]
 800147e:	1892      	adds	r2, r2, r2
 8001480:	415b      	adcs	r3, r3
 8001482:	f7fe fef5 	bl	8000270 <__aeabi_uldivmod>
 8001486:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <UART_SetConfig+0x10c>)
 8001488:	fba2 3100 	umull	r3, r1, r2, r0
 800148c:	0949      	lsrs	r1, r1, #5
 800148e:	2364      	movs	r3, #100	@ 0x64
 8001490:	fb03 0311 	mls	r3, r3, r1, r0
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	3332      	adds	r3, #50	@ 0x32
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	095b      	lsrs	r3, r3, #5
 800149e:	005a      	lsls	r2, r3, #1
 80014a0:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80014a4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	6821      	ldr	r1, [r4, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	608b      	str	r3, [r1, #8]
 80014b2:	e7d4      	b.n	800145e <UART_SetConfig+0xb2>
 80014b4:	40011000 	.word	0x40011000
 80014b8:	51eb851f 	.word	0x51eb851f

080014bc <UART_WaitOnFlagUntilTimeout>:
{
 80014bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014c0:	b083      	sub	sp, #12
 80014c2:	4605      	mov	r5, r0
 80014c4:	460e      	mov	r6, r1
 80014c6:	4617      	mov	r7, r2
 80014c8:	4699      	mov	r9, r3
 80014ca:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	681c      	ldr	r4, [r3, #0]
 80014d2:	ea36 0404 	bics.w	r4, r6, r4
 80014d6:	bf0c      	ite	eq
 80014d8:	2401      	moveq	r4, #1
 80014da:	2400      	movne	r4, #0
 80014dc:	42bc      	cmp	r4, r7
 80014de:	d128      	bne.n	8001532 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80014e0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80014e4:	d0f3      	beq.n	80014ce <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e6:	f7ff fa8d 	bl	8000a04 <HAL_GetTick>
 80014ea:	eba0 0009 	sub.w	r0, r0, r9
 80014ee:	4540      	cmp	r0, r8
 80014f0:	d823      	bhi.n	800153a <UART_WaitOnFlagUntilTimeout+0x7e>
 80014f2:	f1b8 0f00 	cmp.w	r8, #0
 80014f6:	d022      	beq.n	800153e <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	f012 0f04 	tst.w	r2, #4
 8001500:	d0e5      	beq.n	80014ce <UART_WaitOnFlagUntilTimeout+0x12>
 8001502:	2e80      	cmp	r6, #128	@ 0x80
 8001504:	d0e3      	beq.n	80014ce <UART_WaitOnFlagUntilTimeout+0x12>
 8001506:	2e40      	cmp	r6, #64	@ 0x40
 8001508:	d0e1      	beq.n	80014ce <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	f012 0f08 	tst.w	r2, #8
 8001510:	d0dd      	beq.n	80014ce <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001512:	2400      	movs	r4, #0
 8001514:	9401      	str	r4, [sp, #4]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	9201      	str	r2, [sp, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001520:	4628      	mov	r0, r5
 8001522:	f7ff ff15 	bl	8001350 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001526:	2308      	movs	r3, #8
 8001528:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800152a:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800152e:	2001      	movs	r0, #1
 8001530:	e000      	b.n	8001534 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8001532:	2000      	movs	r0, #0
}
 8001534:	b003      	add	sp, #12
 8001536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800153a:	2003      	movs	r0, #3
 800153c:	e7fa      	b.n	8001534 <UART_WaitOnFlagUntilTimeout+0x78>
 800153e:	2003      	movs	r0, #3
 8001540:	e7f8      	b.n	8001534 <UART_WaitOnFlagUntilTimeout+0x78>

08001542 <HAL_UART_Init>:
  if (huart == NULL)
 8001542:	b360      	cbz	r0, 800159e <HAL_UART_Init+0x5c>
{
 8001544:	b510      	push	{r4, lr}
 8001546:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001548:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800154c:	b313      	cbz	r3, 8001594 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800154e:	2324      	movs	r3, #36	@ 0x24
 8001550:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001554:	6822      	ldr	r2, [r4, #0]
 8001556:	68d3      	ldr	r3, [r2, #12]
 8001558:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800155c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800155e:	4620      	mov	r0, r4
 8001560:	f7ff ff24 	bl	80013ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	6913      	ldr	r3, [r2, #16]
 8001568:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800156c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800156e:	6822      	ldr	r2, [r4, #0]
 8001570:	6953      	ldr	r3, [r2, #20]
 8001572:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001576:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001578:	6822      	ldr	r2, [r4, #0]
 800157a:	68d3      	ldr	r3, [r2, #12]
 800157c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001580:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001582:	2000      	movs	r0, #0
 8001584:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001586:	2320      	movs	r3, #32
 8001588:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800158c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001590:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001592:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001594:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001598:	f7ff f92e 	bl	80007f8 <HAL_UART_MspInit>
 800159c:	e7d7      	b.n	800154e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800159e:	2001      	movs	r0, #1
}
 80015a0:	4770      	bx	lr

080015a2 <HAL_UART_Transmit>:
{
 80015a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80015aa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	d156      	bne.n	8001662 <HAL_UART_Transmit+0xc0>
 80015b4:	4604      	mov	r4, r0
 80015b6:	460d      	mov	r5, r1
 80015b8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80015ba:	2900      	cmp	r1, #0
 80015bc:	d055      	beq.n	800166a <HAL_UART_Transmit+0xc8>
 80015be:	b90a      	cbnz	r2, 80015c4 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80015c0:	2001      	movs	r0, #1
 80015c2:	e04f      	b.n	8001664 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015c8:	2321      	movs	r3, #33	@ 0x21
 80015ca:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80015ce:	f7ff fa19 	bl	8000a04 <HAL_GetTick>
 80015d2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80015d4:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80015d8:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015dc:	68a3      	ldr	r3, [r4, #8]
 80015de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015e2:	d002      	beq.n	80015ea <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80015e4:	f04f 0800 	mov.w	r8, #0
 80015e8:	e014      	b.n	8001614 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015ea:	6923      	ldr	r3, [r4, #16]
 80015ec:	b32b      	cbz	r3, 800163a <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80015ee:	f04f 0800 	mov.w	r8, #0
 80015f2:	e00f      	b.n	8001614 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80015f4:	2320      	movs	r3, #32
 80015f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80015fa:	2003      	movs	r0, #3
 80015fc:	e032      	b.n	8001664 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015fe:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001602:	6822      	ldr	r2, [r4, #0]
 8001604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001608:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800160a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800160c:	b292      	uxth	r2, r2
 800160e:	3a01      	subs	r2, #1
 8001610:	b292      	uxth	r2, r2
 8001612:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001614:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001616:	b29b      	uxth	r3, r3
 8001618:	b193      	cbz	r3, 8001640 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800161a:	9600      	str	r6, [sp, #0]
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	2180      	movs	r1, #128	@ 0x80
 8001622:	4620      	mov	r0, r4
 8001624:	f7ff ff4a 	bl	80014bc <UART_WaitOnFlagUntilTimeout>
 8001628:	2800      	cmp	r0, #0
 800162a:	d1e3      	bne.n	80015f4 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 800162c:	2d00      	cmp	r5, #0
 800162e:	d0e6      	beq.n	80015fe <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001630:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001638:	e7e7      	b.n	800160a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 800163a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800163c:	2500      	movs	r5, #0
 800163e:	e7e9      	b.n	8001614 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001640:	9600      	str	r6, [sp, #0]
 8001642:	463b      	mov	r3, r7
 8001644:	2200      	movs	r2, #0
 8001646:	2140      	movs	r1, #64	@ 0x40
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff ff37 	bl	80014bc <UART_WaitOnFlagUntilTimeout>
 800164e:	b918      	cbnz	r0, 8001658 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001650:	2320      	movs	r3, #32
 8001652:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001656:	e005      	b.n	8001664 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001658:	2320      	movs	r3, #32
 800165a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800165e:	2003      	movs	r0, #3
 8001660:	e000      	b.n	8001664 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8001662:	2002      	movs	r0, #2
}
 8001664:	b002      	add	sp, #8
 8001666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800166a:	2001      	movs	r0, #1
 800166c:	e7fa      	b.n	8001664 <HAL_UART_Transmit+0xc2>
	...

08001670 <std>:
 8001670:	2300      	movs	r3, #0
 8001672:	b510      	push	{r4, lr}
 8001674:	4604      	mov	r4, r0
 8001676:	e9c0 3300 	strd	r3, r3, [r0]
 800167a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800167e:	6083      	str	r3, [r0, #8]
 8001680:	8181      	strh	r1, [r0, #12]
 8001682:	6643      	str	r3, [r0, #100]	@ 0x64
 8001684:	81c2      	strh	r2, [r0, #14]
 8001686:	6183      	str	r3, [r0, #24]
 8001688:	4619      	mov	r1, r3
 800168a:	2208      	movs	r2, #8
 800168c:	305c      	adds	r0, #92	@ 0x5c
 800168e:	f000 f906 	bl	800189e <memset>
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <std+0x58>)
 8001694:	6263      	str	r3, [r4, #36]	@ 0x24
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <std+0x5c>)
 8001698:	62a3      	str	r3, [r4, #40]	@ 0x28
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <std+0x60>)
 800169c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800169e:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <std+0x64>)
 80016a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <std+0x68>)
 80016a4:	6224      	str	r4, [r4, #32]
 80016a6:	429c      	cmp	r4, r3
 80016a8:	d006      	beq.n	80016b8 <std+0x48>
 80016aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80016ae:	4294      	cmp	r4, r2
 80016b0:	d002      	beq.n	80016b8 <std+0x48>
 80016b2:	33d0      	adds	r3, #208	@ 0xd0
 80016b4:	429c      	cmp	r4, r3
 80016b6:	d105      	bne.n	80016c4 <std+0x54>
 80016b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80016bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016c0:	f000 b966 	b.w	8001990 <__retarget_lock_init_recursive>
 80016c4:	bd10      	pop	{r4, pc}
 80016c6:	bf00      	nop
 80016c8:	08001819 	.word	0x08001819
 80016cc:	0800183b 	.word	0x0800183b
 80016d0:	08001873 	.word	0x08001873
 80016d4:	08001897 	.word	0x08001897
 80016d8:	200000d4 	.word	0x200000d4

080016dc <stdio_exit_handler>:
 80016dc:	4a02      	ldr	r2, [pc, #8]	@ (80016e8 <stdio_exit_handler+0xc>)
 80016de:	4903      	ldr	r1, [pc, #12]	@ (80016ec <stdio_exit_handler+0x10>)
 80016e0:	4803      	ldr	r0, [pc, #12]	@ (80016f0 <stdio_exit_handler+0x14>)
 80016e2:	f000 b869 	b.w	80017b8 <_fwalk_sglue>
 80016e6:	bf00      	nop
 80016e8:	2000000c 	.word	0x2000000c
 80016ec:	08002231 	.word	0x08002231
 80016f0:	2000001c 	.word	0x2000001c

080016f4 <cleanup_stdio>:
 80016f4:	6841      	ldr	r1, [r0, #4]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <cleanup_stdio+0x34>)
 80016f8:	4299      	cmp	r1, r3
 80016fa:	b510      	push	{r4, lr}
 80016fc:	4604      	mov	r4, r0
 80016fe:	d001      	beq.n	8001704 <cleanup_stdio+0x10>
 8001700:	f000 fd96 	bl	8002230 <_fflush_r>
 8001704:	68a1      	ldr	r1, [r4, #8]
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <cleanup_stdio+0x38>)
 8001708:	4299      	cmp	r1, r3
 800170a:	d002      	beq.n	8001712 <cleanup_stdio+0x1e>
 800170c:	4620      	mov	r0, r4
 800170e:	f000 fd8f 	bl	8002230 <_fflush_r>
 8001712:	68e1      	ldr	r1, [r4, #12]
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <cleanup_stdio+0x3c>)
 8001716:	4299      	cmp	r1, r3
 8001718:	d004      	beq.n	8001724 <cleanup_stdio+0x30>
 800171a:	4620      	mov	r0, r4
 800171c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001720:	f000 bd86 	b.w	8002230 <_fflush_r>
 8001724:	bd10      	pop	{r4, pc}
 8001726:	bf00      	nop
 8001728:	200000d4 	.word	0x200000d4
 800172c:	2000013c 	.word	0x2000013c
 8001730:	200001a4 	.word	0x200001a4

08001734 <global_stdio_init.part.0>:
 8001734:	b510      	push	{r4, lr}
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <global_stdio_init.part.0+0x30>)
 8001738:	4c0b      	ldr	r4, [pc, #44]	@ (8001768 <global_stdio_init.part.0+0x34>)
 800173a:	4a0c      	ldr	r2, [pc, #48]	@ (800176c <global_stdio_init.part.0+0x38>)
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	4620      	mov	r0, r4
 8001740:	2200      	movs	r2, #0
 8001742:	2104      	movs	r1, #4
 8001744:	f7ff ff94 	bl	8001670 <std>
 8001748:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800174c:	2201      	movs	r2, #1
 800174e:	2109      	movs	r1, #9
 8001750:	f7ff ff8e 	bl	8001670 <std>
 8001754:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001758:	2202      	movs	r2, #2
 800175a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800175e:	2112      	movs	r1, #18
 8001760:	f7ff bf86 	b.w	8001670 <std>
 8001764:	2000020c 	.word	0x2000020c
 8001768:	200000d4 	.word	0x200000d4
 800176c:	080016dd 	.word	0x080016dd

08001770 <__sfp_lock_acquire>:
 8001770:	4801      	ldr	r0, [pc, #4]	@ (8001778 <__sfp_lock_acquire+0x8>)
 8001772:	f000 b90e 	b.w	8001992 <__retarget_lock_acquire_recursive>
 8001776:	bf00      	nop
 8001778:	20000215 	.word	0x20000215

0800177c <__sfp_lock_release>:
 800177c:	4801      	ldr	r0, [pc, #4]	@ (8001784 <__sfp_lock_release+0x8>)
 800177e:	f000 b909 	b.w	8001994 <__retarget_lock_release_recursive>
 8001782:	bf00      	nop
 8001784:	20000215 	.word	0x20000215

08001788 <__sinit>:
 8001788:	b510      	push	{r4, lr}
 800178a:	4604      	mov	r4, r0
 800178c:	f7ff fff0 	bl	8001770 <__sfp_lock_acquire>
 8001790:	6a23      	ldr	r3, [r4, #32]
 8001792:	b11b      	cbz	r3, 800179c <__sinit+0x14>
 8001794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001798:	f7ff bff0 	b.w	800177c <__sfp_lock_release>
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <__sinit+0x28>)
 800179e:	6223      	str	r3, [r4, #32]
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <__sinit+0x2c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f5      	bne.n	8001794 <__sinit+0xc>
 80017a8:	f7ff ffc4 	bl	8001734 <global_stdio_init.part.0>
 80017ac:	e7f2      	b.n	8001794 <__sinit+0xc>
 80017ae:	bf00      	nop
 80017b0:	080016f5 	.word	0x080016f5
 80017b4:	2000020c 	.word	0x2000020c

080017b8 <_fwalk_sglue>:
 80017b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017bc:	4607      	mov	r7, r0
 80017be:	4688      	mov	r8, r1
 80017c0:	4614      	mov	r4, r2
 80017c2:	2600      	movs	r6, #0
 80017c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017c8:	f1b9 0901 	subs.w	r9, r9, #1
 80017cc:	d505      	bpl.n	80017da <_fwalk_sglue+0x22>
 80017ce:	6824      	ldr	r4, [r4, #0]
 80017d0:	2c00      	cmp	r4, #0
 80017d2:	d1f7      	bne.n	80017c4 <_fwalk_sglue+0xc>
 80017d4:	4630      	mov	r0, r6
 80017d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017da:	89ab      	ldrh	r3, [r5, #12]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d907      	bls.n	80017f0 <_fwalk_sglue+0x38>
 80017e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017e4:	3301      	adds	r3, #1
 80017e6:	d003      	beq.n	80017f0 <_fwalk_sglue+0x38>
 80017e8:	4629      	mov	r1, r5
 80017ea:	4638      	mov	r0, r7
 80017ec:	47c0      	blx	r8
 80017ee:	4306      	orrs	r6, r0
 80017f0:	3568      	adds	r5, #104	@ 0x68
 80017f2:	e7e9      	b.n	80017c8 <_fwalk_sglue+0x10>

080017f4 <iprintf>:
 80017f4:	b40f      	push	{r0, r1, r2, r3}
 80017f6:	b507      	push	{r0, r1, r2, lr}
 80017f8:	4906      	ldr	r1, [pc, #24]	@ (8001814 <iprintf+0x20>)
 80017fa:	ab04      	add	r3, sp, #16
 80017fc:	6808      	ldr	r0, [r1, #0]
 80017fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8001802:	6881      	ldr	r1, [r0, #8]
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	f000 f9e9 	bl	8001bdc <_vfiprintf_r>
 800180a:	b003      	add	sp, #12
 800180c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001810:	b004      	add	sp, #16
 8001812:	4770      	bx	lr
 8001814:	20000018 	.word	0x20000018

08001818 <__sread>:
 8001818:	b510      	push	{r4, lr}
 800181a:	460c      	mov	r4, r1
 800181c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001820:	f000 f868 	bl	80018f4 <_read_r>
 8001824:	2800      	cmp	r0, #0
 8001826:	bfab      	itete	ge
 8001828:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800182a:	89a3      	ldrhlt	r3, [r4, #12]
 800182c:	181b      	addge	r3, r3, r0
 800182e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001832:	bfac      	ite	ge
 8001834:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001836:	81a3      	strhlt	r3, [r4, #12]
 8001838:	bd10      	pop	{r4, pc}

0800183a <__swrite>:
 800183a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800183e:	461f      	mov	r7, r3
 8001840:	898b      	ldrh	r3, [r1, #12]
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	4605      	mov	r5, r0
 8001846:	460c      	mov	r4, r1
 8001848:	4616      	mov	r6, r2
 800184a:	d505      	bpl.n	8001858 <__swrite+0x1e>
 800184c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001850:	2302      	movs	r3, #2
 8001852:	2200      	movs	r2, #0
 8001854:	f000 f83c 	bl	80018d0 <_lseek_r>
 8001858:	89a3      	ldrh	r3, [r4, #12]
 800185a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800185e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001862:	81a3      	strh	r3, [r4, #12]
 8001864:	4632      	mov	r2, r6
 8001866:	463b      	mov	r3, r7
 8001868:	4628      	mov	r0, r5
 800186a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800186e:	f000 b853 	b.w	8001918 <_write_r>

08001872 <__sseek>:
 8001872:	b510      	push	{r4, lr}
 8001874:	460c      	mov	r4, r1
 8001876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800187a:	f000 f829 	bl	80018d0 <_lseek_r>
 800187e:	1c43      	adds	r3, r0, #1
 8001880:	89a3      	ldrh	r3, [r4, #12]
 8001882:	bf15      	itete	ne
 8001884:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001886:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800188a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800188e:	81a3      	strheq	r3, [r4, #12]
 8001890:	bf18      	it	ne
 8001892:	81a3      	strhne	r3, [r4, #12]
 8001894:	bd10      	pop	{r4, pc}

08001896 <__sclose>:
 8001896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800189a:	f000 b809 	b.w	80018b0 <_close_r>

0800189e <memset>:
 800189e:	4402      	add	r2, r0
 80018a0:	4603      	mov	r3, r0
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d100      	bne.n	80018a8 <memset+0xa>
 80018a6:	4770      	bx	lr
 80018a8:	f803 1b01 	strb.w	r1, [r3], #1
 80018ac:	e7f9      	b.n	80018a2 <memset+0x4>
	...

080018b0 <_close_r>:
 80018b0:	b538      	push	{r3, r4, r5, lr}
 80018b2:	4d06      	ldr	r5, [pc, #24]	@ (80018cc <_close_r+0x1c>)
 80018b4:	2300      	movs	r3, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	602b      	str	r3, [r5, #0]
 80018bc:	f7fe fff2 	bl	80008a4 <_close>
 80018c0:	1c43      	adds	r3, r0, #1
 80018c2:	d102      	bne.n	80018ca <_close_r+0x1a>
 80018c4:	682b      	ldr	r3, [r5, #0]
 80018c6:	b103      	cbz	r3, 80018ca <_close_r+0x1a>
 80018c8:	6023      	str	r3, [r4, #0]
 80018ca:	bd38      	pop	{r3, r4, r5, pc}
 80018cc:	20000210 	.word	0x20000210

080018d0 <_lseek_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4d07      	ldr	r5, [pc, #28]	@ (80018f0 <_lseek_r+0x20>)
 80018d4:	4604      	mov	r4, r0
 80018d6:	4608      	mov	r0, r1
 80018d8:	4611      	mov	r1, r2
 80018da:	2200      	movs	r2, #0
 80018dc:	602a      	str	r2, [r5, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	f7fe ffea 	bl	80008b8 <_lseek>
 80018e4:	1c43      	adds	r3, r0, #1
 80018e6:	d102      	bne.n	80018ee <_lseek_r+0x1e>
 80018e8:	682b      	ldr	r3, [r5, #0]
 80018ea:	b103      	cbz	r3, 80018ee <_lseek_r+0x1e>
 80018ec:	6023      	str	r3, [r4, #0]
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
 80018f0:	20000210 	.word	0x20000210

080018f4 <_read_r>:
 80018f4:	b538      	push	{r3, r4, r5, lr}
 80018f6:	4d07      	ldr	r5, [pc, #28]	@ (8001914 <_read_r+0x20>)
 80018f8:	4604      	mov	r4, r0
 80018fa:	4608      	mov	r0, r1
 80018fc:	4611      	mov	r1, r2
 80018fe:	2200      	movs	r2, #0
 8001900:	602a      	str	r2, [r5, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	f7fe ffbe 	bl	8000884 <_read>
 8001908:	1c43      	adds	r3, r0, #1
 800190a:	d102      	bne.n	8001912 <_read_r+0x1e>
 800190c:	682b      	ldr	r3, [r5, #0]
 800190e:	b103      	cbz	r3, 8001912 <_read_r+0x1e>
 8001910:	6023      	str	r3, [r4, #0]
 8001912:	bd38      	pop	{r3, r4, r5, pc}
 8001914:	20000210 	.word	0x20000210

08001918 <_write_r>:
 8001918:	b538      	push	{r3, r4, r5, lr}
 800191a:	4d07      	ldr	r5, [pc, #28]	@ (8001938 <_write_r+0x20>)
 800191c:	4604      	mov	r4, r0
 800191e:	4608      	mov	r0, r1
 8001920:	4611      	mov	r1, r2
 8001922:	2200      	movs	r2, #0
 8001924:	602a      	str	r2, [r5, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	f7fe fe64 	bl	80005f4 <_write>
 800192c:	1c43      	adds	r3, r0, #1
 800192e:	d102      	bne.n	8001936 <_write_r+0x1e>
 8001930:	682b      	ldr	r3, [r5, #0]
 8001932:	b103      	cbz	r3, 8001936 <_write_r+0x1e>
 8001934:	6023      	str	r3, [r4, #0]
 8001936:	bd38      	pop	{r3, r4, r5, pc}
 8001938:	20000210 	.word	0x20000210

0800193c <__errno>:
 800193c:	4b01      	ldr	r3, [pc, #4]	@ (8001944 <__errno+0x8>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000018 	.word	0x20000018

08001948 <__libc_init_array>:
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	4d0d      	ldr	r5, [pc, #52]	@ (8001980 <__libc_init_array+0x38>)
 800194c:	4c0d      	ldr	r4, [pc, #52]	@ (8001984 <__libc_init_array+0x3c>)
 800194e:	1b64      	subs	r4, r4, r5
 8001950:	10a4      	asrs	r4, r4, #2
 8001952:	2600      	movs	r6, #0
 8001954:	42a6      	cmp	r6, r4
 8001956:	d109      	bne.n	800196c <__libc_init_array+0x24>
 8001958:	4d0b      	ldr	r5, [pc, #44]	@ (8001988 <__libc_init_array+0x40>)
 800195a:	4c0c      	ldr	r4, [pc, #48]	@ (800198c <__libc_init_array+0x44>)
 800195c:	f000 fdb8 	bl	80024d0 <_init>
 8001960:	1b64      	subs	r4, r4, r5
 8001962:	10a4      	asrs	r4, r4, #2
 8001964:	2600      	movs	r6, #0
 8001966:	42a6      	cmp	r6, r4
 8001968:	d105      	bne.n	8001976 <__libc_init_array+0x2e>
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001970:	4798      	blx	r3
 8001972:	3601      	adds	r6, #1
 8001974:	e7ee      	b.n	8001954 <__libc_init_array+0xc>
 8001976:	f855 3b04 	ldr.w	r3, [r5], #4
 800197a:	4798      	blx	r3
 800197c:	3601      	adds	r6, #1
 800197e:	e7f2      	b.n	8001966 <__libc_init_array+0x1e>
 8001980:	08002578 	.word	0x08002578
 8001984:	08002578 	.word	0x08002578
 8001988:	08002578 	.word	0x08002578
 800198c:	0800257c 	.word	0x0800257c

08001990 <__retarget_lock_init_recursive>:
 8001990:	4770      	bx	lr

08001992 <__retarget_lock_acquire_recursive>:
 8001992:	4770      	bx	lr

08001994 <__retarget_lock_release_recursive>:
 8001994:	4770      	bx	lr
	...

08001998 <_free_r>:
 8001998:	b538      	push	{r3, r4, r5, lr}
 800199a:	4605      	mov	r5, r0
 800199c:	2900      	cmp	r1, #0
 800199e:	d041      	beq.n	8001a24 <_free_r+0x8c>
 80019a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019a4:	1f0c      	subs	r4, r1, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bfb8      	it	lt
 80019aa:	18e4      	addlt	r4, r4, r3
 80019ac:	f000 f8e0 	bl	8001b70 <__malloc_lock>
 80019b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a28 <_free_r+0x90>)
 80019b2:	6813      	ldr	r3, [r2, #0]
 80019b4:	b933      	cbnz	r3, 80019c4 <_free_r+0x2c>
 80019b6:	6063      	str	r3, [r4, #4]
 80019b8:	6014      	str	r4, [r2, #0]
 80019ba:	4628      	mov	r0, r5
 80019bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019c0:	f000 b8dc 	b.w	8001b7c <__malloc_unlock>
 80019c4:	42a3      	cmp	r3, r4
 80019c6:	d908      	bls.n	80019da <_free_r+0x42>
 80019c8:	6820      	ldr	r0, [r4, #0]
 80019ca:	1821      	adds	r1, r4, r0
 80019cc:	428b      	cmp	r3, r1
 80019ce:	bf01      	itttt	eq
 80019d0:	6819      	ldreq	r1, [r3, #0]
 80019d2:	685b      	ldreq	r3, [r3, #4]
 80019d4:	1809      	addeq	r1, r1, r0
 80019d6:	6021      	streq	r1, [r4, #0]
 80019d8:	e7ed      	b.n	80019b6 <_free_r+0x1e>
 80019da:	461a      	mov	r2, r3
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	b10b      	cbz	r3, 80019e4 <_free_r+0x4c>
 80019e0:	42a3      	cmp	r3, r4
 80019e2:	d9fa      	bls.n	80019da <_free_r+0x42>
 80019e4:	6811      	ldr	r1, [r2, #0]
 80019e6:	1850      	adds	r0, r2, r1
 80019e8:	42a0      	cmp	r0, r4
 80019ea:	d10b      	bne.n	8001a04 <_free_r+0x6c>
 80019ec:	6820      	ldr	r0, [r4, #0]
 80019ee:	4401      	add	r1, r0
 80019f0:	1850      	adds	r0, r2, r1
 80019f2:	4283      	cmp	r3, r0
 80019f4:	6011      	str	r1, [r2, #0]
 80019f6:	d1e0      	bne.n	80019ba <_free_r+0x22>
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	6053      	str	r3, [r2, #4]
 80019fe:	4408      	add	r0, r1
 8001a00:	6010      	str	r0, [r2, #0]
 8001a02:	e7da      	b.n	80019ba <_free_r+0x22>
 8001a04:	d902      	bls.n	8001a0c <_free_r+0x74>
 8001a06:	230c      	movs	r3, #12
 8001a08:	602b      	str	r3, [r5, #0]
 8001a0a:	e7d6      	b.n	80019ba <_free_r+0x22>
 8001a0c:	6820      	ldr	r0, [r4, #0]
 8001a0e:	1821      	adds	r1, r4, r0
 8001a10:	428b      	cmp	r3, r1
 8001a12:	bf04      	itt	eq
 8001a14:	6819      	ldreq	r1, [r3, #0]
 8001a16:	685b      	ldreq	r3, [r3, #4]
 8001a18:	6063      	str	r3, [r4, #4]
 8001a1a:	bf04      	itt	eq
 8001a1c:	1809      	addeq	r1, r1, r0
 8001a1e:	6021      	streq	r1, [r4, #0]
 8001a20:	6054      	str	r4, [r2, #4]
 8001a22:	e7ca      	b.n	80019ba <_free_r+0x22>
 8001a24:	bd38      	pop	{r3, r4, r5, pc}
 8001a26:	bf00      	nop
 8001a28:	2000021c 	.word	0x2000021c

08001a2c <sbrk_aligned>:
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8001a6c <sbrk_aligned+0x40>)
 8001a30:	460c      	mov	r4, r1
 8001a32:	6831      	ldr	r1, [r6, #0]
 8001a34:	4605      	mov	r5, r0
 8001a36:	b911      	cbnz	r1, 8001a3e <sbrk_aligned+0x12>
 8001a38:	f000 fcb6 	bl	80023a8 <_sbrk_r>
 8001a3c:	6030      	str	r0, [r6, #0]
 8001a3e:	4621      	mov	r1, r4
 8001a40:	4628      	mov	r0, r5
 8001a42:	f000 fcb1 	bl	80023a8 <_sbrk_r>
 8001a46:	1c43      	adds	r3, r0, #1
 8001a48:	d103      	bne.n	8001a52 <sbrk_aligned+0x26>
 8001a4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001a4e:	4620      	mov	r0, r4
 8001a50:	bd70      	pop	{r4, r5, r6, pc}
 8001a52:	1cc4      	adds	r4, r0, #3
 8001a54:	f024 0403 	bic.w	r4, r4, #3
 8001a58:	42a0      	cmp	r0, r4
 8001a5a:	d0f8      	beq.n	8001a4e <sbrk_aligned+0x22>
 8001a5c:	1a21      	subs	r1, r4, r0
 8001a5e:	4628      	mov	r0, r5
 8001a60:	f000 fca2 	bl	80023a8 <_sbrk_r>
 8001a64:	3001      	adds	r0, #1
 8001a66:	d1f2      	bne.n	8001a4e <sbrk_aligned+0x22>
 8001a68:	e7ef      	b.n	8001a4a <sbrk_aligned+0x1e>
 8001a6a:	bf00      	nop
 8001a6c:	20000218 	.word	0x20000218

08001a70 <_malloc_r>:
 8001a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a74:	1ccd      	adds	r5, r1, #3
 8001a76:	f025 0503 	bic.w	r5, r5, #3
 8001a7a:	3508      	adds	r5, #8
 8001a7c:	2d0c      	cmp	r5, #12
 8001a7e:	bf38      	it	cc
 8001a80:	250c      	movcc	r5, #12
 8001a82:	2d00      	cmp	r5, #0
 8001a84:	4606      	mov	r6, r0
 8001a86:	db01      	blt.n	8001a8c <_malloc_r+0x1c>
 8001a88:	42a9      	cmp	r1, r5
 8001a8a:	d904      	bls.n	8001a96 <_malloc_r+0x26>
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	6033      	str	r3, [r6, #0]
 8001a90:	2000      	movs	r0, #0
 8001a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001b6c <_malloc_r+0xfc>
 8001a9a:	f000 f869 	bl	8001b70 <__malloc_lock>
 8001a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8001aa2:	461c      	mov	r4, r3
 8001aa4:	bb44      	cbnz	r4, 8001af8 <_malloc_r+0x88>
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f7ff ffbf 	bl	8001a2c <sbrk_aligned>
 8001aae:	1c43      	adds	r3, r0, #1
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	d158      	bne.n	8001b66 <_malloc_r+0xf6>
 8001ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8001ab8:	4627      	mov	r7, r4
 8001aba:	2f00      	cmp	r7, #0
 8001abc:	d143      	bne.n	8001b46 <_malloc_r+0xd6>
 8001abe:	2c00      	cmp	r4, #0
 8001ac0:	d04b      	beq.n	8001b5a <_malloc_r+0xea>
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	4639      	mov	r1, r7
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	eb04 0903 	add.w	r9, r4, r3
 8001acc:	f000 fc6c 	bl	80023a8 <_sbrk_r>
 8001ad0:	4581      	cmp	r9, r0
 8001ad2:	d142      	bne.n	8001b5a <_malloc_r+0xea>
 8001ad4:	6821      	ldr	r1, [r4, #0]
 8001ad6:	1a6d      	subs	r5, r5, r1
 8001ad8:	4629      	mov	r1, r5
 8001ada:	4630      	mov	r0, r6
 8001adc:	f7ff ffa6 	bl	8001a2c <sbrk_aligned>
 8001ae0:	3001      	adds	r0, #1
 8001ae2:	d03a      	beq.n	8001b5a <_malloc_r+0xea>
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	442b      	add	r3, r5
 8001ae8:	6023      	str	r3, [r4, #0]
 8001aea:	f8d8 3000 	ldr.w	r3, [r8]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	bb62      	cbnz	r2, 8001b4c <_malloc_r+0xdc>
 8001af2:	f8c8 7000 	str.w	r7, [r8]
 8001af6:	e00f      	b.n	8001b18 <_malloc_r+0xa8>
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	1b52      	subs	r2, r2, r5
 8001afc:	d420      	bmi.n	8001b40 <_malloc_r+0xd0>
 8001afe:	2a0b      	cmp	r2, #11
 8001b00:	d917      	bls.n	8001b32 <_malloc_r+0xc2>
 8001b02:	1961      	adds	r1, r4, r5
 8001b04:	42a3      	cmp	r3, r4
 8001b06:	6025      	str	r5, [r4, #0]
 8001b08:	bf18      	it	ne
 8001b0a:	6059      	strne	r1, [r3, #4]
 8001b0c:	6863      	ldr	r3, [r4, #4]
 8001b0e:	bf08      	it	eq
 8001b10:	f8c8 1000 	streq.w	r1, [r8]
 8001b14:	5162      	str	r2, [r4, r5]
 8001b16:	604b      	str	r3, [r1, #4]
 8001b18:	4630      	mov	r0, r6
 8001b1a:	f000 f82f 	bl	8001b7c <__malloc_unlock>
 8001b1e:	f104 000b 	add.w	r0, r4, #11
 8001b22:	1d23      	adds	r3, r4, #4
 8001b24:	f020 0007 	bic.w	r0, r0, #7
 8001b28:	1ac2      	subs	r2, r0, r3
 8001b2a:	bf1c      	itt	ne
 8001b2c:	1a1b      	subne	r3, r3, r0
 8001b2e:	50a3      	strne	r3, [r4, r2]
 8001b30:	e7af      	b.n	8001a92 <_malloc_r+0x22>
 8001b32:	6862      	ldr	r2, [r4, #4]
 8001b34:	42a3      	cmp	r3, r4
 8001b36:	bf0c      	ite	eq
 8001b38:	f8c8 2000 	streq.w	r2, [r8]
 8001b3c:	605a      	strne	r2, [r3, #4]
 8001b3e:	e7eb      	b.n	8001b18 <_malloc_r+0xa8>
 8001b40:	4623      	mov	r3, r4
 8001b42:	6864      	ldr	r4, [r4, #4]
 8001b44:	e7ae      	b.n	8001aa4 <_malloc_r+0x34>
 8001b46:	463c      	mov	r4, r7
 8001b48:	687f      	ldr	r7, [r7, #4]
 8001b4a:	e7b6      	b.n	8001aba <_malloc_r+0x4a>
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	42a3      	cmp	r3, r4
 8001b52:	d1fb      	bne.n	8001b4c <_malloc_r+0xdc>
 8001b54:	2300      	movs	r3, #0
 8001b56:	6053      	str	r3, [r2, #4]
 8001b58:	e7de      	b.n	8001b18 <_malloc_r+0xa8>
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	6033      	str	r3, [r6, #0]
 8001b5e:	4630      	mov	r0, r6
 8001b60:	f000 f80c 	bl	8001b7c <__malloc_unlock>
 8001b64:	e794      	b.n	8001a90 <_malloc_r+0x20>
 8001b66:	6005      	str	r5, [r0, #0]
 8001b68:	e7d6      	b.n	8001b18 <_malloc_r+0xa8>
 8001b6a:	bf00      	nop
 8001b6c:	2000021c 	.word	0x2000021c

08001b70 <__malloc_lock>:
 8001b70:	4801      	ldr	r0, [pc, #4]	@ (8001b78 <__malloc_lock+0x8>)
 8001b72:	f7ff bf0e 	b.w	8001992 <__retarget_lock_acquire_recursive>
 8001b76:	bf00      	nop
 8001b78:	20000214 	.word	0x20000214

08001b7c <__malloc_unlock>:
 8001b7c:	4801      	ldr	r0, [pc, #4]	@ (8001b84 <__malloc_unlock+0x8>)
 8001b7e:	f7ff bf09 	b.w	8001994 <__retarget_lock_release_recursive>
 8001b82:	bf00      	nop
 8001b84:	20000214 	.word	0x20000214

08001b88 <__sfputc_r>:
 8001b88:	6893      	ldr	r3, [r2, #8]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	b410      	push	{r4}
 8001b90:	6093      	str	r3, [r2, #8]
 8001b92:	da08      	bge.n	8001ba6 <__sfputc_r+0x1e>
 8001b94:	6994      	ldr	r4, [r2, #24]
 8001b96:	42a3      	cmp	r3, r4
 8001b98:	db01      	blt.n	8001b9e <__sfputc_r+0x16>
 8001b9a:	290a      	cmp	r1, #10
 8001b9c:	d103      	bne.n	8001ba6 <__sfputc_r+0x1e>
 8001b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ba2:	f000 bb6d 	b.w	8002280 <__swbuf_r>
 8001ba6:	6813      	ldr	r3, [r2, #0]
 8001ba8:	1c58      	adds	r0, r3, #1
 8001baa:	6010      	str	r0, [r2, #0]
 8001bac:	7019      	strb	r1, [r3, #0]
 8001bae:	4608      	mov	r0, r1
 8001bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <__sfputs_r>:
 8001bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb8:	4606      	mov	r6, r0
 8001bba:	460f      	mov	r7, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	18d5      	adds	r5, r2, r3
 8001bc0:	42ac      	cmp	r4, r5
 8001bc2:	d101      	bne.n	8001bc8 <__sfputs_r+0x12>
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	e007      	b.n	8001bd8 <__sfputs_r+0x22>
 8001bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bcc:	463a      	mov	r2, r7
 8001bce:	4630      	mov	r0, r6
 8001bd0:	f7ff ffda 	bl	8001b88 <__sfputc_r>
 8001bd4:	1c43      	adds	r3, r0, #1
 8001bd6:	d1f3      	bne.n	8001bc0 <__sfputs_r+0xa>
 8001bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001bdc <_vfiprintf_r>:
 8001bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be0:	460d      	mov	r5, r1
 8001be2:	b09d      	sub	sp, #116	@ 0x74
 8001be4:	4614      	mov	r4, r2
 8001be6:	4698      	mov	r8, r3
 8001be8:	4606      	mov	r6, r0
 8001bea:	b118      	cbz	r0, 8001bf4 <_vfiprintf_r+0x18>
 8001bec:	6a03      	ldr	r3, [r0, #32]
 8001bee:	b90b      	cbnz	r3, 8001bf4 <_vfiprintf_r+0x18>
 8001bf0:	f7ff fdca 	bl	8001788 <__sinit>
 8001bf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001bf6:	07d9      	lsls	r1, r3, #31
 8001bf8:	d405      	bmi.n	8001c06 <_vfiprintf_r+0x2a>
 8001bfa:	89ab      	ldrh	r3, [r5, #12]
 8001bfc:	059a      	lsls	r2, r3, #22
 8001bfe:	d402      	bmi.n	8001c06 <_vfiprintf_r+0x2a>
 8001c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c02:	f7ff fec6 	bl	8001992 <__retarget_lock_acquire_recursive>
 8001c06:	89ab      	ldrh	r3, [r5, #12]
 8001c08:	071b      	lsls	r3, r3, #28
 8001c0a:	d501      	bpl.n	8001c10 <_vfiprintf_r+0x34>
 8001c0c:	692b      	ldr	r3, [r5, #16]
 8001c0e:	b99b      	cbnz	r3, 8001c38 <_vfiprintf_r+0x5c>
 8001c10:	4629      	mov	r1, r5
 8001c12:	4630      	mov	r0, r6
 8001c14:	f000 fb72 	bl	80022fc <__swsetup_r>
 8001c18:	b170      	cbz	r0, 8001c38 <_vfiprintf_r+0x5c>
 8001c1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c1c:	07dc      	lsls	r4, r3, #31
 8001c1e:	d504      	bpl.n	8001c2a <_vfiprintf_r+0x4e>
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c24:	b01d      	add	sp, #116	@ 0x74
 8001c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c2a:	89ab      	ldrh	r3, [r5, #12]
 8001c2c:	0598      	lsls	r0, r3, #22
 8001c2e:	d4f7      	bmi.n	8001c20 <_vfiprintf_r+0x44>
 8001c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c32:	f7ff feaf 	bl	8001994 <__retarget_lock_release_recursive>
 8001c36:	e7f3      	b.n	8001c20 <_vfiprintf_r+0x44>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c46:	2330      	movs	r3, #48	@ 0x30
 8001c48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001df8 <_vfiprintf_r+0x21c>
 8001c4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001c50:	f04f 0901 	mov.w	r9, #1
 8001c54:	4623      	mov	r3, r4
 8001c56:	469a      	mov	sl, r3
 8001c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c5c:	b10a      	cbz	r2, 8001c62 <_vfiprintf_r+0x86>
 8001c5e:	2a25      	cmp	r2, #37	@ 0x25
 8001c60:	d1f9      	bne.n	8001c56 <_vfiprintf_r+0x7a>
 8001c62:	ebba 0b04 	subs.w	fp, sl, r4
 8001c66:	d00b      	beq.n	8001c80 <_vfiprintf_r+0xa4>
 8001c68:	465b      	mov	r3, fp
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f7ff ffa1 	bl	8001bb6 <__sfputs_r>
 8001c74:	3001      	adds	r0, #1
 8001c76:	f000 80a7 	beq.w	8001dc8 <_vfiprintf_r+0x1ec>
 8001c7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c7c:	445a      	add	r2, fp
 8001c7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001c80:	f89a 3000 	ldrb.w	r3, [sl]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 809f 	beq.w	8001dc8 <_vfiprintf_r+0x1ec>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c94:	f10a 0a01 	add.w	sl, sl, #1
 8001c98:	9304      	str	r3, [sp, #16]
 8001c9a:	9307      	str	r3, [sp, #28]
 8001c9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001ca0:	931a      	str	r3, [sp, #104]	@ 0x68
 8001ca2:	4654      	mov	r4, sl
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001caa:	4853      	ldr	r0, [pc, #332]	@ (8001df8 <_vfiprintf_r+0x21c>)
 8001cac:	f7fe fa90 	bl	80001d0 <memchr>
 8001cb0:	9a04      	ldr	r2, [sp, #16]
 8001cb2:	b9d8      	cbnz	r0, 8001cec <_vfiprintf_r+0x110>
 8001cb4:	06d1      	lsls	r1, r2, #27
 8001cb6:	bf44      	itt	mi
 8001cb8:	2320      	movmi	r3, #32
 8001cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001cbe:	0713      	lsls	r3, r2, #28
 8001cc0:	bf44      	itt	mi
 8001cc2:	232b      	movmi	r3, #43	@ 0x2b
 8001cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8001ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cce:	d015      	beq.n	8001cfc <_vfiprintf_r+0x120>
 8001cd0:	9a07      	ldr	r2, [sp, #28]
 8001cd2:	4654      	mov	r4, sl
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f04f 0c0a 	mov.w	ip, #10
 8001cda:	4621      	mov	r1, r4
 8001cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ce0:	3b30      	subs	r3, #48	@ 0x30
 8001ce2:	2b09      	cmp	r3, #9
 8001ce4:	d94b      	bls.n	8001d7e <_vfiprintf_r+0x1a2>
 8001ce6:	b1b0      	cbz	r0, 8001d16 <_vfiprintf_r+0x13a>
 8001ce8:	9207      	str	r2, [sp, #28]
 8001cea:	e014      	b.n	8001d16 <_vfiprintf_r+0x13a>
 8001cec:	eba0 0308 	sub.w	r3, r0, r8
 8001cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	9304      	str	r3, [sp, #16]
 8001cf8:	46a2      	mov	sl, r4
 8001cfa:	e7d2      	b.n	8001ca2 <_vfiprintf_r+0xc6>
 8001cfc:	9b03      	ldr	r3, [sp, #12]
 8001cfe:	1d19      	adds	r1, r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	9103      	str	r1, [sp, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bfbb      	ittet	lt
 8001d08:	425b      	neglt	r3, r3
 8001d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8001d0e:	9307      	strge	r3, [sp, #28]
 8001d10:	9307      	strlt	r3, [sp, #28]
 8001d12:	bfb8      	it	lt
 8001d14:	9204      	strlt	r2, [sp, #16]
 8001d16:	7823      	ldrb	r3, [r4, #0]
 8001d18:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d1a:	d10a      	bne.n	8001d32 <_vfiprintf_r+0x156>
 8001d1c:	7863      	ldrb	r3, [r4, #1]
 8001d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d20:	d132      	bne.n	8001d88 <_vfiprintf_r+0x1ac>
 8001d22:	9b03      	ldr	r3, [sp, #12]
 8001d24:	1d1a      	adds	r2, r3, #4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	9203      	str	r2, [sp, #12]
 8001d2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001d2e:	3402      	adds	r4, #2
 8001d30:	9305      	str	r3, [sp, #20]
 8001d32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001e08 <_vfiprintf_r+0x22c>
 8001d36:	7821      	ldrb	r1, [r4, #0]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	4650      	mov	r0, sl
 8001d3c:	f7fe fa48 	bl	80001d0 <memchr>
 8001d40:	b138      	cbz	r0, 8001d52 <_vfiprintf_r+0x176>
 8001d42:	9b04      	ldr	r3, [sp, #16]
 8001d44:	eba0 000a 	sub.w	r0, r0, sl
 8001d48:	2240      	movs	r2, #64	@ 0x40
 8001d4a:	4082      	lsls	r2, r0
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	3401      	adds	r4, #1
 8001d50:	9304      	str	r3, [sp, #16]
 8001d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d56:	4829      	ldr	r0, [pc, #164]	@ (8001dfc <_vfiprintf_r+0x220>)
 8001d58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001d5c:	2206      	movs	r2, #6
 8001d5e:	f7fe fa37 	bl	80001d0 <memchr>
 8001d62:	2800      	cmp	r0, #0
 8001d64:	d03f      	beq.n	8001de6 <_vfiprintf_r+0x20a>
 8001d66:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <_vfiprintf_r+0x224>)
 8001d68:	bb1b      	cbnz	r3, 8001db2 <_vfiprintf_r+0x1d6>
 8001d6a:	9b03      	ldr	r3, [sp, #12]
 8001d6c:	3307      	adds	r3, #7
 8001d6e:	f023 0307 	bic.w	r3, r3, #7
 8001d72:	3308      	adds	r3, #8
 8001d74:	9303      	str	r3, [sp, #12]
 8001d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d78:	443b      	add	r3, r7
 8001d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d7c:	e76a      	b.n	8001c54 <_vfiprintf_r+0x78>
 8001d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d82:	460c      	mov	r4, r1
 8001d84:	2001      	movs	r0, #1
 8001d86:	e7a8      	b.n	8001cda <_vfiprintf_r+0xfe>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	3401      	adds	r4, #1
 8001d8c:	9305      	str	r3, [sp, #20]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 0c0a 	mov.w	ip, #10
 8001d94:	4620      	mov	r0, r4
 8001d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d9a:	3a30      	subs	r2, #48	@ 0x30
 8001d9c:	2a09      	cmp	r2, #9
 8001d9e:	d903      	bls.n	8001da8 <_vfiprintf_r+0x1cc>
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0c6      	beq.n	8001d32 <_vfiprintf_r+0x156>
 8001da4:	9105      	str	r1, [sp, #20]
 8001da6:	e7c4      	b.n	8001d32 <_vfiprintf_r+0x156>
 8001da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001dac:	4604      	mov	r4, r0
 8001dae:	2301      	movs	r3, #1
 8001db0:	e7f0      	b.n	8001d94 <_vfiprintf_r+0x1b8>
 8001db2:	ab03      	add	r3, sp, #12
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	462a      	mov	r2, r5
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <_vfiprintf_r+0x228>)
 8001dba:	a904      	add	r1, sp, #16
 8001dbc:	4630      	mov	r0, r6
 8001dbe:	f3af 8000 	nop.w
 8001dc2:	4607      	mov	r7, r0
 8001dc4:	1c78      	adds	r0, r7, #1
 8001dc6:	d1d6      	bne.n	8001d76 <_vfiprintf_r+0x19a>
 8001dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001dca:	07d9      	lsls	r1, r3, #31
 8001dcc:	d405      	bmi.n	8001dda <_vfiprintf_r+0x1fe>
 8001dce:	89ab      	ldrh	r3, [r5, #12]
 8001dd0:	059a      	lsls	r2, r3, #22
 8001dd2:	d402      	bmi.n	8001dda <_vfiprintf_r+0x1fe>
 8001dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001dd6:	f7ff fddd 	bl	8001994 <__retarget_lock_release_recursive>
 8001dda:	89ab      	ldrh	r3, [r5, #12]
 8001ddc:	065b      	lsls	r3, r3, #25
 8001dde:	f53f af1f 	bmi.w	8001c20 <_vfiprintf_r+0x44>
 8001de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001de4:	e71e      	b.n	8001c24 <_vfiprintf_r+0x48>
 8001de6:	ab03      	add	r3, sp, #12
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	462a      	mov	r2, r5
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <_vfiprintf_r+0x228>)
 8001dee:	a904      	add	r1, sp, #16
 8001df0:	4630      	mov	r0, r6
 8001df2:	f000 f879 	bl	8001ee8 <_printf_i>
 8001df6:	e7e4      	b.n	8001dc2 <_vfiprintf_r+0x1e6>
 8001df8:	0800253c 	.word	0x0800253c
 8001dfc:	08002546 	.word	0x08002546
 8001e00:	00000000 	.word	0x00000000
 8001e04:	08001bb7 	.word	0x08001bb7
 8001e08:	08002542 	.word	0x08002542

08001e0c <_printf_common>:
 8001e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e10:	4616      	mov	r6, r2
 8001e12:	4698      	mov	r8, r3
 8001e14:	688a      	ldr	r2, [r1, #8]
 8001e16:	690b      	ldr	r3, [r1, #16]
 8001e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bfb8      	it	lt
 8001e20:	4613      	movlt	r3, r2
 8001e22:	6033      	str	r3, [r6, #0]
 8001e24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e28:	4607      	mov	r7, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	b10a      	cbz	r2, 8001e32 <_printf_common+0x26>
 8001e2e:	3301      	adds	r3, #1
 8001e30:	6033      	str	r3, [r6, #0]
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	0699      	lsls	r1, r3, #26
 8001e36:	bf42      	ittt	mi
 8001e38:	6833      	ldrmi	r3, [r6, #0]
 8001e3a:	3302      	addmi	r3, #2
 8001e3c:	6033      	strmi	r3, [r6, #0]
 8001e3e:	6825      	ldr	r5, [r4, #0]
 8001e40:	f015 0506 	ands.w	r5, r5, #6
 8001e44:	d106      	bne.n	8001e54 <_printf_common+0x48>
 8001e46:	f104 0a19 	add.w	sl, r4, #25
 8001e4a:	68e3      	ldr	r3, [r4, #12]
 8001e4c:	6832      	ldr	r2, [r6, #0]
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	42ab      	cmp	r3, r5
 8001e52:	dc26      	bgt.n	8001ea2 <_printf_common+0x96>
 8001e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e58:	6822      	ldr	r2, [r4, #0]
 8001e5a:	3b00      	subs	r3, #0
 8001e5c:	bf18      	it	ne
 8001e5e:	2301      	movne	r3, #1
 8001e60:	0692      	lsls	r2, r2, #26
 8001e62:	d42b      	bmi.n	8001ebc <_printf_common+0xb0>
 8001e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e68:	4641      	mov	r1, r8
 8001e6a:	4638      	mov	r0, r7
 8001e6c:	47c8      	blx	r9
 8001e6e:	3001      	adds	r0, #1
 8001e70:	d01e      	beq.n	8001eb0 <_printf_common+0xa4>
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	6922      	ldr	r2, [r4, #16]
 8001e76:	f003 0306 	and.w	r3, r3, #6
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf02      	ittt	eq
 8001e7e:	68e5      	ldreq	r5, [r4, #12]
 8001e80:	6833      	ldreq	r3, [r6, #0]
 8001e82:	1aed      	subeq	r5, r5, r3
 8001e84:	68a3      	ldr	r3, [r4, #8]
 8001e86:	bf0c      	ite	eq
 8001e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e8c:	2500      	movne	r5, #0
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	bfc4      	itt	gt
 8001e92:	1a9b      	subgt	r3, r3, r2
 8001e94:	18ed      	addgt	r5, r5, r3
 8001e96:	2600      	movs	r6, #0
 8001e98:	341a      	adds	r4, #26
 8001e9a:	42b5      	cmp	r5, r6
 8001e9c:	d11a      	bne.n	8001ed4 <_printf_common+0xc8>
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	e008      	b.n	8001eb4 <_printf_common+0xa8>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	4652      	mov	r2, sl
 8001ea6:	4641      	mov	r1, r8
 8001ea8:	4638      	mov	r0, r7
 8001eaa:	47c8      	blx	r9
 8001eac:	3001      	adds	r0, #1
 8001eae:	d103      	bne.n	8001eb8 <_printf_common+0xac>
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eb8:	3501      	adds	r5, #1
 8001eba:	e7c6      	b.n	8001e4a <_printf_common+0x3e>
 8001ebc:	18e1      	adds	r1, r4, r3
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	2030      	movs	r0, #48	@ 0x30
 8001ec2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ec6:	4422      	add	r2, r4
 8001ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	e7c7      	b.n	8001e64 <_printf_common+0x58>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	4622      	mov	r2, r4
 8001ed8:	4641      	mov	r1, r8
 8001eda:	4638      	mov	r0, r7
 8001edc:	47c8      	blx	r9
 8001ede:	3001      	adds	r0, #1
 8001ee0:	d0e6      	beq.n	8001eb0 <_printf_common+0xa4>
 8001ee2:	3601      	adds	r6, #1
 8001ee4:	e7d9      	b.n	8001e9a <_printf_common+0x8e>
	...

08001ee8 <_printf_i>:
 8001ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001eec:	7e0f      	ldrb	r7, [r1, #24]
 8001eee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ef0:	2f78      	cmp	r7, #120	@ 0x78
 8001ef2:	4691      	mov	r9, r2
 8001ef4:	4680      	mov	r8, r0
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	469a      	mov	sl, r3
 8001efa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001efe:	d807      	bhi.n	8001f10 <_printf_i+0x28>
 8001f00:	2f62      	cmp	r7, #98	@ 0x62
 8001f02:	d80a      	bhi.n	8001f1a <_printf_i+0x32>
 8001f04:	2f00      	cmp	r7, #0
 8001f06:	f000 80d2 	beq.w	80020ae <_printf_i+0x1c6>
 8001f0a:	2f58      	cmp	r7, #88	@ 0x58
 8001f0c:	f000 80b9 	beq.w	8002082 <_printf_i+0x19a>
 8001f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001f18:	e03a      	b.n	8001f90 <_printf_i+0xa8>
 8001f1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f1e:	2b15      	cmp	r3, #21
 8001f20:	d8f6      	bhi.n	8001f10 <_printf_i+0x28>
 8001f22:	a101      	add	r1, pc, #4	@ (adr r1, 8001f28 <_printf_i+0x40>)
 8001f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f28:	08001f81 	.word	0x08001f81
 8001f2c:	08001f95 	.word	0x08001f95
 8001f30:	08001f11 	.word	0x08001f11
 8001f34:	08001f11 	.word	0x08001f11
 8001f38:	08001f11 	.word	0x08001f11
 8001f3c:	08001f11 	.word	0x08001f11
 8001f40:	08001f95 	.word	0x08001f95
 8001f44:	08001f11 	.word	0x08001f11
 8001f48:	08001f11 	.word	0x08001f11
 8001f4c:	08001f11 	.word	0x08001f11
 8001f50:	08001f11 	.word	0x08001f11
 8001f54:	08002095 	.word	0x08002095
 8001f58:	08001fbf 	.word	0x08001fbf
 8001f5c:	0800204f 	.word	0x0800204f
 8001f60:	08001f11 	.word	0x08001f11
 8001f64:	08001f11 	.word	0x08001f11
 8001f68:	080020b7 	.word	0x080020b7
 8001f6c:	08001f11 	.word	0x08001f11
 8001f70:	08001fbf 	.word	0x08001fbf
 8001f74:	08001f11 	.word	0x08001f11
 8001f78:	08001f11 	.word	0x08001f11
 8001f7c:	08002057 	.word	0x08002057
 8001f80:	6833      	ldr	r3, [r6, #0]
 8001f82:	1d1a      	adds	r2, r3, #4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6032      	str	r2, [r6, #0]
 8001f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f90:	2301      	movs	r3, #1
 8001f92:	e09d      	b.n	80020d0 <_printf_i+0x1e8>
 8001f94:	6833      	ldr	r3, [r6, #0]
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	1d19      	adds	r1, r3, #4
 8001f9a:	6031      	str	r1, [r6, #0]
 8001f9c:	0606      	lsls	r6, r0, #24
 8001f9e:	d501      	bpl.n	8001fa4 <_printf_i+0xbc>
 8001fa0:	681d      	ldr	r5, [r3, #0]
 8001fa2:	e003      	b.n	8001fac <_printf_i+0xc4>
 8001fa4:	0645      	lsls	r5, r0, #25
 8001fa6:	d5fb      	bpl.n	8001fa0 <_printf_i+0xb8>
 8001fa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001fac:	2d00      	cmp	r5, #0
 8001fae:	da03      	bge.n	8001fb8 <_printf_i+0xd0>
 8001fb0:	232d      	movs	r3, #45	@ 0x2d
 8001fb2:	426d      	negs	r5, r5
 8001fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001fb8:	4859      	ldr	r0, [pc, #356]	@ (8002120 <_printf_i+0x238>)
 8001fba:	230a      	movs	r3, #10
 8001fbc:	e011      	b.n	8001fe2 <_printf_i+0xfa>
 8001fbe:	6821      	ldr	r1, [r4, #0]
 8001fc0:	6833      	ldr	r3, [r6, #0]
 8001fc2:	0608      	lsls	r0, r1, #24
 8001fc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8001fc8:	d402      	bmi.n	8001fd0 <_printf_i+0xe8>
 8001fca:	0649      	lsls	r1, r1, #25
 8001fcc:	bf48      	it	mi
 8001fce:	b2ad      	uxthmi	r5, r5
 8001fd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001fd2:	4853      	ldr	r0, [pc, #332]	@ (8002120 <_printf_i+0x238>)
 8001fd4:	6033      	str	r3, [r6, #0]
 8001fd6:	bf14      	ite	ne
 8001fd8:	230a      	movne	r3, #10
 8001fda:	2308      	moveq	r3, #8
 8001fdc:	2100      	movs	r1, #0
 8001fde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001fe2:	6866      	ldr	r6, [r4, #4]
 8001fe4:	60a6      	str	r6, [r4, #8]
 8001fe6:	2e00      	cmp	r6, #0
 8001fe8:	bfa2      	ittt	ge
 8001fea:	6821      	ldrge	r1, [r4, #0]
 8001fec:	f021 0104 	bicge.w	r1, r1, #4
 8001ff0:	6021      	strge	r1, [r4, #0]
 8001ff2:	b90d      	cbnz	r5, 8001ff8 <_printf_i+0x110>
 8001ff4:	2e00      	cmp	r6, #0
 8001ff6:	d04b      	beq.n	8002090 <_printf_i+0x1a8>
 8001ff8:	4616      	mov	r6, r2
 8001ffa:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ffe:	fb03 5711 	mls	r7, r3, r1, r5
 8002002:	5dc7      	ldrb	r7, [r0, r7]
 8002004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002008:	462f      	mov	r7, r5
 800200a:	42bb      	cmp	r3, r7
 800200c:	460d      	mov	r5, r1
 800200e:	d9f4      	bls.n	8001ffa <_printf_i+0x112>
 8002010:	2b08      	cmp	r3, #8
 8002012:	d10b      	bne.n	800202c <_printf_i+0x144>
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	07df      	lsls	r7, r3, #31
 8002018:	d508      	bpl.n	800202c <_printf_i+0x144>
 800201a:	6923      	ldr	r3, [r4, #16]
 800201c:	6861      	ldr	r1, [r4, #4]
 800201e:	4299      	cmp	r1, r3
 8002020:	bfde      	ittt	le
 8002022:	2330      	movle	r3, #48	@ 0x30
 8002024:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002028:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800202c:	1b92      	subs	r2, r2, r6
 800202e:	6122      	str	r2, [r4, #16]
 8002030:	f8cd a000 	str.w	sl, [sp]
 8002034:	464b      	mov	r3, r9
 8002036:	aa03      	add	r2, sp, #12
 8002038:	4621      	mov	r1, r4
 800203a:	4640      	mov	r0, r8
 800203c:	f7ff fee6 	bl	8001e0c <_printf_common>
 8002040:	3001      	adds	r0, #1
 8002042:	d14a      	bne.n	80020da <_printf_i+0x1f2>
 8002044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002048:	b004      	add	sp, #16
 800204a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	f043 0320 	orr.w	r3, r3, #32
 8002054:	6023      	str	r3, [r4, #0]
 8002056:	4833      	ldr	r0, [pc, #204]	@ (8002124 <_printf_i+0x23c>)
 8002058:	2778      	movs	r7, #120	@ 0x78
 800205a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	6831      	ldr	r1, [r6, #0]
 8002062:	061f      	lsls	r7, r3, #24
 8002064:	f851 5b04 	ldr.w	r5, [r1], #4
 8002068:	d402      	bmi.n	8002070 <_printf_i+0x188>
 800206a:	065f      	lsls	r7, r3, #25
 800206c:	bf48      	it	mi
 800206e:	b2ad      	uxthmi	r5, r5
 8002070:	6031      	str	r1, [r6, #0]
 8002072:	07d9      	lsls	r1, r3, #31
 8002074:	bf44      	itt	mi
 8002076:	f043 0320 	orrmi.w	r3, r3, #32
 800207a:	6023      	strmi	r3, [r4, #0]
 800207c:	b11d      	cbz	r5, 8002086 <_printf_i+0x19e>
 800207e:	2310      	movs	r3, #16
 8002080:	e7ac      	b.n	8001fdc <_printf_i+0xf4>
 8002082:	4827      	ldr	r0, [pc, #156]	@ (8002120 <_printf_i+0x238>)
 8002084:	e7e9      	b.n	800205a <_printf_i+0x172>
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	f023 0320 	bic.w	r3, r3, #32
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	e7f6      	b.n	800207e <_printf_i+0x196>
 8002090:	4616      	mov	r6, r2
 8002092:	e7bd      	b.n	8002010 <_printf_i+0x128>
 8002094:	6833      	ldr	r3, [r6, #0]
 8002096:	6825      	ldr	r5, [r4, #0]
 8002098:	6961      	ldr	r1, [r4, #20]
 800209a:	1d18      	adds	r0, r3, #4
 800209c:	6030      	str	r0, [r6, #0]
 800209e:	062e      	lsls	r6, r5, #24
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	d501      	bpl.n	80020a8 <_printf_i+0x1c0>
 80020a4:	6019      	str	r1, [r3, #0]
 80020a6:	e002      	b.n	80020ae <_printf_i+0x1c6>
 80020a8:	0668      	lsls	r0, r5, #25
 80020aa:	d5fb      	bpl.n	80020a4 <_printf_i+0x1bc>
 80020ac:	8019      	strh	r1, [r3, #0]
 80020ae:	2300      	movs	r3, #0
 80020b0:	6123      	str	r3, [r4, #16]
 80020b2:	4616      	mov	r6, r2
 80020b4:	e7bc      	b.n	8002030 <_printf_i+0x148>
 80020b6:	6833      	ldr	r3, [r6, #0]
 80020b8:	1d1a      	adds	r2, r3, #4
 80020ba:	6032      	str	r2, [r6, #0]
 80020bc:	681e      	ldr	r6, [r3, #0]
 80020be:	6862      	ldr	r2, [r4, #4]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4630      	mov	r0, r6
 80020c4:	f7fe f884 	bl	80001d0 <memchr>
 80020c8:	b108      	cbz	r0, 80020ce <_printf_i+0x1e6>
 80020ca:	1b80      	subs	r0, r0, r6
 80020cc:	6060      	str	r0, [r4, #4]
 80020ce:	6863      	ldr	r3, [r4, #4]
 80020d0:	6123      	str	r3, [r4, #16]
 80020d2:	2300      	movs	r3, #0
 80020d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020d8:	e7aa      	b.n	8002030 <_printf_i+0x148>
 80020da:	6923      	ldr	r3, [r4, #16]
 80020dc:	4632      	mov	r2, r6
 80020de:	4649      	mov	r1, r9
 80020e0:	4640      	mov	r0, r8
 80020e2:	47d0      	blx	sl
 80020e4:	3001      	adds	r0, #1
 80020e6:	d0ad      	beq.n	8002044 <_printf_i+0x15c>
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	079b      	lsls	r3, r3, #30
 80020ec:	d413      	bmi.n	8002116 <_printf_i+0x22e>
 80020ee:	68e0      	ldr	r0, [r4, #12]
 80020f0:	9b03      	ldr	r3, [sp, #12]
 80020f2:	4298      	cmp	r0, r3
 80020f4:	bfb8      	it	lt
 80020f6:	4618      	movlt	r0, r3
 80020f8:	e7a6      	b.n	8002048 <_printf_i+0x160>
 80020fa:	2301      	movs	r3, #1
 80020fc:	4632      	mov	r2, r6
 80020fe:	4649      	mov	r1, r9
 8002100:	4640      	mov	r0, r8
 8002102:	47d0      	blx	sl
 8002104:	3001      	adds	r0, #1
 8002106:	d09d      	beq.n	8002044 <_printf_i+0x15c>
 8002108:	3501      	adds	r5, #1
 800210a:	68e3      	ldr	r3, [r4, #12]
 800210c:	9903      	ldr	r1, [sp, #12]
 800210e:	1a5b      	subs	r3, r3, r1
 8002110:	42ab      	cmp	r3, r5
 8002112:	dcf2      	bgt.n	80020fa <_printf_i+0x212>
 8002114:	e7eb      	b.n	80020ee <_printf_i+0x206>
 8002116:	2500      	movs	r5, #0
 8002118:	f104 0619 	add.w	r6, r4, #25
 800211c:	e7f5      	b.n	800210a <_printf_i+0x222>
 800211e:	bf00      	nop
 8002120:	0800254d 	.word	0x0800254d
 8002124:	0800255e 	.word	0x0800255e

08002128 <__sflush_r>:
 8002128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800212c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002130:	0716      	lsls	r6, r2, #28
 8002132:	4605      	mov	r5, r0
 8002134:	460c      	mov	r4, r1
 8002136:	d454      	bmi.n	80021e2 <__sflush_r+0xba>
 8002138:	684b      	ldr	r3, [r1, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	dc02      	bgt.n	8002144 <__sflush_r+0x1c>
 800213e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	dd48      	ble.n	80021d6 <__sflush_r+0xae>
 8002144:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002146:	2e00      	cmp	r6, #0
 8002148:	d045      	beq.n	80021d6 <__sflush_r+0xae>
 800214a:	2300      	movs	r3, #0
 800214c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002150:	682f      	ldr	r7, [r5, #0]
 8002152:	6a21      	ldr	r1, [r4, #32]
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	d030      	beq.n	80021ba <__sflush_r+0x92>
 8002158:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800215a:	89a3      	ldrh	r3, [r4, #12]
 800215c:	0759      	lsls	r1, r3, #29
 800215e:	d505      	bpl.n	800216c <__sflush_r+0x44>
 8002160:	6863      	ldr	r3, [r4, #4]
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002166:	b10b      	cbz	r3, 800216c <__sflush_r+0x44>
 8002168:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	2300      	movs	r3, #0
 800216e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002170:	6a21      	ldr	r1, [r4, #32]
 8002172:	4628      	mov	r0, r5
 8002174:	47b0      	blx	r6
 8002176:	1c43      	adds	r3, r0, #1
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	d106      	bne.n	800218a <__sflush_r+0x62>
 800217c:	6829      	ldr	r1, [r5, #0]
 800217e:	291d      	cmp	r1, #29
 8002180:	d82b      	bhi.n	80021da <__sflush_r+0xb2>
 8002182:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <__sflush_r+0x104>)
 8002184:	410a      	asrs	r2, r1
 8002186:	07d6      	lsls	r6, r2, #31
 8002188:	d427      	bmi.n	80021da <__sflush_r+0xb2>
 800218a:	2200      	movs	r2, #0
 800218c:	6062      	str	r2, [r4, #4]
 800218e:	04d9      	lsls	r1, r3, #19
 8002190:	6922      	ldr	r2, [r4, #16]
 8002192:	6022      	str	r2, [r4, #0]
 8002194:	d504      	bpl.n	80021a0 <__sflush_r+0x78>
 8002196:	1c42      	adds	r2, r0, #1
 8002198:	d101      	bne.n	800219e <__sflush_r+0x76>
 800219a:	682b      	ldr	r3, [r5, #0]
 800219c:	b903      	cbnz	r3, 80021a0 <__sflush_r+0x78>
 800219e:	6560      	str	r0, [r4, #84]	@ 0x54
 80021a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021a2:	602f      	str	r7, [r5, #0]
 80021a4:	b1b9      	cbz	r1, 80021d6 <__sflush_r+0xae>
 80021a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021aa:	4299      	cmp	r1, r3
 80021ac:	d002      	beq.n	80021b4 <__sflush_r+0x8c>
 80021ae:	4628      	mov	r0, r5
 80021b0:	f7ff fbf2 	bl	8001998 <_free_r>
 80021b4:	2300      	movs	r3, #0
 80021b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80021b8:	e00d      	b.n	80021d6 <__sflush_r+0xae>
 80021ba:	2301      	movs	r3, #1
 80021bc:	4628      	mov	r0, r5
 80021be:	47b0      	blx	r6
 80021c0:	4602      	mov	r2, r0
 80021c2:	1c50      	adds	r0, r2, #1
 80021c4:	d1c9      	bne.n	800215a <__sflush_r+0x32>
 80021c6:	682b      	ldr	r3, [r5, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0c6      	beq.n	800215a <__sflush_r+0x32>
 80021cc:	2b1d      	cmp	r3, #29
 80021ce:	d001      	beq.n	80021d4 <__sflush_r+0xac>
 80021d0:	2b16      	cmp	r3, #22
 80021d2:	d11e      	bne.n	8002212 <__sflush_r+0xea>
 80021d4:	602f      	str	r7, [r5, #0]
 80021d6:	2000      	movs	r0, #0
 80021d8:	e022      	b.n	8002220 <__sflush_r+0xf8>
 80021da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021de:	b21b      	sxth	r3, r3
 80021e0:	e01b      	b.n	800221a <__sflush_r+0xf2>
 80021e2:	690f      	ldr	r7, [r1, #16]
 80021e4:	2f00      	cmp	r7, #0
 80021e6:	d0f6      	beq.n	80021d6 <__sflush_r+0xae>
 80021e8:	0793      	lsls	r3, r2, #30
 80021ea:	680e      	ldr	r6, [r1, #0]
 80021ec:	bf08      	it	eq
 80021ee:	694b      	ldreq	r3, [r1, #20]
 80021f0:	600f      	str	r7, [r1, #0]
 80021f2:	bf18      	it	ne
 80021f4:	2300      	movne	r3, #0
 80021f6:	eba6 0807 	sub.w	r8, r6, r7
 80021fa:	608b      	str	r3, [r1, #8]
 80021fc:	f1b8 0f00 	cmp.w	r8, #0
 8002200:	dde9      	ble.n	80021d6 <__sflush_r+0xae>
 8002202:	6a21      	ldr	r1, [r4, #32]
 8002204:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002206:	4643      	mov	r3, r8
 8002208:	463a      	mov	r2, r7
 800220a:	4628      	mov	r0, r5
 800220c:	47b0      	blx	r6
 800220e:	2800      	cmp	r0, #0
 8002210:	dc08      	bgt.n	8002224 <__sflush_r+0xfc>
 8002212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800221a:	81a3      	strh	r3, [r4, #12]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002224:	4407      	add	r7, r0
 8002226:	eba8 0800 	sub.w	r8, r8, r0
 800222a:	e7e7      	b.n	80021fc <__sflush_r+0xd4>
 800222c:	dfbffffe 	.word	0xdfbffffe

08002230 <_fflush_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	690b      	ldr	r3, [r1, #16]
 8002234:	4605      	mov	r5, r0
 8002236:	460c      	mov	r4, r1
 8002238:	b913      	cbnz	r3, 8002240 <_fflush_r+0x10>
 800223a:	2500      	movs	r5, #0
 800223c:	4628      	mov	r0, r5
 800223e:	bd38      	pop	{r3, r4, r5, pc}
 8002240:	b118      	cbz	r0, 800224a <_fflush_r+0x1a>
 8002242:	6a03      	ldr	r3, [r0, #32]
 8002244:	b90b      	cbnz	r3, 800224a <_fflush_r+0x1a>
 8002246:	f7ff fa9f 	bl	8001788 <__sinit>
 800224a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f3      	beq.n	800223a <_fflush_r+0xa>
 8002252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002254:	07d0      	lsls	r0, r2, #31
 8002256:	d404      	bmi.n	8002262 <_fflush_r+0x32>
 8002258:	0599      	lsls	r1, r3, #22
 800225a:	d402      	bmi.n	8002262 <_fflush_r+0x32>
 800225c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800225e:	f7ff fb98 	bl	8001992 <__retarget_lock_acquire_recursive>
 8002262:	4628      	mov	r0, r5
 8002264:	4621      	mov	r1, r4
 8002266:	f7ff ff5f 	bl	8002128 <__sflush_r>
 800226a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800226c:	07da      	lsls	r2, r3, #31
 800226e:	4605      	mov	r5, r0
 8002270:	d4e4      	bmi.n	800223c <_fflush_r+0xc>
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	059b      	lsls	r3, r3, #22
 8002276:	d4e1      	bmi.n	800223c <_fflush_r+0xc>
 8002278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800227a:	f7ff fb8b 	bl	8001994 <__retarget_lock_release_recursive>
 800227e:	e7dd      	b.n	800223c <_fflush_r+0xc>

08002280 <__swbuf_r>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	460e      	mov	r6, r1
 8002284:	4614      	mov	r4, r2
 8002286:	4605      	mov	r5, r0
 8002288:	b118      	cbz	r0, 8002292 <__swbuf_r+0x12>
 800228a:	6a03      	ldr	r3, [r0, #32]
 800228c:	b90b      	cbnz	r3, 8002292 <__swbuf_r+0x12>
 800228e:	f7ff fa7b 	bl	8001788 <__sinit>
 8002292:	69a3      	ldr	r3, [r4, #24]
 8002294:	60a3      	str	r3, [r4, #8]
 8002296:	89a3      	ldrh	r3, [r4, #12]
 8002298:	071a      	lsls	r2, r3, #28
 800229a:	d501      	bpl.n	80022a0 <__swbuf_r+0x20>
 800229c:	6923      	ldr	r3, [r4, #16]
 800229e:	b943      	cbnz	r3, 80022b2 <__swbuf_r+0x32>
 80022a0:	4621      	mov	r1, r4
 80022a2:	4628      	mov	r0, r5
 80022a4:	f000 f82a 	bl	80022fc <__swsetup_r>
 80022a8:	b118      	cbz	r0, 80022b2 <__swbuf_r+0x32>
 80022aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80022ae:	4638      	mov	r0, r7
 80022b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	6922      	ldr	r2, [r4, #16]
 80022b6:	1a98      	subs	r0, r3, r2
 80022b8:	6963      	ldr	r3, [r4, #20]
 80022ba:	b2f6      	uxtb	r6, r6
 80022bc:	4283      	cmp	r3, r0
 80022be:	4637      	mov	r7, r6
 80022c0:	dc05      	bgt.n	80022ce <__swbuf_r+0x4e>
 80022c2:	4621      	mov	r1, r4
 80022c4:	4628      	mov	r0, r5
 80022c6:	f7ff ffb3 	bl	8002230 <_fflush_r>
 80022ca:	2800      	cmp	r0, #0
 80022cc:	d1ed      	bne.n	80022aa <__swbuf_r+0x2a>
 80022ce:	68a3      	ldr	r3, [r4, #8]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	60a3      	str	r3, [r4, #8]
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	6022      	str	r2, [r4, #0]
 80022da:	701e      	strb	r6, [r3, #0]
 80022dc:	6962      	ldr	r2, [r4, #20]
 80022de:	1c43      	adds	r3, r0, #1
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d004      	beq.n	80022ee <__swbuf_r+0x6e>
 80022e4:	89a3      	ldrh	r3, [r4, #12]
 80022e6:	07db      	lsls	r3, r3, #31
 80022e8:	d5e1      	bpl.n	80022ae <__swbuf_r+0x2e>
 80022ea:	2e0a      	cmp	r6, #10
 80022ec:	d1df      	bne.n	80022ae <__swbuf_r+0x2e>
 80022ee:	4621      	mov	r1, r4
 80022f0:	4628      	mov	r0, r5
 80022f2:	f7ff ff9d 	bl	8002230 <_fflush_r>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d0d9      	beq.n	80022ae <__swbuf_r+0x2e>
 80022fa:	e7d6      	b.n	80022aa <__swbuf_r+0x2a>

080022fc <__swsetup_r>:
 80022fc:	b538      	push	{r3, r4, r5, lr}
 80022fe:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <__swsetup_r+0xa8>)
 8002300:	4605      	mov	r5, r0
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	460c      	mov	r4, r1
 8002306:	b118      	cbz	r0, 8002310 <__swsetup_r+0x14>
 8002308:	6a03      	ldr	r3, [r0, #32]
 800230a:	b90b      	cbnz	r3, 8002310 <__swsetup_r+0x14>
 800230c:	f7ff fa3c 	bl	8001788 <__sinit>
 8002310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002314:	0719      	lsls	r1, r3, #28
 8002316:	d422      	bmi.n	800235e <__swsetup_r+0x62>
 8002318:	06da      	lsls	r2, r3, #27
 800231a:	d407      	bmi.n	800232c <__swsetup_r+0x30>
 800231c:	2209      	movs	r2, #9
 800231e:	602a      	str	r2, [r5, #0]
 8002320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002324:	81a3      	strh	r3, [r4, #12]
 8002326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800232a:	e033      	b.n	8002394 <__swsetup_r+0x98>
 800232c:	0758      	lsls	r0, r3, #29
 800232e:	d512      	bpl.n	8002356 <__swsetup_r+0x5a>
 8002330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002332:	b141      	cbz	r1, 8002346 <__swsetup_r+0x4a>
 8002334:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002338:	4299      	cmp	r1, r3
 800233a:	d002      	beq.n	8002342 <__swsetup_r+0x46>
 800233c:	4628      	mov	r0, r5
 800233e:	f7ff fb2b 	bl	8001998 <_free_r>
 8002342:	2300      	movs	r3, #0
 8002344:	6363      	str	r3, [r4, #52]	@ 0x34
 8002346:	89a3      	ldrh	r3, [r4, #12]
 8002348:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800234c:	81a3      	strh	r3, [r4, #12]
 800234e:	2300      	movs	r3, #0
 8002350:	6063      	str	r3, [r4, #4]
 8002352:	6923      	ldr	r3, [r4, #16]
 8002354:	6023      	str	r3, [r4, #0]
 8002356:	89a3      	ldrh	r3, [r4, #12]
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	81a3      	strh	r3, [r4, #12]
 800235e:	6923      	ldr	r3, [r4, #16]
 8002360:	b94b      	cbnz	r3, 8002376 <__swsetup_r+0x7a>
 8002362:	89a3      	ldrh	r3, [r4, #12]
 8002364:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800236c:	d003      	beq.n	8002376 <__swsetup_r+0x7a>
 800236e:	4621      	mov	r1, r4
 8002370:	4628      	mov	r0, r5
 8002372:	f000 f84f 	bl	8002414 <__smakebuf_r>
 8002376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800237a:	f013 0201 	ands.w	r2, r3, #1
 800237e:	d00a      	beq.n	8002396 <__swsetup_r+0x9a>
 8002380:	2200      	movs	r2, #0
 8002382:	60a2      	str	r2, [r4, #8]
 8002384:	6962      	ldr	r2, [r4, #20]
 8002386:	4252      	negs	r2, r2
 8002388:	61a2      	str	r2, [r4, #24]
 800238a:	6922      	ldr	r2, [r4, #16]
 800238c:	b942      	cbnz	r2, 80023a0 <__swsetup_r+0xa4>
 800238e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002392:	d1c5      	bne.n	8002320 <__swsetup_r+0x24>
 8002394:	bd38      	pop	{r3, r4, r5, pc}
 8002396:	0799      	lsls	r1, r3, #30
 8002398:	bf58      	it	pl
 800239a:	6962      	ldrpl	r2, [r4, #20]
 800239c:	60a2      	str	r2, [r4, #8]
 800239e:	e7f4      	b.n	800238a <__swsetup_r+0x8e>
 80023a0:	2000      	movs	r0, #0
 80023a2:	e7f7      	b.n	8002394 <__swsetup_r+0x98>
 80023a4:	20000018 	.word	0x20000018

080023a8 <_sbrk_r>:
 80023a8:	b538      	push	{r3, r4, r5, lr}
 80023aa:	4d06      	ldr	r5, [pc, #24]	@ (80023c4 <_sbrk_r+0x1c>)
 80023ac:	2300      	movs	r3, #0
 80023ae:	4604      	mov	r4, r0
 80023b0:	4608      	mov	r0, r1
 80023b2:	602b      	str	r3, [r5, #0]
 80023b4:	f7fe fa82 	bl	80008bc <_sbrk>
 80023b8:	1c43      	adds	r3, r0, #1
 80023ba:	d102      	bne.n	80023c2 <_sbrk_r+0x1a>
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	b103      	cbz	r3, 80023c2 <_sbrk_r+0x1a>
 80023c0:	6023      	str	r3, [r4, #0]
 80023c2:	bd38      	pop	{r3, r4, r5, pc}
 80023c4:	20000210 	.word	0x20000210

080023c8 <__swhatbuf_r>:
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	460c      	mov	r4, r1
 80023cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023d0:	2900      	cmp	r1, #0
 80023d2:	b096      	sub	sp, #88	@ 0x58
 80023d4:	4615      	mov	r5, r2
 80023d6:	461e      	mov	r6, r3
 80023d8:	da0d      	bge.n	80023f6 <__swhatbuf_r+0x2e>
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2340      	movne	r3, #64	@ 0x40
 80023e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80023ec:	2000      	movs	r0, #0
 80023ee:	6031      	str	r1, [r6, #0]
 80023f0:	602b      	str	r3, [r5, #0]
 80023f2:	b016      	add	sp, #88	@ 0x58
 80023f4:	bd70      	pop	{r4, r5, r6, pc}
 80023f6:	466a      	mov	r2, sp
 80023f8:	f000 f848 	bl	800248c <_fstat_r>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	dbec      	blt.n	80023da <__swhatbuf_r+0x12>
 8002400:	9901      	ldr	r1, [sp, #4]
 8002402:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002406:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800240a:	4259      	negs	r1, r3
 800240c:	4159      	adcs	r1, r3
 800240e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002412:	e7eb      	b.n	80023ec <__swhatbuf_r+0x24>

08002414 <__smakebuf_r>:
 8002414:	898b      	ldrh	r3, [r1, #12]
 8002416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002418:	079d      	lsls	r5, r3, #30
 800241a:	4606      	mov	r6, r0
 800241c:	460c      	mov	r4, r1
 800241e:	d507      	bpl.n	8002430 <__smakebuf_r+0x1c>
 8002420:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002424:	6023      	str	r3, [r4, #0]
 8002426:	6123      	str	r3, [r4, #16]
 8002428:	2301      	movs	r3, #1
 800242a:	6163      	str	r3, [r4, #20]
 800242c:	b003      	add	sp, #12
 800242e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002430:	ab01      	add	r3, sp, #4
 8002432:	466a      	mov	r2, sp
 8002434:	f7ff ffc8 	bl	80023c8 <__swhatbuf_r>
 8002438:	9f00      	ldr	r7, [sp, #0]
 800243a:	4605      	mov	r5, r0
 800243c:	4639      	mov	r1, r7
 800243e:	4630      	mov	r0, r6
 8002440:	f7ff fb16 	bl	8001a70 <_malloc_r>
 8002444:	b948      	cbnz	r0, 800245a <__smakebuf_r+0x46>
 8002446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800244a:	059a      	lsls	r2, r3, #22
 800244c:	d4ee      	bmi.n	800242c <__smakebuf_r+0x18>
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	f043 0302 	orr.w	r3, r3, #2
 8002456:	81a3      	strh	r3, [r4, #12]
 8002458:	e7e2      	b.n	8002420 <__smakebuf_r+0xc>
 800245a:	89a3      	ldrh	r3, [r4, #12]
 800245c:	6020      	str	r0, [r4, #0]
 800245e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002462:	81a3      	strh	r3, [r4, #12]
 8002464:	9b01      	ldr	r3, [sp, #4]
 8002466:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800246a:	b15b      	cbz	r3, 8002484 <__smakebuf_r+0x70>
 800246c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002470:	4630      	mov	r0, r6
 8002472:	f000 f81d 	bl	80024b0 <_isatty_r>
 8002476:	b128      	cbz	r0, 8002484 <__smakebuf_r+0x70>
 8002478:	89a3      	ldrh	r3, [r4, #12]
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	81a3      	strh	r3, [r4, #12]
 8002484:	89a3      	ldrh	r3, [r4, #12]
 8002486:	431d      	orrs	r5, r3
 8002488:	81a5      	strh	r5, [r4, #12]
 800248a:	e7cf      	b.n	800242c <__smakebuf_r+0x18>

0800248c <_fstat_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4d07      	ldr	r5, [pc, #28]	@ (80024ac <_fstat_r+0x20>)
 8002490:	2300      	movs	r3, #0
 8002492:	4604      	mov	r4, r0
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	602b      	str	r3, [r5, #0]
 800249a:	f7fe fa06 	bl	80008aa <_fstat>
 800249e:	1c43      	adds	r3, r0, #1
 80024a0:	d102      	bne.n	80024a8 <_fstat_r+0x1c>
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	b103      	cbz	r3, 80024a8 <_fstat_r+0x1c>
 80024a6:	6023      	str	r3, [r4, #0]
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
 80024aa:	bf00      	nop
 80024ac:	20000210 	.word	0x20000210

080024b0 <_isatty_r>:
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4d06      	ldr	r5, [pc, #24]	@ (80024cc <_isatty_r+0x1c>)
 80024b4:	2300      	movs	r3, #0
 80024b6:	4604      	mov	r4, r0
 80024b8:	4608      	mov	r0, r1
 80024ba:	602b      	str	r3, [r5, #0]
 80024bc:	f7fe f9fa 	bl	80008b4 <_isatty>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d102      	bne.n	80024ca <_isatty_r+0x1a>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	b103      	cbz	r3, 80024ca <_isatty_r+0x1a>
 80024c8:	6023      	str	r3, [r4, #0]
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
 80024cc:	20000210 	.word	0x20000210

080024d0 <_init>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr

080024dc <_fini>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	bf00      	nop
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr
