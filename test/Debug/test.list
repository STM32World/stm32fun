
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004670  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08004800  08004800  00005800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a98  08004a98  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa0  08004aa0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa0  08004aa0  00005aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aa4  08004aa4  00005aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004aa8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000200  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f588  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c58  00000000  00000000  00015620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00008126  00000000  00000000  00017278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c10  00000000  00000000  0001f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000093e  00000000  00000000  0001ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ff43  00000000  00000000  000208ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011b93  00000000  00000000  00040831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2790  00000000  00000000  000523c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00114b54  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002b90  00000000  00000000  00114b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004a  00000000  00000000  00117728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047e8 	.word	0x080047e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080047e8 	.word	0x080047e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2iz>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000954:	d215      	bcs.n	8000982 <__aeabi_d2iz+0x36>
 8000956:	d511      	bpl.n	800097c <__aeabi_d2iz+0x30>
 8000958:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000960:	d912      	bls.n	8000988 <__aeabi_d2iz+0x3c>
 8000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800096e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000972:	fa23 f002 	lsr.w	r0, r3, r2
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	4770      	bx	lr
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	4770      	bx	lr
 8000982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000986:	d105      	bne.n	8000994 <__aeabi_d2iz+0x48>
 8000988:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800098c:	bf08      	it	eq
 800098e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_d2uiz>:
 800099c:	004a      	lsls	r2, r1, #1
 800099e:	d211      	bcs.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a4:	d211      	bcs.n	80009ca <__aeabi_d2uiz+0x2e>
 80009a6:	d50d      	bpl.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d40e      	bmi.n	80009d0 <__aeabi_d2uiz+0x34>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d102      	bne.n	80009d6 <__aeabi_d2uiz+0x3a>
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d6c:	b530      	push	{r4, r5, lr}
 8000d6e:	b08b      	sub	sp, #44	@ 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d70:	2400      	movs	r4, #0
 8000d72:	9405      	str	r4, [sp, #20]
 8000d74:	9406      	str	r4, [sp, #24]
 8000d76:	9407      	str	r4, [sp, #28]
 8000d78:	9408      	str	r4, [sp, #32]
 8000d7a:	9409      	str	r4, [sp, #36]	@ 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	9401      	str	r4, [sp, #4]
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <MX_GPIO_Init+0x8c>)
 8000d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d82:	f042 0204 	orr.w	r2, r2, #4
 8000d86:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d8a:	f002 0204 	and.w	r2, r2, #4
 8000d8e:	9201      	str	r2, [sp, #4]
 8000d90:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d92:	9402      	str	r4, [sp, #8]
 8000d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d9e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000da2:	9202      	str	r2, [sp, #8]
 8000da4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	9403      	str	r4, [sp, #12]
 8000da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000daa:	f042 0201 	orr.w	r2, r2, #1
 8000dae:	631a      	str	r2, [r3, #48]	@ 0x30
 8000db0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000db2:	f002 0201 	and.w	r2, r2, #1
 8000db6:	9203      	str	r2, [sp, #12]
 8000db8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	9404      	str	r4, [sp, #16]
 8000dbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dbe:	f042 0202 	orr.w	r2, r2, #2
 8000dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	9304      	str	r3, [sp, #16]
 8000dcc:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000dce:	4d0b      	ldr	r5, [pc, #44]	@ (8000dfc <MX_GPIO_Init+0x90>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f000 fce0 	bl	800179c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000ddc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000de2:	2311      	movs	r3, #17
 8000de4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dea:	a905      	add	r1, sp, #20
 8000dec:	4628      	mov	r0, r5
 8000dee:	f000 fbdf 	bl	80015b0 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000df2:	b00b      	add	sp, #44	@ 0x2c
 8000df4:	bd30      	pop	{r4, r5, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020800 	.word	0x40020800

08000e00 <_write>:
    if (fd == 1 || fd == 2) {
 8000e00:	3801      	subs	r0, #1
 8000e02:	2801      	cmp	r0, #1
 8000e04:	d80a      	bhi.n	8000e1c <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000e06:	b510      	push	{r4, lr}
 8000e08:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <_write+0x28>)
 8000e12:	f001 fcc2 	bl	800279a <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000e16:	b920      	cbnz	r0, 8000e22 <_write+0x22>
            return len;
 8000e18:	4620      	mov	r0, r4
}
 8000e1a:	bd10      	pop	{r4, pc}
    return -1;
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000e20:	4770      	bx	lr
            return -1;
 8000e22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e26:	e7f8      	b.n	8000e1a <_write+0x1a>
 8000e28:	20000084 	.word	0x20000084

08000e2c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000e2e:	e7fe      	b.n	8000e2e <Error_Handler+0x2>

08000e30 <MX_TIM4_Init>:
{
 8000e30:	b500      	push	{lr}
 8000e32:	b08f      	sub	sp, #60	@ 0x3c
    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e34:	2300      	movs	r3, #0
 8000e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8000e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000e3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8000e3c:	930d      	str	r3, [sp, #52]	@ 0x34
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e3e:	9308      	str	r3, [sp, #32]
 8000e40:	9309      	str	r3, [sp, #36]	@ 0x24
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	9302      	str	r3, [sp, #8]
 8000e46:	9303      	str	r3, [sp, #12]
 8000e48:	9304      	str	r3, [sp, #16]
 8000e4a:	9305      	str	r3, [sp, #20]
 8000e4c:	9306      	str	r3, [sp, #24]
 8000e4e:	9307      	str	r3, [sp, #28]
    htim4.Instance = TIM4;
 8000e50:	482d      	ldr	r0, [pc, #180]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e52:	4a2e      	ldr	r2, [pc, #184]	@ (8000f0c <MX_TIM4_Init+0xdc>)
 8000e54:	6002      	str	r2, [r0, #0]
    htim4.Init.Prescaler = 839;
 8000e56:	f240 3247 	movw	r2, #839	@ 0x347
 8000e5a:	6042      	str	r2, [r0, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	6083      	str	r3, [r0, #8]
    htim4.Init.Period = SAMPLE_RANGE - 1;
 8000e5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e62:	60c2      	str	r2, [r0, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	6103      	str	r3, [r0, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e66:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e68:	f001 f90c 	bl	8002084 <HAL_TIM_Base_Init>
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d13b      	bne.n	8000ee8 <MX_TIM4_Init+0xb8>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e74:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e76:	a90a      	add	r1, sp, #40	@ 0x28
 8000e78:	4823      	ldr	r0, [pc, #140]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e7a:	f001 fa0e 	bl	800229a <HAL_TIM_ConfigClockSource>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d134      	bne.n	8000eec <MX_TIM4_Init+0xbc>
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e82:	4821      	ldr	r0, [pc, #132]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e84:	f001 f92a 	bl	80020dc <HAL_TIM_PWM_Init>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d131      	bne.n	8000ef0 <MX_TIM4_Init+0xc0>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	9308      	str	r3, [sp, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e94:	a908      	add	r1, sp, #32
 8000e96:	481c      	ldr	r0, [pc, #112]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000e98:	f001 fb10 	bl	80024bc <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	bb50      	cbnz	r0, 8000ef4 <MX_TIM4_Init+0xc4>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9e:	2360      	movs	r3, #96	@ 0x60
 8000ea0:	9301      	str	r3, [sp, #4]
    sConfigOC.Pulse = 0;
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	9202      	str	r2, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	9303      	str	r3, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eaa:	9205      	str	r2, [sp, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eac:	a901      	add	r1, sp, #4
 8000eae:	4816      	ldr	r0, [pc, #88]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000eb0:	f001 f978 	bl	80021a4 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	bb00      	cbnz	r0, 8000ef8 <MX_TIM4_Init+0xc8>
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	eb0d 0102 	add.w	r1, sp, r2
 8000ebc:	4812      	ldr	r0, [pc, #72]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000ebe:	f001 f971 	bl	80021a4 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	b9d8      	cbnz	r0, 8000efc <MX_TIM4_Init+0xcc>
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	a901      	add	r1, sp, #4
 8000ec8:	480f      	ldr	r0, [pc, #60]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000eca:	f001 f96b 	bl	80021a4 <HAL_TIM_PWM_ConfigChannel>
 8000ece:	b9b8      	cbnz	r0, 8000f00 <MX_TIM4_Init+0xd0>
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	a901      	add	r1, sp, #4
 8000ed4:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000ed6:	f001 f965 	bl	80021a4 <HAL_TIM_PWM_ConfigChannel>
 8000eda:	b998      	cbnz	r0, 8000f04 <MX_TIM4_Init+0xd4>
    HAL_TIM_MspPostInit(&htim4);
 8000edc:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <MX_TIM4_Init+0xd8>)
 8000ede:	f000 f9c5 	bl	800126c <HAL_TIM_MspPostInit>
}
 8000ee2:	b00f      	add	sp, #60	@ 0x3c
 8000ee4:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000ee8:	f7ff ffa0 	bl	8000e2c <Error_Handler>
        Error_Handler();
 8000eec:	f7ff ff9e 	bl	8000e2c <Error_Handler>
        Error_Handler();
 8000ef0:	f7ff ff9c 	bl	8000e2c <Error_Handler>
        Error_Handler();
 8000ef4:	f7ff ff9a 	bl	8000e2c <Error_Handler>
        Error_Handler();
 8000ef8:	f7ff ff98 	bl	8000e2c <Error_Handler>
        Error_Handler();
 8000efc:	f7ff ff96 	bl	8000e2c <Error_Handler>
        Error_Handler();
 8000f00:	f7ff ff94 	bl	8000e2c <Error_Handler>
        Error_Handler();
 8000f04:	f7ff ff92 	bl	8000e2c <Error_Handler>
 8000f08:	200000cc 	.word	0x200000cc
 8000f0c:	40000800 	.word	0x40000800

08000f10 <MX_USART1_UART_Init>:
{
 8000f10:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 8000f12:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <MX_USART1_UART_Init+0x2c>)
 8000f14:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <MX_USART1_UART_Init+0x30>)
 8000f16:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8000f18:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000f1c:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000f22:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000f24:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000f26:	220c      	movs	r2, #12
 8000f28:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f2e:	f001 fc04 	bl	800273a <HAL_UART_Init>
 8000f32:	b900      	cbnz	r0, 8000f36 <MX_USART1_UART_Init+0x26>
}
 8000f34:	bd08      	pop	{r3, pc}
        Error_Handler();
 8000f36:	f7ff ff79 	bl	8000e2c <Error_Handler>
 8000f3a:	bf00      	nop
 8000f3c:	20000084 	.word	0x20000084
 8000f40:	40011000 	.word	0x40011000

08000f44 <SystemClock_Config>:
{
 8000f44:	b500      	push	{lr}
 8000f46:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f48:	2230      	movs	r2, #48	@ 0x30
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	a808      	add	r0, sp, #32
 8000f4e:	f001 fe95 	bl	8002c7c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f52:	2300      	movs	r3, #0
 8000f54:	9303      	str	r3, [sp, #12]
 8000f56:	9304      	str	r3, [sp, #16]
 8000f58:	9305      	str	r3, [sp, #20]
 8000f5a:	9306      	str	r3, [sp, #24]
 8000f5c:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	4a20      	ldr	r2, [pc, #128]	@ (8000fe4 <SystemClock_Config+0xa0>)
 8000f62:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000f64:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000f68:	6411      	str	r1, [r2, #64]	@ 0x40
 8000f6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000f6c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000f70:	9201      	str	r2, [sp, #4]
 8000f72:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <SystemClock_Config+0xa4>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f92:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	2302      	movs	r3, #2
 8000f96:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f98:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f9c:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8000fa2:	22a8      	movs	r2, #168	@ 0xa8
 8000fa4:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa6:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	a808      	add	r0, sp, #32
 8000fae:	f000 fbfb 	bl	80017a8 <HAL_RCC_OscConfig>
 8000fb2:	b998      	cbnz	r0, 8000fdc <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fc4:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fca:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fcc:	2105      	movs	r1, #5
 8000fce:	a803      	add	r0, sp, #12
 8000fd0:	f000 fe4e 	bl	8001c70 <HAL_RCC_ClockConfig>
 8000fd4:	b920      	cbnz	r0, 8000fe0 <SystemClock_Config+0x9c>
}
 8000fd6:	b015      	add	sp, #84	@ 0x54
 8000fd8:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000fdc:	f7ff ff26 	bl	8000e2c <Error_Handler>
        Error_Handler();
 8000fe0:	f7ff ff24 	bl	8000e2c <Error_Handler>
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000
 8000fec:	00000000 	.word	0x00000000

08000ff0 <main>:
{
 8000ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff4:	b08c      	sub	sp, #48	@ 0x30
    HAL_Init();
 8000ff6:	f000 fa45 	bl	8001484 <HAL_Init>
    SystemClock_Config();
 8000ffa:	f7ff ffa3 	bl	8000f44 <SystemClock_Config>
    MX_GPIO_Init();
 8000ffe:	f7ff feb5 	bl	8000d6c <MX_GPIO_Init>
    MX_TIM4_Init();
 8001002:	f7ff ff15 	bl	8000e30 <MX_TIM4_Init>
    MX_USART1_UART_Init();
 8001006:	f7ff ff83 	bl	8000f10 <MX_USART1_UART_Init>
    printf("\n\n\n\n--------\nStarting\n");
 800100a:	4877      	ldr	r0, [pc, #476]	@ (80011e8 <main+0x1f8>)
 800100c:	f001 fd56 	bl	8002abc <puts>
    printf("Sample freq = %d\n", SAMPLE_FREQ);
 8001010:	2164      	movs	r1, #100	@ 0x64
 8001012:	4876      	ldr	r0, [pc, #472]	@ (80011ec <main+0x1fc>)
 8001014:	f001 fcea 	bl	80029ec <iprintf>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001018:	4c75      	ldr	r4, [pc, #468]	@ (80011f0 <main+0x200>)
 800101a:	2100      	movs	r1, #0
 800101c:	4620      	mov	r0, r4
 800101e:	f001 f9cb 	bl	80023b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001022:	2104      	movs	r1, #4
 8001024:	4620      	mov	r0, r4
 8001026:	f001 f9c7 	bl	80023b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800102a:	2108      	movs	r1, #8
 800102c:	4620      	mov	r0, r4
 800102e:	f001 f9c3 	bl	80023b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001032:	210c      	movs	r1, #12
 8001034:	4620      	mov	r0, r4
 8001036:	f001 f9bf 	bl	80023b8 <HAL_TIM_PWM_Start>
    uint32_t led_channels[] = {
 800103a:	4c6e      	ldr	r4, [pc, #440]	@ (80011f4 <main+0x204>)
 800103c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001040:	ad0c      	add	r5, sp, #48	@ 0x30
 8001042:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
    float angles[] = {
 8001046:	ad04      	add	r5, sp, #16
 8001048:	f104 0310 	add.w	r3, r4, #16
 800104c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800104e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    float angle_changes[] = {
 8001052:	466d      	mov	r5, sp
 8001054:	3420      	adds	r4, #32
 8001056:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800105a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    uint32_t now = 0, loop_cnt = 0, next_tick = 1000, next_sample = SAMPLE_DELAY;
 800105e:	240a      	movs	r4, #10
 8001060:	f44f 797a 	mov.w	r9, #1000	@ 0x3e8
 8001064:	f04f 0800 	mov.w	r8, #0
 8001068:	e0a4      	b.n	80011b4 <main+0x1c4>
                __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID + (SAMPLE_MID * sin(angles[i]) ));
 800106a:	2b04      	cmp	r3, #4
 800106c:	d065      	beq.n	800113a <main+0x14a>
 800106e:	2b08      	cmp	r3, #8
 8001070:	d07e      	beq.n	8001170 <main+0x180>
 8001072:	ab0c      	add	r3, sp, #48	@ 0x30
 8001074:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001078:	f853 0c20 	ldr.w	r0, [r3, #-32]
 800107c:	f7ff fb86 	bl	800078c <__aeabi_f2d>
 8001080:	ec41 0b10 	vmov	d0, r0, r1
 8001084:	f002 fb80 	bl	8003788 <sin>
 8001088:	ec51 0b10 	vmov	r0, r1, d0
 800108c:	2200      	movs	r2, #0
 800108e:	4b5a      	ldr	r3, [pc, #360]	@ (80011f8 <main+0x208>)
 8001090:	f7ff f8ee 	bl	8000270 <__aeabi_dmul>
 8001094:	2200      	movs	r2, #0
 8001096:	4b58      	ldr	r3, [pc, #352]	@ (80011f8 <main+0x208>)
 8001098:	f7ff fa1a 	bl	80004d0 <__adddf3>
 800109c:	4b54      	ldr	r3, [pc, #336]	@ (80011f0 <main+0x200>)
 800109e:	681e      	ldr	r6, [r3, #0]
 80010a0:	f7ff fc7c 	bl	800099c <__aeabi_d2uiz>
 80010a4:	6430      	str	r0, [r6, #64]	@ 0x40
            for (int i = 0; i < sizeof(angles) / sizeof(angles[0]); ++i) {
 80010a6:	3401      	adds	r4, #1
 80010a8:	2c03      	cmp	r4, #3
 80010aa:	d87e      	bhi.n	80011aa <main+0x1ba>
                angles[i] += angle_changes[i];
 80010ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80010ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80010b2:	ed53 7a08 	vldr	s15, [r3, #-32]	@ 0xffffffe0
 80010b6:	ed13 7a0c 	vldr	s14, [r3, #-48]	@ 0xffffffd0
 80010ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010be:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
                if (angles[i] >= 2 * M_PI)
 80010c2:	ee17 0a90 	vmov	r0, s15
 80010c6:	f7ff fb61 	bl	800078c <__aeabi_f2d>
 80010ca:	4606      	mov	r6, r0
 80010cc:	460f      	mov	r7, r1
 80010ce:	a344      	add	r3, pc, #272	@ (adr r3, 80011e0 <main+0x1f0>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fc26 	bl	8000924 <__aeabi_dcmpge>
 80010d8:	b168      	cbz	r0, 80010f6 <main+0x106>
                    angles[i] -= (2 * M_PI);
 80010da:	ab0c      	add	r3, sp, #48	@ 0x30
 80010dc:	eb03 0a84 	add.w	sl, r3, r4, lsl #2
 80010e0:	a33f      	add	r3, pc, #252	@ (adr r3, 80011e0 <main+0x1f0>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	4630      	mov	r0, r6
 80010e8:	4639      	mov	r1, r7
 80010ea:	f7ff f9ef 	bl	80004cc <__aeabi_dsub>
 80010ee:	f7ff fc75 	bl	80009dc <__aeabi_d2f>
 80010f2:	f84a 0c20 	str.w	r0, [sl, #-32]
                __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID + (SAMPLE_MID * sin(angles[i]) ));
 80010f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80010f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80010fc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1b2      	bne.n	800106a <main+0x7a>
 8001104:	ab0c      	add	r3, sp, #48	@ 0x30
 8001106:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800110a:	f853 0c20 	ldr.w	r0, [r3, #-32]
 800110e:	f7ff fb3d 	bl	800078c <__aeabi_f2d>
 8001112:	ec41 0b10 	vmov	d0, r0, r1
 8001116:	f002 fb37 	bl	8003788 <sin>
 800111a:	ec51 0b10 	vmov	r0, r1, d0
 800111e:	2200      	movs	r2, #0
 8001120:	4b35      	ldr	r3, [pc, #212]	@ (80011f8 <main+0x208>)
 8001122:	f7ff f8a5 	bl	8000270 <__aeabi_dmul>
 8001126:	2200      	movs	r2, #0
 8001128:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <main+0x208>)
 800112a:	f7ff f9d1 	bl	80004d0 <__adddf3>
 800112e:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <main+0x200>)
 8001130:	681e      	ldr	r6, [r3, #0]
 8001132:	f7ff fc33 	bl	800099c <__aeabi_d2uiz>
 8001136:	6370      	str	r0, [r6, #52]	@ 0x34
 8001138:	e7b5      	b.n	80010a6 <main+0xb6>
 800113a:	ab0c      	add	r3, sp, #48	@ 0x30
 800113c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001140:	f853 0c20 	ldr.w	r0, [r3, #-32]
 8001144:	f7ff fb22 	bl	800078c <__aeabi_f2d>
 8001148:	ec41 0b10 	vmov	d0, r0, r1
 800114c:	f002 fb1c 	bl	8003788 <sin>
 8001150:	ec51 0b10 	vmov	r0, r1, d0
 8001154:	2200      	movs	r2, #0
 8001156:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <main+0x208>)
 8001158:	f7ff f88a 	bl	8000270 <__aeabi_dmul>
 800115c:	2200      	movs	r2, #0
 800115e:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <main+0x208>)
 8001160:	f7ff f9b6 	bl	80004d0 <__adddf3>
 8001164:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <main+0x200>)
 8001166:	681e      	ldr	r6, [r3, #0]
 8001168:	f7ff fc18 	bl	800099c <__aeabi_d2uiz>
 800116c:	63b0      	str	r0, [r6, #56]	@ 0x38
 800116e:	e79a      	b.n	80010a6 <main+0xb6>
 8001170:	ab0c      	add	r3, sp, #48	@ 0x30
 8001172:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001176:	f853 0c20 	ldr.w	r0, [r3, #-32]
 800117a:	f7ff fb07 	bl	800078c <__aeabi_f2d>
 800117e:	ec41 0b10 	vmov	d0, r0, r1
 8001182:	f002 fb01 	bl	8003788 <sin>
 8001186:	ec51 0b10 	vmov	r0, r1, d0
 800118a:	2200      	movs	r2, #0
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <main+0x208>)
 800118e:	f7ff f86f 	bl	8000270 <__aeabi_dmul>
 8001192:	2200      	movs	r2, #0
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <main+0x208>)
 8001196:	f7ff f99b 	bl	80004d0 <__adddf3>
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <main+0x200>)
 800119c:	681e      	ldr	r6, [r3, #0]
 800119e:	f7ff fbfd 	bl	800099c <__aeabi_d2uiz>
 80011a2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80011a4:	e77f      	b.n	80010a6 <main+0xb6>
            for (int i = 0; i < sizeof(angles) / sizeof(angles[0]); ++i) {
 80011a6:	2400      	movs	r4, #0
 80011a8:	e77e      	b.n	80010a8 <main+0xb8>
            next_sample = now + SAMPLE_DELAY;
 80011aa:	f105 040a 	add.w	r4, r5, #10
 80011ae:	e006      	b.n	80011be <main+0x1ce>
        ++loop_cnt;
 80011b0:	f108 0801 	add.w	r8, r8, #1
        now = HAL_GetTick();
 80011b4:	f000 f98c 	bl	80014d0 <HAL_GetTick>
 80011b8:	4605      	mov	r5, r0
        if (now >= next_sample) {
 80011ba:	4284      	cmp	r4, r0
 80011bc:	d9f3      	bls.n	80011a6 <main+0x1b6>
        if (now >= next_tick) {
 80011be:	45a9      	cmp	r9, r5
 80011c0:	d8f6      	bhi.n	80011b0 <main+0x1c0>
            printf("Tick %lu - loops = %lu\n", now / 1000, loop_cnt);
 80011c2:	490e      	ldr	r1, [pc, #56]	@ (80011fc <main+0x20c>)
 80011c4:	fba1 3105 	umull	r3, r1, r1, r5
 80011c8:	4642      	mov	r2, r8
 80011ca:	0989      	lsrs	r1, r1, #6
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <main+0x210>)
 80011ce:	f001 fc0d 	bl	80029ec <iprintf>
            next_tick = now + 1000;
 80011d2:	f505 797a 	add.w	r9, r5, #1000	@ 0x3e8
            loop_cnt = 0;
 80011d6:	f04f 0800 	mov.w	r8, #0
 80011da:	e7e9      	b.n	80011b0 <main+0x1c0>
 80011dc:	f3af 8000 	nop.w
 80011e0:	54442d18 	.word	0x54442d18
 80011e4:	401921fb 	.word	0x401921fb
 80011e8:	08004830 	.word	0x08004830
 80011ec:	08004848 	.word	0x08004848
 80011f0:	200000cc 	.word	0x200000cc
 80011f4:	08004800 	.word	0x08004800
 80011f8:	407f4000 	.word	0x407f4000
 80011fc:	10624dd3 	.word	0x10624dd3
 8001200:	0800485c 	.word	0x0800485c

08001204 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2100      	movs	r1, #0
 8001208:	9100      	str	r1, [sp, #0]
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <HAL_MspInit+0x34>)
 800120c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800120e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001212:	645a      	str	r2, [r3, #68]	@ 0x44
 8001214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001216:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800121a:	9200      	str	r2, [sp, #0]
 800121c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	9101      	str	r1, [sp, #4]
 8001220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001222:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001226:	641a      	str	r2, [r3, #64]	@ 0x40
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	b002      	add	sp, #8
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 800123c:	6802      	ldr	r2, [r0, #0]
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_TIM_Base_MspInit+0x28>)
 8001240:	429a      	cmp	r2, r3
 8001242:	d000      	beq.n	8001246 <HAL_TIM_Base_MspInit+0xa>
 8001244:	4770      	bx	lr
{
 8001246:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_TIM_Base_MspInit+0x2c>)
 800124e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001250:	f042 0204 	orr.w	r2, r2, #4
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001260:	b002      	add	sp, #8
 8001262:	4770      	bx	lr
 8001264:	40000800 	.word	0x40000800
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800126c:	b500      	push	{lr}
 800126e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	2300      	movs	r3, #0
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	9303      	str	r3, [sp, #12]
 8001278:	9304      	str	r3, [sp, #16]
 800127a:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 800127c:	6802      	ldr	r2, [r0, #0]
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <HAL_TIM_MspPostInit+0x4c>)
 8001280:	429a      	cmp	r2, r3
 8001282:	d002      	beq.n	800128a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001284:	b007      	add	sp, #28
 8001286:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_TIM_MspPostInit+0x50>)
 8001290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001292:	f042 0202 	orr.w	r2, r2, #2
 8001296:	631a      	str	r2, [r3, #48]	@ 0x30
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|YELLOW_Pin;
 80012a2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80012a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	a901      	add	r1, sp, #4
 80012b0:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <HAL_TIM_MspPostInit+0x54>)
 80012b2:	f000 f97d 	bl	80015b0 <HAL_GPIO_Init>
}
 80012b6:	e7e5      	b.n	8001284 <HAL_TIM_MspPostInit+0x18>
 80012b8:	40000800 	.word	0x40000800
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400

080012c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c4:	b500      	push	{lr}
 80012c6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	2300      	movs	r3, #0
 80012ca:	9303      	str	r3, [sp, #12]
 80012cc:	9304      	str	r3, [sp, #16]
 80012ce:	9305      	str	r3, [sp, #20]
 80012d0:	9306      	str	r3, [sp, #24]
 80012d2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80012d4:	6802      	ldr	r2, [r0, #0]
 80012d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80012da:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80012de:	429a      	cmp	r2, r3
 80012e0:	d002      	beq.n	80012e8 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80012e2:	b009      	add	sp, #36	@ 0x24
 80012e4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e8:	2100      	movs	r1, #0
 80012ea:	9101      	str	r1, [sp, #4]
 80012ec:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80012f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012f2:	f042 0210 	orr.w	r2, r2, #16
 80012f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80012f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012fa:	f002 0210 	and.w	r2, r2, #16
 80012fe:	9201      	str	r2, [sp, #4]
 8001300:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	9102      	str	r1, [sp, #8]
 8001304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	631a      	str	r2, [r3, #48]	@ 0x30
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001316:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800131a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001324:	2307      	movs	r3, #7
 8001326:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	a903      	add	r1, sp, #12
 800132a:	4802      	ldr	r0, [pc, #8]	@ (8001334 <HAL_UART_MspInit+0x70>)
 800132c:	f000 f940 	bl	80015b0 <HAL_GPIO_Init>
}
 8001330:	e7d7      	b.n	80012e2 <HAL_UART_MspInit+0x1e>
 8001332:	bf00      	nop
 8001334:	40020000 	.word	0x40020000

08001338 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler>

0800133a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler>

0800133c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler>

0800133e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler>

08001340 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <UsageFault_Handler>

08001342 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134a:	f000 f8b5 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bd08      	pop	{r3, pc}

08001350 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	460c      	mov	r4, r1
 8001354:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	2500      	movs	r5, #0
 8001358:	e006      	b.n	8001368 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800135a:	f3af 8000 	nop.w
 800135e:	4621      	mov	r1, r4
 8001360:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001366:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001368:	42b5      	cmp	r5, r6
 800136a:	dbf6      	blt.n	800135a <_read+0xa>
  }

  return len;
}
 800136c:	4630      	mov	r0, r6
 800136e:	bd70      	pop	{r4, r5, r6, pc}

08001370 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001374:	4770      	bx	lr

08001376 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001376:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800137a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800137c:	2000      	movs	r0, #0
 800137e:	4770      	bx	lr

08001380 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001380:	2001      	movs	r0, #1
 8001382:	4770      	bx	lr

08001384 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001384:	2000      	movs	r0, #0
 8001386:	4770      	bx	lr

08001388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001388:	b510      	push	{r4, lr}
 800138a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a0c      	ldr	r2, [pc, #48]	@ (80013c0 <_sbrk+0x38>)
 800138e:	490d      	ldr	r1, [pc, #52]	@ (80013c4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001390:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <_sbrk+0x40>)
 8001392:	6800      	ldr	r0, [r0, #0]
 8001394:	b140      	cbz	r0, 80013a8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <_sbrk+0x40>)
 8001398:	6800      	ldr	r0, [r0, #0]
 800139a:	4403      	add	r3, r0
 800139c:	1a52      	subs	r2, r2, r1
 800139e:	4293      	cmp	r3, r2
 80013a0:	d806      	bhi.n	80013b0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80013a2:	4a09      	ldr	r2, [pc, #36]	@ (80013c8 <_sbrk+0x40>)
 80013a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80013a6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80013a8:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <_sbrk+0x40>)
 80013aa:	4c08      	ldr	r4, [pc, #32]	@ (80013cc <_sbrk+0x44>)
 80013ac:	6004      	str	r4, [r0, #0]
 80013ae:	e7f2      	b.n	8001396 <_sbrk+0xe>
    errno = ENOMEM;
 80013b0:	f001 fcb2 	bl	8002d18 <__errno>
 80013b4:	230c      	movs	r3, #12
 80013b6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013bc:	e7f3      	b.n	80013a6 <_sbrk+0x1e>
 80013be:	bf00      	nop
 80013c0:	20020000 	.word	0x20020000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	20000114 	.word	0x20000114
 80013cc:	20000268 	.word	0x20000268

080013d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4a03      	ldr	r2, [pc, #12]	@ (80013e0 <SystemInit+0x10>)
 80013d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80013d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800141c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013e8:	f7ff fff2 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ee:	490d      	ldr	r1, [pc, #52]	@ (8001424 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001404:	4c0a      	ldr	r4, [pc, #40]	@ (8001430 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001412:	f001 fc87 	bl	8002d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f7ff fdeb 	bl	8000ff0 <main>
  bx  lr    
 800141a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800141c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001428:	08004aa8 	.word	0x08004aa8
  ldr r2, =_sbss
 800142c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001430:	20000268 	.word	0x20000268

08001434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC_IRQHandler>
	...

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b510      	push	{r4, lr}
 800143a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <HAL_InitTick+0x40>)
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001444:	fbb3 f3f2 	udiv	r3, r3, r2
 8001448:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <HAL_InitTick+0x44>)
 800144a:	6810      	ldr	r0, [r2, #0]
 800144c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001450:	f000 f89a 	bl	8001588 <HAL_SYSTICK_Config>
 8001454:	b968      	cbnz	r0, 8001472 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	2c0f      	cmp	r4, #15
 8001458:	d901      	bls.n	800145e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
 800145c:	e00a      	b.n	8001474 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145e:	2200      	movs	r2, #0
 8001460:	4621      	mov	r1, r4
 8001462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001466:	f000 f87f 	bl	8001568 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146a:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_InitTick+0x48>)
 800146c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2000      	movs	r0, #0
 8001470:	e000      	b.n	8001474 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001472:	2001      	movs	r0, #1
}
 8001474:	bd10      	pop	{r4, pc}
 8001476:	bf00      	nop
 8001478:	20000004 	.word	0x20000004
 800147c:	20000000 	.word	0x20000000
 8001480:	20000008 	.word	0x20000008

08001484 <HAL_Init>:
{
 8001484:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_Init+0x30>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800148e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001496:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800149e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f84f 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	200f      	movs	r0, #15
 80014a8:	f7ff ffc6 	bl	8001438 <HAL_InitTick>
  HAL_MspInit();
 80014ac:	f7ff feaa 	bl	8001204 <HAL_MspInit>
}
 80014b0:	2000      	movs	r0, #0
 80014b2:	bd08      	pop	{r3, pc}
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014b8:	4a03      	ldr	r2, [pc, #12]	@ (80014c8 <HAL_IncTick+0x10>)
 80014ba:	6811      	ldr	r1, [r2, #0]
 80014bc:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <HAL_IncTick+0x14>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	440b      	add	r3, r1
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000118 	.word	0x20000118
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014d0:	4b01      	ldr	r3, [pc, #4]	@ (80014d8 <HAL_GetTick+0x8>)
 80014d2:	6818      	ldr	r0, [r3, #0]
}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000118 	.word	0x20000118

080014dc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80014dc:	2800      	cmp	r0, #0
 80014de:	db08      	blt.n	80014f2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	0109      	lsls	r1, r1, #4
 80014e2:	b2c9      	uxtb	r1, r1
 80014e4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80014e8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80014ec:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80014f0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	f000 000f 	and.w	r0, r0, #15
 80014f6:	0109      	lsls	r1, r1, #4
 80014f8:	b2c9      	uxtb	r1, r1
 80014fa:	4b01      	ldr	r3, [pc, #4]	@ (8001500 <__NVIC_SetPriority+0x24>)
 80014fc:	5419      	strb	r1, [r3, r0]
  }
}
 80014fe:	4770      	bx	lr
 8001500:	e000ed14 	.word	0xe000ed14

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001506:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150a:	f1c0 0c07 	rsb	ip, r0, #7
 800150e:	f1bc 0f04 	cmp.w	ip, #4
 8001512:	bf28      	it	cs
 8001514:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001518:	1d03      	adds	r3, r0, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d90f      	bls.n	800153e <NVIC_EncodePriority+0x3a>
 800151e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001524:	fa0e f00c 	lsl.w	r0, lr, ip
 8001528:	ea21 0100 	bic.w	r1, r1, r0
 800152c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001532:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001536:	ea41 0002 	orr.w	r0, r1, r2
 800153a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	2300      	movs	r3, #0
 8001540:	e7ee      	b.n	8001520 <NVIC_EncodePriority+0x1c>
	...

08001544 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001546:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001548:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800154c:	041b      	lsls	r3, r3, #16
 800154e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	0200      	lsls	r0, r0, #8
 8001552:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001556:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001560:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001568:	b510      	push	{r4, lr}
 800156a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <HAL_NVIC_SetPriority+0x1c>)
 800156e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001570:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001574:	f7ff ffc6 	bl	8001504 <NVIC_EncodePriority>
 8001578:	4601      	mov	r1, r0
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff ffae 	bl	80014dc <__NVIC_SetPriority>
}
 8001580:	bd10      	pop	{r4, pc}
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	3801      	subs	r0, #1
 800158a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800158e:	d20b      	bcs.n	80015a8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001590:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001594:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	4a05      	ldr	r2, [pc, #20]	@ (80015ac <HAL_SYSTICK_Config+0x24>)
 8001598:	21f0      	movs	r1, #240	@ 0xf0
 800159a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159e:	2000      	movs	r0, #0
 80015a0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	2207      	movs	r2, #7
 80015a4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015a8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	f200 80e9 	bhi.w	800178a <HAL_GPIO_Init+0x1da>
{
 80015b8:	b570      	push	{r4, r5, r6, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	e065      	b.n	800168a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015be:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80015c4:	2403      	movs	r4, #3
 80015c6:	fa04 f40e 	lsl.w	r4, r4, lr
 80015ca:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ce:	68cc      	ldr	r4, [r1, #12]
 80015d0:	fa04 f40e 	lsl.w	r4, r4, lr
 80015d4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80015d6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015da:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015de:	684a      	ldr	r2, [r1, #4]
 80015e0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80015e4:	409a      	lsls	r2, r3
 80015e6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80015e8:	6042      	str	r2, [r0, #4]
 80015ea:	e05c      	b.n	80016a6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ec:	08dc      	lsrs	r4, r3, #3
 80015ee:	3408      	adds	r4, #8
 80015f0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f4:	f003 0507 	and.w	r5, r3, #7
 80015f8:	00ad      	lsls	r5, r5, #2
 80015fa:	f04f 0e0f 	mov.w	lr, #15
 80015fe:	fa0e fe05 	lsl.w	lr, lr, r5
 8001602:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001606:	690a      	ldr	r2, [r1, #16]
 8001608:	40aa      	lsls	r2, r5
 800160a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800160e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001612:	e05c      	b.n	80016ce <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001614:	2207      	movs	r2, #7
 8001616:	e000      	b.n	800161a <HAL_GPIO_Init+0x6a>
 8001618:	2200      	movs	r2, #0
 800161a:	fa02 f20e 	lsl.w	r2, r2, lr
 800161e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001620:	3402      	adds	r4, #2
 8001622:	4d5a      	ldr	r5, [pc, #360]	@ (800178c <HAL_GPIO_Init+0x1dc>)
 8001624:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001628:	4a59      	ldr	r2, [pc, #356]	@ (8001790 <HAL_GPIO_Init+0x1e0>)
 800162a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800162c:	ea6f 020c 	mvn.w	r2, ip
 8001630:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001634:	684e      	ldr	r6, [r1, #4]
 8001636:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800163a:	d001      	beq.n	8001640 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800163c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001640:	4c53      	ldr	r4, [pc, #332]	@ (8001790 <HAL_GPIO_Init+0x1e0>)
 8001642:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001644:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001646:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164a:	684e      	ldr	r6, [r1, #4]
 800164c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001650:	d001      	beq.n	8001656 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001652:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001656:	4c4e      	ldr	r4, [pc, #312]	@ (8001790 <HAL_GPIO_Init+0x1e0>)
 8001658:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800165a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800165c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001660:	684e      	ldr	r6, [r1, #4]
 8001662:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001666:	d001      	beq.n	800166c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001668:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800166c:	4c48      	ldr	r4, [pc, #288]	@ (8001790 <HAL_GPIO_Init+0x1e0>)
 800166e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001670:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001672:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001674:	684d      	ldr	r5, [r1, #4]
 8001676:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800167a:	d001      	beq.n	8001680 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800167c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001680:	4c43      	ldr	r4, [pc, #268]	@ (8001790 <HAL_GPIO_Init+0x1e0>)
 8001682:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001684:	3301      	adds	r3, #1
 8001686:	2b0f      	cmp	r3, #15
 8001688:	d87d      	bhi.n	8001786 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 800168a:	2201      	movs	r2, #1
 800168c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168e:	680c      	ldr	r4, [r1, #0]
 8001690:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001694:	ea32 0404 	bics.w	r4, r2, r4
 8001698:	d1f4      	bne.n	8001684 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169a:	684c      	ldr	r4, [r1, #4]
 800169c:	f004 0403 	and.w	r4, r4, #3
 80016a0:	3c01      	subs	r4, #1
 80016a2:	2c01      	cmp	r4, #1
 80016a4:	d98b      	bls.n	80015be <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a6:	684a      	ldr	r2, [r1, #4]
 80016a8:	f002 0203 	and.w	r2, r2, #3
 80016ac:	2a03      	cmp	r2, #3
 80016ae:	d009      	beq.n	80016c4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80016b0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016b2:	005d      	lsls	r5, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	40aa      	lsls	r2, r5
 80016b8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016bc:	688a      	ldr	r2, [r1, #8]
 80016be:	40aa      	lsls	r2, r5
 80016c0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80016c2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c4:	684a      	ldr	r2, [r1, #4]
 80016c6:	f002 0203 	and.w	r2, r2, #3
 80016ca:	2a02      	cmp	r2, #2
 80016cc:	d08e      	beq.n	80015ec <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80016ce:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f20e 	lsl.w	r2, r2, lr
 80016da:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016de:	684a      	ldr	r2, [r1, #4]
 80016e0:	f002 0203 	and.w	r2, r2, #3
 80016e4:	fa02 f20e 	lsl.w	r2, r2, lr
 80016e8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80016ea:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ec:	684a      	ldr	r2, [r1, #4]
 80016ee:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80016f2:	d0c7      	beq.n	8001684 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f4:	2200      	movs	r2, #0
 80016f6:	9201      	str	r2, [sp, #4]
 80016f8:	4a26      	ldr	r2, [pc, #152]	@ (8001794 <HAL_GPIO_Init+0x1e4>)
 80016fa:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80016fc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001700:	6454      	str	r4, [r2, #68]	@ 0x44
 8001702:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001704:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001708:	9201      	str	r2, [sp, #4]
 800170a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800170c:	089c      	lsrs	r4, r3, #2
 800170e:	1ca5      	adds	r5, r4, #2
 8001710:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <HAL_GPIO_Init+0x1dc>)
 8001712:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001716:	f003 0e03 	and.w	lr, r3, #3
 800171a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f20e 	lsl.w	r2, r2, lr
 8001724:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001728:	4a1b      	ldr	r2, [pc, #108]	@ (8001798 <HAL_GPIO_Init+0x1e8>)
 800172a:	4290      	cmp	r0, r2
 800172c:	f43f af74 	beq.w	8001618 <HAL_GPIO_Init+0x68>
 8001730:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001734:	4290      	cmp	r0, r2
 8001736:	d01a      	beq.n	800176e <HAL_GPIO_Init+0x1be>
 8001738:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800173c:	4290      	cmp	r0, r2
 800173e:	d018      	beq.n	8001772 <HAL_GPIO_Init+0x1c2>
 8001740:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001744:	4290      	cmp	r0, r2
 8001746:	d016      	beq.n	8001776 <HAL_GPIO_Init+0x1c6>
 8001748:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800174c:	4290      	cmp	r0, r2
 800174e:	d014      	beq.n	800177a <HAL_GPIO_Init+0x1ca>
 8001750:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001754:	4290      	cmp	r0, r2
 8001756:	d012      	beq.n	800177e <HAL_GPIO_Init+0x1ce>
 8001758:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800175c:	4290      	cmp	r0, r2
 800175e:	d010      	beq.n	8001782 <HAL_GPIO_Init+0x1d2>
 8001760:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001764:	4290      	cmp	r0, r2
 8001766:	f43f af55 	beq.w	8001614 <HAL_GPIO_Init+0x64>
 800176a:	2208      	movs	r2, #8
 800176c:	e755      	b.n	800161a <HAL_GPIO_Init+0x6a>
 800176e:	2201      	movs	r2, #1
 8001770:	e753      	b.n	800161a <HAL_GPIO_Init+0x6a>
 8001772:	2202      	movs	r2, #2
 8001774:	e751      	b.n	800161a <HAL_GPIO_Init+0x6a>
 8001776:	2203      	movs	r2, #3
 8001778:	e74f      	b.n	800161a <HAL_GPIO_Init+0x6a>
 800177a:	2204      	movs	r2, #4
 800177c:	e74d      	b.n	800161a <HAL_GPIO_Init+0x6a>
 800177e:	2205      	movs	r2, #5
 8001780:	e74b      	b.n	800161a <HAL_GPIO_Init+0x6a>
 8001782:	2206      	movs	r2, #6
 8001784:	e749      	b.n	800161a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001786:	b002      	add	sp, #8
 8001788:	bd70      	pop	{r4, r5, r6, pc}
 800178a:	4770      	bx	lr
 800178c:	40013800 	.word	0x40013800
 8001790:	40013c00 	.word	0x40013c00
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800179c:	b10a      	cbz	r2, 80017a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179e:	6181      	str	r1, [r0, #24]
 80017a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017a2:	0409      	lsls	r1, r1, #16
 80017a4:	6181      	str	r1, [r0, #24]
  }
}
 80017a6:	4770      	bx	lr

080017a8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	2800      	cmp	r0, #0
 80017aa:	f000 81e0 	beq.w	8001b6e <HAL_RCC_OscConfig+0x3c6>
{
 80017ae:	b570      	push	{r4, r5, r6, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b4:	6803      	ldr	r3, [r0, #0]
 80017b6:	f013 0f01 	tst.w	r3, #1
 80017ba:	d03b      	beq.n	8001834 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017bc:	4b9f      	ldr	r3, [pc, #636]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d02c      	beq.n	8001822 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d021      	beq.n	8001818 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d4:	6863      	ldr	r3, [r4, #4]
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017da:	d04f      	beq.n	800187c <HAL_RCC_OscConfig+0xd4>
 80017dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017e0:	d052      	beq.n	8001888 <HAL_RCC_OscConfig+0xe0>
 80017e2:	4b96      	ldr	r3, [pc, #600]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80017f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f4:	6863      	ldr	r3, [r4, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d050      	beq.n	800189c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff fe69 	bl	80014d0 <HAL_GetTick>
 80017fe:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001800:	4b8e      	ldr	r3, [pc, #568]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001808:	d114      	bne.n	8001834 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180a:	f7ff fe61 	bl	80014d0 <HAL_GetTick>
 800180e:	1b40      	subs	r0, r0, r5
 8001810:	2864      	cmp	r0, #100	@ 0x64
 8001812:	d9f5      	bls.n	8001800 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001814:	2003      	movs	r0, #3
 8001816:	e1b1      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001818:	4b88      	ldr	r3, [pc, #544]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001820:	d0d8      	beq.n	80017d4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	4b86      	ldr	r3, [pc, #536]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800182a:	d003      	beq.n	8001834 <HAL_RCC_OscConfig+0x8c>
 800182c:	6863      	ldr	r3, [r4, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 819f 	beq.w	8001b72 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	f013 0f02 	tst.w	r3, #2
 800183a:	d054      	beq.n	80018e6 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f013 0f0c 	tst.w	r3, #12
 8001844:	d03e      	beq.n	80018c4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b7d      	ldr	r3, [pc, #500]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184e:	2b08      	cmp	r3, #8
 8001850:	d033      	beq.n	80018ba <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001852:	68e3      	ldr	r3, [r4, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d068      	beq.n	800192a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001858:	4b79      	ldr	r3, [pc, #484]	@ (8001a40 <HAL_RCC_OscConfig+0x298>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff fe37 	bl	80014d0 <HAL_GetTick>
 8001862:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001864:	4b75      	ldr	r3, [pc, #468]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f013 0f02 	tst.w	r3, #2
 800186c:	d154      	bne.n	8001918 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fe2f 	bl	80014d0 <HAL_GetTick>
 8001872:	1b40      	subs	r0, r0, r5
 8001874:	2802      	cmp	r0, #2
 8001876:	d9f5      	bls.n	8001864 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001878:	2003      	movs	r0, #3
 800187a:	e17f      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187c:	4a6f      	ldr	r2, [pc, #444]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e7b5      	b.n	80017f4 <HAL_RCC_OscConfig+0x4c>
 8001888:	4b6c      	ldr	r3, [pc, #432]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e7ab      	b.n	80017f4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800189c:	f7ff fe18 	bl	80014d0 <HAL_GetTick>
 80018a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	4b66      	ldr	r3, [pc, #408]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80018aa:	d0c3      	beq.n	8001834 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fe10 	bl	80014d0 <HAL_GetTick>
 80018b0:	1b40      	subs	r0, r0, r5
 80018b2:	2864      	cmp	r0, #100	@ 0x64
 80018b4:	d9f5      	bls.n	80018a2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80018b6:	2003      	movs	r0, #3
 80018b8:	e160      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ba:	4b60      	ldr	r3, [pc, #384]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80018c2:	d1c6      	bne.n	8001852 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c4:	4b5d      	ldr	r3, [pc, #372]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f013 0f02 	tst.w	r3, #2
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_OscConfig+0x12e>
 80018ce:	68e3      	ldr	r3, [r4, #12]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	f040 8150 	bne.w	8001b76 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d6:	4a59      	ldr	r2, [pc, #356]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 80018d8:	6813      	ldr	r3, [r2, #0]
 80018da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80018de:	6921      	ldr	r1, [r4, #16]
 80018e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018e4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	f013 0f08 	tst.w	r3, #8
 80018ec:	d042      	beq.n	8001974 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ee:	6963      	ldr	r3, [r4, #20]
 80018f0:	b36b      	cbz	r3, 800194e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	4b53      	ldr	r3, [pc, #332]	@ (8001a40 <HAL_RCC_OscConfig+0x298>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff fde9 	bl	80014d0 <HAL_GetTick>
 80018fe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001900:	4b4e      	ldr	r3, [pc, #312]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 8001902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001904:	f013 0f02 	tst.w	r3, #2
 8001908:	d134      	bne.n	8001974 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190a:	f7ff fde1 	bl	80014d0 <HAL_GetTick>
 800190e:	1b40      	subs	r0, r0, r5
 8001910:	2802      	cmp	r0, #2
 8001912:	d9f5      	bls.n	8001900 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001914:	2003      	movs	r0, #3
 8001916:	e131      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	4a48      	ldr	r2, [pc, #288]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 800191a:	6813      	ldr	r3, [r2, #0]
 800191c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001920:	6921      	ldr	r1, [r4, #16]
 8001922:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e7dd      	b.n	80018e6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800192a:	4b45      	ldr	r3, [pc, #276]	@ (8001a40 <HAL_RCC_OscConfig+0x298>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001930:	f7ff fdce 	bl	80014d0 <HAL_GetTick>
 8001934:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001936:	4b41      	ldr	r3, [pc, #260]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f013 0f02 	tst.w	r3, #2
 800193e:	d0d2      	beq.n	80018e6 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff fdc6 	bl	80014d0 <HAL_GetTick>
 8001944:	1b40      	subs	r0, r0, r5
 8001946:	2802      	cmp	r0, #2
 8001948:	d9f5      	bls.n	8001936 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800194a:	2003      	movs	r0, #3
 800194c:	e116      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001950:	2200      	movs	r2, #0
 8001952:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff fdbb 	bl	80014d0 <HAL_GetTick>
 800195a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	4b37      	ldr	r3, [pc, #220]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 800195e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001960:	f013 0f02 	tst.w	r3, #2
 8001964:	d006      	beq.n	8001974 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001966:	f7ff fdb3 	bl	80014d0 <HAL_GetTick>
 800196a:	1b40      	subs	r0, r0, r5
 800196c:	2802      	cmp	r0, #2
 800196e:	d9f5      	bls.n	800195c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001970:	2003      	movs	r0, #3
 8001972:	e103      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	f013 0f04 	tst.w	r3, #4
 800197a:	d077      	beq.n	8001a6c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001984:	d133      	bne.n	80019ee <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 800198c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800198e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001992:	641a      	str	r2, [r3, #64]	@ 0x40
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800199e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <HAL_RCC_OscConfig+0x29c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80019a8:	d023      	beq.n	80019f2 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019aa:	68a3      	ldr	r3, [r4, #8]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d034      	beq.n	8001a1a <HAL_RCC_OscConfig+0x272>
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d038      	beq.n	8001a26 <HAL_RCC_OscConfig+0x27e>
 80019b4:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 80019b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80019be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019c0:	f022 0204 	bic.w	r2, r2, #4
 80019c4:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c6:	68a3      	ldr	r3, [r4, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d03d      	beq.n	8001a48 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff fd80 	bl	80014d0 <HAL_GetTick>
 80019d0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d6:	f013 0f02 	tst.w	r3, #2
 80019da:	d146      	bne.n	8001a6a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff fd78 	bl	80014d0 <HAL_GetTick>
 80019e0:	1b80      	subs	r0, r0, r6
 80019e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80019e6:	4298      	cmp	r0, r3
 80019e8:	d9f3      	bls.n	80019d2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80019ea:	2003      	movs	r0, #3
 80019ec:	e0c6      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2500      	movs	r5, #0
 80019f0:	e7d6      	b.n	80019a0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f2:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <HAL_RCC_OscConfig+0x29c>)
 80019f4:	6813      	ldr	r3, [r2, #0]
 80019f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019fa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80019fc:	f7ff fd68 	bl	80014d0 <HAL_GetTick>
 8001a00:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <HAL_RCC_OscConfig+0x29c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001a0a:	d1ce      	bne.n	80019aa <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0c:	f7ff fd60 	bl	80014d0 <HAL_GetTick>
 8001a10:	1b80      	subs	r0, r0, r6
 8001a12:	2802      	cmp	r0, #2
 8001a14:	d9f5      	bls.n	8001a02 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001a16:	2003      	movs	r0, #3
 8001a18:	e0b0      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1a:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 8001a1c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a24:	e7cf      	b.n	80019c6 <HAL_RCC_OscConfig+0x21e>
 8001a26:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_RCC_OscConfig+0x294>)
 8001a28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a2a:	f042 0204 	orr.w	r2, r2, #4
 8001a2e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a38:	e7c5      	b.n	80019c6 <HAL_RCC_OscConfig+0x21e>
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	42470000 	.word	0x42470000
 8001a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff fd42 	bl	80014d0 <HAL_GetTick>
 8001a4c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4e:	4b52      	ldr	r3, [pc, #328]	@ (8001b98 <HAL_RCC_OscConfig+0x3f0>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a52:	f013 0f02 	tst.w	r3, #2
 8001a56:	d008      	beq.n	8001a6a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff fd3a 	bl	80014d0 <HAL_GetTick>
 8001a5c:	1b80      	subs	r0, r0, r6
 8001a5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a62:	4298      	cmp	r0, r3
 8001a64:	d9f3      	bls.n	8001a4e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001a66:	2003      	movs	r0, #3
 8001a68:	e088      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a6a:	b9ed      	cbnz	r5, 8001aa8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6c:	69a3      	ldr	r3, [r4, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8083 	beq.w	8001b7a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a74:	4a48      	ldr	r2, [pc, #288]	@ (8001b98 <HAL_RCC_OscConfig+0x3f0>)
 8001a76:	6892      	ldr	r2, [r2, #8]
 8001a78:	f002 020c 	and.w	r2, r2, #12
 8001a7c:	2a08      	cmp	r2, #8
 8001a7e:	d051      	beq.n	8001b24 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d017      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a84:	4b45      	ldr	r3, [pc, #276]	@ (8001b9c <HAL_RCC_OscConfig+0x3f4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fd21 	bl	80014d0 <HAL_GetTick>
 8001a8e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a90:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <HAL_RCC_OscConfig+0x3f0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001a98:	d042      	beq.n	8001b20 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff fd19 	bl	80014d0 <HAL_GetTick>
 8001a9e:	1b00      	subs	r0, r0, r4
 8001aa0:	2802      	cmp	r0, #2
 8001aa2:	d9f5      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	e069      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8001b98 <HAL_RCC_OscConfig+0x3f0>)
 8001aaa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	e7db      	b.n	8001a6c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b39      	ldr	r3, [pc, #228]	@ (8001b9c <HAL_RCC_OscConfig+0x3f4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001aba:	f7ff fd09 	bl	80014d0 <HAL_GetTick>
 8001abe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac0:	4b35      	ldr	r3, [pc, #212]	@ (8001b98 <HAL_RCC_OscConfig+0x3f0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001ac8:	d006      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff fd01 	bl	80014d0 <HAL_GetTick>
 8001ace:	1b40      	subs	r0, r0, r5
 8001ad0:	2802      	cmp	r0, #2
 8001ad2:	d9f5      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	e051      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ad8:	69e3      	ldr	r3, [r4, #28]
 8001ada:	6a22      	ldr	r2, [r4, #32]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001ae0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ae4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001ae6:	0852      	lsrs	r2, r2, #1
 8001ae8:	3a01      	subs	r2, #1
 8001aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001aee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001af0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001af4:	4a28      	ldr	r2, [pc, #160]	@ (8001b98 <HAL_RCC_OscConfig+0x3f0>)
 8001af6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001af8:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <HAL_RCC_OscConfig+0x3f4>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001afe:	f7ff fce7 	bl	80014d0 <HAL_GetTick>
 8001b02:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b04:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <HAL_RCC_OscConfig+0x3f0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001b0c:	d106      	bne.n	8001b1c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff fcdf 	bl	80014d0 <HAL_GetTick>
 8001b12:	1b00      	subs	r0, r0, r4
 8001b14:	2802      	cmp	r0, #2
 8001b16:	d9f5      	bls.n	8001b04 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001b18:	2003      	movs	r0, #3
 8001b1a:	e02f      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	e02d      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
 8001b20:	2000      	movs	r0, #0
 8001b22:	e02b      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d02b      	beq.n	8001b80 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <HAL_RCC_OscConfig+0x3f0>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001b30:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b32:	4291      	cmp	r1, r2
 8001b34:	d126      	bne.n	8001b84 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b3a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3c:	428a      	cmp	r2, r1
 8001b3e:	d123      	bne.n	8001b88 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b40:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b42:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001b46:	401a      	ands	r2, r3
 8001b48:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001b4c:	d11e      	bne.n	8001b8c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b4e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001b52:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001b54:	0852      	lsrs	r2, r2, #1
 8001b56:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b58:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001b5c:	d118      	bne.n	8001b90 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b5e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001b62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b64:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001b68:	d114      	bne.n	8001b94 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	e006      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
}
 8001b70:	4770      	bx	lr
        return HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
 8001b74:	e002      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001b76:	2001      	movs	r0, #1
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001b7a:	2000      	movs	r0, #0
}
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001b80:	2001      	movs	r0, #1
 8001b82:	e7fb      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001b84:	2001      	movs	r0, #1
 8001b86:	e7f9      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
 8001b88:	2001      	movs	r0, #1
 8001b8a:	e7f7      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	e7f5      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
 8001b90:	2001      	movs	r0, #1
 8001b92:	e7f3      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
 8001b94:	2001      	movs	r0, #1
 8001b96:	e7f1      	b.n	8001b7c <HAL_RCC_OscConfig+0x3d4>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	42470000 	.word	0x42470000

08001ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba2:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bae:	482f      	ldr	r0, [pc, #188]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bb0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001bc0:	d02c      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bc4:	6858      	ldr	r0, [r3, #4]
 8001bc6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001bca:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001bce:	ebbc 0c00 	subs.w	ip, ip, r0
 8001bd2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001bd6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001bda:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001bde:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001be2:	ebb1 010c 	subs.w	r1, r1, ip
 8001be6:	eb63 030e 	sbc.w	r3, r3, lr
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bf0:	00c9      	lsls	r1, r1, #3
 8001bf2:	eb11 0c00 	adds.w	ip, r1, r0
 8001bf6:	f143 0300 	adc.w	r3, r3, #0
 8001bfa:	0299      	lsls	r1, r3, #10
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001c02:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001c06:	f7fe ff39 	bl	8000a7c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c0a:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c12:	3301      	adds	r3, #1
 8001c14:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001c16:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001c1a:	e7c9      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c1e:	6858      	ldr	r0, [r3, #4]
 8001c20:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001c24:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001c28:	ebbc 0c00 	subs.w	ip, ip, r0
 8001c2c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001c30:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001c34:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001c38:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001c3c:	ebb1 010c 	subs.w	r1, r1, ip
 8001c40:	eb63 030e 	sbc.w	r3, r3, lr
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c4a:	00c9      	lsls	r1, r1, #3
 8001c4c:	eb11 0c00 	adds.w	ip, r1, r0
 8001c50:	f143 0300 	adc.w	r3, r3, #0
 8001c54:	0299      	lsls	r1, r3, #10
 8001c56:	2300      	movs	r3, #0
 8001c58:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001c5c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001c60:	f7fe ff0c 	bl	8000a7c <__aeabi_uldivmod>
 8001c64:	e7d1      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x6a>
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	00f42400 	.word	0x00f42400

08001c70 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001c70:	2800      	cmp	r0, #0
 8001c72:	f000 809b 	beq.w	8001dac <HAL_RCC_ClockConfig+0x13c>
{
 8001c76:	b570      	push	{r4, r5, r6, lr}
 8001c78:	460d      	mov	r5, r1
 8001c7a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001dbc <HAL_RCC_ClockConfig+0x14c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	428b      	cmp	r3, r1
 8001c86:	d208      	bcs.n	8001c9a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c88:	b2cb      	uxtb	r3, r1
 8001c8a:	4a4c      	ldr	r2, [pc, #304]	@ (8001dbc <HAL_RCC_ClockConfig+0x14c>)
 8001c8c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	428b      	cmp	r3, r1
 8001c96:	f040 808b 	bne.w	8001db0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	f013 0f02 	tst.w	r3, #2
 8001ca0:	d017      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca2:	f013 0f04 	tst.w	r3, #4
 8001ca6:	d004      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	4a45      	ldr	r2, [pc, #276]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001caa:	6893      	ldr	r3, [r2, #8]
 8001cac:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cb0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	f013 0f08 	tst.w	r3, #8
 8001cb8:	d004      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cba:	4a41      	ldr	r2, [pc, #260]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001cbc:	6893      	ldr	r3, [r2, #8]
 8001cbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cc2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001cc6:	6893      	ldr	r3, [r2, #8]
 8001cc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ccc:	68a1      	ldr	r1, [r4, #8]
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	f013 0f01 	tst.w	r3, #1
 8001cd8:	d032      	beq.n	8001d40 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	6863      	ldr	r3, [r4, #4]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d021      	beq.n	8001d24 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce0:	1e9a      	subs	r2, r3, #2
 8001ce2:	2a01      	cmp	r2, #1
 8001ce4:	d925      	bls.n	8001d32 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4a36      	ldr	r2, [pc, #216]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	f012 0f02 	tst.w	r2, #2
 8001cee:	d061      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf0:	4933      	ldr	r1, [pc, #204]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001cf2:	688a      	ldr	r2, [r1, #8]
 8001cf4:	f022 0203 	bic.w	r2, r2, #3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001cfc:	f7ff fbe8 	bl	80014d0 <HAL_GetTick>
 8001d00:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	6862      	ldr	r2, [r4, #4]
 8001d0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d10:	d016      	beq.n	8001d40 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d12:	f7ff fbdd 	bl	80014d0 <HAL_GetTick>
 8001d16:	1b80      	subs	r0, r0, r6
 8001d18:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d1c:	4298      	cmp	r0, r3
 8001d1e:	d9f0      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001d20:	2003      	movs	r0, #3
 8001d22:	e042      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d24:	4a26      	ldr	r2, [pc, #152]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001d2c:	d1e0      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001d2e:	2001      	movs	r0, #1
 8001d30:	e03b      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d32:	4a23      	ldr	r2, [pc, #140]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001d3a:	d1d9      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	e034      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <HAL_RCC_ClockConfig+0x14c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	42ab      	cmp	r3, r5
 8001d4a:	d907      	bls.n	8001d5c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4c:	b2ea      	uxtb	r2, r5
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_RCC_ClockConfig+0x14c>)
 8001d50:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	42ab      	cmp	r3, r5
 8001d5a:	d12d      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	f013 0f04 	tst.w	r3, #4
 8001d62:	d006      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d64:	4a16      	ldr	r2, [pc, #88]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d66:	6893      	ldr	r3, [r2, #8]
 8001d68:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001d6c:	68e1      	ldr	r1, [r4, #12]
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	f013 0f08 	tst.w	r3, #8
 8001d78:	d007      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7a:	4a11      	ldr	r2, [pc, #68]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d7c:	6893      	ldr	r3, [r2, #8]
 8001d7e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001d82:	6921      	ldr	r1, [r4, #16]
 8001d84:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d88:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d8a:	f7ff ff09 	bl	8001ba0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d96:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc4 <HAL_RCC_ClockConfig+0x154>)
 8001d98:	5cd3      	ldrb	r3, [r2, r3]
 8001d9a:	40d8      	lsrs	r0, r3
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <HAL_RCC_ClockConfig+0x158>)
 8001d9e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_RCC_ClockConfig+0x15c>)
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	f7ff fb48 	bl	8001438 <HAL_InitTick>
  return HAL_OK;
 8001da8:	2000      	movs	r0, #0
}
 8001daa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001dac:	2001      	movs	r0, #1
}
 8001dae:	4770      	bx	lr
      return HAL_ERROR;
 8001db0:	2001      	movs	r0, #1
 8001db2:	e7fa      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
 8001db6:	e7f8      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
 8001dba:	e7f6      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
 8001dbc:	40023c00 	.word	0x40023c00
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	0800487c 	.word	0x0800487c
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000008 	.word	0x20000008

08001dd0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001dd0:	4b01      	ldr	r3, [pc, #4]	@ (8001dd8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000

08001ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ddc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dde:	f7ff fff7 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001de2:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001dea:	4a03      	ldr	r2, [pc, #12]	@ (8001df8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
}
 8001dee:	40d8      	lsrs	r0, r3
 8001df0:	bd08      	pop	{r3, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08004874 	.word	0x08004874

08001dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dfc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dfe:	f7ff ffe7 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001e0a:	4a03      	ldr	r2, [pc, #12]	@ (8001e18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e0e:	40d8      	lsrs	r0, r3
 8001e10:	bd08      	pop	{r3, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08004874 	.word	0x08004874

08001e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e1c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e1e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e20:	6a02      	ldr	r2, [r0, #32]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e28:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e2a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e2c:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e30:	680c      	ldr	r4, [r1, #0]
 8001e32:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e36:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e3a:	688b      	ldr	r3, [r1, #8]
 8001e3c:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e40:	4d11      	ldr	r5, [pc, #68]	@ (8001e88 <TIM_OC1_SetConfig+0x6c>)
 8001e42:	42a8      	cmp	r0, r5
 8001e44:	d003      	beq.n	8001e4e <TIM_OC1_SetConfig+0x32>
 8001e46:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001e4a:	42a8      	cmp	r0, r5
 8001e4c:	d105      	bne.n	8001e5a <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e4e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e52:	68cd      	ldr	r5, [r1, #12]
 8001e54:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e56:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e5a:	4d0b      	ldr	r5, [pc, #44]	@ (8001e88 <TIM_OC1_SetConfig+0x6c>)
 8001e5c:	42a8      	cmp	r0, r5
 8001e5e:	d003      	beq.n	8001e68 <TIM_OC1_SetConfig+0x4c>
 8001e60:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001e64:	42a8      	cmp	r0, r5
 8001e66:	d107      	bne.n	8001e78 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e68:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e6c:	694d      	ldr	r5, [r1, #20]
 8001e6e:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e72:	698a      	ldr	r2, [r1, #24]
 8001e74:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e78:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e7a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e7c:	684a      	ldr	r2, [r1, #4]
 8001e7e:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e80:	6203      	str	r3, [r0, #32]
}
 8001e82:	bc30      	pop	{r4, r5}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40010000 	.word	0x40010000

08001e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e8c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e8e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e90:	6a02      	ldr	r2, [r0, #32]
 8001e92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e96:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e98:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e9a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e9c:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ea0:	680c      	ldr	r4, [r1, #0]
 8001ea2:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ea6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001eaa:	688c      	ldr	r4, [r1, #8]
 8001eac:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001eb0:	4c11      	ldr	r4, [pc, #68]	@ (8001ef8 <TIM_OC3_SetConfig+0x6c>)
 8001eb2:	42a0      	cmp	r0, r4
 8001eb4:	d003      	beq.n	8001ebe <TIM_OC3_SetConfig+0x32>
 8001eb6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001eba:	42a0      	cmp	r0, r4
 8001ebc:	d106      	bne.n	8001ecc <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ebe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ec2:	68cc      	ldr	r4, [r1, #12]
 8001ec4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ec8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ef8 <TIM_OC3_SetConfig+0x6c>)
 8001ece:	42a0      	cmp	r0, r4
 8001ed0:	d003      	beq.n	8001eda <TIM_OC3_SetConfig+0x4e>
 8001ed2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001ed6:	42a0      	cmp	r0, r4
 8001ed8:	d107      	bne.n	8001eea <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001eda:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ede:	694c      	ldr	r4, [r1, #20]
 8001ee0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ee4:	698c      	ldr	r4, [r1, #24]
 8001ee6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eea:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001eec:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001eee:	684a      	ldr	r2, [r1, #4]
 8001ef0:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ef2:	6203      	str	r3, [r0, #32]
}
 8001ef4:	bc30      	pop	{r4, r5}
 8001ef6:	4770      	bx	lr
 8001ef8:	40010000 	.word	0x40010000

08001efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001efc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efe:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f00:	6a02      	ldr	r2, [r0, #32]
 8001f02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f06:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f08:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f0a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f0c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f10:	680d      	ldr	r5, [r1, #0]
 8001f12:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f1a:	688d      	ldr	r5, [r1, #8]
 8001f1c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f20:	4d09      	ldr	r5, [pc, #36]	@ (8001f48 <TIM_OC4_SetConfig+0x4c>)
 8001f22:	42a8      	cmp	r0, r5
 8001f24:	d003      	beq.n	8001f2e <TIM_OC4_SetConfig+0x32>
 8001f26:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001f2a:	42a8      	cmp	r0, r5
 8001f2c:	d104      	bne.n	8001f38 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f2e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f32:	694d      	ldr	r5, [r1, #20]
 8001f34:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f3a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f3c:	684a      	ldr	r2, [r1, #4]
 8001f3e:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f40:	6203      	str	r3, [r0, #32]
}
 8001f42:	bc30      	pop	{r4, r5}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40010000 	.word	0x40010000

08001f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f4c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f4e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f50:	6a04      	ldr	r4, [r0, #32]
 8001f52:	f024 0401 	bic.w	r4, r4, #1
 8001f56:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f58:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f5a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f5e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f62:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001f66:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f68:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f6a:	6203      	str	r3, [r0, #32]
}
 8001f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f72:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f74:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f76:	6a04      	ldr	r4, [r0, #32]
 8001f78:	f024 0410 	bic.w	r4, r4, #16
 8001f7c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f7e:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f80:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f84:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f88:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f8c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f90:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f92:	6203      	str	r3, [r0, #32]
}
 8001f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f9a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fa6:	6083      	str	r3, [r0, #8]
}
 8001fa8:	4770      	bx	lr

08001faa <HAL_TIM_PWM_MspInit>:
}
 8001faa:	4770      	bx	lr

08001fac <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001fac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fae:	4a34      	ldr	r2, [pc, #208]	@ (8002080 <TIM_Base_SetConfig+0xd4>)
 8001fb0:	4290      	cmp	r0, r2
 8001fb2:	d012      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fb4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001fb8:	d00f      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fba:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001fbe:	4290      	cmp	r0, r2
 8001fc0:	d00b      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fc2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fc6:	4290      	cmp	r0, r2
 8001fc8:	d007      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fce:	4290      	cmp	r0, r2
 8001fd0:	d003      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fd2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001fd6:	4290      	cmp	r0, r2
 8001fd8:	d103      	bne.n	8001fe2 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fde:	684a      	ldr	r2, [r1, #4]
 8001fe0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe2:	4a27      	ldr	r2, [pc, #156]	@ (8002080 <TIM_Base_SetConfig+0xd4>)
 8001fe4:	4290      	cmp	r0, r2
 8001fe6:	d02a      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 8001fe8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001fec:	d027      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 8001fee:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001ff2:	4290      	cmp	r0, r2
 8001ff4:	d023      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 8001ff6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ffa:	4290      	cmp	r0, r2
 8001ffc:	d01f      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 8001ffe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002002:	4290      	cmp	r0, r2
 8002004:	d01b      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 8002006:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800200a:	4290      	cmp	r0, r2
 800200c:	d017      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 800200e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002012:	4290      	cmp	r0, r2
 8002014:	d013      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 8002016:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800201a:	4290      	cmp	r0, r2
 800201c:	d00f      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 800201e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002022:	4290      	cmp	r0, r2
 8002024:	d00b      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 8002026:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800202a:	4290      	cmp	r0, r2
 800202c:	d007      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 800202e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002032:	4290      	cmp	r0, r2
 8002034:	d003      	beq.n	800203e <TIM_Base_SetConfig+0x92>
 8002036:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800203a:	4290      	cmp	r0, r2
 800203c:	d103      	bne.n	8002046 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800203e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002042:	68ca      	ldr	r2, [r1, #12]
 8002044:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800204a:	694a      	ldr	r2, [r1, #20]
 800204c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800204e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002050:	688b      	ldr	r3, [r1, #8]
 8002052:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002054:	680b      	ldr	r3, [r1, #0]
 8002056:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <TIM_Base_SetConfig+0xd4>)
 800205a:	4298      	cmp	r0, r3
 800205c:	d003      	beq.n	8002066 <TIM_Base_SetConfig+0xba>
 800205e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002062:	4298      	cmp	r0, r3
 8002064:	d101      	bne.n	800206a <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8002066:	690b      	ldr	r3, [r1, #16]
 8002068:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800206a:	2301      	movs	r3, #1
 800206c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800206e:	6903      	ldr	r3, [r0, #16]
 8002070:	f013 0f01 	tst.w	r3, #1
 8002074:	d003      	beq.n	800207e <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002076:	6903      	ldr	r3, [r0, #16]
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6103      	str	r3, [r0, #16]
}
 800207e:	4770      	bx	lr
 8002080:	40010000 	.word	0x40010000

08002084 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002084:	b340      	cbz	r0, 80020d8 <HAL_TIM_Base_Init+0x54>
{
 8002086:	b510      	push	{r4, lr}
 8002088:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800208a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800208e:	b1f3      	cbz	r3, 80020ce <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	2302      	movs	r3, #2
 8002092:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002096:	4621      	mov	r1, r4
 8002098:	f851 0b04 	ldr.w	r0, [r1], #4
 800209c:	f7ff ff86 	bl	8001fac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80020aa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80020ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80020b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80020ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020be:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80020c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80020c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80020ca:	2000      	movs	r0, #0
}
 80020cc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80020ce:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020d2:	f7ff f8b3 	bl	800123c <HAL_TIM_Base_MspInit>
 80020d6:	e7db      	b.n	8002090 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80020d8:	2001      	movs	r0, #1
}
 80020da:	4770      	bx	lr

080020dc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80020dc:	b340      	cbz	r0, 8002130 <HAL_TIM_PWM_Init+0x54>
{
 80020de:	b510      	push	{r4, lr}
 80020e0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80020e2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80020e6:	b1f3      	cbz	r3, 8002126 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	2302      	movs	r3, #2
 80020ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ee:	4621      	mov	r1, r4
 80020f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80020f4:	f7ff ff5a 	bl	8001fac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f8:	2301      	movs	r3, #1
 80020fa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002102:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002106:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800210a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002116:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800211a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800211e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002122:	2000      	movs	r0, #0
}
 8002124:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002126:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800212a:	f7ff ff3e 	bl	8001faa <HAL_TIM_PWM_MspInit>
 800212e:	e7db      	b.n	80020e8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002130:	2001      	movs	r0, #1
}
 8002132:	4770      	bx	lr

08002134 <TIM_OC2_SetConfig>:
{
 8002134:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8002136:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002138:	6a02      	ldr	r2, [r0, #32]
 800213a:	f022 0210 	bic.w	r2, r2, #16
 800213e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002140:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002142:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002144:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002148:	680d      	ldr	r5, [r1, #0]
 800214a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800214e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002152:	688d      	ldr	r5, [r1, #8]
 8002154:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002158:	4d11      	ldr	r5, [pc, #68]	@ (80021a0 <TIM_OC2_SetConfig+0x6c>)
 800215a:	42a8      	cmp	r0, r5
 800215c:	d003      	beq.n	8002166 <TIM_OC2_SetConfig+0x32>
 800215e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002162:	42a8      	cmp	r0, r5
 8002164:	d106      	bne.n	8002174 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800216a:	68cd      	ldr	r5, [r1, #12]
 800216c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002174:	4d0a      	ldr	r5, [pc, #40]	@ (80021a0 <TIM_OC2_SetConfig+0x6c>)
 8002176:	42a8      	cmp	r0, r5
 8002178:	d003      	beq.n	8002182 <TIM_OC2_SetConfig+0x4e>
 800217a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800217e:	42a8      	cmp	r0, r5
 8002180:	d107      	bne.n	8002192 <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002182:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002186:	694d      	ldr	r5, [r1, #20]
 8002188:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800218c:	698d      	ldr	r5, [r1, #24]
 800218e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002192:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002194:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002196:	684a      	ldr	r2, [r1, #4]
 8002198:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800219a:	6203      	str	r3, [r0, #32]
}
 800219c:	bc30      	pop	{r4, r5}
 800219e:	4770      	bx	lr
 80021a0:	40010000 	.word	0x40010000

080021a4 <HAL_TIM_PWM_ConfigChannel>:
{
 80021a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80021a6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d066      	beq.n	800227c <HAL_TIM_PWM_ConfigChannel+0xd8>
 80021ae:	4604      	mov	r4, r0
 80021b0:	460d      	mov	r5, r1
 80021b2:	2301      	movs	r3, #1
 80021b4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80021b8:	2a0c      	cmp	r2, #12
 80021ba:	d85a      	bhi.n	8002272 <HAL_TIM_PWM_ConfigChannel+0xce>
 80021bc:	e8df f002 	tbb	[pc, r2]
 80021c0:	59595907 	.word	0x59595907
 80021c4:	5959591b 	.word	0x5959591b
 80021c8:	59595930 	.word	0x59595930
 80021cc:	44          	.byte	0x44
 80021cd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021ce:	6800      	ldr	r0, [r0, #0]
 80021d0:	f7ff fe24 	bl	8001e1c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021d4:	6822      	ldr	r2, [r4, #0]
 80021d6:	6993      	ldr	r3, [r2, #24]
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021de:	6822      	ldr	r2, [r4, #0]
 80021e0:	6993      	ldr	r3, [r2, #24]
 80021e2:	f023 0304 	bic.w	r3, r3, #4
 80021e6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	6993      	ldr	r3, [r2, #24]
 80021ec:	6929      	ldr	r1, [r5, #16]
 80021ee:	430b      	orrs	r3, r1
 80021f0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80021f2:	2000      	movs	r0, #0
      break;
 80021f4:	e03e      	b.n	8002274 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021f6:	6800      	ldr	r0, [r0, #0]
 80021f8:	f7ff ff9c 	bl	8002134 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021fc:	6822      	ldr	r2, [r4, #0]
 80021fe:	6993      	ldr	r3, [r2, #24]
 8002200:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002204:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002206:	6822      	ldr	r2, [r4, #0]
 8002208:	6993      	ldr	r3, [r2, #24]
 800220a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800220e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002210:	6822      	ldr	r2, [r4, #0]
 8002212:	6993      	ldr	r3, [r2, #24]
 8002214:	6929      	ldr	r1, [r5, #16]
 8002216:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800221a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800221c:	2000      	movs	r0, #0
      break;
 800221e:	e029      	b.n	8002274 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002220:	6800      	ldr	r0, [r0, #0]
 8002222:	f7ff fe33 	bl	8001e8c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002226:	6822      	ldr	r2, [r4, #0]
 8002228:	69d3      	ldr	r3, [r2, #28]
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002230:	6822      	ldr	r2, [r4, #0]
 8002232:	69d3      	ldr	r3, [r2, #28]
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800223a:	6822      	ldr	r2, [r4, #0]
 800223c:	69d3      	ldr	r3, [r2, #28]
 800223e:	6929      	ldr	r1, [r5, #16]
 8002240:	430b      	orrs	r3, r1
 8002242:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2000      	movs	r0, #0
      break;
 8002246:	e015      	b.n	8002274 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002248:	6800      	ldr	r0, [r0, #0]
 800224a:	f7ff fe57 	bl	8001efc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800224e:	6822      	ldr	r2, [r4, #0]
 8002250:	69d3      	ldr	r3, [r2, #28]
 8002252:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002256:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002258:	6822      	ldr	r2, [r4, #0]
 800225a:	69d3      	ldr	r3, [r2, #28]
 800225c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002260:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002262:	6822      	ldr	r2, [r4, #0]
 8002264:	69d3      	ldr	r3, [r2, #28]
 8002266:	6929      	ldr	r1, [r5, #16]
 8002268:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800226c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2000      	movs	r0, #0
      break;
 8002270:	e000      	b.n	8002274 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002272:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002274:	2300      	movs	r3, #0
 8002276:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800227a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800227c:	2002      	movs	r0, #2
 800227e:	e7fc      	b.n	800227a <HAL_TIM_PWM_ConfigChannel+0xd6>

08002280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002280:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002282:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002284:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002288:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800228c:	430a      	orrs	r2, r1
 800228e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002292:	6082      	str	r2, [r0, #8]
}
 8002294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800229a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d078      	beq.n	8002394 <HAL_TIM_ConfigClockSource+0xfa>
{
 80022a2:	b510      	push	{r4, lr}
 80022a4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80022a6:	2301      	movs	r3, #1
 80022a8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	2302      	movs	r3, #2
 80022ae:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80022b2:	6802      	ldr	r2, [r0, #0]
 80022b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80022be:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80022c0:	680b      	ldr	r3, [r1, #0]
 80022c2:	2b60      	cmp	r3, #96	@ 0x60
 80022c4:	d04c      	beq.n	8002360 <HAL_TIM_ConfigClockSource+0xc6>
 80022c6:	d829      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x82>
 80022c8:	2b40      	cmp	r3, #64	@ 0x40
 80022ca:	d054      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0xdc>
 80022cc:	d90c      	bls.n	80022e8 <HAL_TIM_ConfigClockSource+0x4e>
 80022ce:	2b50      	cmp	r3, #80	@ 0x50
 80022d0:	d122      	bne.n	8002318 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d2:	68ca      	ldr	r2, [r1, #12]
 80022d4:	6849      	ldr	r1, [r1, #4]
 80022d6:	6800      	ldr	r0, [r0, #0]
 80022d8:	f7ff fe38 	bl	8001f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022dc:	2150      	movs	r1, #80	@ 0x50
 80022de:	6820      	ldr	r0, [r4, #0]
 80022e0:	f7ff fe5b 	bl	8001f9a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80022e4:	2000      	movs	r0, #0
      break;
 80022e6:	e005      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d00d      	beq.n	8002308 <HAL_TIM_ConfigClockSource+0x6e>
 80022ec:	d909      	bls.n	8002302 <HAL_TIM_ConfigClockSource+0x68>
 80022ee:	2b30      	cmp	r3, #48	@ 0x30
 80022f0:	d00a      	beq.n	8002308 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80022f2:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80022fa:	2300      	movs	r3, #0
 80022fc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002300:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002302:	b10b      	cbz	r3, 8002308 <HAL_TIM_ConfigClockSource+0x6e>
 8002304:	2b10      	cmp	r3, #16
 8002306:	d105      	bne.n	8002314 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002308:	4619      	mov	r1, r3
 800230a:	6820      	ldr	r0, [r4, #0]
 800230c:	f7ff fe45 	bl	8001f9a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002310:	2000      	movs	r0, #0
      break;
 8002312:	e7ef      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002314:	2001      	movs	r0, #1
 8002316:	e7ed      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x5a>
 8002318:	2001      	movs	r0, #1
 800231a:	e7eb      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800231c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002320:	d034      	beq.n	800238c <HAL_TIM_ConfigClockSource+0xf2>
 8002322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002326:	d10c      	bne.n	8002342 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002328:	68cb      	ldr	r3, [r1, #12]
 800232a:	684a      	ldr	r2, [r1, #4]
 800232c:	6889      	ldr	r1, [r1, #8]
 800232e:	6800      	ldr	r0, [r0, #0]
 8002330:	f7ff ffa6 	bl	8002280 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	6893      	ldr	r3, [r2, #8]
 8002338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800233c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800233e:	2000      	movs	r0, #0
      break;
 8002340:	e7d8      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002342:	2b70      	cmp	r3, #112	@ 0x70
 8002344:	d124      	bne.n	8002390 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002346:	68cb      	ldr	r3, [r1, #12]
 8002348:	684a      	ldr	r2, [r1, #4]
 800234a:	6889      	ldr	r1, [r1, #8]
 800234c:	6800      	ldr	r0, [r0, #0]
 800234e:	f7ff ff97 	bl	8002280 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002352:	6822      	ldr	r2, [r4, #0]
 8002354:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002356:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800235a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	2000      	movs	r0, #0
      break;
 800235e:	e7c9      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002360:	68ca      	ldr	r2, [r1, #12]
 8002362:	6849      	ldr	r1, [r1, #4]
 8002364:	6800      	ldr	r0, [r0, #0]
 8002366:	f7ff fe04 	bl	8001f72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800236a:	2160      	movs	r1, #96	@ 0x60
 800236c:	6820      	ldr	r0, [r4, #0]
 800236e:	f7ff fe14 	bl	8001f9a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2000      	movs	r0, #0
      break;
 8002374:	e7be      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002376:	68ca      	ldr	r2, [r1, #12]
 8002378:	6849      	ldr	r1, [r1, #4]
 800237a:	6800      	ldr	r0, [r0, #0]
 800237c:	f7ff fde6 	bl	8001f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002380:	2140      	movs	r1, #64	@ 0x40
 8002382:	6820      	ldr	r0, [r4, #0]
 8002384:	f7ff fe09 	bl	8001f9a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2000      	movs	r0, #0
      break;
 800238a:	e7b3      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800238c:	2000      	movs	r0, #0
 800238e:	e7b1      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002390:	2001      	movs	r0, #1
 8002392:	e7af      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8002394:	2002      	movs	r0, #2
}
 8002396:	4770      	bx	lr

08002398 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002398:	f001 011f 	and.w	r1, r1, #31
 800239c:	f04f 0c01 	mov.w	ip, #1
 80023a0:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023a4:	6a03      	ldr	r3, [r0, #32]
 80023a6:	ea23 030c 	bic.w	r3, r3, ip
 80023aa:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023ac:	6a03      	ldr	r3, [r0, #32]
 80023ae:	408a      	lsls	r2, r1
 80023b0:	4313      	orrs	r3, r2
 80023b2:	6203      	str	r3, [r0, #32]
}
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_TIM_PWM_Start>:
{
 80023b8:	b510      	push	{r4, lr}
 80023ba:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023bc:	4608      	mov	r0, r1
 80023be:	2900      	cmp	r1, #0
 80023c0:	d142      	bne.n	8002448 <HAL_TIM_PWM_Start+0x90>
 80023c2:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	bf18      	it	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d16e      	bne.n	80024b0 <HAL_TIM_PWM_Start+0xf8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023d2:	2800      	cmp	r0, #0
 80023d4:	d151      	bne.n	800247a <HAL_TIM_PWM_Start+0xc2>
 80023d6:	2302      	movs	r3, #2
 80023d8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023dc:	2201      	movs	r2, #1
 80023de:	4601      	mov	r1, r0
 80023e0:	6820      	ldr	r0, [r4, #0]
 80023e2:	f7ff ffd9 	bl	8002398 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	4a33      	ldr	r2, [pc, #204]	@ (80024b8 <HAL_TIM_PWM_Start+0x100>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_PWM_Start+0x3e>
 80023ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d103      	bne.n	80023fe <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 80023f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fc:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	4a2d      	ldr	r2, [pc, #180]	@ (80024b8 <HAL_TIM_PWM_Start+0x100>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d049      	beq.n	800249a <HAL_TIM_PWM_Start+0xe2>
 8002406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240a:	d046      	beq.n	800249a <HAL_TIM_PWM_Start+0xe2>
 800240c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002410:	4293      	cmp	r3, r2
 8002412:	d042      	beq.n	800249a <HAL_TIM_PWM_Start+0xe2>
 8002414:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002418:	4293      	cmp	r3, r2
 800241a:	d03e      	beq.n	800249a <HAL_TIM_PWM_Start+0xe2>
 800241c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002420:	4293      	cmp	r3, r2
 8002422:	d03a      	beq.n	800249a <HAL_TIM_PWM_Start+0xe2>
 8002424:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002428:	4293      	cmp	r3, r2
 800242a:	d036      	beq.n	800249a <HAL_TIM_PWM_Start+0xe2>
 800242c:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002430:	4293      	cmp	r3, r2
 8002432:	d032      	beq.n	800249a <HAL_TIM_PWM_Start+0xe2>
 8002434:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002438:	4293      	cmp	r3, r2
 800243a:	d02e      	beq.n	800249a <HAL_TIM_PWM_Start+0xe2>
    __HAL_TIM_ENABLE(htim);
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002444:	2000      	movs	r0, #0
 8002446:	e032      	b.n	80024ae <HAL_TIM_PWM_Start+0xf6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002448:	2904      	cmp	r1, #4
 800244a:	d008      	beq.n	800245e <HAL_TIM_PWM_Start+0xa6>
 800244c:	2908      	cmp	r1, #8
 800244e:	d00d      	beq.n	800246c <HAL_TIM_PWM_Start+0xb4>
 8002450:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	bf18      	it	ne
 800245a:	2301      	movne	r3, #1
 800245c:	e7b7      	b.n	80023ce <HAL_TIM_PWM_Start+0x16>
 800245e:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	bf18      	it	ne
 8002468:	2301      	movne	r3, #1
 800246a:	e7b0      	b.n	80023ce <HAL_TIM_PWM_Start+0x16>
 800246c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002470:	b2db      	uxtb	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	bf18      	it	ne
 8002476:	2301      	movne	r3, #1
 8002478:	e7a9      	b.n	80023ce <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800247a:	2804      	cmp	r0, #4
 800247c:	d005      	beq.n	800248a <HAL_TIM_PWM_Start+0xd2>
 800247e:	2808      	cmp	r0, #8
 8002480:	d007      	beq.n	8002492 <HAL_TIM_PWM_Start+0xda>
 8002482:	2302      	movs	r3, #2
 8002484:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002488:	e7a8      	b.n	80023dc <HAL_TIM_PWM_Start+0x24>
 800248a:	2302      	movs	r3, #2
 800248c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002490:	e7a4      	b.n	80023dc <HAL_TIM_PWM_Start+0x24>
 8002492:	2302      	movs	r3, #2
 8002494:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002498:	e7a0      	b.n	80023dc <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a0:	2a06      	cmp	r2, #6
 80024a2:	d007      	beq.n	80024b4 <HAL_TIM_PWM_Start+0xfc>
      __HAL_TIM_ENABLE(htim);
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80024ac:	2000      	movs	r0, #0
}
 80024ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
 80024b2:	e7fc      	b.n	80024ae <HAL_TIM_PWM_Start+0xf6>
  return HAL_OK;
 80024b4:	2000      	movs	r0, #0
 80024b6:	e7fa      	b.n	80024ae <HAL_TIM_PWM_Start+0xf6>
 80024b8:	40010000 	.word	0x40010000

080024bc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024bc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80024c0:	2a01      	cmp	r2, #1
 80024c2:	d03d      	beq.n	8002540 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 80024c4:	b410      	push	{r4}
 80024c6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80024c8:	2201      	movs	r2, #1
 80024ca:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ce:	2202      	movs	r2, #2
 80024d0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024d4:	6802      	ldr	r2, [r0, #0]
 80024d6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024d8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024da:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024de:	6808      	ldr	r0, [r1, #0]
 80024e0:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024e4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4816      	ldr	r0, [pc, #88]	@ (8002544 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80024ea:	4282      	cmp	r2, r0
 80024ec:	d01a      	beq.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80024ee:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80024f2:	d017      	beq.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80024f4:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80024f8:	4282      	cmp	r2, r0
 80024fa:	d013      	beq.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80024fc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002500:	4282      	cmp	r2, r0
 8002502:	d00f      	beq.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002504:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002508:	4282      	cmp	r2, r0
 800250a:	d00b      	beq.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800250c:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8002510:	4282      	cmp	r2, r0
 8002512:	d007      	beq.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002514:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8002518:	4282      	cmp	r2, r0
 800251a:	d003      	beq.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800251c:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002520:	4282      	cmp	r2, r0
 8002522:	d104      	bne.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002524:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002528:	6849      	ldr	r1, [r1, #4]
 800252a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800252c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002534:	2000      	movs	r0, #0
 8002536:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800253a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800253e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002540:	2002      	movs	r0, #2
}
 8002542:	4770      	bx	lr
 8002544:	40010000 	.word	0x40010000

08002548 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002548:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254a:	f102 030c 	add.w	r3, r2, #12
 800254e:	e853 3f00 	ldrex	r3, [r3]
 8002552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002556:	320c      	adds	r2, #12
 8002558:	e842 3100 	strex	r1, r3, [r2]
 800255c:	2900      	cmp	r1, #0
 800255e:	d1f3      	bne.n	8002548 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002560:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002562:	f102 0314 	add.w	r3, r2, #20
 8002566:	e853 3f00 	ldrex	r3, [r3]
 800256a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256e:	3214      	adds	r2, #20
 8002570:	e842 3100 	strex	r1, r3, [r2]
 8002574:	2900      	cmp	r1, #0
 8002576:	d1f3      	bne.n	8002560 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002578:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800257a:	2b01      	cmp	r3, #1
 800257c:	d005      	beq.n	800258a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800257e:	2320      	movs	r3, #32
 8002580:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002584:	2300      	movs	r3, #0
 8002586:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002588:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800258a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258c:	f102 030c 	add.w	r3, r2, #12
 8002590:	e853 3f00 	ldrex	r3, [r3]
 8002594:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002598:	320c      	adds	r2, #12
 800259a:	e842 3100 	strex	r1, r3, [r2]
 800259e:	2900      	cmp	r1, #0
 80025a0:	d1f3      	bne.n	800258a <UART_EndRxTransfer+0x42>
 80025a2:	e7ec      	b.n	800257e <UART_EndRxTransfer+0x36>

080025a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a4:	b510      	push	{r4, lr}
 80025a6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a8:	6802      	ldr	r2, [r0, #0]
 80025aa:	6913      	ldr	r3, [r2, #16]
 80025ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025b0:	68c1      	ldr	r1, [r0, #12]
 80025b2:	430b      	orrs	r3, r1
 80025b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025b6:	6883      	ldr	r3, [r0, #8]
 80025b8:	6902      	ldr	r2, [r0, #16]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	6943      	ldr	r3, [r0, #20]
 80025be:	431a      	orrs	r2, r3
 80025c0:	69c3      	ldr	r3, [r0, #28]
 80025c2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80025c4:	6801      	ldr	r1, [r0, #0]
 80025c6:	68cb      	ldr	r3, [r1, #12]
 80025c8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80025cc:	f023 030c 	bic.w	r3, r3, #12
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d4:	6802      	ldr	r2, [r0, #0]
 80025d6:	6953      	ldr	r3, [r2, #20]
 80025d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025dc:	6981      	ldr	r1, [r0, #24]
 80025de:	430b      	orrs	r3, r1
 80025e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025e2:	6803      	ldr	r3, [r0, #0]
 80025e4:	4a31      	ldr	r2, [pc, #196]	@ (80026ac <UART_SetConfig+0x108>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d006      	beq.n	80025f8 <UART_SetConfig+0x54>
 80025ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d002      	beq.n	80025f8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025f2:	f7ff fbf3 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 80025f6:	e001      	b.n	80025fc <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80025f8:	f7ff fc00 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025fc:	69e3      	ldr	r3, [r4, #28]
 80025fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002602:	d029      	beq.n	8002658 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002604:	2100      	movs	r1, #0
 8002606:	1803      	adds	r3, r0, r0
 8002608:	4149      	adcs	r1, r1
 800260a:	181b      	adds	r3, r3, r0
 800260c:	f141 0100 	adc.w	r1, r1, #0
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	1818      	adds	r0, r3, r0
 800261a:	6863      	ldr	r3, [r4, #4]
 800261c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002620:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002624:	f141 0100 	adc.w	r1, r1, #0
 8002628:	f7fe fa28 	bl	8000a7c <__aeabi_uldivmod>
 800262c:	4a20      	ldr	r2, [pc, #128]	@ (80026b0 <UART_SetConfig+0x10c>)
 800262e:	fba2 3100 	umull	r3, r1, r2, r0
 8002632:	0949      	lsrs	r1, r1, #5
 8002634:	2364      	movs	r3, #100	@ 0x64
 8002636:	fb03 0311 	mls	r3, r3, r1, r0
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	3332      	adds	r3, #50	@ 0x32
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002648:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	6821      	ldr	r1, [r4, #0]
 8002652:	4413      	add	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }
}
 8002656:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002658:	2300      	movs	r3, #0
 800265a:	1802      	adds	r2, r0, r0
 800265c:	eb43 0103 	adc.w	r1, r3, r3
 8002660:	1812      	adds	r2, r2, r0
 8002662:	f141 0100 	adc.w	r1, r1, #0
 8002666:	00c9      	lsls	r1, r1, #3
 8002668:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800266c:	00d2      	lsls	r2, r2, #3
 800266e:	1810      	adds	r0, r2, r0
 8002670:	f141 0100 	adc.w	r1, r1, #0
 8002674:	6862      	ldr	r2, [r4, #4]
 8002676:	1892      	adds	r2, r2, r2
 8002678:	415b      	adcs	r3, r3
 800267a:	f7fe f9ff 	bl	8000a7c <__aeabi_uldivmod>
 800267e:	4a0c      	ldr	r2, [pc, #48]	@ (80026b0 <UART_SetConfig+0x10c>)
 8002680:	fba2 3100 	umull	r3, r1, r2, r0
 8002684:	0949      	lsrs	r1, r1, #5
 8002686:	2364      	movs	r3, #100	@ 0x64
 8002688:	fb03 0311 	mls	r3, r3, r1, r0
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	3332      	adds	r3, #50	@ 0x32
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	005a      	lsls	r2, r3, #1
 8002698:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 800269c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	6821      	ldr	r1, [r4, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
 80026aa:	e7d4      	b.n	8002656 <UART_SetConfig+0xb2>
 80026ac:	40011000 	.word	0x40011000
 80026b0:	51eb851f 	.word	0x51eb851f

080026b4 <UART_WaitOnFlagUntilTimeout>:
{
 80026b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026b8:	b083      	sub	sp, #12
 80026ba:	4605      	mov	r5, r0
 80026bc:	460e      	mov	r6, r1
 80026be:	4617      	mov	r7, r2
 80026c0:	4699      	mov	r9, r3
 80026c2:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	681c      	ldr	r4, [r3, #0]
 80026ca:	ea36 0404 	bics.w	r4, r6, r4
 80026ce:	bf0c      	ite	eq
 80026d0:	2401      	moveq	r4, #1
 80026d2:	2400      	movne	r4, #0
 80026d4:	42bc      	cmp	r4, r7
 80026d6:	d128      	bne.n	800272a <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80026d8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80026dc:	d0f3      	beq.n	80026c6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026de:	f7fe fef7 	bl	80014d0 <HAL_GetTick>
 80026e2:	eba0 0009 	sub.w	r0, r0, r9
 80026e6:	4540      	cmp	r0, r8
 80026e8:	d823      	bhi.n	8002732 <UART_WaitOnFlagUntilTimeout+0x7e>
 80026ea:	f1b8 0f00 	cmp.w	r8, #0
 80026ee:	d022      	beq.n	8002736 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	f012 0f04 	tst.w	r2, #4
 80026f8:	d0e5      	beq.n	80026c6 <UART_WaitOnFlagUntilTimeout+0x12>
 80026fa:	2e80      	cmp	r6, #128	@ 0x80
 80026fc:	d0e3      	beq.n	80026c6 <UART_WaitOnFlagUntilTimeout+0x12>
 80026fe:	2e40      	cmp	r6, #64	@ 0x40
 8002700:	d0e1      	beq.n	80026c6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	f012 0f08 	tst.w	r2, #8
 8002708:	d0dd      	beq.n	80026c6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800270a:	2400      	movs	r4, #0
 800270c:	9401      	str	r4, [sp, #4]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	9201      	str	r2, [sp, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002718:	4628      	mov	r0, r5
 800271a:	f7ff ff15 	bl	8002548 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800271e:	2308      	movs	r3, #8
 8002720:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002722:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002726:	2001      	movs	r0, #1
 8002728:	e000      	b.n	800272c <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800272a:	2000      	movs	r0, #0
}
 800272c:	b003      	add	sp, #12
 800272e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002732:	2003      	movs	r0, #3
 8002734:	e7fa      	b.n	800272c <UART_WaitOnFlagUntilTimeout+0x78>
 8002736:	2003      	movs	r0, #3
 8002738:	e7f8      	b.n	800272c <UART_WaitOnFlagUntilTimeout+0x78>

0800273a <HAL_UART_Init>:
  if (huart == NULL)
 800273a:	b360      	cbz	r0, 8002796 <HAL_UART_Init+0x5c>
{
 800273c:	b510      	push	{r4, lr}
 800273e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002740:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002744:	b313      	cbz	r3, 800278c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002746:	2324      	movs	r3, #36	@ 0x24
 8002748:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800274c:	6822      	ldr	r2, [r4, #0]
 800274e:	68d3      	ldr	r3, [r2, #12]
 8002750:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002754:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002756:	4620      	mov	r0, r4
 8002758:	f7ff ff24 	bl	80025a4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	6913      	ldr	r3, [r2, #16]
 8002760:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002764:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	6953      	ldr	r3, [r2, #20]
 800276a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800276e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002770:	6822      	ldr	r2, [r4, #0]
 8002772:	68d3      	ldr	r3, [r2, #12]
 8002774:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002778:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277a:	2000      	movs	r0, #0
 800277c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800277e:	2320      	movs	r3, #32
 8002780:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002784:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002788:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800278a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800278c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002790:	f7fe fd98 	bl	80012c4 <HAL_UART_MspInit>
 8002794:	e7d7      	b.n	8002746 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002796:	2001      	movs	r0, #1
}
 8002798:	4770      	bx	lr

0800279a <HAL_UART_Transmit>:
{
 800279a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80027a2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d156      	bne.n	800285a <HAL_UART_Transmit+0xc0>
 80027ac:	4604      	mov	r4, r0
 80027ae:	460d      	mov	r5, r1
 80027b0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80027b2:	2900      	cmp	r1, #0
 80027b4:	d055      	beq.n	8002862 <HAL_UART_Transmit+0xc8>
 80027b6:	b90a      	cbnz	r2, 80027bc <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80027b8:	2001      	movs	r0, #1
 80027ba:	e04f      	b.n	800285c <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	2300      	movs	r3, #0
 80027be:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c0:	2321      	movs	r3, #33	@ 0x21
 80027c2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80027c6:	f7fe fe83 	bl	80014d0 <HAL_GetTick>
 80027ca:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80027cc:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027d0:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d4:	68a3      	ldr	r3, [r4, #8]
 80027d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027da:	d002      	beq.n	80027e2 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80027dc:	f04f 0800 	mov.w	r8, #0
 80027e0:	e014      	b.n	800280c <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e2:	6923      	ldr	r3, [r4, #16]
 80027e4:	b32b      	cbz	r3, 8002832 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80027e6:	f04f 0800 	mov.w	r8, #0
 80027ea:	e00f      	b.n	800280c <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80027ec:	2320      	movs	r3, #32
 80027ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80027f2:	2003      	movs	r0, #3
 80027f4:	e032      	b.n	800285c <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027f6:	f838 3b02 	ldrh.w	r3, [r8], #2
 80027fa:	6822      	ldr	r2, [r4, #0]
 80027fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002800:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002802:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002804:	b292      	uxth	r2, r2
 8002806:	3a01      	subs	r2, #1
 8002808:	b292      	uxth	r2, r2
 800280a:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800280c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800280e:	b29b      	uxth	r3, r3
 8002810:	b193      	cbz	r3, 8002838 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002812:	9600      	str	r6, [sp, #0]
 8002814:	463b      	mov	r3, r7
 8002816:	2200      	movs	r2, #0
 8002818:	2180      	movs	r1, #128	@ 0x80
 800281a:	4620      	mov	r0, r4
 800281c:	f7ff ff4a 	bl	80026b4 <UART_WaitOnFlagUntilTimeout>
 8002820:	2800      	cmp	r0, #0
 8002822:	d1e3      	bne.n	80027ec <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002824:	2d00      	cmp	r5, #0
 8002826:	d0e6      	beq.n	80027f6 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002828:	f815 2b01 	ldrb.w	r2, [r5], #1
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002830:	e7e7      	b.n	8002802 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002832:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002834:	2500      	movs	r5, #0
 8002836:	e7e9      	b.n	800280c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002838:	9600      	str	r6, [sp, #0]
 800283a:	463b      	mov	r3, r7
 800283c:	2200      	movs	r2, #0
 800283e:	2140      	movs	r1, #64	@ 0x40
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff ff37 	bl	80026b4 <UART_WaitOnFlagUntilTimeout>
 8002846:	b918      	cbnz	r0, 8002850 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002848:	2320      	movs	r3, #32
 800284a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800284e:	e005      	b.n	800285c <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002850:	2320      	movs	r3, #32
 8002852:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002856:	2003      	movs	r0, #3
 8002858:	e000      	b.n	800285c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800285a:	2002      	movs	r0, #2
}
 800285c:	b002      	add	sp, #8
 800285e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002862:	2001      	movs	r0, #1
 8002864:	e7fa      	b.n	800285c <HAL_UART_Transmit+0xc2>
	...

08002868 <std>:
 8002868:	2300      	movs	r3, #0
 800286a:	b510      	push	{r4, lr}
 800286c:	4604      	mov	r4, r0
 800286e:	e9c0 3300 	strd	r3, r3, [r0]
 8002872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002876:	6083      	str	r3, [r0, #8]
 8002878:	8181      	strh	r1, [r0, #12]
 800287a:	6643      	str	r3, [r0, #100]	@ 0x64
 800287c:	81c2      	strh	r2, [r0, #14]
 800287e:	6183      	str	r3, [r0, #24]
 8002880:	4619      	mov	r1, r3
 8002882:	2208      	movs	r2, #8
 8002884:	305c      	adds	r0, #92	@ 0x5c
 8002886:	f000 f9f9 	bl	8002c7c <memset>
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <std+0x58>)
 800288c:	6263      	str	r3, [r4, #36]	@ 0x24
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <std+0x5c>)
 8002890:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002892:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <std+0x60>)
 8002894:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <std+0x64>)
 8002898:	6323      	str	r3, [r4, #48]	@ 0x30
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <std+0x68>)
 800289c:	6224      	str	r4, [r4, #32]
 800289e:	429c      	cmp	r4, r3
 80028a0:	d006      	beq.n	80028b0 <std+0x48>
 80028a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80028a6:	4294      	cmp	r4, r2
 80028a8:	d002      	beq.n	80028b0 <std+0x48>
 80028aa:	33d0      	adds	r3, #208	@ 0xd0
 80028ac:	429c      	cmp	r4, r3
 80028ae:	d105      	bne.n	80028bc <std+0x54>
 80028b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80028b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b8:	f000 ba58 	b.w	8002d6c <__retarget_lock_init_recursive>
 80028bc:	bd10      	pop	{r4, pc}
 80028be:	bf00      	nop
 80028c0:	08002acd 	.word	0x08002acd
 80028c4:	08002aef 	.word	0x08002aef
 80028c8:	08002b27 	.word	0x08002b27
 80028cc:	08002b4b 	.word	0x08002b4b
 80028d0:	2000011c 	.word	0x2000011c

080028d4 <stdio_exit_handler>:
 80028d4:	4a02      	ldr	r2, [pc, #8]	@ (80028e0 <stdio_exit_handler+0xc>)
 80028d6:	4903      	ldr	r1, [pc, #12]	@ (80028e4 <stdio_exit_handler+0x10>)
 80028d8:	4803      	ldr	r0, [pc, #12]	@ (80028e8 <stdio_exit_handler+0x14>)
 80028da:	f000 b869 	b.w	80029b0 <_fwalk_sglue>
 80028de:	bf00      	nop
 80028e0:	2000000c 	.word	0x2000000c
 80028e4:	0800360d 	.word	0x0800360d
 80028e8:	2000001c 	.word	0x2000001c

080028ec <cleanup_stdio>:
 80028ec:	6841      	ldr	r1, [r0, #4]
 80028ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <cleanup_stdio+0x34>)
 80028f0:	4299      	cmp	r1, r3
 80028f2:	b510      	push	{r4, lr}
 80028f4:	4604      	mov	r4, r0
 80028f6:	d001      	beq.n	80028fc <cleanup_stdio+0x10>
 80028f8:	f000 fe88 	bl	800360c <_fflush_r>
 80028fc:	68a1      	ldr	r1, [r4, #8]
 80028fe:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <cleanup_stdio+0x38>)
 8002900:	4299      	cmp	r1, r3
 8002902:	d002      	beq.n	800290a <cleanup_stdio+0x1e>
 8002904:	4620      	mov	r0, r4
 8002906:	f000 fe81 	bl	800360c <_fflush_r>
 800290a:	68e1      	ldr	r1, [r4, #12]
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <cleanup_stdio+0x3c>)
 800290e:	4299      	cmp	r1, r3
 8002910:	d004      	beq.n	800291c <cleanup_stdio+0x30>
 8002912:	4620      	mov	r0, r4
 8002914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002918:	f000 be78 	b.w	800360c <_fflush_r>
 800291c:	bd10      	pop	{r4, pc}
 800291e:	bf00      	nop
 8002920:	2000011c 	.word	0x2000011c
 8002924:	20000184 	.word	0x20000184
 8002928:	200001ec 	.word	0x200001ec

0800292c <global_stdio_init.part.0>:
 800292c:	b510      	push	{r4, lr}
 800292e:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <global_stdio_init.part.0+0x30>)
 8002930:	4c0b      	ldr	r4, [pc, #44]	@ (8002960 <global_stdio_init.part.0+0x34>)
 8002932:	4a0c      	ldr	r2, [pc, #48]	@ (8002964 <global_stdio_init.part.0+0x38>)
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	4620      	mov	r0, r4
 8002938:	2200      	movs	r2, #0
 800293a:	2104      	movs	r1, #4
 800293c:	f7ff ff94 	bl	8002868 <std>
 8002940:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002944:	2201      	movs	r2, #1
 8002946:	2109      	movs	r1, #9
 8002948:	f7ff ff8e 	bl	8002868 <std>
 800294c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002950:	2202      	movs	r2, #2
 8002952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002956:	2112      	movs	r1, #18
 8002958:	f7ff bf86 	b.w	8002868 <std>
 800295c:	20000254 	.word	0x20000254
 8002960:	2000011c 	.word	0x2000011c
 8002964:	080028d5 	.word	0x080028d5

08002968 <__sfp_lock_acquire>:
 8002968:	4801      	ldr	r0, [pc, #4]	@ (8002970 <__sfp_lock_acquire+0x8>)
 800296a:	f000 ba00 	b.w	8002d6e <__retarget_lock_acquire_recursive>
 800296e:	bf00      	nop
 8002970:	2000025d 	.word	0x2000025d

08002974 <__sfp_lock_release>:
 8002974:	4801      	ldr	r0, [pc, #4]	@ (800297c <__sfp_lock_release+0x8>)
 8002976:	f000 b9fb 	b.w	8002d70 <__retarget_lock_release_recursive>
 800297a:	bf00      	nop
 800297c:	2000025d 	.word	0x2000025d

08002980 <__sinit>:
 8002980:	b510      	push	{r4, lr}
 8002982:	4604      	mov	r4, r0
 8002984:	f7ff fff0 	bl	8002968 <__sfp_lock_acquire>
 8002988:	6a23      	ldr	r3, [r4, #32]
 800298a:	b11b      	cbz	r3, 8002994 <__sinit+0x14>
 800298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002990:	f7ff bff0 	b.w	8002974 <__sfp_lock_release>
 8002994:	4b04      	ldr	r3, [pc, #16]	@ (80029a8 <__sinit+0x28>)
 8002996:	6223      	str	r3, [r4, #32]
 8002998:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <__sinit+0x2c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f5      	bne.n	800298c <__sinit+0xc>
 80029a0:	f7ff ffc4 	bl	800292c <global_stdio_init.part.0>
 80029a4:	e7f2      	b.n	800298c <__sinit+0xc>
 80029a6:	bf00      	nop
 80029a8:	080028ed 	.word	0x080028ed
 80029ac:	20000254 	.word	0x20000254

080029b0 <_fwalk_sglue>:
 80029b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029b4:	4607      	mov	r7, r0
 80029b6:	4688      	mov	r8, r1
 80029b8:	4614      	mov	r4, r2
 80029ba:	2600      	movs	r6, #0
 80029bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029c0:	f1b9 0901 	subs.w	r9, r9, #1
 80029c4:	d505      	bpl.n	80029d2 <_fwalk_sglue+0x22>
 80029c6:	6824      	ldr	r4, [r4, #0]
 80029c8:	2c00      	cmp	r4, #0
 80029ca:	d1f7      	bne.n	80029bc <_fwalk_sglue+0xc>
 80029cc:	4630      	mov	r0, r6
 80029ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029d2:	89ab      	ldrh	r3, [r5, #12]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d907      	bls.n	80029e8 <_fwalk_sglue+0x38>
 80029d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029dc:	3301      	adds	r3, #1
 80029de:	d003      	beq.n	80029e8 <_fwalk_sglue+0x38>
 80029e0:	4629      	mov	r1, r5
 80029e2:	4638      	mov	r0, r7
 80029e4:	47c0      	blx	r8
 80029e6:	4306      	orrs	r6, r0
 80029e8:	3568      	adds	r5, #104	@ 0x68
 80029ea:	e7e9      	b.n	80029c0 <_fwalk_sglue+0x10>

080029ec <iprintf>:
 80029ec:	b40f      	push	{r0, r1, r2, r3}
 80029ee:	b507      	push	{r0, r1, r2, lr}
 80029f0:	4906      	ldr	r1, [pc, #24]	@ (8002a0c <iprintf+0x20>)
 80029f2:	ab04      	add	r3, sp, #16
 80029f4:	6808      	ldr	r0, [r1, #0]
 80029f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80029fa:	6881      	ldr	r1, [r0, #8]
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	f000 fadb 	bl	8002fb8 <_vfiprintf_r>
 8002a02:	b003      	add	sp, #12
 8002a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a08:	b004      	add	sp, #16
 8002a0a:	4770      	bx	lr
 8002a0c:	20000018 	.word	0x20000018

08002a10 <_puts_r>:
 8002a10:	6a03      	ldr	r3, [r0, #32]
 8002a12:	b570      	push	{r4, r5, r6, lr}
 8002a14:	6884      	ldr	r4, [r0, #8]
 8002a16:	4605      	mov	r5, r0
 8002a18:	460e      	mov	r6, r1
 8002a1a:	b90b      	cbnz	r3, 8002a20 <_puts_r+0x10>
 8002a1c:	f7ff ffb0 	bl	8002980 <__sinit>
 8002a20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a22:	07db      	lsls	r3, r3, #31
 8002a24:	d405      	bmi.n	8002a32 <_puts_r+0x22>
 8002a26:	89a3      	ldrh	r3, [r4, #12]
 8002a28:	0598      	lsls	r0, r3, #22
 8002a2a:	d402      	bmi.n	8002a32 <_puts_r+0x22>
 8002a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a2e:	f000 f99e 	bl	8002d6e <__retarget_lock_acquire_recursive>
 8002a32:	89a3      	ldrh	r3, [r4, #12]
 8002a34:	0719      	lsls	r1, r3, #28
 8002a36:	d502      	bpl.n	8002a3e <_puts_r+0x2e>
 8002a38:	6923      	ldr	r3, [r4, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d135      	bne.n	8002aaa <_puts_r+0x9a>
 8002a3e:	4621      	mov	r1, r4
 8002a40:	4628      	mov	r0, r5
 8002a42:	f000 f8c5 	bl	8002bd0 <__swsetup_r>
 8002a46:	b380      	cbz	r0, 8002aaa <_puts_r+0x9a>
 8002a48:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002a4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a4e:	07da      	lsls	r2, r3, #31
 8002a50:	d405      	bmi.n	8002a5e <_puts_r+0x4e>
 8002a52:	89a3      	ldrh	r3, [r4, #12]
 8002a54:	059b      	lsls	r3, r3, #22
 8002a56:	d402      	bmi.n	8002a5e <_puts_r+0x4e>
 8002a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a5a:	f000 f989 	bl	8002d70 <__retarget_lock_release_recursive>
 8002a5e:	4628      	mov	r0, r5
 8002a60:	bd70      	pop	{r4, r5, r6, pc}
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	da04      	bge.n	8002a70 <_puts_r+0x60>
 8002a66:	69a2      	ldr	r2, [r4, #24]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	dc17      	bgt.n	8002a9c <_puts_r+0x8c>
 8002a6c:	290a      	cmp	r1, #10
 8002a6e:	d015      	beq.n	8002a9c <_puts_r+0x8c>
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	6022      	str	r2, [r4, #0]
 8002a76:	7019      	strb	r1, [r3, #0]
 8002a78:	68a3      	ldr	r3, [r4, #8]
 8002a7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	60a3      	str	r3, [r4, #8]
 8002a82:	2900      	cmp	r1, #0
 8002a84:	d1ed      	bne.n	8002a62 <_puts_r+0x52>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da11      	bge.n	8002aae <_puts_r+0x9e>
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	210a      	movs	r1, #10
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f000 f85f 	bl	8002b52 <__swbuf_r>
 8002a94:	3001      	adds	r0, #1
 8002a96:	d0d7      	beq.n	8002a48 <_puts_r+0x38>
 8002a98:	250a      	movs	r5, #10
 8002a9a:	e7d7      	b.n	8002a4c <_puts_r+0x3c>
 8002a9c:	4622      	mov	r2, r4
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	f000 f857 	bl	8002b52 <__swbuf_r>
 8002aa4:	3001      	adds	r0, #1
 8002aa6:	d1e7      	bne.n	8002a78 <_puts_r+0x68>
 8002aa8:	e7ce      	b.n	8002a48 <_puts_r+0x38>
 8002aaa:	3e01      	subs	r6, #1
 8002aac:	e7e4      	b.n	8002a78 <_puts_r+0x68>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	6022      	str	r2, [r4, #0]
 8002ab4:	220a      	movs	r2, #10
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e7ee      	b.n	8002a98 <_puts_r+0x88>
	...

08002abc <puts>:
 8002abc:	4b02      	ldr	r3, [pc, #8]	@ (8002ac8 <puts+0xc>)
 8002abe:	4601      	mov	r1, r0
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	f7ff bfa5 	b.w	8002a10 <_puts_r>
 8002ac6:	bf00      	nop
 8002ac8:	20000018 	.word	0x20000018

08002acc <__sread>:
 8002acc:	b510      	push	{r4, lr}
 8002ace:	460c      	mov	r4, r1
 8002ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad4:	f000 f8fc 	bl	8002cd0 <_read_r>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	bfab      	itete	ge
 8002adc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002ade:	89a3      	ldrhlt	r3, [r4, #12]
 8002ae0:	181b      	addge	r3, r3, r0
 8002ae2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ae6:	bfac      	ite	ge
 8002ae8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002aea:	81a3      	strhlt	r3, [r4, #12]
 8002aec:	bd10      	pop	{r4, pc}

08002aee <__swrite>:
 8002aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af2:	461f      	mov	r7, r3
 8002af4:	898b      	ldrh	r3, [r1, #12]
 8002af6:	05db      	lsls	r3, r3, #23
 8002af8:	4605      	mov	r5, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	4616      	mov	r6, r2
 8002afe:	d505      	bpl.n	8002b0c <__swrite+0x1e>
 8002b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b04:	2302      	movs	r3, #2
 8002b06:	2200      	movs	r2, #0
 8002b08:	f000 f8d0 	bl	8002cac <_lseek_r>
 8002b0c:	89a3      	ldrh	r3, [r4, #12]
 8002b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b16:	81a3      	strh	r3, [r4, #12]
 8002b18:	4632      	mov	r2, r6
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b22:	f000 b8e7 	b.w	8002cf4 <_write_r>

08002b26 <__sseek>:
 8002b26:	b510      	push	{r4, lr}
 8002b28:	460c      	mov	r4, r1
 8002b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b2e:	f000 f8bd 	bl	8002cac <_lseek_r>
 8002b32:	1c43      	adds	r3, r0, #1
 8002b34:	89a3      	ldrh	r3, [r4, #12]
 8002b36:	bf15      	itete	ne
 8002b38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b42:	81a3      	strheq	r3, [r4, #12]
 8002b44:	bf18      	it	ne
 8002b46:	81a3      	strhne	r3, [r4, #12]
 8002b48:	bd10      	pop	{r4, pc}

08002b4a <__sclose>:
 8002b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b4e:	f000 b89d 	b.w	8002c8c <_close_r>

08002b52 <__swbuf_r>:
 8002b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b54:	460e      	mov	r6, r1
 8002b56:	4614      	mov	r4, r2
 8002b58:	4605      	mov	r5, r0
 8002b5a:	b118      	cbz	r0, 8002b64 <__swbuf_r+0x12>
 8002b5c:	6a03      	ldr	r3, [r0, #32]
 8002b5e:	b90b      	cbnz	r3, 8002b64 <__swbuf_r+0x12>
 8002b60:	f7ff ff0e 	bl	8002980 <__sinit>
 8002b64:	69a3      	ldr	r3, [r4, #24]
 8002b66:	60a3      	str	r3, [r4, #8]
 8002b68:	89a3      	ldrh	r3, [r4, #12]
 8002b6a:	071a      	lsls	r2, r3, #28
 8002b6c:	d501      	bpl.n	8002b72 <__swbuf_r+0x20>
 8002b6e:	6923      	ldr	r3, [r4, #16]
 8002b70:	b943      	cbnz	r3, 8002b84 <__swbuf_r+0x32>
 8002b72:	4621      	mov	r1, r4
 8002b74:	4628      	mov	r0, r5
 8002b76:	f000 f82b 	bl	8002bd0 <__swsetup_r>
 8002b7a:	b118      	cbz	r0, 8002b84 <__swbuf_r+0x32>
 8002b7c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002b80:	4638      	mov	r0, r7
 8002b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	6922      	ldr	r2, [r4, #16]
 8002b88:	1a98      	subs	r0, r3, r2
 8002b8a:	6963      	ldr	r3, [r4, #20]
 8002b8c:	b2f6      	uxtb	r6, r6
 8002b8e:	4283      	cmp	r3, r0
 8002b90:	4637      	mov	r7, r6
 8002b92:	dc05      	bgt.n	8002ba0 <__swbuf_r+0x4e>
 8002b94:	4621      	mov	r1, r4
 8002b96:	4628      	mov	r0, r5
 8002b98:	f000 fd38 	bl	800360c <_fflush_r>
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d1ed      	bne.n	8002b7c <__swbuf_r+0x2a>
 8002ba0:	68a3      	ldr	r3, [r4, #8]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	60a3      	str	r3, [r4, #8]
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	6022      	str	r2, [r4, #0]
 8002bac:	701e      	strb	r6, [r3, #0]
 8002bae:	6962      	ldr	r2, [r4, #20]
 8002bb0:	1c43      	adds	r3, r0, #1
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d004      	beq.n	8002bc0 <__swbuf_r+0x6e>
 8002bb6:	89a3      	ldrh	r3, [r4, #12]
 8002bb8:	07db      	lsls	r3, r3, #31
 8002bba:	d5e1      	bpl.n	8002b80 <__swbuf_r+0x2e>
 8002bbc:	2e0a      	cmp	r6, #10
 8002bbe:	d1df      	bne.n	8002b80 <__swbuf_r+0x2e>
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f000 fd22 	bl	800360c <_fflush_r>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d0d9      	beq.n	8002b80 <__swbuf_r+0x2e>
 8002bcc:	e7d6      	b.n	8002b7c <__swbuf_r+0x2a>
	...

08002bd0 <__swsetup_r>:
 8002bd0:	b538      	push	{r3, r4, r5, lr}
 8002bd2:	4b29      	ldr	r3, [pc, #164]	@ (8002c78 <__swsetup_r+0xa8>)
 8002bd4:	4605      	mov	r5, r0
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	460c      	mov	r4, r1
 8002bda:	b118      	cbz	r0, 8002be4 <__swsetup_r+0x14>
 8002bdc:	6a03      	ldr	r3, [r0, #32]
 8002bde:	b90b      	cbnz	r3, 8002be4 <__swsetup_r+0x14>
 8002be0:	f7ff fece 	bl	8002980 <__sinit>
 8002be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002be8:	0719      	lsls	r1, r3, #28
 8002bea:	d422      	bmi.n	8002c32 <__swsetup_r+0x62>
 8002bec:	06da      	lsls	r2, r3, #27
 8002bee:	d407      	bmi.n	8002c00 <__swsetup_r+0x30>
 8002bf0:	2209      	movs	r2, #9
 8002bf2:	602a      	str	r2, [r5, #0]
 8002bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bf8:	81a3      	strh	r3, [r4, #12]
 8002bfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bfe:	e033      	b.n	8002c68 <__swsetup_r+0x98>
 8002c00:	0758      	lsls	r0, r3, #29
 8002c02:	d512      	bpl.n	8002c2a <__swsetup_r+0x5a>
 8002c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c06:	b141      	cbz	r1, 8002c1a <__swsetup_r+0x4a>
 8002c08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c0c:	4299      	cmp	r1, r3
 8002c0e:	d002      	beq.n	8002c16 <__swsetup_r+0x46>
 8002c10:	4628      	mov	r0, r5
 8002c12:	f000 f8af 	bl	8002d74 <_free_r>
 8002c16:	2300      	movs	r3, #0
 8002c18:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c1a:	89a3      	ldrh	r3, [r4, #12]
 8002c1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002c20:	81a3      	strh	r3, [r4, #12]
 8002c22:	2300      	movs	r3, #0
 8002c24:	6063      	str	r3, [r4, #4]
 8002c26:	6923      	ldr	r3, [r4, #16]
 8002c28:	6023      	str	r3, [r4, #0]
 8002c2a:	89a3      	ldrh	r3, [r4, #12]
 8002c2c:	f043 0308 	orr.w	r3, r3, #8
 8002c30:	81a3      	strh	r3, [r4, #12]
 8002c32:	6923      	ldr	r3, [r4, #16]
 8002c34:	b94b      	cbnz	r3, 8002c4a <__swsetup_r+0x7a>
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c40:	d003      	beq.n	8002c4a <__swsetup_r+0x7a>
 8002c42:	4621      	mov	r1, r4
 8002c44:	4628      	mov	r0, r5
 8002c46:	f000 fd2f 	bl	80036a8 <__smakebuf_r>
 8002c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c4e:	f013 0201 	ands.w	r2, r3, #1
 8002c52:	d00a      	beq.n	8002c6a <__swsetup_r+0x9a>
 8002c54:	2200      	movs	r2, #0
 8002c56:	60a2      	str	r2, [r4, #8]
 8002c58:	6962      	ldr	r2, [r4, #20]
 8002c5a:	4252      	negs	r2, r2
 8002c5c:	61a2      	str	r2, [r4, #24]
 8002c5e:	6922      	ldr	r2, [r4, #16]
 8002c60:	b942      	cbnz	r2, 8002c74 <__swsetup_r+0xa4>
 8002c62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002c66:	d1c5      	bne.n	8002bf4 <__swsetup_r+0x24>
 8002c68:	bd38      	pop	{r3, r4, r5, pc}
 8002c6a:	0799      	lsls	r1, r3, #30
 8002c6c:	bf58      	it	pl
 8002c6e:	6962      	ldrpl	r2, [r4, #20]
 8002c70:	60a2      	str	r2, [r4, #8]
 8002c72:	e7f4      	b.n	8002c5e <__swsetup_r+0x8e>
 8002c74:	2000      	movs	r0, #0
 8002c76:	e7f7      	b.n	8002c68 <__swsetup_r+0x98>
 8002c78:	20000018 	.word	0x20000018

08002c7c <memset>:
 8002c7c:	4402      	add	r2, r0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d100      	bne.n	8002c86 <memset+0xa>
 8002c84:	4770      	bx	lr
 8002c86:	f803 1b01 	strb.w	r1, [r3], #1
 8002c8a:	e7f9      	b.n	8002c80 <memset+0x4>

08002c8c <_close_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4d06      	ldr	r5, [pc, #24]	@ (8002ca8 <_close_r+0x1c>)
 8002c90:	2300      	movs	r3, #0
 8002c92:	4604      	mov	r4, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	602b      	str	r3, [r5, #0]
 8002c98:	f7fe fb6a 	bl	8001370 <_close>
 8002c9c:	1c43      	adds	r3, r0, #1
 8002c9e:	d102      	bne.n	8002ca6 <_close_r+0x1a>
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	b103      	cbz	r3, 8002ca6 <_close_r+0x1a>
 8002ca4:	6023      	str	r3, [r4, #0]
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
 8002ca8:	20000258 	.word	0x20000258

08002cac <_lseek_r>:
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	4d07      	ldr	r5, [pc, #28]	@ (8002ccc <_lseek_r+0x20>)
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	4608      	mov	r0, r1
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	602a      	str	r2, [r5, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f7fe fb62 	bl	8001384 <_lseek>
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	d102      	bne.n	8002cca <_lseek_r+0x1e>
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	b103      	cbz	r3, 8002cca <_lseek_r+0x1e>
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
 8002ccc:	20000258 	.word	0x20000258

08002cd0 <_read_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	4d07      	ldr	r5, [pc, #28]	@ (8002cf0 <_read_r+0x20>)
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	4608      	mov	r0, r1
 8002cd8:	4611      	mov	r1, r2
 8002cda:	2200      	movs	r2, #0
 8002cdc:	602a      	str	r2, [r5, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f7fe fb36 	bl	8001350 <_read>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	d102      	bne.n	8002cee <_read_r+0x1e>
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	b103      	cbz	r3, 8002cee <_read_r+0x1e>
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	20000258 	.word	0x20000258

08002cf4 <_write_r>:
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	4d07      	ldr	r5, [pc, #28]	@ (8002d14 <_write_r+0x20>)
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	4608      	mov	r0, r1
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	2200      	movs	r2, #0
 8002d00:	602a      	str	r2, [r5, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f7fe f87c 	bl	8000e00 <_write>
 8002d08:	1c43      	adds	r3, r0, #1
 8002d0a:	d102      	bne.n	8002d12 <_write_r+0x1e>
 8002d0c:	682b      	ldr	r3, [r5, #0]
 8002d0e:	b103      	cbz	r3, 8002d12 <_write_r+0x1e>
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
 8002d14:	20000258 	.word	0x20000258

08002d18 <__errno>:
 8002d18:	4b01      	ldr	r3, [pc, #4]	@ (8002d20 <__errno+0x8>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000018 	.word	0x20000018

08002d24 <__libc_init_array>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	4d0d      	ldr	r5, [pc, #52]	@ (8002d5c <__libc_init_array+0x38>)
 8002d28:	4c0d      	ldr	r4, [pc, #52]	@ (8002d60 <__libc_init_array+0x3c>)
 8002d2a:	1b64      	subs	r4, r4, r5
 8002d2c:	10a4      	asrs	r4, r4, #2
 8002d2e:	2600      	movs	r6, #0
 8002d30:	42a6      	cmp	r6, r4
 8002d32:	d109      	bne.n	8002d48 <__libc_init_array+0x24>
 8002d34:	4d0b      	ldr	r5, [pc, #44]	@ (8002d64 <__libc_init_array+0x40>)
 8002d36:	4c0c      	ldr	r4, [pc, #48]	@ (8002d68 <__libc_init_array+0x44>)
 8002d38:	f001 fd56 	bl	80047e8 <_init>
 8002d3c:	1b64      	subs	r4, r4, r5
 8002d3e:	10a4      	asrs	r4, r4, #2
 8002d40:	2600      	movs	r6, #0
 8002d42:	42a6      	cmp	r6, r4
 8002d44:	d105      	bne.n	8002d52 <__libc_init_array+0x2e>
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d4c:	4798      	blx	r3
 8002d4e:	3601      	adds	r6, #1
 8002d50:	e7ee      	b.n	8002d30 <__libc_init_array+0xc>
 8002d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d56:	4798      	blx	r3
 8002d58:	3601      	adds	r6, #1
 8002d5a:	e7f2      	b.n	8002d42 <__libc_init_array+0x1e>
 8002d5c:	08004aa0 	.word	0x08004aa0
 8002d60:	08004aa0 	.word	0x08004aa0
 8002d64:	08004aa0 	.word	0x08004aa0
 8002d68:	08004aa4 	.word	0x08004aa4

08002d6c <__retarget_lock_init_recursive>:
 8002d6c:	4770      	bx	lr

08002d6e <__retarget_lock_acquire_recursive>:
 8002d6e:	4770      	bx	lr

08002d70 <__retarget_lock_release_recursive>:
 8002d70:	4770      	bx	lr
	...

08002d74 <_free_r>:
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	4605      	mov	r5, r0
 8002d78:	2900      	cmp	r1, #0
 8002d7a:	d041      	beq.n	8002e00 <_free_r+0x8c>
 8002d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d80:	1f0c      	subs	r4, r1, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bfb8      	it	lt
 8002d86:	18e4      	addlt	r4, r4, r3
 8002d88:	f000 f8e0 	bl	8002f4c <__malloc_lock>
 8002d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e04 <_free_r+0x90>)
 8002d8e:	6813      	ldr	r3, [r2, #0]
 8002d90:	b933      	cbnz	r3, 8002da0 <_free_r+0x2c>
 8002d92:	6063      	str	r3, [r4, #4]
 8002d94:	6014      	str	r4, [r2, #0]
 8002d96:	4628      	mov	r0, r5
 8002d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d9c:	f000 b8dc 	b.w	8002f58 <__malloc_unlock>
 8002da0:	42a3      	cmp	r3, r4
 8002da2:	d908      	bls.n	8002db6 <_free_r+0x42>
 8002da4:	6820      	ldr	r0, [r4, #0]
 8002da6:	1821      	adds	r1, r4, r0
 8002da8:	428b      	cmp	r3, r1
 8002daa:	bf01      	itttt	eq
 8002dac:	6819      	ldreq	r1, [r3, #0]
 8002dae:	685b      	ldreq	r3, [r3, #4]
 8002db0:	1809      	addeq	r1, r1, r0
 8002db2:	6021      	streq	r1, [r4, #0]
 8002db4:	e7ed      	b.n	8002d92 <_free_r+0x1e>
 8002db6:	461a      	mov	r2, r3
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b10b      	cbz	r3, 8002dc0 <_free_r+0x4c>
 8002dbc:	42a3      	cmp	r3, r4
 8002dbe:	d9fa      	bls.n	8002db6 <_free_r+0x42>
 8002dc0:	6811      	ldr	r1, [r2, #0]
 8002dc2:	1850      	adds	r0, r2, r1
 8002dc4:	42a0      	cmp	r0, r4
 8002dc6:	d10b      	bne.n	8002de0 <_free_r+0x6c>
 8002dc8:	6820      	ldr	r0, [r4, #0]
 8002dca:	4401      	add	r1, r0
 8002dcc:	1850      	adds	r0, r2, r1
 8002dce:	4283      	cmp	r3, r0
 8002dd0:	6011      	str	r1, [r2, #0]
 8002dd2:	d1e0      	bne.n	8002d96 <_free_r+0x22>
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	6053      	str	r3, [r2, #4]
 8002dda:	4408      	add	r0, r1
 8002ddc:	6010      	str	r0, [r2, #0]
 8002dde:	e7da      	b.n	8002d96 <_free_r+0x22>
 8002de0:	d902      	bls.n	8002de8 <_free_r+0x74>
 8002de2:	230c      	movs	r3, #12
 8002de4:	602b      	str	r3, [r5, #0]
 8002de6:	e7d6      	b.n	8002d96 <_free_r+0x22>
 8002de8:	6820      	ldr	r0, [r4, #0]
 8002dea:	1821      	adds	r1, r4, r0
 8002dec:	428b      	cmp	r3, r1
 8002dee:	bf04      	itt	eq
 8002df0:	6819      	ldreq	r1, [r3, #0]
 8002df2:	685b      	ldreq	r3, [r3, #4]
 8002df4:	6063      	str	r3, [r4, #4]
 8002df6:	bf04      	itt	eq
 8002df8:	1809      	addeq	r1, r1, r0
 8002dfa:	6021      	streq	r1, [r4, #0]
 8002dfc:	6054      	str	r4, [r2, #4]
 8002dfe:	e7ca      	b.n	8002d96 <_free_r+0x22>
 8002e00:	bd38      	pop	{r3, r4, r5, pc}
 8002e02:	bf00      	nop
 8002e04:	20000264 	.word	0x20000264

08002e08 <sbrk_aligned>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	4e0f      	ldr	r6, [pc, #60]	@ (8002e48 <sbrk_aligned+0x40>)
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	6831      	ldr	r1, [r6, #0]
 8002e10:	4605      	mov	r5, r0
 8002e12:	b911      	cbnz	r1, 8002e1a <sbrk_aligned+0x12>
 8002e14:	f000 fca6 	bl	8003764 <_sbrk_r>
 8002e18:	6030      	str	r0, [r6, #0]
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 fca1 	bl	8003764 <_sbrk_r>
 8002e22:	1c43      	adds	r3, r0, #1
 8002e24:	d103      	bne.n	8002e2e <sbrk_aligned+0x26>
 8002e26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	bd70      	pop	{r4, r5, r6, pc}
 8002e2e:	1cc4      	adds	r4, r0, #3
 8002e30:	f024 0403 	bic.w	r4, r4, #3
 8002e34:	42a0      	cmp	r0, r4
 8002e36:	d0f8      	beq.n	8002e2a <sbrk_aligned+0x22>
 8002e38:	1a21      	subs	r1, r4, r0
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f000 fc92 	bl	8003764 <_sbrk_r>
 8002e40:	3001      	adds	r0, #1
 8002e42:	d1f2      	bne.n	8002e2a <sbrk_aligned+0x22>
 8002e44:	e7ef      	b.n	8002e26 <sbrk_aligned+0x1e>
 8002e46:	bf00      	nop
 8002e48:	20000260 	.word	0x20000260

08002e4c <_malloc_r>:
 8002e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e50:	1ccd      	adds	r5, r1, #3
 8002e52:	f025 0503 	bic.w	r5, r5, #3
 8002e56:	3508      	adds	r5, #8
 8002e58:	2d0c      	cmp	r5, #12
 8002e5a:	bf38      	it	cc
 8002e5c:	250c      	movcc	r5, #12
 8002e5e:	2d00      	cmp	r5, #0
 8002e60:	4606      	mov	r6, r0
 8002e62:	db01      	blt.n	8002e68 <_malloc_r+0x1c>
 8002e64:	42a9      	cmp	r1, r5
 8002e66:	d904      	bls.n	8002e72 <_malloc_r+0x26>
 8002e68:	230c      	movs	r3, #12
 8002e6a:	6033      	str	r3, [r6, #0]
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f48 <_malloc_r+0xfc>
 8002e76:	f000 f869 	bl	8002f4c <__malloc_lock>
 8002e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e7e:	461c      	mov	r4, r3
 8002e80:	bb44      	cbnz	r4, 8002ed4 <_malloc_r+0x88>
 8002e82:	4629      	mov	r1, r5
 8002e84:	4630      	mov	r0, r6
 8002e86:	f7ff ffbf 	bl	8002e08 <sbrk_aligned>
 8002e8a:	1c43      	adds	r3, r0, #1
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	d158      	bne.n	8002f42 <_malloc_r+0xf6>
 8002e90:	f8d8 4000 	ldr.w	r4, [r8]
 8002e94:	4627      	mov	r7, r4
 8002e96:	2f00      	cmp	r7, #0
 8002e98:	d143      	bne.n	8002f22 <_malloc_r+0xd6>
 8002e9a:	2c00      	cmp	r4, #0
 8002e9c:	d04b      	beq.n	8002f36 <_malloc_r+0xea>
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	4639      	mov	r1, r7
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	eb04 0903 	add.w	r9, r4, r3
 8002ea8:	f000 fc5c 	bl	8003764 <_sbrk_r>
 8002eac:	4581      	cmp	r9, r0
 8002eae:	d142      	bne.n	8002f36 <_malloc_r+0xea>
 8002eb0:	6821      	ldr	r1, [r4, #0]
 8002eb2:	1a6d      	subs	r5, r5, r1
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	f7ff ffa6 	bl	8002e08 <sbrk_aligned>
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	d03a      	beq.n	8002f36 <_malloc_r+0xea>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	442b      	add	r3, r5
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	bb62      	cbnz	r2, 8002f28 <_malloc_r+0xdc>
 8002ece:	f8c8 7000 	str.w	r7, [r8]
 8002ed2:	e00f      	b.n	8002ef4 <_malloc_r+0xa8>
 8002ed4:	6822      	ldr	r2, [r4, #0]
 8002ed6:	1b52      	subs	r2, r2, r5
 8002ed8:	d420      	bmi.n	8002f1c <_malloc_r+0xd0>
 8002eda:	2a0b      	cmp	r2, #11
 8002edc:	d917      	bls.n	8002f0e <_malloc_r+0xc2>
 8002ede:	1961      	adds	r1, r4, r5
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	6025      	str	r5, [r4, #0]
 8002ee4:	bf18      	it	ne
 8002ee6:	6059      	strne	r1, [r3, #4]
 8002ee8:	6863      	ldr	r3, [r4, #4]
 8002eea:	bf08      	it	eq
 8002eec:	f8c8 1000 	streq.w	r1, [r8]
 8002ef0:	5162      	str	r2, [r4, r5]
 8002ef2:	604b      	str	r3, [r1, #4]
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f000 f82f 	bl	8002f58 <__malloc_unlock>
 8002efa:	f104 000b 	add.w	r0, r4, #11
 8002efe:	1d23      	adds	r3, r4, #4
 8002f00:	f020 0007 	bic.w	r0, r0, #7
 8002f04:	1ac2      	subs	r2, r0, r3
 8002f06:	bf1c      	itt	ne
 8002f08:	1a1b      	subne	r3, r3, r0
 8002f0a:	50a3      	strne	r3, [r4, r2]
 8002f0c:	e7af      	b.n	8002e6e <_malloc_r+0x22>
 8002f0e:	6862      	ldr	r2, [r4, #4]
 8002f10:	42a3      	cmp	r3, r4
 8002f12:	bf0c      	ite	eq
 8002f14:	f8c8 2000 	streq.w	r2, [r8]
 8002f18:	605a      	strne	r2, [r3, #4]
 8002f1a:	e7eb      	b.n	8002ef4 <_malloc_r+0xa8>
 8002f1c:	4623      	mov	r3, r4
 8002f1e:	6864      	ldr	r4, [r4, #4]
 8002f20:	e7ae      	b.n	8002e80 <_malloc_r+0x34>
 8002f22:	463c      	mov	r4, r7
 8002f24:	687f      	ldr	r7, [r7, #4]
 8002f26:	e7b6      	b.n	8002e96 <_malloc_r+0x4a>
 8002f28:	461a      	mov	r2, r3
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	42a3      	cmp	r3, r4
 8002f2e:	d1fb      	bne.n	8002f28 <_malloc_r+0xdc>
 8002f30:	2300      	movs	r3, #0
 8002f32:	6053      	str	r3, [r2, #4]
 8002f34:	e7de      	b.n	8002ef4 <_malloc_r+0xa8>
 8002f36:	230c      	movs	r3, #12
 8002f38:	6033      	str	r3, [r6, #0]
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	f000 f80c 	bl	8002f58 <__malloc_unlock>
 8002f40:	e794      	b.n	8002e6c <_malloc_r+0x20>
 8002f42:	6005      	str	r5, [r0, #0]
 8002f44:	e7d6      	b.n	8002ef4 <_malloc_r+0xa8>
 8002f46:	bf00      	nop
 8002f48:	20000264 	.word	0x20000264

08002f4c <__malloc_lock>:
 8002f4c:	4801      	ldr	r0, [pc, #4]	@ (8002f54 <__malloc_lock+0x8>)
 8002f4e:	f7ff bf0e 	b.w	8002d6e <__retarget_lock_acquire_recursive>
 8002f52:	bf00      	nop
 8002f54:	2000025c 	.word	0x2000025c

08002f58 <__malloc_unlock>:
 8002f58:	4801      	ldr	r0, [pc, #4]	@ (8002f60 <__malloc_unlock+0x8>)
 8002f5a:	f7ff bf09 	b.w	8002d70 <__retarget_lock_release_recursive>
 8002f5e:	bf00      	nop
 8002f60:	2000025c 	.word	0x2000025c

08002f64 <__sfputc_r>:
 8002f64:	6893      	ldr	r3, [r2, #8]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	b410      	push	{r4}
 8002f6c:	6093      	str	r3, [r2, #8]
 8002f6e:	da08      	bge.n	8002f82 <__sfputc_r+0x1e>
 8002f70:	6994      	ldr	r4, [r2, #24]
 8002f72:	42a3      	cmp	r3, r4
 8002f74:	db01      	blt.n	8002f7a <__sfputc_r+0x16>
 8002f76:	290a      	cmp	r1, #10
 8002f78:	d103      	bne.n	8002f82 <__sfputc_r+0x1e>
 8002f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f7e:	f7ff bde8 	b.w	8002b52 <__swbuf_r>
 8002f82:	6813      	ldr	r3, [r2, #0]
 8002f84:	1c58      	adds	r0, r3, #1
 8002f86:	6010      	str	r0, [r2, #0]
 8002f88:	7019      	strb	r1, [r3, #0]
 8002f8a:	4608      	mov	r0, r1
 8002f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <__sfputs_r>:
 8002f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f94:	4606      	mov	r6, r0
 8002f96:	460f      	mov	r7, r1
 8002f98:	4614      	mov	r4, r2
 8002f9a:	18d5      	adds	r5, r2, r3
 8002f9c:	42ac      	cmp	r4, r5
 8002f9e:	d101      	bne.n	8002fa4 <__sfputs_r+0x12>
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	e007      	b.n	8002fb4 <__sfputs_r+0x22>
 8002fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fa8:	463a      	mov	r2, r7
 8002faa:	4630      	mov	r0, r6
 8002fac:	f7ff ffda 	bl	8002f64 <__sfputc_r>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d1f3      	bne.n	8002f9c <__sfputs_r+0xa>
 8002fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fb8 <_vfiprintf_r>:
 8002fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fbc:	460d      	mov	r5, r1
 8002fbe:	b09d      	sub	sp, #116	@ 0x74
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	4698      	mov	r8, r3
 8002fc4:	4606      	mov	r6, r0
 8002fc6:	b118      	cbz	r0, 8002fd0 <_vfiprintf_r+0x18>
 8002fc8:	6a03      	ldr	r3, [r0, #32]
 8002fca:	b90b      	cbnz	r3, 8002fd0 <_vfiprintf_r+0x18>
 8002fcc:	f7ff fcd8 	bl	8002980 <__sinit>
 8002fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fd2:	07d9      	lsls	r1, r3, #31
 8002fd4:	d405      	bmi.n	8002fe2 <_vfiprintf_r+0x2a>
 8002fd6:	89ab      	ldrh	r3, [r5, #12]
 8002fd8:	059a      	lsls	r2, r3, #22
 8002fda:	d402      	bmi.n	8002fe2 <_vfiprintf_r+0x2a>
 8002fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fde:	f7ff fec6 	bl	8002d6e <__retarget_lock_acquire_recursive>
 8002fe2:	89ab      	ldrh	r3, [r5, #12]
 8002fe4:	071b      	lsls	r3, r3, #28
 8002fe6:	d501      	bpl.n	8002fec <_vfiprintf_r+0x34>
 8002fe8:	692b      	ldr	r3, [r5, #16]
 8002fea:	b99b      	cbnz	r3, 8003014 <_vfiprintf_r+0x5c>
 8002fec:	4629      	mov	r1, r5
 8002fee:	4630      	mov	r0, r6
 8002ff0:	f7ff fdee 	bl	8002bd0 <__swsetup_r>
 8002ff4:	b170      	cbz	r0, 8003014 <_vfiprintf_r+0x5c>
 8002ff6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ff8:	07dc      	lsls	r4, r3, #31
 8002ffa:	d504      	bpl.n	8003006 <_vfiprintf_r+0x4e>
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003000:	b01d      	add	sp, #116	@ 0x74
 8003002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003006:	89ab      	ldrh	r3, [r5, #12]
 8003008:	0598      	lsls	r0, r3, #22
 800300a:	d4f7      	bmi.n	8002ffc <_vfiprintf_r+0x44>
 800300c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800300e:	f7ff feaf 	bl	8002d70 <__retarget_lock_release_recursive>
 8003012:	e7f3      	b.n	8002ffc <_vfiprintf_r+0x44>
 8003014:	2300      	movs	r3, #0
 8003016:	9309      	str	r3, [sp, #36]	@ 0x24
 8003018:	2320      	movs	r3, #32
 800301a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800301e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003022:	2330      	movs	r3, #48	@ 0x30
 8003024:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80031d4 <_vfiprintf_r+0x21c>
 8003028:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800302c:	f04f 0901 	mov.w	r9, #1
 8003030:	4623      	mov	r3, r4
 8003032:	469a      	mov	sl, r3
 8003034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003038:	b10a      	cbz	r2, 800303e <_vfiprintf_r+0x86>
 800303a:	2a25      	cmp	r2, #37	@ 0x25
 800303c:	d1f9      	bne.n	8003032 <_vfiprintf_r+0x7a>
 800303e:	ebba 0b04 	subs.w	fp, sl, r4
 8003042:	d00b      	beq.n	800305c <_vfiprintf_r+0xa4>
 8003044:	465b      	mov	r3, fp
 8003046:	4622      	mov	r2, r4
 8003048:	4629      	mov	r1, r5
 800304a:	4630      	mov	r0, r6
 800304c:	f7ff ffa1 	bl	8002f92 <__sfputs_r>
 8003050:	3001      	adds	r0, #1
 8003052:	f000 80a7 	beq.w	80031a4 <_vfiprintf_r+0x1ec>
 8003056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003058:	445a      	add	r2, fp
 800305a:	9209      	str	r2, [sp, #36]	@ 0x24
 800305c:	f89a 3000 	ldrb.w	r3, [sl]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 809f 	beq.w	80031a4 <_vfiprintf_r+0x1ec>
 8003066:	2300      	movs	r3, #0
 8003068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800306c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003070:	f10a 0a01 	add.w	sl, sl, #1
 8003074:	9304      	str	r3, [sp, #16]
 8003076:	9307      	str	r3, [sp, #28]
 8003078:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800307c:	931a      	str	r3, [sp, #104]	@ 0x68
 800307e:	4654      	mov	r4, sl
 8003080:	2205      	movs	r2, #5
 8003082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003086:	4853      	ldr	r0, [pc, #332]	@ (80031d4 <_vfiprintf_r+0x21c>)
 8003088:	f7fd f8a2 	bl	80001d0 <memchr>
 800308c:	9a04      	ldr	r2, [sp, #16]
 800308e:	b9d8      	cbnz	r0, 80030c8 <_vfiprintf_r+0x110>
 8003090:	06d1      	lsls	r1, r2, #27
 8003092:	bf44      	itt	mi
 8003094:	2320      	movmi	r3, #32
 8003096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800309a:	0713      	lsls	r3, r2, #28
 800309c:	bf44      	itt	mi
 800309e:	232b      	movmi	r3, #43	@ 0x2b
 80030a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030a4:	f89a 3000 	ldrb.w	r3, [sl]
 80030a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80030aa:	d015      	beq.n	80030d8 <_vfiprintf_r+0x120>
 80030ac:	9a07      	ldr	r2, [sp, #28]
 80030ae:	4654      	mov	r4, sl
 80030b0:	2000      	movs	r0, #0
 80030b2:	f04f 0c0a 	mov.w	ip, #10
 80030b6:	4621      	mov	r1, r4
 80030b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030bc:	3b30      	subs	r3, #48	@ 0x30
 80030be:	2b09      	cmp	r3, #9
 80030c0:	d94b      	bls.n	800315a <_vfiprintf_r+0x1a2>
 80030c2:	b1b0      	cbz	r0, 80030f2 <_vfiprintf_r+0x13a>
 80030c4:	9207      	str	r2, [sp, #28]
 80030c6:	e014      	b.n	80030f2 <_vfiprintf_r+0x13a>
 80030c8:	eba0 0308 	sub.w	r3, r0, r8
 80030cc:	fa09 f303 	lsl.w	r3, r9, r3
 80030d0:	4313      	orrs	r3, r2
 80030d2:	9304      	str	r3, [sp, #16]
 80030d4:	46a2      	mov	sl, r4
 80030d6:	e7d2      	b.n	800307e <_vfiprintf_r+0xc6>
 80030d8:	9b03      	ldr	r3, [sp, #12]
 80030da:	1d19      	adds	r1, r3, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	9103      	str	r1, [sp, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bfbb      	ittet	lt
 80030e4:	425b      	neglt	r3, r3
 80030e6:	f042 0202 	orrlt.w	r2, r2, #2
 80030ea:	9307      	strge	r3, [sp, #28]
 80030ec:	9307      	strlt	r3, [sp, #28]
 80030ee:	bfb8      	it	lt
 80030f0:	9204      	strlt	r2, [sp, #16]
 80030f2:	7823      	ldrb	r3, [r4, #0]
 80030f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80030f6:	d10a      	bne.n	800310e <_vfiprintf_r+0x156>
 80030f8:	7863      	ldrb	r3, [r4, #1]
 80030fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80030fc:	d132      	bne.n	8003164 <_vfiprintf_r+0x1ac>
 80030fe:	9b03      	ldr	r3, [sp, #12]
 8003100:	1d1a      	adds	r2, r3, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	9203      	str	r2, [sp, #12]
 8003106:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800310a:	3402      	adds	r4, #2
 800310c:	9305      	str	r3, [sp, #20]
 800310e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80031e4 <_vfiprintf_r+0x22c>
 8003112:	7821      	ldrb	r1, [r4, #0]
 8003114:	2203      	movs	r2, #3
 8003116:	4650      	mov	r0, sl
 8003118:	f7fd f85a 	bl	80001d0 <memchr>
 800311c:	b138      	cbz	r0, 800312e <_vfiprintf_r+0x176>
 800311e:	9b04      	ldr	r3, [sp, #16]
 8003120:	eba0 000a 	sub.w	r0, r0, sl
 8003124:	2240      	movs	r2, #64	@ 0x40
 8003126:	4082      	lsls	r2, r0
 8003128:	4313      	orrs	r3, r2
 800312a:	3401      	adds	r4, #1
 800312c:	9304      	str	r3, [sp, #16]
 800312e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003132:	4829      	ldr	r0, [pc, #164]	@ (80031d8 <_vfiprintf_r+0x220>)
 8003134:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003138:	2206      	movs	r2, #6
 800313a:	f7fd f849 	bl	80001d0 <memchr>
 800313e:	2800      	cmp	r0, #0
 8003140:	d03f      	beq.n	80031c2 <_vfiprintf_r+0x20a>
 8003142:	4b26      	ldr	r3, [pc, #152]	@ (80031dc <_vfiprintf_r+0x224>)
 8003144:	bb1b      	cbnz	r3, 800318e <_vfiprintf_r+0x1d6>
 8003146:	9b03      	ldr	r3, [sp, #12]
 8003148:	3307      	adds	r3, #7
 800314a:	f023 0307 	bic.w	r3, r3, #7
 800314e:	3308      	adds	r3, #8
 8003150:	9303      	str	r3, [sp, #12]
 8003152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003154:	443b      	add	r3, r7
 8003156:	9309      	str	r3, [sp, #36]	@ 0x24
 8003158:	e76a      	b.n	8003030 <_vfiprintf_r+0x78>
 800315a:	fb0c 3202 	mla	r2, ip, r2, r3
 800315e:	460c      	mov	r4, r1
 8003160:	2001      	movs	r0, #1
 8003162:	e7a8      	b.n	80030b6 <_vfiprintf_r+0xfe>
 8003164:	2300      	movs	r3, #0
 8003166:	3401      	adds	r4, #1
 8003168:	9305      	str	r3, [sp, #20]
 800316a:	4619      	mov	r1, r3
 800316c:	f04f 0c0a 	mov.w	ip, #10
 8003170:	4620      	mov	r0, r4
 8003172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003176:	3a30      	subs	r2, #48	@ 0x30
 8003178:	2a09      	cmp	r2, #9
 800317a:	d903      	bls.n	8003184 <_vfiprintf_r+0x1cc>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0c6      	beq.n	800310e <_vfiprintf_r+0x156>
 8003180:	9105      	str	r1, [sp, #20]
 8003182:	e7c4      	b.n	800310e <_vfiprintf_r+0x156>
 8003184:	fb0c 2101 	mla	r1, ip, r1, r2
 8003188:	4604      	mov	r4, r0
 800318a:	2301      	movs	r3, #1
 800318c:	e7f0      	b.n	8003170 <_vfiprintf_r+0x1b8>
 800318e:	ab03      	add	r3, sp, #12
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	462a      	mov	r2, r5
 8003194:	4b12      	ldr	r3, [pc, #72]	@ (80031e0 <_vfiprintf_r+0x228>)
 8003196:	a904      	add	r1, sp, #16
 8003198:	4630      	mov	r0, r6
 800319a:	f3af 8000 	nop.w
 800319e:	4607      	mov	r7, r0
 80031a0:	1c78      	adds	r0, r7, #1
 80031a2:	d1d6      	bne.n	8003152 <_vfiprintf_r+0x19a>
 80031a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80031a6:	07d9      	lsls	r1, r3, #31
 80031a8:	d405      	bmi.n	80031b6 <_vfiprintf_r+0x1fe>
 80031aa:	89ab      	ldrh	r3, [r5, #12]
 80031ac:	059a      	lsls	r2, r3, #22
 80031ae:	d402      	bmi.n	80031b6 <_vfiprintf_r+0x1fe>
 80031b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80031b2:	f7ff fddd 	bl	8002d70 <__retarget_lock_release_recursive>
 80031b6:	89ab      	ldrh	r3, [r5, #12]
 80031b8:	065b      	lsls	r3, r3, #25
 80031ba:	f53f af1f 	bmi.w	8002ffc <_vfiprintf_r+0x44>
 80031be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80031c0:	e71e      	b.n	8003000 <_vfiprintf_r+0x48>
 80031c2:	ab03      	add	r3, sp, #12
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	462a      	mov	r2, r5
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <_vfiprintf_r+0x228>)
 80031ca:	a904      	add	r1, sp, #16
 80031cc:	4630      	mov	r0, r6
 80031ce:	f000 f879 	bl	80032c4 <_printf_i>
 80031d2:	e7e4      	b.n	800319e <_vfiprintf_r+0x1e6>
 80031d4:	0800488c 	.word	0x0800488c
 80031d8:	08004896 	.word	0x08004896
 80031dc:	00000000 	.word	0x00000000
 80031e0:	08002f93 	.word	0x08002f93
 80031e4:	08004892 	.word	0x08004892

080031e8 <_printf_common>:
 80031e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031ec:	4616      	mov	r6, r2
 80031ee:	4698      	mov	r8, r3
 80031f0:	688a      	ldr	r2, [r1, #8]
 80031f2:	690b      	ldr	r3, [r1, #16]
 80031f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031f8:	4293      	cmp	r3, r2
 80031fa:	bfb8      	it	lt
 80031fc:	4613      	movlt	r3, r2
 80031fe:	6033      	str	r3, [r6, #0]
 8003200:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003204:	4607      	mov	r7, r0
 8003206:	460c      	mov	r4, r1
 8003208:	b10a      	cbz	r2, 800320e <_printf_common+0x26>
 800320a:	3301      	adds	r3, #1
 800320c:	6033      	str	r3, [r6, #0]
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	0699      	lsls	r1, r3, #26
 8003212:	bf42      	ittt	mi
 8003214:	6833      	ldrmi	r3, [r6, #0]
 8003216:	3302      	addmi	r3, #2
 8003218:	6033      	strmi	r3, [r6, #0]
 800321a:	6825      	ldr	r5, [r4, #0]
 800321c:	f015 0506 	ands.w	r5, r5, #6
 8003220:	d106      	bne.n	8003230 <_printf_common+0x48>
 8003222:	f104 0a19 	add.w	sl, r4, #25
 8003226:	68e3      	ldr	r3, [r4, #12]
 8003228:	6832      	ldr	r2, [r6, #0]
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	42ab      	cmp	r3, r5
 800322e:	dc26      	bgt.n	800327e <_printf_common+0x96>
 8003230:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003234:	6822      	ldr	r2, [r4, #0]
 8003236:	3b00      	subs	r3, #0
 8003238:	bf18      	it	ne
 800323a:	2301      	movne	r3, #1
 800323c:	0692      	lsls	r2, r2, #26
 800323e:	d42b      	bmi.n	8003298 <_printf_common+0xb0>
 8003240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003244:	4641      	mov	r1, r8
 8003246:	4638      	mov	r0, r7
 8003248:	47c8      	blx	r9
 800324a:	3001      	adds	r0, #1
 800324c:	d01e      	beq.n	800328c <_printf_common+0xa4>
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	6922      	ldr	r2, [r4, #16]
 8003252:	f003 0306 	and.w	r3, r3, #6
 8003256:	2b04      	cmp	r3, #4
 8003258:	bf02      	ittt	eq
 800325a:	68e5      	ldreq	r5, [r4, #12]
 800325c:	6833      	ldreq	r3, [r6, #0]
 800325e:	1aed      	subeq	r5, r5, r3
 8003260:	68a3      	ldr	r3, [r4, #8]
 8003262:	bf0c      	ite	eq
 8003264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003268:	2500      	movne	r5, #0
 800326a:	4293      	cmp	r3, r2
 800326c:	bfc4      	itt	gt
 800326e:	1a9b      	subgt	r3, r3, r2
 8003270:	18ed      	addgt	r5, r5, r3
 8003272:	2600      	movs	r6, #0
 8003274:	341a      	adds	r4, #26
 8003276:	42b5      	cmp	r5, r6
 8003278:	d11a      	bne.n	80032b0 <_printf_common+0xc8>
 800327a:	2000      	movs	r0, #0
 800327c:	e008      	b.n	8003290 <_printf_common+0xa8>
 800327e:	2301      	movs	r3, #1
 8003280:	4652      	mov	r2, sl
 8003282:	4641      	mov	r1, r8
 8003284:	4638      	mov	r0, r7
 8003286:	47c8      	blx	r9
 8003288:	3001      	adds	r0, #1
 800328a:	d103      	bne.n	8003294 <_printf_common+0xac>
 800328c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003294:	3501      	adds	r5, #1
 8003296:	e7c6      	b.n	8003226 <_printf_common+0x3e>
 8003298:	18e1      	adds	r1, r4, r3
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	2030      	movs	r0, #48	@ 0x30
 800329e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80032a2:	4422      	add	r2, r4
 80032a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80032a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80032ac:	3302      	adds	r3, #2
 80032ae:	e7c7      	b.n	8003240 <_printf_common+0x58>
 80032b0:	2301      	movs	r3, #1
 80032b2:	4622      	mov	r2, r4
 80032b4:	4641      	mov	r1, r8
 80032b6:	4638      	mov	r0, r7
 80032b8:	47c8      	blx	r9
 80032ba:	3001      	adds	r0, #1
 80032bc:	d0e6      	beq.n	800328c <_printf_common+0xa4>
 80032be:	3601      	adds	r6, #1
 80032c0:	e7d9      	b.n	8003276 <_printf_common+0x8e>
	...

080032c4 <_printf_i>:
 80032c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032c8:	7e0f      	ldrb	r7, [r1, #24]
 80032ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80032cc:	2f78      	cmp	r7, #120	@ 0x78
 80032ce:	4691      	mov	r9, r2
 80032d0:	4680      	mov	r8, r0
 80032d2:	460c      	mov	r4, r1
 80032d4:	469a      	mov	sl, r3
 80032d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032da:	d807      	bhi.n	80032ec <_printf_i+0x28>
 80032dc:	2f62      	cmp	r7, #98	@ 0x62
 80032de:	d80a      	bhi.n	80032f6 <_printf_i+0x32>
 80032e0:	2f00      	cmp	r7, #0
 80032e2:	f000 80d2 	beq.w	800348a <_printf_i+0x1c6>
 80032e6:	2f58      	cmp	r7, #88	@ 0x58
 80032e8:	f000 80b9 	beq.w	800345e <_printf_i+0x19a>
 80032ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032f4:	e03a      	b.n	800336c <_printf_i+0xa8>
 80032f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032fa:	2b15      	cmp	r3, #21
 80032fc:	d8f6      	bhi.n	80032ec <_printf_i+0x28>
 80032fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003304 <_printf_i+0x40>)
 8003300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003304:	0800335d 	.word	0x0800335d
 8003308:	08003371 	.word	0x08003371
 800330c:	080032ed 	.word	0x080032ed
 8003310:	080032ed 	.word	0x080032ed
 8003314:	080032ed 	.word	0x080032ed
 8003318:	080032ed 	.word	0x080032ed
 800331c:	08003371 	.word	0x08003371
 8003320:	080032ed 	.word	0x080032ed
 8003324:	080032ed 	.word	0x080032ed
 8003328:	080032ed 	.word	0x080032ed
 800332c:	080032ed 	.word	0x080032ed
 8003330:	08003471 	.word	0x08003471
 8003334:	0800339b 	.word	0x0800339b
 8003338:	0800342b 	.word	0x0800342b
 800333c:	080032ed 	.word	0x080032ed
 8003340:	080032ed 	.word	0x080032ed
 8003344:	08003493 	.word	0x08003493
 8003348:	080032ed 	.word	0x080032ed
 800334c:	0800339b 	.word	0x0800339b
 8003350:	080032ed 	.word	0x080032ed
 8003354:	080032ed 	.word	0x080032ed
 8003358:	08003433 	.word	0x08003433
 800335c:	6833      	ldr	r3, [r6, #0]
 800335e:	1d1a      	adds	r2, r3, #4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6032      	str	r2, [r6, #0]
 8003364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800336c:	2301      	movs	r3, #1
 800336e:	e09d      	b.n	80034ac <_printf_i+0x1e8>
 8003370:	6833      	ldr	r3, [r6, #0]
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	1d19      	adds	r1, r3, #4
 8003376:	6031      	str	r1, [r6, #0]
 8003378:	0606      	lsls	r6, r0, #24
 800337a:	d501      	bpl.n	8003380 <_printf_i+0xbc>
 800337c:	681d      	ldr	r5, [r3, #0]
 800337e:	e003      	b.n	8003388 <_printf_i+0xc4>
 8003380:	0645      	lsls	r5, r0, #25
 8003382:	d5fb      	bpl.n	800337c <_printf_i+0xb8>
 8003384:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003388:	2d00      	cmp	r5, #0
 800338a:	da03      	bge.n	8003394 <_printf_i+0xd0>
 800338c:	232d      	movs	r3, #45	@ 0x2d
 800338e:	426d      	negs	r5, r5
 8003390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003394:	4859      	ldr	r0, [pc, #356]	@ (80034fc <_printf_i+0x238>)
 8003396:	230a      	movs	r3, #10
 8003398:	e011      	b.n	80033be <_printf_i+0xfa>
 800339a:	6821      	ldr	r1, [r4, #0]
 800339c:	6833      	ldr	r3, [r6, #0]
 800339e:	0608      	lsls	r0, r1, #24
 80033a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80033a4:	d402      	bmi.n	80033ac <_printf_i+0xe8>
 80033a6:	0649      	lsls	r1, r1, #25
 80033a8:	bf48      	it	mi
 80033aa:	b2ad      	uxthmi	r5, r5
 80033ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80033ae:	4853      	ldr	r0, [pc, #332]	@ (80034fc <_printf_i+0x238>)
 80033b0:	6033      	str	r3, [r6, #0]
 80033b2:	bf14      	ite	ne
 80033b4:	230a      	movne	r3, #10
 80033b6:	2308      	moveq	r3, #8
 80033b8:	2100      	movs	r1, #0
 80033ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80033be:	6866      	ldr	r6, [r4, #4]
 80033c0:	60a6      	str	r6, [r4, #8]
 80033c2:	2e00      	cmp	r6, #0
 80033c4:	bfa2      	ittt	ge
 80033c6:	6821      	ldrge	r1, [r4, #0]
 80033c8:	f021 0104 	bicge.w	r1, r1, #4
 80033cc:	6021      	strge	r1, [r4, #0]
 80033ce:	b90d      	cbnz	r5, 80033d4 <_printf_i+0x110>
 80033d0:	2e00      	cmp	r6, #0
 80033d2:	d04b      	beq.n	800346c <_printf_i+0x1a8>
 80033d4:	4616      	mov	r6, r2
 80033d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80033da:	fb03 5711 	mls	r7, r3, r1, r5
 80033de:	5dc7      	ldrb	r7, [r0, r7]
 80033e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033e4:	462f      	mov	r7, r5
 80033e6:	42bb      	cmp	r3, r7
 80033e8:	460d      	mov	r5, r1
 80033ea:	d9f4      	bls.n	80033d6 <_printf_i+0x112>
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d10b      	bne.n	8003408 <_printf_i+0x144>
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	07df      	lsls	r7, r3, #31
 80033f4:	d508      	bpl.n	8003408 <_printf_i+0x144>
 80033f6:	6923      	ldr	r3, [r4, #16]
 80033f8:	6861      	ldr	r1, [r4, #4]
 80033fa:	4299      	cmp	r1, r3
 80033fc:	bfde      	ittt	le
 80033fe:	2330      	movle	r3, #48	@ 0x30
 8003400:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003404:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003408:	1b92      	subs	r2, r2, r6
 800340a:	6122      	str	r2, [r4, #16]
 800340c:	f8cd a000 	str.w	sl, [sp]
 8003410:	464b      	mov	r3, r9
 8003412:	aa03      	add	r2, sp, #12
 8003414:	4621      	mov	r1, r4
 8003416:	4640      	mov	r0, r8
 8003418:	f7ff fee6 	bl	80031e8 <_printf_common>
 800341c:	3001      	adds	r0, #1
 800341e:	d14a      	bne.n	80034b6 <_printf_i+0x1f2>
 8003420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003424:	b004      	add	sp, #16
 8003426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	f043 0320 	orr.w	r3, r3, #32
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	4833      	ldr	r0, [pc, #204]	@ (8003500 <_printf_i+0x23c>)
 8003434:	2778      	movs	r7, #120	@ 0x78
 8003436:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	6831      	ldr	r1, [r6, #0]
 800343e:	061f      	lsls	r7, r3, #24
 8003440:	f851 5b04 	ldr.w	r5, [r1], #4
 8003444:	d402      	bmi.n	800344c <_printf_i+0x188>
 8003446:	065f      	lsls	r7, r3, #25
 8003448:	bf48      	it	mi
 800344a:	b2ad      	uxthmi	r5, r5
 800344c:	6031      	str	r1, [r6, #0]
 800344e:	07d9      	lsls	r1, r3, #31
 8003450:	bf44      	itt	mi
 8003452:	f043 0320 	orrmi.w	r3, r3, #32
 8003456:	6023      	strmi	r3, [r4, #0]
 8003458:	b11d      	cbz	r5, 8003462 <_printf_i+0x19e>
 800345a:	2310      	movs	r3, #16
 800345c:	e7ac      	b.n	80033b8 <_printf_i+0xf4>
 800345e:	4827      	ldr	r0, [pc, #156]	@ (80034fc <_printf_i+0x238>)
 8003460:	e7e9      	b.n	8003436 <_printf_i+0x172>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	f023 0320 	bic.w	r3, r3, #32
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	e7f6      	b.n	800345a <_printf_i+0x196>
 800346c:	4616      	mov	r6, r2
 800346e:	e7bd      	b.n	80033ec <_printf_i+0x128>
 8003470:	6833      	ldr	r3, [r6, #0]
 8003472:	6825      	ldr	r5, [r4, #0]
 8003474:	6961      	ldr	r1, [r4, #20]
 8003476:	1d18      	adds	r0, r3, #4
 8003478:	6030      	str	r0, [r6, #0]
 800347a:	062e      	lsls	r6, r5, #24
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	d501      	bpl.n	8003484 <_printf_i+0x1c0>
 8003480:	6019      	str	r1, [r3, #0]
 8003482:	e002      	b.n	800348a <_printf_i+0x1c6>
 8003484:	0668      	lsls	r0, r5, #25
 8003486:	d5fb      	bpl.n	8003480 <_printf_i+0x1bc>
 8003488:	8019      	strh	r1, [r3, #0]
 800348a:	2300      	movs	r3, #0
 800348c:	6123      	str	r3, [r4, #16]
 800348e:	4616      	mov	r6, r2
 8003490:	e7bc      	b.n	800340c <_printf_i+0x148>
 8003492:	6833      	ldr	r3, [r6, #0]
 8003494:	1d1a      	adds	r2, r3, #4
 8003496:	6032      	str	r2, [r6, #0]
 8003498:	681e      	ldr	r6, [r3, #0]
 800349a:	6862      	ldr	r2, [r4, #4]
 800349c:	2100      	movs	r1, #0
 800349e:	4630      	mov	r0, r6
 80034a0:	f7fc fe96 	bl	80001d0 <memchr>
 80034a4:	b108      	cbz	r0, 80034aa <_printf_i+0x1e6>
 80034a6:	1b80      	subs	r0, r0, r6
 80034a8:	6060      	str	r0, [r4, #4]
 80034aa:	6863      	ldr	r3, [r4, #4]
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	2300      	movs	r3, #0
 80034b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034b4:	e7aa      	b.n	800340c <_printf_i+0x148>
 80034b6:	6923      	ldr	r3, [r4, #16]
 80034b8:	4632      	mov	r2, r6
 80034ba:	4649      	mov	r1, r9
 80034bc:	4640      	mov	r0, r8
 80034be:	47d0      	blx	sl
 80034c0:	3001      	adds	r0, #1
 80034c2:	d0ad      	beq.n	8003420 <_printf_i+0x15c>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	079b      	lsls	r3, r3, #30
 80034c8:	d413      	bmi.n	80034f2 <_printf_i+0x22e>
 80034ca:	68e0      	ldr	r0, [r4, #12]
 80034cc:	9b03      	ldr	r3, [sp, #12]
 80034ce:	4298      	cmp	r0, r3
 80034d0:	bfb8      	it	lt
 80034d2:	4618      	movlt	r0, r3
 80034d4:	e7a6      	b.n	8003424 <_printf_i+0x160>
 80034d6:	2301      	movs	r3, #1
 80034d8:	4632      	mov	r2, r6
 80034da:	4649      	mov	r1, r9
 80034dc:	4640      	mov	r0, r8
 80034de:	47d0      	blx	sl
 80034e0:	3001      	adds	r0, #1
 80034e2:	d09d      	beq.n	8003420 <_printf_i+0x15c>
 80034e4:	3501      	adds	r5, #1
 80034e6:	68e3      	ldr	r3, [r4, #12]
 80034e8:	9903      	ldr	r1, [sp, #12]
 80034ea:	1a5b      	subs	r3, r3, r1
 80034ec:	42ab      	cmp	r3, r5
 80034ee:	dcf2      	bgt.n	80034d6 <_printf_i+0x212>
 80034f0:	e7eb      	b.n	80034ca <_printf_i+0x206>
 80034f2:	2500      	movs	r5, #0
 80034f4:	f104 0619 	add.w	r6, r4, #25
 80034f8:	e7f5      	b.n	80034e6 <_printf_i+0x222>
 80034fa:	bf00      	nop
 80034fc:	0800489d 	.word	0x0800489d
 8003500:	080048ae 	.word	0x080048ae

08003504 <__sflush_r>:
 8003504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800350c:	0716      	lsls	r6, r2, #28
 800350e:	4605      	mov	r5, r0
 8003510:	460c      	mov	r4, r1
 8003512:	d454      	bmi.n	80035be <__sflush_r+0xba>
 8003514:	684b      	ldr	r3, [r1, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	dc02      	bgt.n	8003520 <__sflush_r+0x1c>
 800351a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	dd48      	ble.n	80035b2 <__sflush_r+0xae>
 8003520:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003522:	2e00      	cmp	r6, #0
 8003524:	d045      	beq.n	80035b2 <__sflush_r+0xae>
 8003526:	2300      	movs	r3, #0
 8003528:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800352c:	682f      	ldr	r7, [r5, #0]
 800352e:	6a21      	ldr	r1, [r4, #32]
 8003530:	602b      	str	r3, [r5, #0]
 8003532:	d030      	beq.n	8003596 <__sflush_r+0x92>
 8003534:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	0759      	lsls	r1, r3, #29
 800353a:	d505      	bpl.n	8003548 <__sflush_r+0x44>
 800353c:	6863      	ldr	r3, [r4, #4]
 800353e:	1ad2      	subs	r2, r2, r3
 8003540:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003542:	b10b      	cbz	r3, 8003548 <__sflush_r+0x44>
 8003544:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003546:	1ad2      	subs	r2, r2, r3
 8003548:	2300      	movs	r3, #0
 800354a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800354c:	6a21      	ldr	r1, [r4, #32]
 800354e:	4628      	mov	r0, r5
 8003550:	47b0      	blx	r6
 8003552:	1c43      	adds	r3, r0, #1
 8003554:	89a3      	ldrh	r3, [r4, #12]
 8003556:	d106      	bne.n	8003566 <__sflush_r+0x62>
 8003558:	6829      	ldr	r1, [r5, #0]
 800355a:	291d      	cmp	r1, #29
 800355c:	d82b      	bhi.n	80035b6 <__sflush_r+0xb2>
 800355e:	4a2a      	ldr	r2, [pc, #168]	@ (8003608 <__sflush_r+0x104>)
 8003560:	410a      	asrs	r2, r1
 8003562:	07d6      	lsls	r6, r2, #31
 8003564:	d427      	bmi.n	80035b6 <__sflush_r+0xb2>
 8003566:	2200      	movs	r2, #0
 8003568:	6062      	str	r2, [r4, #4]
 800356a:	04d9      	lsls	r1, r3, #19
 800356c:	6922      	ldr	r2, [r4, #16]
 800356e:	6022      	str	r2, [r4, #0]
 8003570:	d504      	bpl.n	800357c <__sflush_r+0x78>
 8003572:	1c42      	adds	r2, r0, #1
 8003574:	d101      	bne.n	800357a <__sflush_r+0x76>
 8003576:	682b      	ldr	r3, [r5, #0]
 8003578:	b903      	cbnz	r3, 800357c <__sflush_r+0x78>
 800357a:	6560      	str	r0, [r4, #84]	@ 0x54
 800357c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800357e:	602f      	str	r7, [r5, #0]
 8003580:	b1b9      	cbz	r1, 80035b2 <__sflush_r+0xae>
 8003582:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003586:	4299      	cmp	r1, r3
 8003588:	d002      	beq.n	8003590 <__sflush_r+0x8c>
 800358a:	4628      	mov	r0, r5
 800358c:	f7ff fbf2 	bl	8002d74 <_free_r>
 8003590:	2300      	movs	r3, #0
 8003592:	6363      	str	r3, [r4, #52]	@ 0x34
 8003594:	e00d      	b.n	80035b2 <__sflush_r+0xae>
 8003596:	2301      	movs	r3, #1
 8003598:	4628      	mov	r0, r5
 800359a:	47b0      	blx	r6
 800359c:	4602      	mov	r2, r0
 800359e:	1c50      	adds	r0, r2, #1
 80035a0:	d1c9      	bne.n	8003536 <__sflush_r+0x32>
 80035a2:	682b      	ldr	r3, [r5, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0c6      	beq.n	8003536 <__sflush_r+0x32>
 80035a8:	2b1d      	cmp	r3, #29
 80035aa:	d001      	beq.n	80035b0 <__sflush_r+0xac>
 80035ac:	2b16      	cmp	r3, #22
 80035ae:	d11e      	bne.n	80035ee <__sflush_r+0xea>
 80035b0:	602f      	str	r7, [r5, #0]
 80035b2:	2000      	movs	r0, #0
 80035b4:	e022      	b.n	80035fc <__sflush_r+0xf8>
 80035b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ba:	b21b      	sxth	r3, r3
 80035bc:	e01b      	b.n	80035f6 <__sflush_r+0xf2>
 80035be:	690f      	ldr	r7, [r1, #16]
 80035c0:	2f00      	cmp	r7, #0
 80035c2:	d0f6      	beq.n	80035b2 <__sflush_r+0xae>
 80035c4:	0793      	lsls	r3, r2, #30
 80035c6:	680e      	ldr	r6, [r1, #0]
 80035c8:	bf08      	it	eq
 80035ca:	694b      	ldreq	r3, [r1, #20]
 80035cc:	600f      	str	r7, [r1, #0]
 80035ce:	bf18      	it	ne
 80035d0:	2300      	movne	r3, #0
 80035d2:	eba6 0807 	sub.w	r8, r6, r7
 80035d6:	608b      	str	r3, [r1, #8]
 80035d8:	f1b8 0f00 	cmp.w	r8, #0
 80035dc:	dde9      	ble.n	80035b2 <__sflush_r+0xae>
 80035de:	6a21      	ldr	r1, [r4, #32]
 80035e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80035e2:	4643      	mov	r3, r8
 80035e4:	463a      	mov	r2, r7
 80035e6:	4628      	mov	r0, r5
 80035e8:	47b0      	blx	r6
 80035ea:	2800      	cmp	r0, #0
 80035ec:	dc08      	bgt.n	8003600 <__sflush_r+0xfc>
 80035ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035f6:	81a3      	strh	r3, [r4, #12]
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003600:	4407      	add	r7, r0
 8003602:	eba8 0800 	sub.w	r8, r8, r0
 8003606:	e7e7      	b.n	80035d8 <__sflush_r+0xd4>
 8003608:	dfbffffe 	.word	0xdfbffffe

0800360c <_fflush_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	690b      	ldr	r3, [r1, #16]
 8003610:	4605      	mov	r5, r0
 8003612:	460c      	mov	r4, r1
 8003614:	b913      	cbnz	r3, 800361c <_fflush_r+0x10>
 8003616:	2500      	movs	r5, #0
 8003618:	4628      	mov	r0, r5
 800361a:	bd38      	pop	{r3, r4, r5, pc}
 800361c:	b118      	cbz	r0, 8003626 <_fflush_r+0x1a>
 800361e:	6a03      	ldr	r3, [r0, #32]
 8003620:	b90b      	cbnz	r3, 8003626 <_fflush_r+0x1a>
 8003622:	f7ff f9ad 	bl	8002980 <__sinit>
 8003626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f3      	beq.n	8003616 <_fflush_r+0xa>
 800362e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003630:	07d0      	lsls	r0, r2, #31
 8003632:	d404      	bmi.n	800363e <_fflush_r+0x32>
 8003634:	0599      	lsls	r1, r3, #22
 8003636:	d402      	bmi.n	800363e <_fflush_r+0x32>
 8003638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800363a:	f7ff fb98 	bl	8002d6e <__retarget_lock_acquire_recursive>
 800363e:	4628      	mov	r0, r5
 8003640:	4621      	mov	r1, r4
 8003642:	f7ff ff5f 	bl	8003504 <__sflush_r>
 8003646:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003648:	07da      	lsls	r2, r3, #31
 800364a:	4605      	mov	r5, r0
 800364c:	d4e4      	bmi.n	8003618 <_fflush_r+0xc>
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	059b      	lsls	r3, r3, #22
 8003652:	d4e1      	bmi.n	8003618 <_fflush_r+0xc>
 8003654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003656:	f7ff fb8b 	bl	8002d70 <__retarget_lock_release_recursive>
 800365a:	e7dd      	b.n	8003618 <_fflush_r+0xc>

0800365c <__swhatbuf_r>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	460c      	mov	r4, r1
 8003660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003664:	2900      	cmp	r1, #0
 8003666:	b096      	sub	sp, #88	@ 0x58
 8003668:	4615      	mov	r5, r2
 800366a:	461e      	mov	r6, r3
 800366c:	da0d      	bge.n	800368a <__swhatbuf_r+0x2e>
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003674:	f04f 0100 	mov.w	r1, #0
 8003678:	bf14      	ite	ne
 800367a:	2340      	movne	r3, #64	@ 0x40
 800367c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003680:	2000      	movs	r0, #0
 8003682:	6031      	str	r1, [r6, #0]
 8003684:	602b      	str	r3, [r5, #0]
 8003686:	b016      	add	sp, #88	@ 0x58
 8003688:	bd70      	pop	{r4, r5, r6, pc}
 800368a:	466a      	mov	r2, sp
 800368c:	f000 f848 	bl	8003720 <_fstat_r>
 8003690:	2800      	cmp	r0, #0
 8003692:	dbec      	blt.n	800366e <__swhatbuf_r+0x12>
 8003694:	9901      	ldr	r1, [sp, #4]
 8003696:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800369a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800369e:	4259      	negs	r1, r3
 80036a0:	4159      	adcs	r1, r3
 80036a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036a6:	e7eb      	b.n	8003680 <__swhatbuf_r+0x24>

080036a8 <__smakebuf_r>:
 80036a8:	898b      	ldrh	r3, [r1, #12]
 80036aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036ac:	079d      	lsls	r5, r3, #30
 80036ae:	4606      	mov	r6, r0
 80036b0:	460c      	mov	r4, r1
 80036b2:	d507      	bpl.n	80036c4 <__smakebuf_r+0x1c>
 80036b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	6123      	str	r3, [r4, #16]
 80036bc:	2301      	movs	r3, #1
 80036be:	6163      	str	r3, [r4, #20]
 80036c0:	b003      	add	sp, #12
 80036c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c4:	ab01      	add	r3, sp, #4
 80036c6:	466a      	mov	r2, sp
 80036c8:	f7ff ffc8 	bl	800365c <__swhatbuf_r>
 80036cc:	9f00      	ldr	r7, [sp, #0]
 80036ce:	4605      	mov	r5, r0
 80036d0:	4639      	mov	r1, r7
 80036d2:	4630      	mov	r0, r6
 80036d4:	f7ff fbba 	bl	8002e4c <_malloc_r>
 80036d8:	b948      	cbnz	r0, 80036ee <__smakebuf_r+0x46>
 80036da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036de:	059a      	lsls	r2, r3, #22
 80036e0:	d4ee      	bmi.n	80036c0 <__smakebuf_r+0x18>
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	e7e2      	b.n	80036b4 <__smakebuf_r+0xc>
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	6020      	str	r0, [r4, #0]
 80036f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	9b01      	ldr	r3, [sp, #4]
 80036fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80036fe:	b15b      	cbz	r3, 8003718 <__smakebuf_r+0x70>
 8003700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003704:	4630      	mov	r0, r6
 8003706:	f000 f81d 	bl	8003744 <_isatty_r>
 800370a:	b128      	cbz	r0, 8003718 <__smakebuf_r+0x70>
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	f023 0303 	bic.w	r3, r3, #3
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	81a3      	strh	r3, [r4, #12]
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	431d      	orrs	r5, r3
 800371c:	81a5      	strh	r5, [r4, #12]
 800371e:	e7cf      	b.n	80036c0 <__smakebuf_r+0x18>

08003720 <_fstat_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4d07      	ldr	r5, [pc, #28]	@ (8003740 <_fstat_r+0x20>)
 8003724:	2300      	movs	r3, #0
 8003726:	4604      	mov	r4, r0
 8003728:	4608      	mov	r0, r1
 800372a:	4611      	mov	r1, r2
 800372c:	602b      	str	r3, [r5, #0]
 800372e:	f7fd fe22 	bl	8001376 <_fstat>
 8003732:	1c43      	adds	r3, r0, #1
 8003734:	d102      	bne.n	800373c <_fstat_r+0x1c>
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	b103      	cbz	r3, 800373c <_fstat_r+0x1c>
 800373a:	6023      	str	r3, [r4, #0]
 800373c:	bd38      	pop	{r3, r4, r5, pc}
 800373e:	bf00      	nop
 8003740:	20000258 	.word	0x20000258

08003744 <_isatty_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4d06      	ldr	r5, [pc, #24]	@ (8003760 <_isatty_r+0x1c>)
 8003748:	2300      	movs	r3, #0
 800374a:	4604      	mov	r4, r0
 800374c:	4608      	mov	r0, r1
 800374e:	602b      	str	r3, [r5, #0]
 8003750:	f7fd fe16 	bl	8001380 <_isatty>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d102      	bne.n	800375e <_isatty_r+0x1a>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	b103      	cbz	r3, 800375e <_isatty_r+0x1a>
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	20000258 	.word	0x20000258

08003764 <_sbrk_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4d06      	ldr	r5, [pc, #24]	@ (8003780 <_sbrk_r+0x1c>)
 8003768:	2300      	movs	r3, #0
 800376a:	4604      	mov	r4, r0
 800376c:	4608      	mov	r0, r1
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	f7fd fe0a 	bl	8001388 <_sbrk>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d102      	bne.n	800377e <_sbrk_r+0x1a>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	b103      	cbz	r3, 800377e <_sbrk_r+0x1a>
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	20000258 	.word	0x20000258
 8003784:	00000000 	.word	0x00000000

08003788 <sin>:
 8003788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800378a:	ec53 2b10 	vmov	r2, r3, d0
 800378e:	4826      	ldr	r0, [pc, #152]	@ (8003828 <sin+0xa0>)
 8003790:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003794:	4281      	cmp	r1, r0
 8003796:	d807      	bhi.n	80037a8 <sin+0x20>
 8003798:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003820 <sin+0x98>
 800379c:	2000      	movs	r0, #0
 800379e:	b005      	add	sp, #20
 80037a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80037a4:	f000 b90c 	b.w	80039c0 <__kernel_sin>
 80037a8:	4820      	ldr	r0, [pc, #128]	@ (800382c <sin+0xa4>)
 80037aa:	4281      	cmp	r1, r0
 80037ac:	d908      	bls.n	80037c0 <sin+0x38>
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7fc fe8b 	bl	80004cc <__aeabi_dsub>
 80037b6:	ec41 0b10 	vmov	d0, r0, r1
 80037ba:	b005      	add	sp, #20
 80037bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80037c0:	4668      	mov	r0, sp
 80037c2:	f000 f9b9 	bl	8003b38 <__ieee754_rem_pio2>
 80037c6:	f000 0003 	and.w	r0, r0, #3
 80037ca:	2801      	cmp	r0, #1
 80037cc:	d00c      	beq.n	80037e8 <sin+0x60>
 80037ce:	2802      	cmp	r0, #2
 80037d0:	d011      	beq.n	80037f6 <sin+0x6e>
 80037d2:	b9e8      	cbnz	r0, 8003810 <sin+0x88>
 80037d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80037d8:	ed9d 0b00 	vldr	d0, [sp]
 80037dc:	2001      	movs	r0, #1
 80037de:	f000 f8ef 	bl	80039c0 <__kernel_sin>
 80037e2:	ec51 0b10 	vmov	r0, r1, d0
 80037e6:	e7e6      	b.n	80037b6 <sin+0x2e>
 80037e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80037ec:	ed9d 0b00 	vldr	d0, [sp]
 80037f0:	f000 f81e 	bl	8003830 <__kernel_cos>
 80037f4:	e7f5      	b.n	80037e2 <sin+0x5a>
 80037f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80037fa:	ed9d 0b00 	vldr	d0, [sp]
 80037fe:	2001      	movs	r0, #1
 8003800:	f000 f8de 	bl	80039c0 <__kernel_sin>
 8003804:	ec53 2b10 	vmov	r2, r3, d0
 8003808:	4610      	mov	r0, r2
 800380a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800380e:	e7d2      	b.n	80037b6 <sin+0x2e>
 8003810:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003814:	ed9d 0b00 	vldr	d0, [sp]
 8003818:	f000 f80a 	bl	8003830 <__kernel_cos>
 800381c:	e7f2      	b.n	8003804 <sin+0x7c>
 800381e:	bf00      	nop
	...
 8003828:	3fe921fb 	.word	0x3fe921fb
 800382c:	7fefffff 	.word	0x7fefffff

08003830 <__kernel_cos>:
 8003830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003834:	ec57 6b10 	vmov	r6, r7, d0
 8003838:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800383c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003840:	ed8d 1b00 	vstr	d1, [sp]
 8003844:	d206      	bcs.n	8003854 <__kernel_cos+0x24>
 8003846:	4630      	mov	r0, r6
 8003848:	4639      	mov	r1, r7
 800384a:	f7fd f87f 	bl	800094c <__aeabi_d2iz>
 800384e:	2800      	cmp	r0, #0
 8003850:	f000 8088 	beq.w	8003964 <__kernel_cos+0x134>
 8003854:	4632      	mov	r2, r6
 8003856:	463b      	mov	r3, r7
 8003858:	4630      	mov	r0, r6
 800385a:	4639      	mov	r1, r7
 800385c:	f7fc fd08 	bl	8000270 <__aeabi_dmul>
 8003860:	4b51      	ldr	r3, [pc, #324]	@ (80039a8 <__kernel_cos+0x178>)
 8003862:	2200      	movs	r2, #0
 8003864:	4604      	mov	r4, r0
 8003866:	460d      	mov	r5, r1
 8003868:	f7fc fd02 	bl	8000270 <__aeabi_dmul>
 800386c:	a340      	add	r3, pc, #256	@ (adr r3, 8003970 <__kernel_cos+0x140>)
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	4682      	mov	sl, r0
 8003874:	468b      	mov	fp, r1
 8003876:	4620      	mov	r0, r4
 8003878:	4629      	mov	r1, r5
 800387a:	f7fc fcf9 	bl	8000270 <__aeabi_dmul>
 800387e:	a33e      	add	r3, pc, #248	@ (adr r3, 8003978 <__kernel_cos+0x148>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc fe24 	bl	80004d0 <__adddf3>
 8003888:	4622      	mov	r2, r4
 800388a:	462b      	mov	r3, r5
 800388c:	f7fc fcf0 	bl	8000270 <__aeabi_dmul>
 8003890:	a33b      	add	r3, pc, #236	@ (adr r3, 8003980 <__kernel_cos+0x150>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f7fc fe19 	bl	80004cc <__aeabi_dsub>
 800389a:	4622      	mov	r2, r4
 800389c:	462b      	mov	r3, r5
 800389e:	f7fc fce7 	bl	8000270 <__aeabi_dmul>
 80038a2:	a339      	add	r3, pc, #228	@ (adr r3, 8003988 <__kernel_cos+0x158>)
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f7fc fe12 	bl	80004d0 <__adddf3>
 80038ac:	4622      	mov	r2, r4
 80038ae:	462b      	mov	r3, r5
 80038b0:	f7fc fcde 	bl	8000270 <__aeabi_dmul>
 80038b4:	a336      	add	r3, pc, #216	@ (adr r3, 8003990 <__kernel_cos+0x160>)
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	f7fc fe07 	bl	80004cc <__aeabi_dsub>
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	f7fc fcd5 	bl	8000270 <__aeabi_dmul>
 80038c6:	a334      	add	r3, pc, #208	@ (adr r3, 8003998 <__kernel_cos+0x168>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fc fe00 	bl	80004d0 <__adddf3>
 80038d0:	4622      	mov	r2, r4
 80038d2:	462b      	mov	r3, r5
 80038d4:	f7fc fccc 	bl	8000270 <__aeabi_dmul>
 80038d8:	4622      	mov	r2, r4
 80038da:	462b      	mov	r3, r5
 80038dc:	f7fc fcc8 	bl	8000270 <__aeabi_dmul>
 80038e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038e4:	4604      	mov	r4, r0
 80038e6:	460d      	mov	r5, r1
 80038e8:	4630      	mov	r0, r6
 80038ea:	4639      	mov	r1, r7
 80038ec:	f7fc fcc0 	bl	8000270 <__aeabi_dmul>
 80038f0:	460b      	mov	r3, r1
 80038f2:	4602      	mov	r2, r0
 80038f4:	4629      	mov	r1, r5
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7fc fde8 	bl	80004cc <__aeabi_dsub>
 80038fc:	4b2b      	ldr	r3, [pc, #172]	@ (80039ac <__kernel_cos+0x17c>)
 80038fe:	4598      	cmp	r8, r3
 8003900:	4606      	mov	r6, r0
 8003902:	460f      	mov	r7, r1
 8003904:	d810      	bhi.n	8003928 <__kernel_cos+0xf8>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4650      	mov	r0, sl
 800390c:	4659      	mov	r1, fp
 800390e:	f7fc fddd 	bl	80004cc <__aeabi_dsub>
 8003912:	460b      	mov	r3, r1
 8003914:	4926      	ldr	r1, [pc, #152]	@ (80039b0 <__kernel_cos+0x180>)
 8003916:	4602      	mov	r2, r0
 8003918:	2000      	movs	r0, #0
 800391a:	f7fc fdd7 	bl	80004cc <__aeabi_dsub>
 800391e:	ec41 0b10 	vmov	d0, r0, r1
 8003922:	b003      	add	sp, #12
 8003924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003928:	4b22      	ldr	r3, [pc, #136]	@ (80039b4 <__kernel_cos+0x184>)
 800392a:	4921      	ldr	r1, [pc, #132]	@ (80039b0 <__kernel_cos+0x180>)
 800392c:	4598      	cmp	r8, r3
 800392e:	bf8c      	ite	hi
 8003930:	4d21      	ldrhi	r5, [pc, #132]	@ (80039b8 <__kernel_cos+0x188>)
 8003932:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003936:	2400      	movs	r4, #0
 8003938:	4622      	mov	r2, r4
 800393a:	462b      	mov	r3, r5
 800393c:	2000      	movs	r0, #0
 800393e:	f7fc fdc5 	bl	80004cc <__aeabi_dsub>
 8003942:	4622      	mov	r2, r4
 8003944:	4680      	mov	r8, r0
 8003946:	4689      	mov	r9, r1
 8003948:	462b      	mov	r3, r5
 800394a:	4650      	mov	r0, sl
 800394c:	4659      	mov	r1, fp
 800394e:	f7fc fdbd 	bl	80004cc <__aeabi_dsub>
 8003952:	4632      	mov	r2, r6
 8003954:	463b      	mov	r3, r7
 8003956:	f7fc fdb9 	bl	80004cc <__aeabi_dsub>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4640      	mov	r0, r8
 8003960:	4649      	mov	r1, r9
 8003962:	e7da      	b.n	800391a <__kernel_cos+0xea>
 8003964:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80039a0 <__kernel_cos+0x170>
 8003968:	e7db      	b.n	8003922 <__kernel_cos+0xf2>
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w
 8003970:	be8838d4 	.word	0xbe8838d4
 8003974:	bda8fae9 	.word	0xbda8fae9
 8003978:	bdb4b1c4 	.word	0xbdb4b1c4
 800397c:	3e21ee9e 	.word	0x3e21ee9e
 8003980:	809c52ad 	.word	0x809c52ad
 8003984:	3e927e4f 	.word	0x3e927e4f
 8003988:	19cb1590 	.word	0x19cb1590
 800398c:	3efa01a0 	.word	0x3efa01a0
 8003990:	16c15177 	.word	0x16c15177
 8003994:	3f56c16c 	.word	0x3f56c16c
 8003998:	5555554c 	.word	0x5555554c
 800399c:	3fa55555 	.word	0x3fa55555
 80039a0:	00000000 	.word	0x00000000
 80039a4:	3ff00000 	.word	0x3ff00000
 80039a8:	3fe00000 	.word	0x3fe00000
 80039ac:	3fd33332 	.word	0x3fd33332
 80039b0:	3ff00000 	.word	0x3ff00000
 80039b4:	3fe90000 	.word	0x3fe90000
 80039b8:	3fd20000 	.word	0x3fd20000
 80039bc:	00000000 	.word	0x00000000

080039c0 <__kernel_sin>:
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	ec55 4b10 	vmov	r4, r5, d0
 80039c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80039cc:	b085      	sub	sp, #20
 80039ce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80039d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80039d6:	4680      	mov	r8, r0
 80039d8:	d205      	bcs.n	80039e6 <__kernel_sin+0x26>
 80039da:	4620      	mov	r0, r4
 80039dc:	4629      	mov	r1, r5
 80039de:	f7fc ffb5 	bl	800094c <__aeabi_d2iz>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d052      	beq.n	8003a8c <__kernel_sin+0xcc>
 80039e6:	4622      	mov	r2, r4
 80039e8:	462b      	mov	r3, r5
 80039ea:	4620      	mov	r0, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	f7fc fc3f 	bl	8000270 <__aeabi_dmul>
 80039f2:	4682      	mov	sl, r0
 80039f4:	468b      	mov	fp, r1
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4620      	mov	r0, r4
 80039fc:	4629      	mov	r1, r5
 80039fe:	f7fc fc37 	bl	8000270 <__aeabi_dmul>
 8003a02:	a342      	add	r3, pc, #264	@ (adr r3, 8003b0c <__kernel_sin+0x14c>)
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	e9cd 0100 	strd	r0, r1, [sp]
 8003a0c:	4650      	mov	r0, sl
 8003a0e:	4659      	mov	r1, fp
 8003a10:	f7fc fc2e 	bl	8000270 <__aeabi_dmul>
 8003a14:	a33f      	add	r3, pc, #252	@ (adr r3, 8003b14 <__kernel_sin+0x154>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f7fc fd57 	bl	80004cc <__aeabi_dsub>
 8003a1e:	4652      	mov	r2, sl
 8003a20:	465b      	mov	r3, fp
 8003a22:	f7fc fc25 	bl	8000270 <__aeabi_dmul>
 8003a26:	a33d      	add	r3, pc, #244	@ (adr r3, 8003b1c <__kernel_sin+0x15c>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f7fc fd50 	bl	80004d0 <__adddf3>
 8003a30:	4652      	mov	r2, sl
 8003a32:	465b      	mov	r3, fp
 8003a34:	f7fc fc1c 	bl	8000270 <__aeabi_dmul>
 8003a38:	a33a      	add	r3, pc, #232	@ (adr r3, 8003b24 <__kernel_sin+0x164>)
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f7fc fd45 	bl	80004cc <__aeabi_dsub>
 8003a42:	4652      	mov	r2, sl
 8003a44:	465b      	mov	r3, fp
 8003a46:	f7fc fc13 	bl	8000270 <__aeabi_dmul>
 8003a4a:	a338      	add	r3, pc, #224	@ (adr r3, 8003b2c <__kernel_sin+0x16c>)
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f7fc fd3e 	bl	80004d0 <__adddf3>
 8003a54:	4606      	mov	r6, r0
 8003a56:	460f      	mov	r7, r1
 8003a58:	f1b8 0f00 	cmp.w	r8, #0
 8003a5c:	d11b      	bne.n	8003a96 <__kernel_sin+0xd6>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4650      	mov	r0, sl
 8003a64:	4659      	mov	r1, fp
 8003a66:	f7fc fc03 	bl	8000270 <__aeabi_dmul>
 8003a6a:	a325      	add	r3, pc, #148	@ (adr r3, 8003b00 <__kernel_sin+0x140>)
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f7fc fd2c 	bl	80004cc <__aeabi_dsub>
 8003a74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a78:	f7fc fbfa 	bl	8000270 <__aeabi_dmul>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4620      	mov	r0, r4
 8003a82:	4629      	mov	r1, r5
 8003a84:	f7fc fd24 	bl	80004d0 <__adddf3>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	460d      	mov	r5, r1
 8003a8c:	ec45 4b10 	vmov	d0, r4, r5
 8003a90:	b005      	add	sp, #20
 8003a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <__kernel_sin+0x148>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f7fc fbe7 	bl	8000270 <__aeabi_dmul>
 8003aa2:	4632      	mov	r2, r6
 8003aa4:	4680      	mov	r8, r0
 8003aa6:	4689      	mov	r9, r1
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003aae:	f7fc fbdf 	bl	8000270 <__aeabi_dmul>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	4649      	mov	r1, r9
 8003aba:	f7fc fd07 	bl	80004cc <__aeabi_dsub>
 8003abe:	4652      	mov	r2, sl
 8003ac0:	465b      	mov	r3, fp
 8003ac2:	f7fc fbd5 	bl	8000270 <__aeabi_dmul>
 8003ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003aca:	f7fc fcff 	bl	80004cc <__aeabi_dsub>
 8003ace:	a30c      	add	r3, pc, #48	@ (adr r3, 8003b00 <__kernel_sin+0x140>)
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	460f      	mov	r7, r1
 8003ad8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003adc:	f7fc fbc8 	bl	8000270 <__aeabi_dmul>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	4639      	mov	r1, r7
 8003ae8:	f7fc fcf2 	bl	80004d0 <__adddf3>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4620      	mov	r0, r4
 8003af2:	4629      	mov	r1, r5
 8003af4:	f7fc fcea 	bl	80004cc <__aeabi_dsub>
 8003af8:	e7c6      	b.n	8003a88 <__kernel_sin+0xc8>
 8003afa:	bf00      	nop
 8003afc:	f3af 8000 	nop.w
 8003b00:	55555549 	.word	0x55555549
 8003b04:	3fc55555 	.word	0x3fc55555
 8003b08:	3fe00000 	.word	0x3fe00000
 8003b0c:	5acfd57c 	.word	0x5acfd57c
 8003b10:	3de5d93a 	.word	0x3de5d93a
 8003b14:	8a2b9ceb 	.word	0x8a2b9ceb
 8003b18:	3e5ae5e6 	.word	0x3e5ae5e6
 8003b1c:	57b1fe7d 	.word	0x57b1fe7d
 8003b20:	3ec71de3 	.word	0x3ec71de3
 8003b24:	19c161d5 	.word	0x19c161d5
 8003b28:	3f2a01a0 	.word	0x3f2a01a0
 8003b2c:	1110f8a6 	.word	0x1110f8a6
 8003b30:	3f811111 	.word	0x3f811111
 8003b34:	00000000 	.word	0x00000000

08003b38 <__ieee754_rem_pio2>:
 8003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	ec57 6b10 	vmov	r6, r7, d0
 8003b40:	4bc5      	ldr	r3, [pc, #788]	@ (8003e58 <__ieee754_rem_pio2+0x320>)
 8003b42:	b08d      	sub	sp, #52	@ 0x34
 8003b44:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003b48:	4598      	cmp	r8, r3
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	9704      	str	r7, [sp, #16]
 8003b4e:	d807      	bhi.n	8003b60 <__ieee754_rem_pio2+0x28>
 8003b50:	2200      	movs	r2, #0
 8003b52:	2300      	movs	r3, #0
 8003b54:	ed80 0b00 	vstr	d0, [r0]
 8003b58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003b5c:	2500      	movs	r5, #0
 8003b5e:	e028      	b.n	8003bb2 <__ieee754_rem_pio2+0x7a>
 8003b60:	4bbe      	ldr	r3, [pc, #760]	@ (8003e5c <__ieee754_rem_pio2+0x324>)
 8003b62:	4598      	cmp	r8, r3
 8003b64:	d878      	bhi.n	8003c58 <__ieee754_rem_pio2+0x120>
 8003b66:	9b04      	ldr	r3, [sp, #16]
 8003b68:	4dbd      	ldr	r5, [pc, #756]	@ (8003e60 <__ieee754_rem_pio2+0x328>)
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003e20 <__ieee754_rem_pio2+0x2e8>)
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	4639      	mov	r1, r7
 8003b76:	dd38      	ble.n	8003bea <__ieee754_rem_pio2+0xb2>
 8003b78:	f7fc fca8 	bl	80004cc <__aeabi_dsub>
 8003b7c:	45a8      	cmp	r8, r5
 8003b7e:	4606      	mov	r6, r0
 8003b80:	460f      	mov	r7, r1
 8003b82:	d01a      	beq.n	8003bba <__ieee754_rem_pio2+0x82>
 8003b84:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003e28 <__ieee754_rem_pio2+0x2f0>)
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f7fc fc9f 	bl	80004cc <__aeabi_dsub>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4680      	mov	r8, r0
 8003b94:	4689      	mov	r9, r1
 8003b96:	4630      	mov	r0, r6
 8003b98:	4639      	mov	r1, r7
 8003b9a:	f7fc fc97 	bl	80004cc <__aeabi_dsub>
 8003b9e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003e28 <__ieee754_rem_pio2+0x2f0>)
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f7fc fc92 	bl	80004cc <__aeabi_dsub>
 8003ba8:	e9c4 8900 	strd	r8, r9, [r4]
 8003bac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003bb0:	2501      	movs	r5, #1
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	b00d      	add	sp, #52	@ 0x34
 8003bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bba:	a39d      	add	r3, pc, #628	@ (adr r3, 8003e30 <__ieee754_rem_pio2+0x2f8>)
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	f7fc fc84 	bl	80004cc <__aeabi_dsub>
 8003bc4:	a39c      	add	r3, pc, #624	@ (adr r3, 8003e38 <__ieee754_rem_pio2+0x300>)
 8003bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bca:	4606      	mov	r6, r0
 8003bcc:	460f      	mov	r7, r1
 8003bce:	f7fc fc7d 	bl	80004cc <__aeabi_dsub>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4680      	mov	r8, r0
 8003bd8:	4689      	mov	r9, r1
 8003bda:	4630      	mov	r0, r6
 8003bdc:	4639      	mov	r1, r7
 8003bde:	f7fc fc75 	bl	80004cc <__aeabi_dsub>
 8003be2:	a395      	add	r3, pc, #596	@ (adr r3, 8003e38 <__ieee754_rem_pio2+0x300>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	e7dc      	b.n	8003ba4 <__ieee754_rem_pio2+0x6c>
 8003bea:	f7fc fc71 	bl	80004d0 <__adddf3>
 8003bee:	45a8      	cmp	r8, r5
 8003bf0:	4606      	mov	r6, r0
 8003bf2:	460f      	mov	r7, r1
 8003bf4:	d018      	beq.n	8003c28 <__ieee754_rem_pio2+0xf0>
 8003bf6:	a38c      	add	r3, pc, #560	@ (adr r3, 8003e28 <__ieee754_rem_pio2+0x2f0>)
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f7fc fc68 	bl	80004d0 <__adddf3>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4680      	mov	r8, r0
 8003c06:	4689      	mov	r9, r1
 8003c08:	4630      	mov	r0, r6
 8003c0a:	4639      	mov	r1, r7
 8003c0c:	f7fc fc5e 	bl	80004cc <__aeabi_dsub>
 8003c10:	a385      	add	r3, pc, #532	@ (adr r3, 8003e28 <__ieee754_rem_pio2+0x2f0>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f7fc fc5b 	bl	80004d0 <__adddf3>
 8003c1a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003c1e:	e9c4 8900 	strd	r8, r9, [r4]
 8003c22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003c26:	e7c4      	b.n	8003bb2 <__ieee754_rem_pio2+0x7a>
 8003c28:	a381      	add	r3, pc, #516	@ (adr r3, 8003e30 <__ieee754_rem_pio2+0x2f8>)
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	f7fc fc4f 	bl	80004d0 <__adddf3>
 8003c32:	a381      	add	r3, pc, #516	@ (adr r3, 8003e38 <__ieee754_rem_pio2+0x300>)
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	4606      	mov	r6, r0
 8003c3a:	460f      	mov	r7, r1
 8003c3c:	f7fc fc48 	bl	80004d0 <__adddf3>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4680      	mov	r8, r0
 8003c46:	4689      	mov	r9, r1
 8003c48:	4630      	mov	r0, r6
 8003c4a:	4639      	mov	r1, r7
 8003c4c:	f7fc fc3e 	bl	80004cc <__aeabi_dsub>
 8003c50:	a379      	add	r3, pc, #484	@ (adr r3, 8003e38 <__ieee754_rem_pio2+0x300>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	e7de      	b.n	8003c16 <__ieee754_rem_pio2+0xde>
 8003c58:	4b82      	ldr	r3, [pc, #520]	@ (8003e64 <__ieee754_rem_pio2+0x32c>)
 8003c5a:	4598      	cmp	r8, r3
 8003c5c:	f200 80d1 	bhi.w	8003e02 <__ieee754_rem_pio2+0x2ca>
 8003c60:	f000 f966 	bl	8003f30 <fabs>
 8003c64:	ec57 6b10 	vmov	r6, r7, d0
 8003c68:	a375      	add	r3, pc, #468	@ (adr r3, 8003e40 <__ieee754_rem_pio2+0x308>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	4630      	mov	r0, r6
 8003c70:	4639      	mov	r1, r7
 8003c72:	f7fc fafd 	bl	8000270 <__aeabi_dmul>
 8003c76:	4b7c      	ldr	r3, [pc, #496]	@ (8003e68 <__ieee754_rem_pio2+0x330>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f7fc fc29 	bl	80004d0 <__adddf3>
 8003c7e:	f7fc fe65 	bl	800094c <__aeabi_d2iz>
 8003c82:	4605      	mov	r5, r0
 8003c84:	f7fc fd70 	bl	8000768 <__aeabi_i2d>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c90:	a363      	add	r3, pc, #396	@ (adr r3, 8003e20 <__ieee754_rem_pio2+0x2e8>)
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f7fc faeb 	bl	8000270 <__aeabi_dmul>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	4639      	mov	r1, r7
 8003ca2:	f7fc fc13 	bl	80004cc <__aeabi_dsub>
 8003ca6:	a360      	add	r3, pc, #384	@ (adr r3, 8003e28 <__ieee754_rem_pio2+0x2f0>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	4682      	mov	sl, r0
 8003cae:	468b      	mov	fp, r1
 8003cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cb4:	f7fc fadc 	bl	8000270 <__aeabi_dmul>
 8003cb8:	2d1f      	cmp	r5, #31
 8003cba:	4606      	mov	r6, r0
 8003cbc:	460f      	mov	r7, r1
 8003cbe:	dc0c      	bgt.n	8003cda <__ieee754_rem_pio2+0x1a2>
 8003cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8003e6c <__ieee754_rem_pio2+0x334>)
 8003cc2:	1e6a      	subs	r2, r5, #1
 8003cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc8:	4543      	cmp	r3, r8
 8003cca:	d006      	beq.n	8003cda <__ieee754_rem_pio2+0x1a2>
 8003ccc:	4632      	mov	r2, r6
 8003cce:	463b      	mov	r3, r7
 8003cd0:	4650      	mov	r0, sl
 8003cd2:	4659      	mov	r1, fp
 8003cd4:	f7fc fbfa 	bl	80004cc <__aeabi_dsub>
 8003cd8:	e00e      	b.n	8003cf8 <__ieee754_rem_pio2+0x1c0>
 8003cda:	463b      	mov	r3, r7
 8003cdc:	4632      	mov	r2, r6
 8003cde:	4650      	mov	r0, sl
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	f7fc fbf3 	bl	80004cc <__aeabi_dsub>
 8003ce6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003cea:	9305      	str	r3, [sp, #20]
 8003cec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003cf0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	dc02      	bgt.n	8003cfe <__ieee754_rem_pio2+0x1c6>
 8003cf8:	e9c4 0100 	strd	r0, r1, [r4]
 8003cfc:	e039      	b.n	8003d72 <__ieee754_rem_pio2+0x23a>
 8003cfe:	a34c      	add	r3, pc, #304	@ (adr r3, 8003e30 <__ieee754_rem_pio2+0x2f8>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d08:	f7fc fab2 	bl	8000270 <__aeabi_dmul>
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	460f      	mov	r7, r1
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4650      	mov	r0, sl
 8003d16:	4659      	mov	r1, fp
 8003d18:	f7fc fbd8 	bl	80004cc <__aeabi_dsub>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4680      	mov	r8, r0
 8003d22:	4689      	mov	r9, r1
 8003d24:	4650      	mov	r0, sl
 8003d26:	4659      	mov	r1, fp
 8003d28:	f7fc fbd0 	bl	80004cc <__aeabi_dsub>
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	463b      	mov	r3, r7
 8003d30:	f7fc fbcc 	bl	80004cc <__aeabi_dsub>
 8003d34:	a340      	add	r3, pc, #256	@ (adr r3, 8003e38 <__ieee754_rem_pio2+0x300>)
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	460f      	mov	r7, r1
 8003d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d42:	f7fc fa95 	bl	8000270 <__aeabi_dmul>
 8003d46:	4632      	mov	r2, r6
 8003d48:	463b      	mov	r3, r7
 8003d4a:	f7fc fbbf 	bl	80004cc <__aeabi_dsub>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4606      	mov	r6, r0
 8003d54:	460f      	mov	r7, r1
 8003d56:	4640      	mov	r0, r8
 8003d58:	4649      	mov	r1, r9
 8003d5a:	f7fc fbb7 	bl	80004cc <__aeabi_dsub>
 8003d5e:	9a05      	ldr	r2, [sp, #20]
 8003d60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b31      	cmp	r3, #49	@ 0x31
 8003d68:	dc20      	bgt.n	8003dac <__ieee754_rem_pio2+0x274>
 8003d6a:	e9c4 0100 	strd	r0, r1, [r4]
 8003d6e:	46c2      	mov	sl, r8
 8003d70:	46cb      	mov	fp, r9
 8003d72:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003d76:	4650      	mov	r0, sl
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	4659      	mov	r1, fp
 8003d7e:	f7fc fba5 	bl	80004cc <__aeabi_dsub>
 8003d82:	463b      	mov	r3, r7
 8003d84:	4632      	mov	r2, r6
 8003d86:	f7fc fba1 	bl	80004cc <__aeabi_dsub>
 8003d8a:	9b04      	ldr	r3, [sp, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d92:	f6bf af0e 	bge.w	8003bb2 <__ieee754_rem_pio2+0x7a>
 8003d96:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003d9a:	6063      	str	r3, [r4, #4]
 8003d9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003da0:	f8c4 8000 	str.w	r8, [r4]
 8003da4:	60a0      	str	r0, [r4, #8]
 8003da6:	60e3      	str	r3, [r4, #12]
 8003da8:	426d      	negs	r5, r5
 8003daa:	e702      	b.n	8003bb2 <__ieee754_rem_pio2+0x7a>
 8003dac:	a326      	add	r3, pc, #152	@ (adr r3, 8003e48 <__ieee754_rem_pio2+0x310>)
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003db6:	f7fc fa5b 	bl	8000270 <__aeabi_dmul>
 8003dba:	4606      	mov	r6, r0
 8003dbc:	460f      	mov	r7, r1
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	f7fc fb81 	bl	80004cc <__aeabi_dsub>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4682      	mov	sl, r0
 8003dd0:	468b      	mov	fp, r1
 8003dd2:	4640      	mov	r0, r8
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	f7fc fb79 	bl	80004cc <__aeabi_dsub>
 8003dda:	4632      	mov	r2, r6
 8003ddc:	463b      	mov	r3, r7
 8003dde:	f7fc fb75 	bl	80004cc <__aeabi_dsub>
 8003de2:	a31b      	add	r3, pc, #108	@ (adr r3, 8003e50 <__ieee754_rem_pio2+0x318>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	4606      	mov	r6, r0
 8003dea:	460f      	mov	r7, r1
 8003dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003df0:	f7fc fa3e 	bl	8000270 <__aeabi_dmul>
 8003df4:	4632      	mov	r2, r6
 8003df6:	463b      	mov	r3, r7
 8003df8:	f7fc fb68 	bl	80004cc <__aeabi_dsub>
 8003dfc:	4606      	mov	r6, r0
 8003dfe:	460f      	mov	r7, r1
 8003e00:	e764      	b.n	8003ccc <__ieee754_rem_pio2+0x194>
 8003e02:	4b1b      	ldr	r3, [pc, #108]	@ (8003e70 <__ieee754_rem_pio2+0x338>)
 8003e04:	4598      	cmp	r8, r3
 8003e06:	d935      	bls.n	8003e74 <__ieee754_rem_pio2+0x33c>
 8003e08:	4632      	mov	r2, r6
 8003e0a:	463b      	mov	r3, r7
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	4639      	mov	r1, r7
 8003e10:	f7fc fb5c 	bl	80004cc <__aeabi_dsub>
 8003e14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003e18:	e9c4 0100 	strd	r0, r1, [r4]
 8003e1c:	e69e      	b.n	8003b5c <__ieee754_rem_pio2+0x24>
 8003e1e:	bf00      	nop
 8003e20:	54400000 	.word	0x54400000
 8003e24:	3ff921fb 	.word	0x3ff921fb
 8003e28:	1a626331 	.word	0x1a626331
 8003e2c:	3dd0b461 	.word	0x3dd0b461
 8003e30:	1a600000 	.word	0x1a600000
 8003e34:	3dd0b461 	.word	0x3dd0b461
 8003e38:	2e037073 	.word	0x2e037073
 8003e3c:	3ba3198a 	.word	0x3ba3198a
 8003e40:	6dc9c883 	.word	0x6dc9c883
 8003e44:	3fe45f30 	.word	0x3fe45f30
 8003e48:	2e000000 	.word	0x2e000000
 8003e4c:	3ba3198a 	.word	0x3ba3198a
 8003e50:	252049c1 	.word	0x252049c1
 8003e54:	397b839a 	.word	0x397b839a
 8003e58:	3fe921fb 	.word	0x3fe921fb
 8003e5c:	4002d97b 	.word	0x4002d97b
 8003e60:	3ff921fb 	.word	0x3ff921fb
 8003e64:	413921fb 	.word	0x413921fb
 8003e68:	3fe00000 	.word	0x3fe00000
 8003e6c:	080048c0 	.word	0x080048c0
 8003e70:	7fefffff 	.word	0x7fefffff
 8003e74:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003e78:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003e7c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003e80:	4630      	mov	r0, r6
 8003e82:	460f      	mov	r7, r1
 8003e84:	f7fc fd62 	bl	800094c <__aeabi_d2iz>
 8003e88:	f7fc fc6e 	bl	8000768 <__aeabi_i2d>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4630      	mov	r0, r6
 8003e92:	4639      	mov	r1, r7
 8003e94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e98:	f7fc fb18 	bl	80004cc <__aeabi_dsub>
 8003e9c:	4b22      	ldr	r3, [pc, #136]	@ (8003f28 <__ieee754_rem_pio2+0x3f0>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f7fc f9e6 	bl	8000270 <__aeabi_dmul>
 8003ea4:	460f      	mov	r7, r1
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	f7fc fd50 	bl	800094c <__aeabi_d2iz>
 8003eac:	f7fc fc5c 	bl	8000768 <__aeabi_i2d>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003ebc:	f7fc fb06 	bl	80004cc <__aeabi_dsub>
 8003ec0:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <__ieee754_rem_pio2+0x3f0>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f7fc f9d4 	bl	8000270 <__aeabi_dmul>
 8003ec8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003ecc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003ed0:	f04f 0803 	mov.w	r8, #3
 8003ed4:	2600      	movs	r6, #0
 8003ed6:	2700      	movs	r7, #0
 8003ed8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003edc:	4632      	mov	r2, r6
 8003ede:	463b      	mov	r3, r7
 8003ee0:	46c2      	mov	sl, r8
 8003ee2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003ee6:	f7fc fcff 	bl	80008e8 <__aeabi_dcmpeq>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d1f4      	bne.n	8003ed8 <__ieee754_rem_pio2+0x3a0>
 8003eee:	4b0f      	ldr	r3, [pc, #60]	@ (8003f2c <__ieee754_rem_pio2+0x3f4>)
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	4653      	mov	r3, sl
 8003efa:	4621      	mov	r1, r4
 8003efc:	a806      	add	r0, sp, #24
 8003efe:	f000 f81f 	bl	8003f40 <__kernel_rem_pio2>
 8003f02:	9b04      	ldr	r3, [sp, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	4605      	mov	r5, r0
 8003f08:	f6bf ae53 	bge.w	8003bb2 <__ieee754_rem_pio2+0x7a>
 8003f0c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003f10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003f14:	e9c4 2300 	strd	r2, r3, [r4]
 8003f18:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003f1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003f20:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003f24:	e740      	b.n	8003da8 <__ieee754_rem_pio2+0x270>
 8003f26:	bf00      	nop
 8003f28:	41700000 	.word	0x41700000
 8003f2c:	08004940 	.word	0x08004940

08003f30 <fabs>:
 8003f30:	ec51 0b10 	vmov	r0, r1, d0
 8003f34:	4602      	mov	r2, r0
 8003f36:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003f3a:	ec43 2b10 	vmov	d0, r2, r3
 8003f3e:	4770      	bx	lr

08003f40 <__kernel_rem_pio2>:
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f44:	ed2d 8b02 	vpush	{d8}
 8003f48:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003f4c:	f112 0f14 	cmn.w	r2, #20
 8003f50:	9306      	str	r3, [sp, #24]
 8003f52:	9104      	str	r1, [sp, #16]
 8003f54:	4bbe      	ldr	r3, [pc, #760]	@ (8004250 <__kernel_rem_pio2+0x310>)
 8003f56:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003f58:	9008      	str	r0, [sp, #32]
 8003f5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	9b06      	ldr	r3, [sp, #24]
 8003f62:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003f66:	bfa8      	it	ge
 8003f68:	1ed4      	subge	r4, r2, #3
 8003f6a:	9305      	str	r3, [sp, #20]
 8003f6c:	bfb2      	itee	lt
 8003f6e:	2400      	movlt	r4, #0
 8003f70:	2318      	movge	r3, #24
 8003f72:	fb94 f4f3 	sdivge	r4, r4, r3
 8003f76:	f06f 0317 	mvn.w	r3, #23
 8003f7a:	fb04 3303 	mla	r3, r4, r3, r3
 8003f7e:	eb03 0b02 	add.w	fp, r3, r2
 8003f82:	9b00      	ldr	r3, [sp, #0]
 8003f84:	9a05      	ldr	r2, [sp, #20]
 8003f86:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004240 <__kernel_rem_pio2+0x300>
 8003f8a:	eb03 0802 	add.w	r8, r3, r2
 8003f8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003f90:	1aa7      	subs	r7, r4, r2
 8003f92:	ae20      	add	r6, sp, #128	@ 0x80
 8003f94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003f98:	2500      	movs	r5, #0
 8003f9a:	4545      	cmp	r5, r8
 8003f9c:	dd13      	ble.n	8003fc6 <__kernel_rem_pio2+0x86>
 8003f9e:	9b06      	ldr	r3, [sp, #24]
 8003fa0:	aa20      	add	r2, sp, #128	@ 0x80
 8003fa2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003fa6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8003faa:	f04f 0800 	mov.w	r8, #0
 8003fae:	9b00      	ldr	r3, [sp, #0]
 8003fb0:	4598      	cmp	r8, r3
 8003fb2:	dc31      	bgt.n	8004018 <__kernel_rem_pio2+0xd8>
 8003fb4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004240 <__kernel_rem_pio2+0x300>
 8003fb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003fc0:	462f      	mov	r7, r5
 8003fc2:	2600      	movs	r6, #0
 8003fc4:	e01b      	b.n	8003ffe <__kernel_rem_pio2+0xbe>
 8003fc6:	42ef      	cmn	r7, r5
 8003fc8:	d407      	bmi.n	8003fda <__kernel_rem_pio2+0x9a>
 8003fca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003fce:	f7fc fbcb 	bl	8000768 <__aeabi_i2d>
 8003fd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003fd6:	3501      	adds	r5, #1
 8003fd8:	e7df      	b.n	8003f9a <__kernel_rem_pio2+0x5a>
 8003fda:	ec51 0b18 	vmov	r0, r1, d8
 8003fde:	e7f8      	b.n	8003fd2 <__kernel_rem_pio2+0x92>
 8003fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003fe8:	f7fc f942 	bl	8000270 <__aeabi_dmul>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ff4:	f7fc fa6c 	bl	80004d0 <__adddf3>
 8003ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ffc:	3601      	adds	r6, #1
 8003ffe:	9b05      	ldr	r3, [sp, #20]
 8004000:	429e      	cmp	r6, r3
 8004002:	f1a7 0708 	sub.w	r7, r7, #8
 8004006:	ddeb      	ble.n	8003fe0 <__kernel_rem_pio2+0xa0>
 8004008:	ed9d 7b02 	vldr	d7, [sp, #8]
 800400c:	f108 0801 	add.w	r8, r8, #1
 8004010:	ecaa 7b02 	vstmia	sl!, {d7}
 8004014:	3508      	adds	r5, #8
 8004016:	e7ca      	b.n	8003fae <__kernel_rem_pio2+0x6e>
 8004018:	9b00      	ldr	r3, [sp, #0]
 800401a:	f8dd 8000 	ldr.w	r8, [sp]
 800401e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004020:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004024:	930a      	str	r3, [sp, #40]	@ 0x28
 8004026:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004028:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800402c:	9309      	str	r3, [sp, #36]	@ 0x24
 800402e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004032:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004034:	ab98      	add	r3, sp, #608	@ 0x260
 8004036:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800403a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800403e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004042:	ac0c      	add	r4, sp, #48	@ 0x30
 8004044:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004046:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800404a:	46a1      	mov	r9, r4
 800404c:	46c2      	mov	sl, r8
 800404e:	f1ba 0f00 	cmp.w	sl, #0
 8004052:	f1a5 0508 	sub.w	r5, r5, #8
 8004056:	dc77      	bgt.n	8004148 <__kernel_rem_pio2+0x208>
 8004058:	4658      	mov	r0, fp
 800405a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800405e:	f000 fac7 	bl	80045f0 <scalbn>
 8004062:	ec57 6b10 	vmov	r6, r7, d0
 8004066:	2200      	movs	r2, #0
 8004068:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800406c:	4630      	mov	r0, r6
 800406e:	4639      	mov	r1, r7
 8004070:	f7fc f8fe 	bl	8000270 <__aeabi_dmul>
 8004074:	ec41 0b10 	vmov	d0, r0, r1
 8004078:	f000 fb3a 	bl	80046f0 <floor>
 800407c:	4b75      	ldr	r3, [pc, #468]	@ (8004254 <__kernel_rem_pio2+0x314>)
 800407e:	ec51 0b10 	vmov	r0, r1, d0
 8004082:	2200      	movs	r2, #0
 8004084:	f7fc f8f4 	bl	8000270 <__aeabi_dmul>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4630      	mov	r0, r6
 800408e:	4639      	mov	r1, r7
 8004090:	f7fc fa1c 	bl	80004cc <__aeabi_dsub>
 8004094:	460f      	mov	r7, r1
 8004096:	4606      	mov	r6, r0
 8004098:	f7fc fc58 	bl	800094c <__aeabi_d2iz>
 800409c:	9002      	str	r0, [sp, #8]
 800409e:	f7fc fb63 	bl	8000768 <__aeabi_i2d>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4630      	mov	r0, r6
 80040a8:	4639      	mov	r1, r7
 80040aa:	f7fc fa0f 	bl	80004cc <__aeabi_dsub>
 80040ae:	f1bb 0f00 	cmp.w	fp, #0
 80040b2:	4606      	mov	r6, r0
 80040b4:	460f      	mov	r7, r1
 80040b6:	dd6c      	ble.n	8004192 <__kernel_rem_pio2+0x252>
 80040b8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80040bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80040be:	9d02      	ldr	r5, [sp, #8]
 80040c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040c4:	f1cb 0018 	rsb	r0, fp, #24
 80040c8:	fa43 f200 	asr.w	r2, r3, r0
 80040cc:	4415      	add	r5, r2
 80040ce:	4082      	lsls	r2, r0
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	aa0c      	add	r2, sp, #48	@ 0x30
 80040d4:	9502      	str	r5, [sp, #8]
 80040d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80040da:	f1cb 0217 	rsb	r2, fp, #23
 80040de:	fa43 f902 	asr.w	r9, r3, r2
 80040e2:	f1b9 0f00 	cmp.w	r9, #0
 80040e6:	dd64      	ble.n	80041b2 <__kernel_rem_pio2+0x272>
 80040e8:	9b02      	ldr	r3, [sp, #8]
 80040ea:	2200      	movs	r2, #0
 80040ec:	3301      	adds	r3, #1
 80040ee:	9302      	str	r3, [sp, #8]
 80040f0:	4615      	mov	r5, r2
 80040f2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80040f6:	4590      	cmp	r8, r2
 80040f8:	f300 80b8 	bgt.w	800426c <__kernel_rem_pio2+0x32c>
 80040fc:	f1bb 0f00 	cmp.w	fp, #0
 8004100:	dd07      	ble.n	8004112 <__kernel_rem_pio2+0x1d2>
 8004102:	f1bb 0f01 	cmp.w	fp, #1
 8004106:	f000 80bf 	beq.w	8004288 <__kernel_rem_pio2+0x348>
 800410a:	f1bb 0f02 	cmp.w	fp, #2
 800410e:	f000 80c6 	beq.w	800429e <__kernel_rem_pio2+0x35e>
 8004112:	f1b9 0f02 	cmp.w	r9, #2
 8004116:	d14c      	bne.n	80041b2 <__kernel_rem_pio2+0x272>
 8004118:	4632      	mov	r2, r6
 800411a:	463b      	mov	r3, r7
 800411c:	494e      	ldr	r1, [pc, #312]	@ (8004258 <__kernel_rem_pio2+0x318>)
 800411e:	2000      	movs	r0, #0
 8004120:	f7fc f9d4 	bl	80004cc <__aeabi_dsub>
 8004124:	4606      	mov	r6, r0
 8004126:	460f      	mov	r7, r1
 8004128:	2d00      	cmp	r5, #0
 800412a:	d042      	beq.n	80041b2 <__kernel_rem_pio2+0x272>
 800412c:	4658      	mov	r0, fp
 800412e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004248 <__kernel_rem_pio2+0x308>
 8004132:	f000 fa5d 	bl	80045f0 <scalbn>
 8004136:	4630      	mov	r0, r6
 8004138:	4639      	mov	r1, r7
 800413a:	ec53 2b10 	vmov	r2, r3, d0
 800413e:	f7fc f9c5 	bl	80004cc <__aeabi_dsub>
 8004142:	4606      	mov	r6, r0
 8004144:	460f      	mov	r7, r1
 8004146:	e034      	b.n	80041b2 <__kernel_rem_pio2+0x272>
 8004148:	4b44      	ldr	r3, [pc, #272]	@ (800425c <__kernel_rem_pio2+0x31c>)
 800414a:	2200      	movs	r2, #0
 800414c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004150:	f7fc f88e 	bl	8000270 <__aeabi_dmul>
 8004154:	f7fc fbfa 	bl	800094c <__aeabi_d2iz>
 8004158:	f7fc fb06 	bl	8000768 <__aeabi_i2d>
 800415c:	4b40      	ldr	r3, [pc, #256]	@ (8004260 <__kernel_rem_pio2+0x320>)
 800415e:	2200      	movs	r2, #0
 8004160:	4606      	mov	r6, r0
 8004162:	460f      	mov	r7, r1
 8004164:	f7fc f884 	bl	8000270 <__aeabi_dmul>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004170:	f7fc f9ac 	bl	80004cc <__aeabi_dsub>
 8004174:	f7fc fbea 	bl	800094c <__aeabi_d2iz>
 8004178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800417c:	f849 0b04 	str.w	r0, [r9], #4
 8004180:	4639      	mov	r1, r7
 8004182:	4630      	mov	r0, r6
 8004184:	f7fc f9a4 	bl	80004d0 <__adddf3>
 8004188:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800418c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004190:	e75d      	b.n	800404e <__kernel_rem_pio2+0x10e>
 8004192:	d107      	bne.n	80041a4 <__kernel_rem_pio2+0x264>
 8004194:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004198:	aa0c      	add	r2, sp, #48	@ 0x30
 800419a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80041a2:	e79e      	b.n	80040e2 <__kernel_rem_pio2+0x1a2>
 80041a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004264 <__kernel_rem_pio2+0x324>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	f7fc fbbc 	bl	8000924 <__aeabi_dcmpge>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d143      	bne.n	8004238 <__kernel_rem_pio2+0x2f8>
 80041b0:	4681      	mov	r9, r0
 80041b2:	2200      	movs	r2, #0
 80041b4:	2300      	movs	r3, #0
 80041b6:	4630      	mov	r0, r6
 80041b8:	4639      	mov	r1, r7
 80041ba:	f7fc fb95 	bl	80008e8 <__aeabi_dcmpeq>
 80041be:	2800      	cmp	r0, #0
 80041c0:	f000 80bf 	beq.w	8004342 <__kernel_rem_pio2+0x402>
 80041c4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80041c8:	2200      	movs	r2, #0
 80041ca:	9900      	ldr	r1, [sp, #0]
 80041cc:	428b      	cmp	r3, r1
 80041ce:	da6e      	bge.n	80042ae <__kernel_rem_pio2+0x36e>
 80041d0:	2a00      	cmp	r2, #0
 80041d2:	f000 8089 	beq.w	80042e8 <__kernel_rem_pio2+0x3a8>
 80041d6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80041da:	ab0c      	add	r3, sp, #48	@ 0x30
 80041dc:	f1ab 0b18 	sub.w	fp, fp, #24
 80041e0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f6      	beq.n	80041d6 <__kernel_rem_pio2+0x296>
 80041e8:	4658      	mov	r0, fp
 80041ea:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004248 <__kernel_rem_pio2+0x308>
 80041ee:	f000 f9ff 	bl	80045f0 <scalbn>
 80041f2:	f108 0301 	add.w	r3, r8, #1
 80041f6:	00da      	lsls	r2, r3, #3
 80041f8:	9205      	str	r2, [sp, #20]
 80041fa:	ec55 4b10 	vmov	r4, r5, d0
 80041fe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004200:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800425c <__kernel_rem_pio2+0x31c>
 8004204:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004208:	4646      	mov	r6, r8
 800420a:	f04f 0a00 	mov.w	sl, #0
 800420e:	2e00      	cmp	r6, #0
 8004210:	f280 80cf 	bge.w	80043b2 <__kernel_rem_pio2+0x472>
 8004214:	4644      	mov	r4, r8
 8004216:	2c00      	cmp	r4, #0
 8004218:	f2c0 80fd 	blt.w	8004416 <__kernel_rem_pio2+0x4d6>
 800421c:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <__kernel_rem_pio2+0x328>)
 800421e:	461f      	mov	r7, r3
 8004220:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004222:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004226:	9306      	str	r3, [sp, #24]
 8004228:	f04f 0a00 	mov.w	sl, #0
 800422c:	f04f 0b00 	mov.w	fp, #0
 8004230:	2600      	movs	r6, #0
 8004232:	eba8 0504 	sub.w	r5, r8, r4
 8004236:	e0e2      	b.n	80043fe <__kernel_rem_pio2+0x4be>
 8004238:	f04f 0902 	mov.w	r9, #2
 800423c:	e754      	b.n	80040e8 <__kernel_rem_pio2+0x1a8>
 800423e:	bf00      	nop
	...
 800424c:	3ff00000 	.word	0x3ff00000
 8004250:	08004a88 	.word	0x08004a88
 8004254:	40200000 	.word	0x40200000
 8004258:	3ff00000 	.word	0x3ff00000
 800425c:	3e700000 	.word	0x3e700000
 8004260:	41700000 	.word	0x41700000
 8004264:	3fe00000 	.word	0x3fe00000
 8004268:	08004a48 	.word	0x08004a48
 800426c:	f854 3b04 	ldr.w	r3, [r4], #4
 8004270:	b945      	cbnz	r5, 8004284 <__kernel_rem_pio2+0x344>
 8004272:	b123      	cbz	r3, 800427e <__kernel_rem_pio2+0x33e>
 8004274:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004278:	f844 3c04 	str.w	r3, [r4, #-4]
 800427c:	2301      	movs	r3, #1
 800427e:	3201      	adds	r2, #1
 8004280:	461d      	mov	r5, r3
 8004282:	e738      	b.n	80040f6 <__kernel_rem_pio2+0x1b6>
 8004284:	1acb      	subs	r3, r1, r3
 8004286:	e7f7      	b.n	8004278 <__kernel_rem_pio2+0x338>
 8004288:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800428c:	ab0c      	add	r3, sp, #48	@ 0x30
 800428e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004292:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004296:	a90c      	add	r1, sp, #48	@ 0x30
 8004298:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800429c:	e739      	b.n	8004112 <__kernel_rem_pio2+0x1d2>
 800429e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80042a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80042a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80042ac:	e7f3      	b.n	8004296 <__kernel_rem_pio2+0x356>
 80042ae:	a90c      	add	r1, sp, #48	@ 0x30
 80042b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	430a      	orrs	r2, r1
 80042b8:	e787      	b.n	80041ca <__kernel_rem_pio2+0x28a>
 80042ba:	3401      	adds	r4, #1
 80042bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80042c0:	2a00      	cmp	r2, #0
 80042c2:	d0fa      	beq.n	80042ba <__kernel_rem_pio2+0x37a>
 80042c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80042ca:	eb0d 0503 	add.w	r5, sp, r3
 80042ce:	9b06      	ldr	r3, [sp, #24]
 80042d0:	aa20      	add	r2, sp, #128	@ 0x80
 80042d2:	4443      	add	r3, r8
 80042d4:	f108 0701 	add.w	r7, r8, #1
 80042d8:	3d98      	subs	r5, #152	@ 0x98
 80042da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80042de:	4444      	add	r4, r8
 80042e0:	42bc      	cmp	r4, r7
 80042e2:	da04      	bge.n	80042ee <__kernel_rem_pio2+0x3ae>
 80042e4:	46a0      	mov	r8, r4
 80042e6:	e6a2      	b.n	800402e <__kernel_rem_pio2+0xee>
 80042e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042ea:	2401      	movs	r4, #1
 80042ec:	e7e6      	b.n	80042bc <__kernel_rem_pio2+0x37c>
 80042ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80042f4:	f7fc fa38 	bl	8000768 <__aeabi_i2d>
 80042f8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80045c0 <__kernel_rem_pio2+0x680>
 80042fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004300:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004304:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004308:	46b2      	mov	sl, r6
 800430a:	f04f 0800 	mov.w	r8, #0
 800430e:	9b05      	ldr	r3, [sp, #20]
 8004310:	4598      	cmp	r8, r3
 8004312:	dd05      	ble.n	8004320 <__kernel_rem_pio2+0x3e0>
 8004314:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004318:	3701      	adds	r7, #1
 800431a:	eca5 7b02 	vstmia	r5!, {d7}
 800431e:	e7df      	b.n	80042e0 <__kernel_rem_pio2+0x3a0>
 8004320:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004324:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004328:	f7fb ffa2 	bl	8000270 <__aeabi_dmul>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004334:	f7fc f8cc 	bl	80004d0 <__adddf3>
 8004338:	f108 0801 	add.w	r8, r8, #1
 800433c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004340:	e7e5      	b.n	800430e <__kernel_rem_pio2+0x3ce>
 8004342:	f1cb 0000 	rsb	r0, fp, #0
 8004346:	ec47 6b10 	vmov	d0, r6, r7
 800434a:	f000 f951 	bl	80045f0 <scalbn>
 800434e:	ec55 4b10 	vmov	r4, r5, d0
 8004352:	4b9d      	ldr	r3, [pc, #628]	@ (80045c8 <__kernel_rem_pio2+0x688>)
 8004354:	2200      	movs	r2, #0
 8004356:	4620      	mov	r0, r4
 8004358:	4629      	mov	r1, r5
 800435a:	f7fc fae3 	bl	8000924 <__aeabi_dcmpge>
 800435e:	b300      	cbz	r0, 80043a2 <__kernel_rem_pio2+0x462>
 8004360:	4b9a      	ldr	r3, [pc, #616]	@ (80045cc <__kernel_rem_pio2+0x68c>)
 8004362:	2200      	movs	r2, #0
 8004364:	4620      	mov	r0, r4
 8004366:	4629      	mov	r1, r5
 8004368:	f7fb ff82 	bl	8000270 <__aeabi_dmul>
 800436c:	f7fc faee 	bl	800094c <__aeabi_d2iz>
 8004370:	4606      	mov	r6, r0
 8004372:	f7fc f9f9 	bl	8000768 <__aeabi_i2d>
 8004376:	4b94      	ldr	r3, [pc, #592]	@ (80045c8 <__kernel_rem_pio2+0x688>)
 8004378:	2200      	movs	r2, #0
 800437a:	f7fb ff79 	bl	8000270 <__aeabi_dmul>
 800437e:	460b      	mov	r3, r1
 8004380:	4602      	mov	r2, r0
 8004382:	4629      	mov	r1, r5
 8004384:	4620      	mov	r0, r4
 8004386:	f7fc f8a1 	bl	80004cc <__aeabi_dsub>
 800438a:	f7fc fadf 	bl	800094c <__aeabi_d2iz>
 800438e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004390:	f10b 0b18 	add.w	fp, fp, #24
 8004394:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004398:	f108 0801 	add.w	r8, r8, #1
 800439c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80043a0:	e722      	b.n	80041e8 <__kernel_rem_pio2+0x2a8>
 80043a2:	4620      	mov	r0, r4
 80043a4:	4629      	mov	r1, r5
 80043a6:	f7fc fad1 	bl	800094c <__aeabi_d2iz>
 80043aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80043ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80043b0:	e71a      	b.n	80041e8 <__kernel_rem_pio2+0x2a8>
 80043b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80043b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80043b8:	f7fc f9d6 	bl	8000768 <__aeabi_i2d>
 80043bc:	4622      	mov	r2, r4
 80043be:	462b      	mov	r3, r5
 80043c0:	f7fb ff56 	bl	8000270 <__aeabi_dmul>
 80043c4:	4652      	mov	r2, sl
 80043c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80043ca:	465b      	mov	r3, fp
 80043cc:	4620      	mov	r0, r4
 80043ce:	4629      	mov	r1, r5
 80043d0:	f7fb ff4e 	bl	8000270 <__aeabi_dmul>
 80043d4:	3e01      	subs	r6, #1
 80043d6:	4604      	mov	r4, r0
 80043d8:	460d      	mov	r5, r1
 80043da:	e718      	b.n	800420e <__kernel_rem_pio2+0x2ce>
 80043dc:	9906      	ldr	r1, [sp, #24]
 80043de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80043e2:	9106      	str	r1, [sp, #24]
 80043e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80043e8:	f7fb ff42 	bl	8000270 <__aeabi_dmul>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4650      	mov	r0, sl
 80043f2:	4659      	mov	r1, fp
 80043f4:	f7fc f86c 	bl	80004d0 <__adddf3>
 80043f8:	3601      	adds	r6, #1
 80043fa:	4682      	mov	sl, r0
 80043fc:	468b      	mov	fp, r1
 80043fe:	9b00      	ldr	r3, [sp, #0]
 8004400:	429e      	cmp	r6, r3
 8004402:	dc01      	bgt.n	8004408 <__kernel_rem_pio2+0x4c8>
 8004404:	42b5      	cmp	r5, r6
 8004406:	dae9      	bge.n	80043dc <__kernel_rem_pio2+0x49c>
 8004408:	ab48      	add	r3, sp, #288	@ 0x120
 800440a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800440e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004412:	3c01      	subs	r4, #1
 8004414:	e6ff      	b.n	8004216 <__kernel_rem_pio2+0x2d6>
 8004416:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004418:	2b02      	cmp	r3, #2
 800441a:	dc0b      	bgt.n	8004434 <__kernel_rem_pio2+0x4f4>
 800441c:	2b00      	cmp	r3, #0
 800441e:	dc39      	bgt.n	8004494 <__kernel_rem_pio2+0x554>
 8004420:	d05d      	beq.n	80044de <__kernel_rem_pio2+0x59e>
 8004422:	9b02      	ldr	r3, [sp, #8]
 8004424:	f003 0007 	and.w	r0, r3, #7
 8004428:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800442c:	ecbd 8b02 	vpop	{d8}
 8004430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004434:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004436:	2b03      	cmp	r3, #3
 8004438:	d1f3      	bne.n	8004422 <__kernel_rem_pio2+0x4e2>
 800443a:	9b05      	ldr	r3, [sp, #20]
 800443c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004440:	eb0d 0403 	add.w	r4, sp, r3
 8004444:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004448:	4625      	mov	r5, r4
 800444a:	46c2      	mov	sl, r8
 800444c:	f1ba 0f00 	cmp.w	sl, #0
 8004450:	f1a5 0508 	sub.w	r5, r5, #8
 8004454:	dc6b      	bgt.n	800452e <__kernel_rem_pio2+0x5ee>
 8004456:	4645      	mov	r5, r8
 8004458:	2d01      	cmp	r5, #1
 800445a:	f1a4 0408 	sub.w	r4, r4, #8
 800445e:	f300 8087 	bgt.w	8004570 <__kernel_rem_pio2+0x630>
 8004462:	9c05      	ldr	r4, [sp, #20]
 8004464:	ab48      	add	r3, sp, #288	@ 0x120
 8004466:	441c      	add	r4, r3
 8004468:	2000      	movs	r0, #0
 800446a:	2100      	movs	r1, #0
 800446c:	f1b8 0f01 	cmp.w	r8, #1
 8004470:	f300 809c 	bgt.w	80045ac <__kernel_rem_pio2+0x66c>
 8004474:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004478:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800447c:	f1b9 0f00 	cmp.w	r9, #0
 8004480:	f040 80a6 	bne.w	80045d0 <__kernel_rem_pio2+0x690>
 8004484:	9b04      	ldr	r3, [sp, #16]
 8004486:	e9c3 7800 	strd	r7, r8, [r3]
 800448a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800448e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004492:	e7c6      	b.n	8004422 <__kernel_rem_pio2+0x4e2>
 8004494:	9d05      	ldr	r5, [sp, #20]
 8004496:	ab48      	add	r3, sp, #288	@ 0x120
 8004498:	441d      	add	r5, r3
 800449a:	4644      	mov	r4, r8
 800449c:	2000      	movs	r0, #0
 800449e:	2100      	movs	r1, #0
 80044a0:	2c00      	cmp	r4, #0
 80044a2:	da35      	bge.n	8004510 <__kernel_rem_pio2+0x5d0>
 80044a4:	f1b9 0f00 	cmp.w	r9, #0
 80044a8:	d038      	beq.n	800451c <__kernel_rem_pio2+0x5dc>
 80044aa:	4602      	mov	r2, r0
 80044ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044b0:	9c04      	ldr	r4, [sp, #16]
 80044b2:	e9c4 2300 	strd	r2, r3, [r4]
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80044be:	f7fc f805 	bl	80004cc <__aeabi_dsub>
 80044c2:	ad4a      	add	r5, sp, #296	@ 0x128
 80044c4:	2401      	movs	r4, #1
 80044c6:	45a0      	cmp	r8, r4
 80044c8:	da2b      	bge.n	8004522 <__kernel_rem_pio2+0x5e2>
 80044ca:	f1b9 0f00 	cmp.w	r9, #0
 80044ce:	d002      	beq.n	80044d6 <__kernel_rem_pio2+0x596>
 80044d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044d4:	4619      	mov	r1, r3
 80044d6:	9b04      	ldr	r3, [sp, #16]
 80044d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80044dc:	e7a1      	b.n	8004422 <__kernel_rem_pio2+0x4e2>
 80044de:	9c05      	ldr	r4, [sp, #20]
 80044e0:	ab48      	add	r3, sp, #288	@ 0x120
 80044e2:	441c      	add	r4, r3
 80044e4:	2000      	movs	r0, #0
 80044e6:	2100      	movs	r1, #0
 80044e8:	f1b8 0f00 	cmp.w	r8, #0
 80044ec:	da09      	bge.n	8004502 <__kernel_rem_pio2+0x5c2>
 80044ee:	f1b9 0f00 	cmp.w	r9, #0
 80044f2:	d002      	beq.n	80044fa <__kernel_rem_pio2+0x5ba>
 80044f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044f8:	4619      	mov	r1, r3
 80044fa:	9b04      	ldr	r3, [sp, #16]
 80044fc:	e9c3 0100 	strd	r0, r1, [r3]
 8004500:	e78f      	b.n	8004422 <__kernel_rem_pio2+0x4e2>
 8004502:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004506:	f7fb ffe3 	bl	80004d0 <__adddf3>
 800450a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800450e:	e7eb      	b.n	80044e8 <__kernel_rem_pio2+0x5a8>
 8004510:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004514:	f7fb ffdc 	bl	80004d0 <__adddf3>
 8004518:	3c01      	subs	r4, #1
 800451a:	e7c1      	b.n	80044a0 <__kernel_rem_pio2+0x560>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	e7c6      	b.n	80044b0 <__kernel_rem_pio2+0x570>
 8004522:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004526:	f7fb ffd3 	bl	80004d0 <__adddf3>
 800452a:	3401      	adds	r4, #1
 800452c:	e7cb      	b.n	80044c6 <__kernel_rem_pio2+0x586>
 800452e:	ed95 7b00 	vldr	d7, [r5]
 8004532:	ed8d 7b00 	vstr	d7, [sp]
 8004536:	ed95 7b02 	vldr	d7, [r5, #8]
 800453a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800453e:	ec53 2b17 	vmov	r2, r3, d7
 8004542:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004546:	f7fb ffc3 	bl	80004d0 <__adddf3>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4606      	mov	r6, r0
 8004550:	460f      	mov	r7, r1
 8004552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004556:	f7fb ffb9 	bl	80004cc <__aeabi_dsub>
 800455a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800455e:	f7fb ffb7 	bl	80004d0 <__adddf3>
 8004562:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004566:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800456a:	e9c5 6700 	strd	r6, r7, [r5]
 800456e:	e76d      	b.n	800444c <__kernel_rem_pio2+0x50c>
 8004570:	ed94 7b00 	vldr	d7, [r4]
 8004574:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004578:	ec51 0b17 	vmov	r0, r1, d7
 800457c:	4652      	mov	r2, sl
 800457e:	465b      	mov	r3, fp
 8004580:	ed8d 7b00 	vstr	d7, [sp]
 8004584:	f7fb ffa4 	bl	80004d0 <__adddf3>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4606      	mov	r6, r0
 800458e:	460f      	mov	r7, r1
 8004590:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004594:	f7fb ff9a 	bl	80004cc <__aeabi_dsub>
 8004598:	4652      	mov	r2, sl
 800459a:	465b      	mov	r3, fp
 800459c:	f7fb ff98 	bl	80004d0 <__adddf3>
 80045a0:	3d01      	subs	r5, #1
 80045a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045a6:	e9c4 6700 	strd	r6, r7, [r4]
 80045aa:	e755      	b.n	8004458 <__kernel_rem_pio2+0x518>
 80045ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80045b0:	f7fb ff8e 	bl	80004d0 <__adddf3>
 80045b4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80045b8:	e758      	b.n	800446c <__kernel_rem_pio2+0x52c>
 80045ba:	bf00      	nop
 80045bc:	f3af 8000 	nop.w
	...
 80045c8:	41700000 	.word	0x41700000
 80045cc:	3e700000 	.word	0x3e700000
 80045d0:	9b04      	ldr	r3, [sp, #16]
 80045d2:	9a04      	ldr	r2, [sp, #16]
 80045d4:	601f      	str	r7, [r3, #0]
 80045d6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80045da:	605c      	str	r4, [r3, #4]
 80045dc:	609d      	str	r5, [r3, #8]
 80045de:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80045e2:	60d3      	str	r3, [r2, #12]
 80045e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80045e8:	6110      	str	r0, [r2, #16]
 80045ea:	6153      	str	r3, [r2, #20]
 80045ec:	e719      	b.n	8004422 <__kernel_rem_pio2+0x4e2>
 80045ee:	bf00      	nop

080045f0 <scalbn>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	ec55 4b10 	vmov	r4, r5, d0
 80045f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80045fa:	4606      	mov	r6, r0
 80045fc:	462b      	mov	r3, r5
 80045fe:	b991      	cbnz	r1, 8004626 <scalbn+0x36>
 8004600:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004604:	4323      	orrs	r3, r4
 8004606:	d03d      	beq.n	8004684 <scalbn+0x94>
 8004608:	4b35      	ldr	r3, [pc, #212]	@ (80046e0 <scalbn+0xf0>)
 800460a:	4620      	mov	r0, r4
 800460c:	4629      	mov	r1, r5
 800460e:	2200      	movs	r2, #0
 8004610:	f7fb fe2e 	bl	8000270 <__aeabi_dmul>
 8004614:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <scalbn+0xf4>)
 8004616:	429e      	cmp	r6, r3
 8004618:	4604      	mov	r4, r0
 800461a:	460d      	mov	r5, r1
 800461c:	da0f      	bge.n	800463e <scalbn+0x4e>
 800461e:	a328      	add	r3, pc, #160	@ (adr r3, 80046c0 <scalbn+0xd0>)
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	e01e      	b.n	8004664 <scalbn+0x74>
 8004626:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800462a:	4291      	cmp	r1, r2
 800462c:	d10b      	bne.n	8004646 <scalbn+0x56>
 800462e:	4622      	mov	r2, r4
 8004630:	4620      	mov	r0, r4
 8004632:	4629      	mov	r1, r5
 8004634:	f7fb ff4c 	bl	80004d0 <__adddf3>
 8004638:	4604      	mov	r4, r0
 800463a:	460d      	mov	r5, r1
 800463c:	e022      	b.n	8004684 <scalbn+0x94>
 800463e:	460b      	mov	r3, r1
 8004640:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004644:	3936      	subs	r1, #54	@ 0x36
 8004646:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800464a:	4296      	cmp	r6, r2
 800464c:	dd0d      	ble.n	800466a <scalbn+0x7a>
 800464e:	2d00      	cmp	r5, #0
 8004650:	a11d      	add	r1, pc, #116	@ (adr r1, 80046c8 <scalbn+0xd8>)
 8004652:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004656:	da02      	bge.n	800465e <scalbn+0x6e>
 8004658:	a11d      	add	r1, pc, #116	@ (adr r1, 80046d0 <scalbn+0xe0>)
 800465a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800465e:	a31a      	add	r3, pc, #104	@ (adr r3, 80046c8 <scalbn+0xd8>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f7fb fe04 	bl	8000270 <__aeabi_dmul>
 8004668:	e7e6      	b.n	8004638 <scalbn+0x48>
 800466a:	1872      	adds	r2, r6, r1
 800466c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004670:	428a      	cmp	r2, r1
 8004672:	dcec      	bgt.n	800464e <scalbn+0x5e>
 8004674:	2a00      	cmp	r2, #0
 8004676:	dd08      	ble.n	800468a <scalbn+0x9a>
 8004678:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800467c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004680:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004684:	ec45 4b10 	vmov	d0, r4, r5
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800468e:	da08      	bge.n	80046a2 <scalbn+0xb2>
 8004690:	2d00      	cmp	r5, #0
 8004692:	a10b      	add	r1, pc, #44	@ (adr r1, 80046c0 <scalbn+0xd0>)
 8004694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004698:	dac1      	bge.n	800461e <scalbn+0x2e>
 800469a:	a10f      	add	r1, pc, #60	@ (adr r1, 80046d8 <scalbn+0xe8>)
 800469c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046a0:	e7bd      	b.n	800461e <scalbn+0x2e>
 80046a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80046a6:	3236      	adds	r2, #54	@ 0x36
 80046a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80046ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80046b0:	4620      	mov	r0, r4
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <scalbn+0xf8>)
 80046b4:	4629      	mov	r1, r5
 80046b6:	2200      	movs	r2, #0
 80046b8:	e7d4      	b.n	8004664 <scalbn+0x74>
 80046ba:	bf00      	nop
 80046bc:	f3af 8000 	nop.w
 80046c0:	c2f8f359 	.word	0xc2f8f359
 80046c4:	01a56e1f 	.word	0x01a56e1f
 80046c8:	8800759c 	.word	0x8800759c
 80046cc:	7e37e43c 	.word	0x7e37e43c
 80046d0:	8800759c 	.word	0x8800759c
 80046d4:	fe37e43c 	.word	0xfe37e43c
 80046d8:	c2f8f359 	.word	0xc2f8f359
 80046dc:	81a56e1f 	.word	0x81a56e1f
 80046e0:	43500000 	.word	0x43500000
 80046e4:	ffff3cb0 	.word	0xffff3cb0
 80046e8:	3c900000 	.word	0x3c900000
 80046ec:	00000000 	.word	0x00000000

080046f0 <floor>:
 80046f0:	ec51 0b10 	vmov	r0, r1, d0
 80046f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80046f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004700:	2e13      	cmp	r6, #19
 8004702:	460c      	mov	r4, r1
 8004704:	4605      	mov	r5, r0
 8004706:	4680      	mov	r8, r0
 8004708:	dc34      	bgt.n	8004774 <floor+0x84>
 800470a:	2e00      	cmp	r6, #0
 800470c:	da17      	bge.n	800473e <floor+0x4e>
 800470e:	a332      	add	r3, pc, #200	@ (adr r3, 80047d8 <floor+0xe8>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fb fedc 	bl	80004d0 <__adddf3>
 8004718:	2200      	movs	r2, #0
 800471a:	2300      	movs	r3, #0
 800471c:	f7fc f90c 	bl	8000938 <__aeabi_dcmpgt>
 8004720:	b150      	cbz	r0, 8004738 <floor+0x48>
 8004722:	2c00      	cmp	r4, #0
 8004724:	da55      	bge.n	80047d2 <floor+0xe2>
 8004726:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800472a:	432c      	orrs	r4, r5
 800472c:	2500      	movs	r5, #0
 800472e:	42ac      	cmp	r4, r5
 8004730:	4c2b      	ldr	r4, [pc, #172]	@ (80047e0 <floor+0xf0>)
 8004732:	bf08      	it	eq
 8004734:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	e023      	b.n	8004786 <floor+0x96>
 800473e:	4f29      	ldr	r7, [pc, #164]	@ (80047e4 <floor+0xf4>)
 8004740:	4137      	asrs	r7, r6
 8004742:	ea01 0307 	and.w	r3, r1, r7
 8004746:	4303      	orrs	r3, r0
 8004748:	d01d      	beq.n	8004786 <floor+0x96>
 800474a:	a323      	add	r3, pc, #140	@ (adr r3, 80047d8 <floor+0xe8>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f7fb febe 	bl	80004d0 <__adddf3>
 8004754:	2200      	movs	r2, #0
 8004756:	2300      	movs	r3, #0
 8004758:	f7fc f8ee 	bl	8000938 <__aeabi_dcmpgt>
 800475c:	2800      	cmp	r0, #0
 800475e:	d0eb      	beq.n	8004738 <floor+0x48>
 8004760:	2c00      	cmp	r4, #0
 8004762:	bfbe      	ittt	lt
 8004764:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004768:	4133      	asrlt	r3, r6
 800476a:	18e4      	addlt	r4, r4, r3
 800476c:	ea24 0407 	bic.w	r4, r4, r7
 8004770:	2500      	movs	r5, #0
 8004772:	e7e1      	b.n	8004738 <floor+0x48>
 8004774:	2e33      	cmp	r6, #51	@ 0x33
 8004776:	dd0a      	ble.n	800478e <floor+0x9e>
 8004778:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800477c:	d103      	bne.n	8004786 <floor+0x96>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	f7fb fea5 	bl	80004d0 <__adddf3>
 8004786:	ec41 0b10 	vmov	d0, r0, r1
 800478a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800478e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004792:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004796:	40df      	lsrs	r7, r3
 8004798:	4207      	tst	r7, r0
 800479a:	d0f4      	beq.n	8004786 <floor+0x96>
 800479c:	a30e      	add	r3, pc, #56	@ (adr r3, 80047d8 <floor+0xe8>)
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f7fb fe95 	bl	80004d0 <__adddf3>
 80047a6:	2200      	movs	r2, #0
 80047a8:	2300      	movs	r3, #0
 80047aa:	f7fc f8c5 	bl	8000938 <__aeabi_dcmpgt>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d0c2      	beq.n	8004738 <floor+0x48>
 80047b2:	2c00      	cmp	r4, #0
 80047b4:	da0a      	bge.n	80047cc <floor+0xdc>
 80047b6:	2e14      	cmp	r6, #20
 80047b8:	d101      	bne.n	80047be <floor+0xce>
 80047ba:	3401      	adds	r4, #1
 80047bc:	e006      	b.n	80047cc <floor+0xdc>
 80047be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80047c2:	2301      	movs	r3, #1
 80047c4:	40b3      	lsls	r3, r6
 80047c6:	441d      	add	r5, r3
 80047c8:	4545      	cmp	r5, r8
 80047ca:	d3f6      	bcc.n	80047ba <floor+0xca>
 80047cc:	ea25 0507 	bic.w	r5, r5, r7
 80047d0:	e7b2      	b.n	8004738 <floor+0x48>
 80047d2:	2500      	movs	r5, #0
 80047d4:	462c      	mov	r4, r5
 80047d6:	e7af      	b.n	8004738 <floor+0x48>
 80047d8:	8800759c 	.word	0x8800759c
 80047dc:	7e37e43c 	.word	0x7e37e43c
 80047e0:	bff00000 	.word	0xbff00000
 80047e4:	000fffff 	.word	0x000fffff

080047e8 <_init>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	bf00      	nop
 80047ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ee:	bc08      	pop	{r3}
 80047f0:	469e      	mov	lr, r3
 80047f2:	4770      	bx	lr

080047f4 <_fini>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr
