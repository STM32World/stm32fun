
stm32world_dac1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003090  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003220  08003220  00004220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c4  080032c4  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080032c4  080032c4  000042c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032cc  080032cc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032cc  080032cc  000042cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032d0  080032d0  000042d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080032d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000414  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000047c  2000047c  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122f8  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025ac  00000000  00000000  00017390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00009054  00000000  00000000  0001993c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e30  00000000  00000000  00022990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000acd  00000000  00000000  000237c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000205b2  00000000  00000000  0002428d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a22  00000000  00000000  0004483f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3a8c  00000000  00000000  00059261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0011cced  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002d10  00000000  00000000  0011cd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  0011fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003208 	.word	0x08003208

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003208 	.word	0x08003208

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	2400      	movs	r4, #0
 8000566:	9405      	str	r4, [sp, #20]
 8000568:	9406      	str	r4, [sp, #24]
 800056a:	9407      	str	r4, [sp, #28]
 800056c:	9408      	str	r4, [sp, #32]
 800056e:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	9401      	str	r4, [sp, #4]
 8000572:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <MX_GPIO_Init+0x8c>)
 8000574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000576:	f042 0204 	orr.w	r2, r2, #4
 800057a:	631a      	str	r2, [r3, #48]	@ 0x30
 800057c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800057e:	f002 0204 	and.w	r2, r2, #4
 8000582:	9201      	str	r2, [sp, #4]
 8000584:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	9402      	str	r4, [sp, #8]
 8000588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800058e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000592:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000596:	9202      	str	r2, [sp, #8]
 8000598:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	9403      	str	r4, [sp, #12]
 800059c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059e:	f042 0201 	orr.w	r2, r2, #1
 80005a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a6:	f002 0201 	and.w	r2, r2, #1
 80005aa:	9203      	str	r2, [sp, #12]
 80005ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	9404      	str	r4, [sp, #16]
 80005b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b2:	f042 0202 	orr.w	r2, r2, #2
 80005b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	9304      	str	r3, [sp, #16]
 80005c0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005c2:	4d0b      	ldr	r5, [pc, #44]	@ (80005f0 <MX_GPIO_Init+0x90>)
 80005c4:	4622      	mov	r2, r4
 80005c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ca:	4628      	mov	r0, r5
 80005cc:	f000 ffe6 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005de:	a905      	add	r1, sp, #20
 80005e0:	4628      	mov	r0, r5
 80005e2:	f000 fee5 	bl	80013b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e6:	b00b      	add	sp, #44	@ 0x2c
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020800 	.word	0x40020800

080005f4 <MX_DMA_Init>:
{
 80005f4:	b500      	push	{lr}
 80005f6:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005f8:	2100      	movs	r1, #0
 80005fa:	9101      	str	r1, [sp, #4]
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_DMA_Init+0x30>)
 80005fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000600:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000604:	631a      	str	r2, [r3, #48]	@ 0x30
 8000606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000610:	460a      	mov	r2, r1
 8000612:	2010      	movs	r0, #16
 8000614:	f000 fb70 	bl	8000cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000618:	2010      	movs	r0, #16
 800061a:	f000 fb7d 	bl	8000d18 <HAL_NVIC_EnableIRQ>
}
 800061e:	b003      	add	sp, #12
 8000620:	f85d fb04 	ldr.w	pc, [sp], #4
 8000624:	40023800 	.word	0x40023800

08000628 <_write>:
	if (fd == 1 || fd == 2) {
 8000628:	3801      	subs	r0, #1
 800062a:	2801      	cmp	r0, #1
 800062c:	d80a      	bhi.n	8000644 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800062e:	b510      	push	{r4, lr}
 8000630:	4614      	mov	r4, r2
		hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8000632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000636:	b292      	uxth	r2, r2
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <_write+0x28>)
 800063a:	f001 fdf0 	bl	800221e <HAL_UART_Transmit>
		if (hstatus == HAL_OK)
 800063e:	b920      	cbnz	r0, 800064a <_write+0x22>
			return len;
 8000640:	4620      	mov	r0, r4
}
 8000642:	bd10      	pop	{r4, pc}
	return -1;
 8000644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000648:	4770      	bx	lr
			return -1;
 800064a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800064e:	e7f8      	b.n	8000642 <_write+0x1a>
 8000650:	20000224 	.word	0x20000224

08000654 <HAL_GetTick>:
	return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	@ (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	2000032c 	.word	0x2000032c

08000660 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == htim6.Instance) {
 8000660:	6802      	ldr	r2, [r0, #0]
 8000662:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	429a      	cmp	r2, r3
 8000668:	d000      	beq.n	800066c <HAL_TIM_PeriodElapsedCallback+0xc>
}
 800066a:	4770      	bx	lr
		++cb_cnt;
 800066c:	4a03      	ldr	r2, [pc, #12]	@ (800067c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800066e:	6813      	ldr	r3, [r2, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	e7f9      	b.n	800066a <HAL_TIM_PeriodElapsedCallback+0xa>
 8000676:	bf00      	nop
 8000678:	2000026c 	.word	0x2000026c
 800067c:	20000220 	.word	0x20000220

08000680 <HAL_DAC_ConvCpltCallbackCh1>:
	++cb_full;
 8000680:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
 8000682:	6813      	ldr	r3, [r2, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < DMA_BUFFER_SIZE; ++i) {
 8000688:	2300      	movs	r3, #0
 800068a:	e006      	b.n	800069a <HAL_DAC_ConvCpltCallbackCh1+0x1a>
		buffer[i] = 40 * i;
 800068c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000690:	00ca      	lsls	r2, r1, #3
 8000692:	4904      	ldr	r1, [pc, #16]	@ (80006a4 <HAL_DAC_ConvCpltCallbackCh1+0x24>)
 8000694:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < DMA_BUFFER_SIZE; ++i) {
 8000698:	3301      	adds	r3, #1
 800069a:	2b63      	cmp	r3, #99	@ 0x63
 800069c:	ddf6      	ble.n	800068c <HAL_DAC_ConvCpltCallbackCh1+0xc>
}
 800069e:	4770      	bx	lr
 80006a0:	2000021c 	.word	0x2000021c
 80006a4:	2000014c 	.word	0x2000014c

080006a8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
	++cb_half;
 80006a8:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
 80006aa:	6813      	ldr	r3, [r2, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < DMA_BUFFER_SIZE; ++i) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	e006      	b.n	80006c2 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1a>
		buffer[i] = 40 * i;
 80006b4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80006b8:	00ca      	lsls	r2, r1, #3
 80006ba:	4904      	ldr	r1, [pc, #16]	@ (80006cc <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>)
 80006bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < DMA_BUFFER_SIZE; ++i) {
 80006c0:	3301      	adds	r3, #1
 80006c2:	2b63      	cmp	r3, #99	@ 0x63
 80006c4:	ddf6      	ble.n	80006b4 <HAL_DAC_ConvHalfCpltCallbackCh1+0xc>
}
 80006c6:	4770      	bx	lr
 80006c8:	20000218 	.word	0x20000218
 80006cc:	20000084 	.word	0x20000084

080006d0 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006d2:	e7fe      	b.n	80006d2 <Error_Handler+0x2>

080006d4 <MX_DAC_Init>:
{
 80006d4:	b500      	push	{lr}
 80006d6:	b083      	sub	sp, #12
  DAC_ChannelConfTypeDef sConfig = {0};
 80006d8:	2300      	movs	r3, #0
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	9301      	str	r3, [sp, #4]
  hdac.Instance = DAC;
 80006de:	480b      	ldr	r0, [pc, #44]	@ (800070c <MX_DAC_Init+0x38>)
 80006e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_DAC_Init+0x3c>)
 80006e2:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006e4:	f000 fb30 	bl	8000d48 <HAL_DAC_Init>
 80006e8:	b958      	cbnz	r0, 8000702 <MX_DAC_Init+0x2e>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80006ea:	2304      	movs	r3, #4
 80006ec:	9300      	str	r3, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006ee:	2200      	movs	r2, #0
 80006f0:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006f2:	4669      	mov	r1, sp
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_DAC_Init+0x38>)
 80006f6:	f000 fc02 	bl	8000efe <HAL_DAC_ConfigChannel>
 80006fa:	b920      	cbnz	r0, 8000706 <MX_DAC_Init+0x32>
}
 80006fc:	b003      	add	sp, #12
 80006fe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000702:	f7ff ffe5 	bl	80006d0 <Error_Handler>
    Error_Handler();
 8000706:	f7ff ffe3 	bl	80006d0 <Error_Handler>
 800070a:	bf00      	nop
 800070c:	20000314 	.word	0x20000314
 8000710:	40007400 	.word	0x40007400

08000714 <MX_USART1_UART_Init>:
{
 8000714:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000716:	480a      	ldr	r0, [pc, #40]	@ (8000740 <MX_USART1_UART_Init+0x2c>)
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <MX_USART1_UART_Init+0x30>)
 800071a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800071c:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000720:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	2300      	movs	r3, #0
 8000724:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000726:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000728:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800072a:	220c      	movs	r2, #12
 800072c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000732:	f001 fd44 	bl	80021be <HAL_UART_Init>
 8000736:	b900      	cbnz	r0, 800073a <MX_USART1_UART_Init+0x26>
}
 8000738:	bd08      	pop	{r3, pc}
    Error_Handler();
 800073a:	f7ff ffc9 	bl	80006d0 <Error_Handler>
 800073e:	bf00      	nop
 8000740:	20000224 	.word	0x20000224
 8000744:	40011000 	.word	0x40011000

08000748 <MX_TIM6_Init>:
{
 8000748:	b500      	push	{lr}
 800074a:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	2300      	movs	r3, #0
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	9301      	str	r3, [sp, #4]
  htim6.Instance = TIM6;
 8000752:	480e      	ldr	r0, [pc, #56]	@ (800078c <MX_TIM6_Init+0x44>)
 8000754:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <MX_TIM6_Init+0x48>)
 8000756:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 83;
 8000758:	2253      	movs	r2, #83	@ 0x53
 800075a:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075c:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 99;
 800075e:	2263      	movs	r2, #99	@ 0x63
 8000760:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000762:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000764:	f001 fbbe 	bl	8001ee4 <HAL_TIM_Base_Init>
 8000768:	b958      	cbnz	r0, 8000782 <MX_TIM6_Init+0x3a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800076a:	2320      	movs	r3, #32
 800076c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000772:	4669      	mov	r1, sp
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_TIM6_Init+0x44>)
 8000776:	f001 fbe1 	bl	8001f3c <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	b920      	cbnz	r0, 8000786 <MX_TIM6_Init+0x3e>
}
 800077c:	b003      	add	sp, #12
 800077e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000782:	f7ff ffa5 	bl	80006d0 <Error_Handler>
    Error_Handler();
 8000786:	f7ff ffa3 	bl	80006d0 <Error_Handler>
 800078a:	bf00      	nop
 800078c:	2000026c 	.word	0x2000026c
 8000790:	40001000 	.word	0x40001000

08000794 <SystemClock_Config>:
{
 8000794:	b500      	push	{lr}
 8000796:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000798:	2230      	movs	r2, #48	@ 0x30
 800079a:	2100      	movs	r1, #0
 800079c:	a808      	add	r0, sp, #32
 800079e:	f001 ffaf 	bl	8002700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a2:	2300      	movs	r3, #0
 80007a4:	9303      	str	r3, [sp, #12]
 80007a6:	9304      	str	r3, [sp, #16]
 80007a8:	9305      	str	r3, [sp, #20]
 80007aa:	9306      	str	r3, [sp, #24]
 80007ac:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	4a20      	ldr	r2, [pc, #128]	@ (8000834 <SystemClock_Config+0xa0>)
 80007b2:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80007b4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80007b8:	6411      	str	r1, [r2, #64]	@ 0x40
 80007ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80007bc:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	9302      	str	r3, [sp, #8]
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <SystemClock_Config+0xa4>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007da:	2301      	movs	r3, #1
 80007dc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e2:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007ec:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ee:	2208      	movs	r2, #8
 80007f0:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007f2:	22a8      	movs	r2, #168	@ 0xa8
 80007f4:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	a808      	add	r0, sp, #32
 80007fe:	f000 fed3 	bl	80015a8 <HAL_RCC_OscConfig>
 8000802:	b998      	cbnz	r0, 800082c <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000810:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000814:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800081c:	2105      	movs	r1, #5
 800081e:	a803      	add	r0, sp, #12
 8000820:	f001 f926 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000824:	b920      	cbnz	r0, 8000830 <SystemClock_Config+0x9c>
}
 8000826:	b015      	add	sp, #84	@ 0x54
 8000828:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800082c:	f7ff ff50 	bl	80006d0 <Error_Handler>
    Error_Handler();
 8000830:	f7ff ff4e 	bl	80006d0 <Error_Handler>
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <main>:
{
 800083c:	b530      	push	{r4, r5, lr}
 800083e:	b083      	sub	sp, #12
  HAL_Init();
 8000840:	f000 f9e0 	bl	8000c04 <HAL_Init>
  SystemClock_Config();
 8000844:	f7ff ffa6 	bl	8000794 <SystemClock_Config>
  MX_GPIO_Init();
 8000848:	f7ff fe8a 	bl	8000560 <MX_GPIO_Init>
  MX_DMA_Init();
 800084c:	f7ff fed2 	bl	80005f4 <MX_DMA_Init>
  MX_DAC_Init();
 8000850:	f7ff ff40 	bl	80006d4 <MX_DAC_Init>
  MX_USART1_UART_Init();
 8000854:	f7ff ff5e 	bl	8000714 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000858:	f7ff ff76 	bl	8000748 <MX_TIM6_Init>
	printf("\n\n\n\n--------\nStarting\n");
 800085c:	4816      	ldr	r0, [pc, #88]	@ (80008b8 <main+0x7c>)
 800085e:	f001 fe6f 	bl	8002540 <puts>
	HAL_TIM_Base_Start_IT(&htim6);
 8000862:	4816      	ldr	r0, [pc, #88]	@ (80008bc <main+0x80>)
 8000864:	f001 f9da 	bl	8001c1c <HAL_TIM_Base_Start_IT>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)&dma_buffer, 2 * DMA_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000868:	2100      	movs	r1, #0
 800086a:	9100      	str	r1, [sp, #0]
 800086c:	23c8      	movs	r3, #200	@ 0xc8
 800086e:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <main+0x84>)
 8000870:	4814      	ldr	r0, [pc, #80]	@ (80008c4 <main+0x88>)
 8000872:	f000 fa7b 	bl	8000d6c <HAL_DAC_Start_DMA>
	uint32_t now = 0, next_tick = 1000;
 8000876:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800087a:	e018      	b.n	80008ae <main+0x72>
			printf("Tick %lu (loop = %lu cb = %lu full = %lu half = %lu)\n", now / 1000, loop_cnt, cb_cnt, cb_full, cb_half);
 800087c:	4d12      	ldr	r5, [pc, #72]	@ (80008c8 <main+0x8c>)
 800087e:	4913      	ldr	r1, [pc, #76]	@ (80008cc <main+0x90>)
 8000880:	fba1 3104 	umull	r3, r1, r1, r4
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <main+0x94>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <main+0x98>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <main+0x9c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	682a      	ldr	r2, [r5, #0]
 8000896:	0989      	lsrs	r1, r1, #6
 8000898:	4810      	ldr	r0, [pc, #64]	@ (80008dc <main+0xa0>)
 800089a:	f001 fde9 	bl	8002470 <iprintf>
			loop_cnt = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	602b      	str	r3, [r5, #0]
			next_tick = now + 1000;
 80008a2:	f504 717a 	add.w	r1, r4, #1000	@ 0x3e8
		++loop_cnt;
 80008a6:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <main+0x8c>)
 80008a8:	6813      	ldr	r3, [r2, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	6013      	str	r3, [r2, #0]
	return uwTick;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <main+0xa4>)
 80008b0:	681c      	ldr	r4, [r3, #0]
		if (now >= next_tick) {
 80008b2:	42a1      	cmp	r1, r4
 80008b4:	d8f7      	bhi.n	80008a6 <main+0x6a>
 80008b6:	e7e1      	b.n	800087c <main+0x40>
 80008b8:	08003220 	.word	0x08003220
 80008bc:	2000026c 	.word	0x2000026c
 80008c0:	20000084 	.word	0x20000084
 80008c4:	20000314 	.word	0x20000314
 80008c8:	20000214 	.word	0x20000214
 80008cc:	10624dd3 	.word	0x10624dd3
 80008d0:	20000218 	.word	0x20000218
 80008d4:	2000021c 	.word	0x2000021c
 80008d8:	20000220 	.word	0x20000220
 80008dc:	08003238 	.word	0x08003238
 80008e0:	2000032c 	.word	0x2000032c

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2100      	movs	r1, #0
 80008e8:	9100      	str	r1, [sp, #0]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_MspInit+0x34>)
 80008ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80008f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80008f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008f6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80008fa:	9200      	str	r2, [sp, #0]
 80008fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	9101      	str	r1, [sp, #4]
 8000900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000902:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000906:	641a      	str	r2, [r3, #64]	@ 0x40
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	b002      	add	sp, #8
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800091c:	b530      	push	{r4, r5, lr}
 800091e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	2300      	movs	r3, #0
 8000922:	9303      	str	r3, [sp, #12]
 8000924:	9304      	str	r3, [sp, #16]
 8000926:	9305      	str	r3, [sp, #20]
 8000928:	9306      	str	r3, [sp, #24]
 800092a:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 800092c:	6802      	ldr	r2, [r0, #0]
 800092e:	4b27      	ldr	r3, [pc, #156]	@ (80009cc <HAL_DAC_MspInit+0xb0>)
 8000930:	429a      	cmp	r2, r3
 8000932:	d001      	beq.n	8000938 <HAL_DAC_MspInit+0x1c>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000934:	b009      	add	sp, #36	@ 0x24
 8000936:	bd30      	pop	{r4, r5, pc}
 8000938:	4604      	mov	r4, r0
    __HAL_RCC_DAC_CLK_ENABLE();
 800093a:	2500      	movs	r5, #0
 800093c:	9501      	str	r5, [sp, #4]
 800093e:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 8000942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000944:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000948:	641a      	str	r2, [r3, #64]	@ 0x40
 800094a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094c:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8000950:	9201      	str	r2, [sp, #4]
 8000952:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	9502      	str	r5, [sp, #8]
 8000956:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000958:	f042 0201 	orr.w	r2, r2, #1
 800095c:	631a      	str	r2, [r3, #48]	@ 0x30
 800095e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000968:	2310      	movs	r3, #16
 800096a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096c:	2303      	movs	r3, #3
 800096e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	a903      	add	r1, sp, #12
 8000972:	4817      	ldr	r0, [pc, #92]	@ (80009d0 <HAL_DAC_MspInit+0xb4>)
 8000974:	f000 fd1c 	bl	80013b0 <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 8000978:	4816      	ldr	r0, [pc, #88]	@ (80009d4 <HAL_DAC_MspInit+0xb8>)
 800097a:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <HAL_DAC_MspInit+0xbc>)
 800097c:	6003      	str	r3, [r0, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800097e:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 8000982:	6043      	str	r3, [r0, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000984:	2340      	movs	r3, #64	@ 0x40
 8000986:	6083      	str	r3, [r0, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000988:	60c5      	str	r5, [r0, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800098a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800098e:	6103      	str	r3, [r0, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000990:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000994:	6143      	str	r3, [r0, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000996:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099a:	6183      	str	r3, [r0, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800099c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a0:	61c3      	str	r3, [r0, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80009a2:	6205      	str	r5, [r0, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009a4:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80009a6:	f000 fb79 	bl	800109c <HAL_DMA_Init>
 80009aa:	b958      	cbnz	r0, 80009c4 <HAL_DAC_MspInit+0xa8>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <HAL_DAC_MspInit+0xb8>)
 80009ae:	60a3      	str	r3, [r4, #8]
 80009b0:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	4611      	mov	r1, r2
 80009b6:	2036      	movs	r0, #54	@ 0x36
 80009b8:	f000 f99e 	bl	8000cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009bc:	2036      	movs	r0, #54	@ 0x36
 80009be:	f000 f9ab 	bl	8000d18 <HAL_NVIC_EnableIRQ>
}
 80009c2:	e7b7      	b.n	8000934 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 80009c4:	f7ff fe84 	bl	80006d0 <Error_Handler>
 80009c8:	e7f0      	b.n	80009ac <HAL_DAC_MspInit+0x90>
 80009ca:	bf00      	nop
 80009cc:	40007400 	.word	0x40007400
 80009d0:	40020000 	.word	0x40020000
 80009d4:	200002b4 	.word	0x200002b4
 80009d8:	40026088 	.word	0x40026088

080009dc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 80009dc:	6802      	ldr	r2, [r0, #0]
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d000      	beq.n	80009e6 <HAL_TIM_Base_MspInit+0xa>
 80009e4:	4770      	bx	lr
{
 80009e6:	b500      	push	{lr}
 80009e8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009ea:	2100      	movs	r1, #0
 80009ec:	9101      	str	r1, [sp, #4]
 80009ee:	f503 330a 	add.w	r3, r3, #141312	@ 0x22800
 80009f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f4:	f042 0210 	orr.w	r2, r2, #16
 80009f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a04:	460a      	mov	r2, r1
 8000a06:	2036      	movs	r0, #54	@ 0x36
 8000a08:	f000 f976 	bl	8000cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a0c:	2036      	movs	r0, #54	@ 0x36
 8000a0e:	f000 f983 	bl	8000d18 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000a12:	b003      	add	sp, #12
 8000a14:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a18:	40001000 	.word	0x40001000

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b500      	push	{lr}
 8000a1e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	2300      	movs	r3, #0
 8000a22:	9303      	str	r3, [sp, #12]
 8000a24:	9304      	str	r3, [sp, #16]
 8000a26:	9305      	str	r3, [sp, #20]
 8000a28:	9306      	str	r3, [sp, #24]
 8000a2a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000a2c:	6802      	ldr	r2, [r0, #0]
 8000a2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000a32:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d002      	beq.n	8000a40 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a3a:	b009      	add	sp, #36	@ 0x24
 8000a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a40:	2100      	movs	r1, #0
 8000a42:	9101      	str	r1, [sp, #4]
 8000a44:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a4a:	f042 0210 	orr.w	r2, r2, #16
 8000a4e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a52:	f002 0210 	and.w	r2, r2, #16
 8000a56:	9201      	str	r2, [sp, #4]
 8000a58:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	9102      	str	r1, [sp, #8]
 8000a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a5e:	f042 0201 	orr.w	r2, r2, #1
 8000a62:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	9302      	str	r3, [sp, #8]
 8000a6c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	a903      	add	r1, sp, #12
 8000a82:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <HAL_UART_MspInit+0x70>)
 8000a84:	f000 fc94 	bl	80013b0 <HAL_GPIO_Init>
}
 8000a88:	e7d7      	b.n	8000a3a <HAL_UART_MspInit+0x1e>
 8000a8a:	bf00      	nop
 8000a8c:	40020000 	.word	0x40020000

08000a90 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler>

08000a92 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler>

08000a94 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler>

08000a96 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler>

08000a98 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler>

08000a9a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa2:	f000 f8c9 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bd08      	pop	{r3, pc}

08000aa8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000aa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000aaa:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <DMA1_Stream5_IRQHandler+0xc>)
 8000aac:	f000 fb92 	bl	80011d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ab0:	bd08      	pop	{r3, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200002b4 	.word	0x200002b4

08000ab8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ab8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8000aba:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <TIM6_DAC_IRQHandler+0x10>)
 8000abc:	f000 f9e9 	bl	8000e92 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8000ac0:	4802      	ldr	r0, [pc, #8]	@ (8000acc <TIM6_DAC_IRQHandler+0x14>)
 8000ac2:	f001 f8f3 	bl	8001cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ac6:	bd08      	pop	{r3, pc}
 8000ac8:	20000314 	.word	0x20000314
 8000acc:	2000026c 	.word	0x2000026c

08000ad0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	e006      	b.n	8000ae8 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000ada:	f3af 8000 	nop.w
 8000ade:	4621      	mov	r1, r4
 8000ae0:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae4:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000ae6:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae8:	42b5      	cmp	r5, r6
 8000aea:	dbf6      	blt.n	8000ada <_read+0xa>
  }

  return len;
}
 8000aec:	4630      	mov	r0, r6
 8000aee:	bd70      	pop	{r4, r5, r6, pc}

08000af0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000af4:	4770      	bx	lr

08000af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afa:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000afc:	2000      	movs	r0, #0
 8000afe:	4770      	bx	lr

08000b00 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000b00:	2001      	movs	r0, #1
 8000b02:	4770      	bx	lr

08000b04 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000b04:	2000      	movs	r0, #0
 8000b06:	4770      	bx	lr

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b40 <_sbrk+0x38>)
 8000b0e:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	480d      	ldr	r0, [pc, #52]	@ (8000b48 <_sbrk+0x40>)
 8000b12:	6800      	ldr	r0, [r0, #0]
 8000b14:	b140      	cbz	r0, 8000b28 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <_sbrk+0x40>)
 8000b18:	6800      	ldr	r0, [r0, #0]
 8000b1a:	4403      	add	r3, r0
 8000b1c:	1a52      	subs	r2, r2, r1
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d806      	bhi.n	8000b30 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000b22:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <_sbrk+0x40>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000b26:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <_sbrk+0x40>)
 8000b2a:	4c08      	ldr	r4, [pc, #32]	@ (8000b4c <_sbrk+0x44>)
 8000b2c:	6004      	str	r4, [r0, #0]
 8000b2e:	e7f2      	b.n	8000b16 <_sbrk+0xe>
    errno = ENOMEM;
 8000b30:	f001 fe34 	bl	800279c <__errno>
 8000b34:	230c      	movs	r3, #12
 8000b36:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b3c:	e7f3      	b.n	8000b26 <_sbrk+0x1e>
 8000b3e:	bf00      	nop
 8000b40:	20020000 	.word	0x20020000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	20000328 	.word	0x20000328
 8000b4c:	20000480 	.word	0x20000480

08000b50 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4a03      	ldr	r2, [pc, #12]	@ (8000b60 <SystemInit+0x10>)
 8000b52:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000b56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b68:	f7ff fff2 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f001 fe09 	bl	80027a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fe51 	bl	800083c <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ba8:	080032d4 	.word	0x080032d4
  ldr r2, =_sbss
 8000bac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bb0:	2000047c 	.word	0x2000047c

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_InitTick+0x40>)
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <HAL_InitTick+0x44>)
 8000bca:	6810      	ldr	r0, [r2, #0]
 8000bcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bd0:	f000 f8a6 	bl	8000d20 <HAL_SYSTICK_Config>
 8000bd4:	b968      	cbnz	r0, 8000bf2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	2c0f      	cmp	r4, #15
 8000bd8:	d901      	bls.n	8000bde <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000bda:	2001      	movs	r0, #1
 8000bdc:	e00a      	b.n	8000bf4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bde:	2200      	movs	r2, #0
 8000be0:	4621      	mov	r1, r4
 8000be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 f887 	bl	8000cf8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_InitTick+0x48>)
 8000bec:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000bee:	2000      	movs	r0, #0
 8000bf0:	e000      	b.n	8000bf4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000bf2:	2001      	movs	r0, #1
}
 8000bf4:	bd10      	pop	{r4, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000004 	.word	0x20000004
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000008 	.word	0x20000008

08000c04 <HAL_Init>:
{
 8000c04:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c06:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <HAL_Init+0x30>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c0e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c16:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c1e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f857 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	200f      	movs	r0, #15
 8000c28:	f7ff ffc6 	bl	8000bb8 <HAL_InitTick>
  HAL_MspInit();
 8000c2c:	f7ff fe5a 	bl	80008e4 <HAL_MspInit>
}
 8000c30:	2000      	movs	r0, #0
 8000c32:	bd08      	pop	{r3, pc}
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c38:	4a03      	ldr	r2, [pc, #12]	@ (8000c48 <HAL_IncTick+0x10>)
 8000c3a:	6811      	ldr	r1, [r2, #0]
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <HAL_IncTick+0x14>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	440b      	add	r3, r1
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2000032c 	.word	0x2000032c
 8000c4c:	20000004 	.word	0x20000004

08000c50 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000c50:	2800      	cmp	r0, #0
 8000c52:	db07      	blt.n	8000c64 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c54:	f000 021f 	and.w	r2, r0, #31
 8000c58:	0940      	lsrs	r0, r0, #5
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	4093      	lsls	r3, r2
 8000c5e:	4a02      	ldr	r2, [pc, #8]	@ (8000c68 <__NVIC_EnableIRQ+0x18>)
 8000c60:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	db08      	blt.n	8000c82 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	0109      	lsls	r1, r1, #4
 8000c72:	b2c9      	uxtb	r1, r1
 8000c74:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000c78:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000c7c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000c80:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	f000 000f 	and.w	r0, r0, #15
 8000c86:	0109      	lsls	r1, r1, #4
 8000c88:	b2c9      	uxtb	r1, r1
 8000c8a:	4b01      	ldr	r3, [pc, #4]	@ (8000c90 <__NVIC_SetPriority+0x24>)
 8000c8c:	5419      	strb	r1, [r3, r0]
  }
}
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed14 	.word	0xe000ed14

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c96:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9a:	f1c0 0c07 	rsb	ip, r0, #7
 8000c9e:	f1bc 0f04 	cmp.w	ip, #4
 8000ca2:	bf28      	it	cs
 8000ca4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca8:	1d03      	adds	r3, r0, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d90f      	bls.n	8000cce <NVIC_EncodePriority+0x3a>
 8000cae:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000cb4:	fa0e f00c 	lsl.w	r0, lr, ip
 8000cb8:	ea21 0100 	bic.w	r1, r1, r0
 8000cbc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbe:	fa0e fe03 	lsl.w	lr, lr, r3
 8000cc2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000cc6:	ea41 0002 	orr.w	r0, r1, r2
 8000cca:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e7ee      	b.n	8000cb0 <NVIC_EncodePriority+0x1c>
	...

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cd6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000cdc:	041b      	lsls	r3, r3, #16
 8000cde:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	0200      	lsls	r0, r0, #8
 8000ce2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000cf0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf8:	b510      	push	{r4, lr}
 8000cfa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <HAL_NVIC_SetPriority+0x1c>)
 8000cfe:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000d04:	f7ff ffc6 	bl	8000c94 <NVIC_EncodePriority>
 8000d08:	4601      	mov	r1, r0
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f7ff ffae 	bl	8000c6c <__NVIC_SetPriority>
}
 8000d10:	bd10      	pop	{r4, pc}
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1a:	f7ff ff99 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000d1e:	bd08      	pop	{r3, pc}

08000d20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	3801      	subs	r0, #1
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d26:	d20b      	bcs.n	8000d40 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000d2c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <HAL_SYSTICK_Config+0x24>)
 8000d30:	21f0      	movs	r1, #240	@ 0xf0
 8000d32:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d36:	2000      	movs	r0, #0
 8000d38:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d40:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000d48:	b170      	cbz	r0, 8000d68 <HAL_DAC_Init+0x20>
{
 8000d4a:	b510      	push	{r4, lr}
 8000d4c:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000d4e:	7903      	ldrb	r3, [r0, #4]
 8000d50:	b133      	cbz	r3, 8000d60 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d52:	2302      	movs	r3, #2
 8000d54:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d56:	2000      	movs	r0, #0
 8000d58:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8000d5e:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8000d60:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8000d62:	f7ff fddb 	bl	800091c <HAL_DAC_MspInit>
 8000d66:	e7f4      	b.n	8000d52 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8000d68:	2001      	movs	r0, #1
}
 8000d6a:	4770      	bx	lr

08000d6c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	460d      	mov	r5, r1
 8000d70:	4611      	mov	r1, r2
 8000d72:	9a04      	ldr	r2, [sp, #16]
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d061      	beq.n	8000e3c <HAL_DAC_Start_DMA+0xd0>
 8000d78:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d7a:	7940      	ldrb	r0, [r0, #5]
 8000d7c:	2801      	cmp	r0, #1
 8000d7e:	d05f      	beq.n	8000e40 <HAL_DAC_Start_DMA+0xd4>
 8000d80:	2001      	movs	r0, #1
 8000d82:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d84:	2002      	movs	r0, #2
 8000d86:	7120      	strb	r0, [r4, #4]

  if (Channel == DAC_CHANNEL_1)
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d12f      	bne.n	8000dec <HAL_DAC_Start_DMA+0x80>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000d8c:	68a0      	ldr	r0, [r4, #8]
 8000d8e:	4e2d      	ldr	r6, [pc, #180]	@ (8000e44 <HAL_DAC_Start_DMA+0xd8>)
 8000d90:	63c6      	str	r6, [r0, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000d92:	68a0      	ldr	r0, [r4, #8]
 8000d94:	4e2c      	ldr	r6, [pc, #176]	@ (8000e48 <HAL_DAC_Start_DMA+0xdc>)
 8000d96:	6406      	str	r6, [r0, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000d98:	68a0      	ldr	r0, [r4, #8]
 8000d9a:	4e2c      	ldr	r6, [pc, #176]	@ (8000e4c <HAL_DAC_Start_DMA+0xe0>)
 8000d9c:	64c6      	str	r6, [r0, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000d9e:	6826      	ldr	r6, [r4, #0]
 8000da0:	6830      	ldr	r0, [r6, #0]
 8000da2:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8000da6:	6030      	str	r0, [r6, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000da8:	b122      	cbz	r2, 8000db4 <HAL_DAC_Start_DMA+0x48>
 8000daa:	2a04      	cmp	r2, #4
 8000dac:	d01b      	beq.n	8000de6 <HAL_DAC_Start_DMA+0x7a>
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
        break;
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000dae:	6822      	ldr	r2, [r4, #0]
 8000db0:	3210      	adds	r2, #16
        break;
 8000db2:	e001      	b.n	8000db8 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000db4:	6822      	ldr	r2, [r4, #0]
 8000db6:	3208      	adds	r2, #8
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d131      	bne.n	8000e20 <HAL_DAC_Start_DMA+0xb4>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000dbc:	6826      	ldr	r6, [r4, #0]
 8000dbe:	6830      	ldr	r0, [r6, #0]
 8000dc0:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8000dc4:	6030      	str	r0, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000dc6:	68a0      	ldr	r0, [r4, #8]
 8000dc8:	f000 f9ce 	bl	8001168 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	d12e      	bne.n	8000e32 <HAL_DAC_Start_DMA+0xc6>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000dd4:	6821      	ldr	r1, [r4, #0]
 8000dd6:	680b      	ldr	r3, [r1, #0]
 8000dd8:	f005 0510 	and.w	r5, r5, #16
 8000ddc:	2201      	movs	r2, #1
 8000dde:	40aa      	lsls	r2, r5
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8000de4:	bd70      	pop	{r4, r5, r6, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000de6:	6822      	ldr	r2, [r4, #0]
 8000de8:	320c      	adds	r2, #12
        break;
 8000dea:	e7e5      	b.n	8000db8 <HAL_DAC_Start_DMA+0x4c>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000dec:	68e0      	ldr	r0, [r4, #12]
 8000dee:	4e18      	ldr	r6, [pc, #96]	@ (8000e50 <HAL_DAC_Start_DMA+0xe4>)
 8000df0:	63c6      	str	r6, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000df2:	68e0      	ldr	r0, [r4, #12]
 8000df4:	4e17      	ldr	r6, [pc, #92]	@ (8000e54 <HAL_DAC_Start_DMA+0xe8>)
 8000df6:	6406      	str	r6, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000df8:	68e0      	ldr	r0, [r4, #12]
 8000dfa:	4e17      	ldr	r6, [pc, #92]	@ (8000e58 <HAL_DAC_Start_DMA+0xec>)
 8000dfc:	64c6      	str	r6, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000dfe:	6826      	ldr	r6, [r4, #0]
 8000e00:	6830      	ldr	r0, [r6, #0]
 8000e02:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000e06:	6030      	str	r0, [r6, #0]
    switch (Alignment)
 8000e08:	b122      	cbz	r2, 8000e14 <HAL_DAC_Start_DMA+0xa8>
 8000e0a:	2a04      	cmp	r2, #4
 8000e0c:	d005      	beq.n	8000e1a <HAL_DAC_Start_DMA+0xae>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000e0e:	6822      	ldr	r2, [r4, #0]
 8000e10:	321c      	adds	r2, #28
        break;
 8000e12:	e7d1      	b.n	8000db8 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000e14:	6822      	ldr	r2, [r4, #0]
 8000e16:	3214      	adds	r2, #20
        break;
 8000e18:	e7ce      	b.n	8000db8 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000e1a:	6822      	ldr	r2, [r4, #0]
 8000e1c:	3218      	adds	r2, #24
        break;
 8000e1e:	e7cb      	b.n	8000db8 <HAL_DAC_Start_DMA+0x4c>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000e20:	6826      	ldr	r6, [r4, #0]
 8000e22:	6830      	ldr	r0, [r6, #0]
 8000e24:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
 8000e28:	6030      	str	r0, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000e2a:	68e0      	ldr	r0, [r4, #12]
 8000e2c:	f000 f99c 	bl	8001168 <HAL_DMA_Start_IT>
 8000e30:	e7cc      	b.n	8000dcc <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e32:	6923      	ldr	r3, [r4, #16]
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6123      	str	r3, [r4, #16]
 8000e3a:	e7d3      	b.n	8000de4 <HAL_DAC_Start_DMA+0x78>
    return HAL_ERROR;
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	e7d1      	b.n	8000de4 <HAL_DAC_Start_DMA+0x78>
  __HAL_LOCK(hdac);
 8000e40:	2002      	movs	r0, #2
 8000e42:	e7cf      	b.n	8000de4 <HAL_DAC_Start_DMA+0x78>
 8000e44:	08000e5d 	.word	0x08000e5d
 8000e48:	08000e6d 	.word	0x08000e6d
 8000e4c:	08000e79 	.word	0x08000e79
 8000e50:	08000f69 	.word	0x08000f69
 8000e54:	08000f79 	.word	0x08000f79
 8000e58:	08000f83 	.word	0x08000f83

08000e5c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e5c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e5e:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000e60:	4620      	mov	r0, r4
 8000e62:	f7ff fc0d 	bl	8000680 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e66:	2301      	movs	r3, #1
 8000e68:	7123      	strb	r3, [r4, #4]
}
 8000e6a:	bd10      	pop	{r4, pc}

08000e6c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e6c:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000e6e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8000e70:	f7ff fc1a 	bl	80006a8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e74:	bd08      	pop	{r3, pc}

08000e76 <HAL_DAC_ErrorCallbackCh1>:
}
 8000e76:	4770      	bx	lr

08000e78 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000e78:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e7a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e7c:	6923      	ldr	r3, [r4, #16]
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000e84:	4620      	mov	r0, r4
 8000e86:	f7ff fff6 	bl	8000e76 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	7123      	strb	r3, [r4, #4]
}
 8000e8e:	bd10      	pop	{r4, pc}

08000e90 <HAL_DAC_DMAUnderrunCallbackCh1>:
}
 8000e90:	4770      	bx	lr

08000e92 <HAL_DAC_IRQHandler>:
{
 8000e92:	b570      	push	{r4, r5, r6, lr}
 8000e94:	4604      	mov	r4, r0
  uint32_t itsource = hdac->Instance->CR;
 8000e96:	6803      	ldr	r3, [r0, #0]
 8000e98:	681d      	ldr	r5, [r3, #0]
  uint32_t itflag   = hdac->Instance->SR;
 8000e9a:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8000e9c:	f415 5f00 	tst.w	r5, #8192	@ 0x2000
 8000ea0:	d002      	beq.n	8000ea8 <HAL_DAC_IRQHandler+0x16>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8000ea2:	f416 5f00 	tst.w	r6, #8192	@ 0x2000
 8000ea6:	d106      	bne.n	8000eb6 <HAL_DAC_IRQHandler+0x24>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8000ea8:	f015 5f00 	tst.w	r5, #536870912	@ 0x20000000
 8000eac:	d002      	beq.n	8000eb4 <HAL_DAC_IRQHandler+0x22>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8000eae:	f016 5f00 	tst.w	r6, #536870912	@ 0x20000000
 8000eb2:	d111      	bne.n	8000ed8 <HAL_DAC_IRQHandler+0x46>
}
 8000eb4:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000eba:	6902      	ldr	r2, [r0, #16]
 8000ebc:	f042 0201 	orr.w	r2, r2, #1
 8000ec0:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8000ec2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec6:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8000ec8:	6802      	ldr	r2, [r0, #0]
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ed0:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000ed2:	f7ff ffdd 	bl	8000e90 <HAL_DAC_DMAUnderrunCallbackCh1>
 8000ed6:	e7e7      	b.n	8000ea8 <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	7123      	strb	r3, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000edc:	6923      	ldr	r3, [r4, #16]
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	6123      	str	r3, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8000eec:	6822      	ldr	r2, [r4, #0]
 8000eee:	6813      	ldr	r3, [r2, #0]
 8000ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ef4:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f000 f835 	bl	8000f66 <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8000efc:	e7da      	b.n	8000eb4 <HAL_DAC_IRQHandler+0x22>

08000efe <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 8000efe:	b348      	cbz	r0, 8000f54 <HAL_DAC_ConfigChannel+0x56>
 8000f00:	4684      	mov	ip, r0
 8000f02:	b349      	cbz	r1, 8000f58 <HAL_DAC_ConfigChannel+0x5a>
  __HAL_LOCK(hdac);
 8000f04:	7943      	ldrb	r3, [r0, #5]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d028      	beq.n	8000f5c <HAL_DAC_ConfigChannel+0x5e>
{
 8000f0a:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 8000f0c:	f04f 0e01 	mov.w	lr, #1
 8000f10:	f880 e005 	strb.w	lr, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f14:	2302      	movs	r3, #2
 8000f16:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8000f18:	6804      	ldr	r4, [r0, #0]
 8000f1a:	6820      	ldr	r0, [r4, #0]
               << (Channel & 0x10UL));
 8000f1c:	f002 0210 	and.w	r2, r2, #16
 8000f20:	f640 73fe 	movw	r3, #4094	@ 0xffe
 8000f24:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8000f26:	ea20 0003 	bic.w	r0, r0, r3
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000f2a:	680b      	ldr	r3, [r1, #0]
 8000f2c:	6849      	ldr	r1, [r1, #4]
 8000f2e:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f30:	4093      	lsls	r3, r2
 8000f32:	4303      	orrs	r3, r0
  hdac->Instance->CR = tmpreg1;
 8000f34:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000f36:	f8dc 0000 	ldr.w	r0, [ip]
 8000f3a:	6803      	ldr	r3, [r0, #0]
 8000f3c:	21c0      	movs	r1, #192	@ 0xc0
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	ea23 0302 	bic.w	r3, r3, r2
 8000f46:	6003      	str	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000f48:	f88c e004 	strb.w	lr, [ip, #4]
  __HAL_UNLOCK(hdac);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f88c 0005 	strb.w	r0, [ip, #5]
}
 8000f52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f54:	2001      	movs	r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	2001      	movs	r0, #1
 8000f5a:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8000f5c:	2002      	movs	r0, #2
}
 8000f5e:	4770      	bx	lr

08000f60 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000f60:	4770      	bx	lr

08000f62 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000f62:	4770      	bx	lr

08000f64 <HAL_DACEx_ErrorCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000f64:	4770      	bx	lr

08000f66 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000f66:	4770      	bx	lr

08000f68 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000f68:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f6a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff fff7 	bl	8000f60 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f72:	2301      	movs	r3, #1
 8000f74:	7123      	strb	r3, [r4, #4]
}
 8000f76:	bd10      	pop	{r4, pc}

08000f78 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000f78:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000f7a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8000f7c:	f7ff fff1 	bl	8000f62 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000f80:	bd08      	pop	{r3, pc}

08000f82 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000f82:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f84:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f86:	6923      	ldr	r3, [r4, #16]
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f7ff ffe8 	bl	8000f64 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f94:	2301      	movs	r3, #1
 8000f96:	7123      	strb	r3, [r4, #4]
}
 8000f98:	bd10      	pop	{r4, pc}

08000f9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f9a:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000f9c:	6805      	ldr	r5, [r0, #0]
 8000f9e:	682c      	ldr	r4, [r5, #0]
 8000fa0:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8000fa4:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000fa6:	6804      	ldr	r4, [r0, #0]
 8000fa8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000faa:	6883      	ldr	r3, [r0, #8]
 8000fac:	2b40      	cmp	r3, #64	@ 0x40
 8000fae:	d005      	beq.n	8000fbc <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000fb0:	6803      	ldr	r3, [r0, #0]
 8000fb2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000fb4:	6803      	ldr	r3, [r0, #0]
 8000fb6:	60da      	str	r2, [r3, #12]
  }
}
 8000fb8:	bc30      	pop	{r4, r5}
 8000fba:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000fbc:	6803      	ldr	r3, [r0, #0]
 8000fbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000fc0:	6803      	ldr	r3, [r0, #0]
 8000fc2:	60d9      	str	r1, [r3, #12]
 8000fc4:	e7f8      	b.n	8000fb8 <DMA_SetConfig+0x1e>
	...

08000fc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000fca:	6803      	ldr	r3, [r0, #0]
 8000fcc:	b2d9      	uxtb	r1, r3
 8000fce:	3910      	subs	r1, #16
 8000fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001004 <DMA_CalcBaseAndBitshift+0x3c>)
 8000fd2:	fba2 4201 	umull	r4, r2, r2, r1
 8000fd6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000fd8:	4c0b      	ldr	r4, [pc, #44]	@ (8001008 <DMA_CalcBaseAndBitshift+0x40>)
 8000fda:	5ca2      	ldrb	r2, [r4, r2]
 8000fdc:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000fde:	295f      	cmp	r1, #95	@ 0x5f
 8000fe0:	d909      	bls.n	8000ff6 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000fe2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000fe6:	f023 0303 	bic.w	r3, r3, #3
 8000fea:	3304      	adds	r3, #4
 8000fec:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000fee:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ff4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ff6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000ffa:	f023 0303 	bic.w	r3, r3, #3
 8000ffe:	6583      	str	r3, [r0, #88]	@ 0x58
 8001000:	e7f5      	b.n	8000fee <DMA_CalcBaseAndBitshift+0x26>
 8001002:	bf00      	nop
 8001004:	aaaaaaab 	.word	0xaaaaaaab
 8001008:	08003288 	.word	0x08003288

0800100c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800100c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800100e:	6982      	ldr	r2, [r0, #24]
 8001010:	b992      	cbnz	r2, 8001038 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001012:	2b01      	cmp	r3, #1
 8001014:	d00a      	beq.n	800102c <DMA_CheckFifoParam+0x20>
 8001016:	2b02      	cmp	r3, #2
 8001018:	d002      	beq.n	8001020 <DMA_CheckFifoParam+0x14>
 800101a:	b10b      	cbz	r3, 8001020 <DMA_CheckFifoParam+0x14>
 800101c:	2000      	movs	r0, #0
 800101e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001020:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001022:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001026:	d128      	bne.n	800107a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001028:	2000      	movs	r0, #0
 800102a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800102c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800102e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001032:	d024      	beq.n	800107e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001034:	2000      	movs	r0, #0
 8001036:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001038:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800103c:	d009      	beq.n	8001052 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800103e:	2b02      	cmp	r3, #2
 8001040:	d925      	bls.n	800108e <DMA_CheckFifoParam+0x82>
 8001042:	2b03      	cmp	r3, #3
 8001044:	d125      	bne.n	8001092 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001046:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001048:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800104c:	d123      	bne.n	8001096 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800104e:	2000      	movs	r0, #0
 8001050:	4770      	bx	lr
    switch (tmp)
 8001052:	2b03      	cmp	r3, #3
 8001054:	d803      	bhi.n	800105e <DMA_CheckFifoParam+0x52>
 8001056:	e8df f003 	tbb	[pc, r3]
 800105a:	0414      	.short	0x0414
 800105c:	0a14      	.short	0x0a14
 800105e:	2000      	movs	r0, #0
 8001060:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001062:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001064:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001068:	d10d      	bne.n	8001086 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800106a:	2000      	movs	r0, #0
 800106c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800106e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001070:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001074:	d009      	beq.n	800108a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2000      	movs	r0, #0
 8001078:	4770      	bx	lr
        status = HAL_ERROR;
 800107a:	2001      	movs	r0, #1
 800107c:	4770      	bx	lr
        status = HAL_ERROR;
 800107e:	2001      	movs	r0, #1
 8001080:	4770      	bx	lr
      status = HAL_ERROR;
 8001082:	2001      	movs	r0, #1
 8001084:	4770      	bx	lr
        status = HAL_ERROR;
 8001086:	2001      	movs	r0, #1
 8001088:	4770      	bx	lr
        status = HAL_ERROR;
 800108a:	2001      	movs	r0, #1
 800108c:	4770      	bx	lr
      status = HAL_ERROR;
 800108e:	2001      	movs	r0, #1
 8001090:	4770      	bx	lr
    switch (tmp)
 8001092:	2000      	movs	r0, #0
 8001094:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001096:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001098:	4770      	bx	lr
	...

0800109c <HAL_DMA_Init>:
{
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff fad8 	bl	8000654 <HAL_GetTick>
  if(hdma == NULL)
 80010a4:	2c00      	cmp	r4, #0
 80010a6:	d05b      	beq.n	8001160 <HAL_DMA_Init+0xc4>
 80010a8:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80010b0:	2300      	movs	r3, #0
 80010b2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80010b6:	6822      	ldr	r2, [r4, #0]
 80010b8:	6813      	ldr	r3, [r2, #0]
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f012 0f01 	tst.w	r2, #1
 80010c8:	d00a      	beq.n	80010e0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ca:	f7ff fac3 	bl	8000654 <HAL_GetTick>
 80010ce:	1b43      	subs	r3, r0, r5
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	d9f5      	bls.n	80010c0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010d4:	2320      	movs	r3, #32
 80010d6:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010d8:	2003      	movs	r0, #3
 80010da:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 80010de:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80010e0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010e2:	4920      	ldr	r1, [pc, #128]	@ (8001164 <HAL_DMA_Init+0xc8>)
 80010e4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e6:	6862      	ldr	r2, [r4, #4]
 80010e8:	68a0      	ldr	r0, [r4, #8]
 80010ea:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ec:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ee:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f0:	6920      	ldr	r0, [r4, #16]
 80010f2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f8:	69a0      	ldr	r0, [r4, #24]
 80010fa:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fe:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001100:	6a20      	ldr	r0, [r4, #32]
 8001102:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001104:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001106:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001108:	2904      	cmp	r1, #4
 800110a:	d01e      	beq.n	800114a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 800110c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800110e:	6826      	ldr	r6, [r4, #0]
 8001110:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001112:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001116:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001118:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800111a:	2b04      	cmp	r3, #4
 800111c:	d107      	bne.n	800112e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800111e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001120:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001122:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001124:	b11b      	cbz	r3, 800112e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001126:	4620      	mov	r0, r4
 8001128:	f7ff ff70 	bl	800100c <DMA_CheckFifoParam>
 800112c:	b990      	cbnz	r0, 8001154 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800112e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001130:	4620      	mov	r0, r4
 8001132:	f7ff ff49 	bl	8000fc8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001136:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001138:	233f      	movs	r3, #63	@ 0x3f
 800113a:	4093      	lsls	r3, r2
 800113c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800113e:	2000      	movs	r0, #0
 8001140:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001142:	2301      	movs	r3, #1
 8001144:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001148:	e7c9      	b.n	80010de <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800114a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800114c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800114e:	4301      	orrs	r1, r0
 8001150:	430a      	orrs	r2, r1
 8001152:	e7db      	b.n	800110c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001154:	2340      	movs	r3, #64	@ 0x40
 8001156:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001158:	2001      	movs	r0, #1
 800115a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800115e:	e7be      	b.n	80010de <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001160:	2001      	movs	r0, #1
 8001162:	e7bc      	b.n	80010de <HAL_DMA_Init+0x42>
 8001164:	f010803f 	.word	0xf010803f

08001168 <HAL_DMA_Start_IT>:
{
 8001168:	b538      	push	{r3, r4, r5, lr}
 800116a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800116c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800116e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001172:	2801      	cmp	r0, #1
 8001174:	d02b      	beq.n	80011ce <HAL_DMA_Start_IT+0x66>
 8001176:	2001      	movs	r0, #1
 8001178:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800117c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001180:	b2c0      	uxtb	r0, r0
 8001182:	2801      	cmp	r0, #1
 8001184:	d004      	beq.n	8001190 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001186:	2300      	movs	r3, #0
 8001188:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 800118c:	2002      	movs	r0, #2
}
 800118e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001190:	2002      	movs	r0, #2
 8001192:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001196:	2000      	movs	r0, #0
 8001198:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800119a:	4620      	mov	r0, r4
 800119c:	f7ff fefd 	bl	8000f9a <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011a2:	233f      	movs	r3, #63	@ 0x3f
 80011a4:	4093      	lsls	r3, r2
 80011a6:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011a8:	6822      	ldr	r2, [r4, #0]
 80011aa:	6813      	ldr	r3, [r2, #0]
 80011ac:	f043 0316 	orr.w	r3, r3, #22
 80011b0:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80011b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011b4:	b123      	cbz	r3, 80011c0 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80011b6:	6822      	ldr	r2, [r4, #0]
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2000      	movs	r0, #0
 80011cc:	e7df      	b.n	800118e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80011ce:	2002      	movs	r0, #2
 80011d0:	e7dd      	b.n	800118e <HAL_DMA_Start_IT+0x26>
	...

080011d4 <HAL_DMA_IRQHandler>:
{
 80011d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d6:	b083      	sub	sp, #12
 80011d8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80011da:	2300      	movs	r3, #0
 80011dc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011de:	4b72      	ldr	r3, [pc, #456]	@ (80013a8 <HAL_DMA_IRQHandler+0x1d4>)
 80011e0:	681d      	ldr	r5, [r3, #0]
 80011e2:	4b72      	ldr	r3, [pc, #456]	@ (80013ac <HAL_DMA_IRQHandler+0x1d8>)
 80011e4:	fba3 3505 	umull	r3, r5, r3, r5
 80011e8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ea:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80011ec:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ee:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80011f0:	2308      	movs	r3, #8
 80011f2:	4093      	lsls	r3, r2
 80011f4:	4233      	tst	r3, r6
 80011f6:	d010      	beq.n	800121a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011f8:	6803      	ldr	r3, [r0, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f012 0f04 	tst.w	r2, #4
 8001200:	d00b      	beq.n	800121a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	f022 0204 	bic.w	r2, r2, #4
 8001208:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800120a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800120c:	2308      	movs	r3, #8
 800120e:	4093      	lsls	r3, r2
 8001210:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001212:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800121a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800121c:	2301      	movs	r3, #1
 800121e:	4093      	lsls	r3, r2
 8001220:	4233      	tst	r3, r6
 8001222:	d009      	beq.n	8001238 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001224:	6822      	ldr	r2, [r4, #0]
 8001226:	6952      	ldr	r2, [r2, #20]
 8001228:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800122c:	d004      	beq.n	8001238 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800122e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001230:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001238:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800123a:	2304      	movs	r3, #4
 800123c:	4093      	lsls	r3, r2
 800123e:	4233      	tst	r3, r6
 8001240:	d009      	beq.n	8001256 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001242:	6822      	ldr	r2, [r4, #0]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	f012 0f02 	tst.w	r2, #2
 800124a:	d004      	beq.n	8001256 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800124c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800124e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001256:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001258:	2310      	movs	r3, #16
 800125a:	4093      	lsls	r3, r2
 800125c:	4233      	tst	r3, r6
 800125e:	d024      	beq.n	80012aa <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001260:	6822      	ldr	r2, [r4, #0]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	f012 0f08 	tst.w	r2, #8
 8001268:	d01f      	beq.n	80012aa <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800126a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001274:	d00d      	beq.n	8001292 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800127c:	d104      	bne.n	8001288 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800127e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001280:	b19b      	cbz	r3, 80012aa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001282:	4620      	mov	r0, r4
 8001284:	4798      	blx	r3
 8001286:	e010      	b.n	80012aa <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001288:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800128a:	b173      	cbz	r3, 80012aa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800128c:	4620      	mov	r0, r4
 800128e:	4798      	blx	r3
 8001290:	e00b      	b.n	80012aa <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001298:	d103      	bne.n	80012a2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	f022 0208 	bic.w	r2, r2, #8
 80012a0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80012a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012a4:	b10b      	cbz	r3, 80012aa <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80012a6:	4620      	mov	r0, r4
 80012a8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012aa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80012ac:	2320      	movs	r3, #32
 80012ae:	4093      	lsls	r3, r2
 80012b0:	4233      	tst	r3, r6
 80012b2:	d055      	beq.n	8001360 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012b4:	6822      	ldr	r2, [r4, #0]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	f012 0f10 	tst.w	r2, #16
 80012bc:	d050      	beq.n	8001360 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012be:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012c0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d00e      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80012d2:	d033      	beq.n	800133c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80012da:	d12a      	bne.n	8001332 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80012dc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d03e      	beq.n	8001360 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80012e2:	4620      	mov	r0, r4
 80012e4:	4798      	blx	r3
 80012e6:	e03b      	b.n	8001360 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012e8:	6822      	ldr	r2, [r4, #0]
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f023 0316 	bic.w	r3, r3, #22
 80012f0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012f2:	6822      	ldr	r2, [r4, #0]
 80012f4:	6953      	ldr	r3, [r2, #20]
 80012f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012fa:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012fe:	b1a3      	cbz	r3, 800132a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001300:	6822      	ldr	r2, [r4, #0]
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f023 0308 	bic.w	r3, r3, #8
 8001308:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800130a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800130c:	233f      	movs	r3, #63	@ 0x3f
 800130e:	4093      	lsls	r3, r2
 8001310:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001312:	2301      	movs	r3, #1
 8001314:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001318:	2300      	movs	r3, #0
 800131a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800131e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001320:	2b00      	cmp	r3, #0
 8001322:	d03f      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001324:	4620      	mov	r0, r4
 8001326:	4798      	blx	r3
        return;
 8001328:	e03c      	b.n	80013a4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800132a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1e7      	bne.n	8001300 <HAL_DMA_IRQHandler+0x12c>
 8001330:	e7eb      	b.n	800130a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001332:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001334:	b1a3      	cbz	r3, 8001360 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001336:	4620      	mov	r0, r4
 8001338:	4798      	blx	r3
 800133a:	e011      	b.n	8001360 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001342:	d109      	bne.n	8001358 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f022 0210 	bic.w	r2, r2, #16
 800134a:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800134c:	2301      	movs	r3, #1
 800134e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001352:	2300      	movs	r3, #0
 8001354:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001358:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800135a:	b10b      	cbz	r3, 8001360 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800135c:	4620      	mov	r0, r4
 800135e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001360:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001362:	b1fb      	cbz	r3, 80013a4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001364:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001366:	f013 0f01 	tst.w	r3, #1
 800136a:	d017      	beq.n	800139c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800136c:	2305      	movs	r3, #5
 800136e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001372:	6822      	ldr	r2, [r4, #0]
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800137c:	9b01      	ldr	r3, [sp, #4]
 800137e:	3301      	adds	r3, #1
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	42ab      	cmp	r3, r5
 8001384:	d804      	bhi.n	8001390 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f013 0f01 	tst.w	r3, #1
 800138e:	d1f5      	bne.n	800137c <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001390:	2301      	movs	r3, #1
 8001392:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001396:	2300      	movs	r3, #0
 8001398:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800139c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800139e:	b10b      	cbz	r3, 80013a4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80013a0:	4620      	mov	r0, r4
 80013a2:	4798      	blx	r3
}
 80013a4:	b003      	add	sp, #12
 80013a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	1b4e81b5 	.word	0x1b4e81b5

080013b0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	f200 80e9 	bhi.w	800158a <HAL_GPIO_Init+0x1da>
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	e065      	b.n	800148a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013be:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80013c4:	2403      	movs	r4, #3
 80013c6:	fa04 f40e 	lsl.w	r4, r4, lr
 80013ca:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	68cc      	ldr	r4, [r1, #12]
 80013d0:	fa04 f40e 	lsl.w	r4, r4, lr
 80013d4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80013d6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013da:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013de:	684a      	ldr	r2, [r1, #4]
 80013e0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80013e4:	409a      	lsls	r2, r3
 80013e6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80013e8:	6042      	str	r2, [r0, #4]
 80013ea:	e05c      	b.n	80014a6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ec:	08dc      	lsrs	r4, r3, #3
 80013ee:	3408      	adds	r4, #8
 80013f0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f4:	f003 0507 	and.w	r5, r3, #7
 80013f8:	00ad      	lsls	r5, r5, #2
 80013fa:	f04f 0e0f 	mov.w	lr, #15
 80013fe:	fa0e fe05 	lsl.w	lr, lr, r5
 8001402:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001406:	690a      	ldr	r2, [r1, #16]
 8001408:	40aa      	lsls	r2, r5
 800140a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800140e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001412:	e05c      	b.n	80014ce <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001414:	2207      	movs	r2, #7
 8001416:	e000      	b.n	800141a <HAL_GPIO_Init+0x6a>
 8001418:	2200      	movs	r2, #0
 800141a:	fa02 f20e 	lsl.w	r2, r2, lr
 800141e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001420:	3402      	adds	r4, #2
 8001422:	4d5a      	ldr	r5, [pc, #360]	@ (800158c <HAL_GPIO_Init+0x1dc>)
 8001424:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001428:	4a59      	ldr	r2, [pc, #356]	@ (8001590 <HAL_GPIO_Init+0x1e0>)
 800142a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800142c:	ea6f 020c 	mvn.w	r2, ip
 8001430:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001434:	684e      	ldr	r6, [r1, #4]
 8001436:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800143a:	d001      	beq.n	8001440 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800143c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001440:	4c53      	ldr	r4, [pc, #332]	@ (8001590 <HAL_GPIO_Init+0x1e0>)
 8001442:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001444:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001446:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800144a:	684e      	ldr	r6, [r1, #4]
 800144c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001450:	d001      	beq.n	8001456 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001452:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001456:	4c4e      	ldr	r4, [pc, #312]	@ (8001590 <HAL_GPIO_Init+0x1e0>)
 8001458:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800145a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800145c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001460:	684e      	ldr	r6, [r1, #4]
 8001462:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001466:	d001      	beq.n	800146c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001468:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800146c:	4c48      	ldr	r4, [pc, #288]	@ (8001590 <HAL_GPIO_Init+0x1e0>)
 800146e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001470:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001472:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001474:	684d      	ldr	r5, [r1, #4]
 8001476:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800147a:	d001      	beq.n	8001480 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800147c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001480:	4c43      	ldr	r4, [pc, #268]	@ (8001590 <HAL_GPIO_Init+0x1e0>)
 8001482:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001484:	3301      	adds	r3, #1
 8001486:	2b0f      	cmp	r3, #15
 8001488:	d87d      	bhi.n	8001586 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 800148a:	2201      	movs	r2, #1
 800148c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148e:	680c      	ldr	r4, [r1, #0]
 8001490:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001494:	ea32 0404 	bics.w	r4, r2, r4
 8001498:	d1f4      	bne.n	8001484 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149a:	684c      	ldr	r4, [r1, #4]
 800149c:	f004 0403 	and.w	r4, r4, #3
 80014a0:	3c01      	subs	r4, #1
 80014a2:	2c01      	cmp	r4, #1
 80014a4:	d98b      	bls.n	80013be <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a6:	684a      	ldr	r2, [r1, #4]
 80014a8:	f002 0203 	and.w	r2, r2, #3
 80014ac:	2a03      	cmp	r2, #3
 80014ae:	d009      	beq.n	80014c4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80014b0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014b2:	005d      	lsls	r5, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	40aa      	lsls	r2, r5
 80014b8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014bc:	688a      	ldr	r2, [r1, #8]
 80014be:	40aa      	lsls	r2, r5
 80014c0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80014c2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c4:	684a      	ldr	r2, [r1, #4]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	2a02      	cmp	r2, #2
 80014cc:	d08e      	beq.n	80013ec <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80014ce:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f20e 	lsl.w	r2, r2, lr
 80014da:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014de:	684a      	ldr	r2, [r1, #4]
 80014e0:	f002 0203 	and.w	r2, r2, #3
 80014e4:	fa02 f20e 	lsl.w	r2, r2, lr
 80014e8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80014ea:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ec:	684a      	ldr	r2, [r1, #4]
 80014ee:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80014f2:	d0c7      	beq.n	8001484 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f4:	2200      	movs	r2, #0
 80014f6:	9201      	str	r2, [sp, #4]
 80014f8:	4a26      	ldr	r2, [pc, #152]	@ (8001594 <HAL_GPIO_Init+0x1e4>)
 80014fa:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80014fc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001500:	6454      	str	r4, [r2, #68]	@ 0x44
 8001502:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001504:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001508:	9201      	str	r2, [sp, #4]
 800150a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800150c:	089c      	lsrs	r4, r3, #2
 800150e:	1ca5      	adds	r5, r4, #2
 8001510:	4a1e      	ldr	r2, [pc, #120]	@ (800158c <HAL_GPIO_Init+0x1dc>)
 8001512:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001516:	f003 0e03 	and.w	lr, r3, #3
 800151a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f20e 	lsl.w	r2, r2, lr
 8001524:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001528:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <HAL_GPIO_Init+0x1e8>)
 800152a:	4290      	cmp	r0, r2
 800152c:	f43f af74 	beq.w	8001418 <HAL_GPIO_Init+0x68>
 8001530:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001534:	4290      	cmp	r0, r2
 8001536:	d01a      	beq.n	800156e <HAL_GPIO_Init+0x1be>
 8001538:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800153c:	4290      	cmp	r0, r2
 800153e:	d018      	beq.n	8001572 <HAL_GPIO_Init+0x1c2>
 8001540:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001544:	4290      	cmp	r0, r2
 8001546:	d016      	beq.n	8001576 <HAL_GPIO_Init+0x1c6>
 8001548:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800154c:	4290      	cmp	r0, r2
 800154e:	d014      	beq.n	800157a <HAL_GPIO_Init+0x1ca>
 8001550:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001554:	4290      	cmp	r0, r2
 8001556:	d012      	beq.n	800157e <HAL_GPIO_Init+0x1ce>
 8001558:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800155c:	4290      	cmp	r0, r2
 800155e:	d010      	beq.n	8001582 <HAL_GPIO_Init+0x1d2>
 8001560:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001564:	4290      	cmp	r0, r2
 8001566:	f43f af55 	beq.w	8001414 <HAL_GPIO_Init+0x64>
 800156a:	2208      	movs	r2, #8
 800156c:	e755      	b.n	800141a <HAL_GPIO_Init+0x6a>
 800156e:	2201      	movs	r2, #1
 8001570:	e753      	b.n	800141a <HAL_GPIO_Init+0x6a>
 8001572:	2202      	movs	r2, #2
 8001574:	e751      	b.n	800141a <HAL_GPIO_Init+0x6a>
 8001576:	2203      	movs	r2, #3
 8001578:	e74f      	b.n	800141a <HAL_GPIO_Init+0x6a>
 800157a:	2204      	movs	r2, #4
 800157c:	e74d      	b.n	800141a <HAL_GPIO_Init+0x6a>
 800157e:	2205      	movs	r2, #5
 8001580:	e74b      	b.n	800141a <HAL_GPIO_Init+0x6a>
 8001582:	2206      	movs	r2, #6
 8001584:	e749      	b.n	800141a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001586:	b002      	add	sp, #8
 8001588:	bd70      	pop	{r4, r5, r6, pc}
 800158a:	4770      	bx	lr
 800158c:	40013800 	.word	0x40013800
 8001590:	40013c00 	.word	0x40013c00
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000

0800159c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	b10a      	cbz	r2, 80015a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159e:	6181      	str	r1, [r0, #24]
 80015a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a2:	0409      	lsls	r1, r1, #16
 80015a4:	6181      	str	r1, [r0, #24]
  }
}
 80015a6:	4770      	bx	lr

080015a8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a8:	2800      	cmp	r0, #0
 80015aa:	f000 81e0 	beq.w	800196e <HAL_RCC_OscConfig+0x3c6>
{
 80015ae:	b570      	push	{r4, r5, r6, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b4:	6803      	ldr	r3, [r0, #0]
 80015b6:	f013 0f01 	tst.w	r3, #1
 80015ba:	d03b      	beq.n	8001634 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015bc:	4b9f      	ldr	r3, [pc, #636]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d02c      	beq.n	8001622 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c8:	4b9c      	ldr	r3, [pc, #624]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d021      	beq.n	8001618 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	6863      	ldr	r3, [r4, #4]
 80015d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015da:	d04f      	beq.n	800167c <HAL_RCC_OscConfig+0xd4>
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015e0:	d052      	beq.n	8001688 <HAL_RCC_OscConfig+0xe0>
 80015e2:	4b96      	ldr	r3, [pc, #600]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80015f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015f4:	6863      	ldr	r3, [r4, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d050      	beq.n	800169c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff f82b 	bl	8000654 <HAL_GetTick>
 80015fe:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001600:	4b8e      	ldr	r3, [pc, #568]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001608:	d114      	bne.n	8001634 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160a:	f7ff f823 	bl	8000654 <HAL_GetTick>
 800160e:	1b40      	subs	r0, r0, r5
 8001610:	2864      	cmp	r0, #100	@ 0x64
 8001612:	d9f5      	bls.n	8001600 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001614:	2003      	movs	r0, #3
 8001616:	e1b1      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001618:	4b88      	ldr	r3, [pc, #544]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001620:	d0d8      	beq.n	80015d4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001622:	4b86      	ldr	r3, [pc, #536]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800162a:	d003      	beq.n	8001634 <HAL_RCC_OscConfig+0x8c>
 800162c:	6863      	ldr	r3, [r4, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 819f 	beq.w	8001972 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	f013 0f02 	tst.w	r3, #2
 800163a:	d054      	beq.n	80016e6 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800163c:	4b7f      	ldr	r3, [pc, #508]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f013 0f0c 	tst.w	r3, #12
 8001644:	d03e      	beq.n	80016c4 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b7d      	ldr	r3, [pc, #500]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800164e:	2b08      	cmp	r3, #8
 8001650:	d033      	beq.n	80016ba <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001652:	68e3      	ldr	r3, [r4, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d068      	beq.n	800172a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001658:	4b79      	ldr	r3, [pc, #484]	@ (8001840 <HAL_RCC_OscConfig+0x298>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165e:	f7fe fff9 	bl	8000654 <HAL_GetTick>
 8001662:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	4b75      	ldr	r3, [pc, #468]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f013 0f02 	tst.w	r3, #2
 800166c:	d154      	bne.n	8001718 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166e:	f7fe fff1 	bl	8000654 <HAL_GetTick>
 8001672:	1b40      	subs	r0, r0, r5
 8001674:	2802      	cmp	r0, #2
 8001676:	d9f5      	bls.n	8001664 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001678:	2003      	movs	r0, #3
 800167a:	e17f      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167c:	4a6f      	ldr	r2, [pc, #444]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 800167e:	6813      	ldr	r3, [r2, #0]
 8001680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e7b5      	b.n	80015f4 <HAL_RCC_OscConfig+0x4c>
 8001688:	4b6c      	ldr	r3, [pc, #432]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e7ab      	b.n	80015f4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800169c:	f7fe ffda 	bl	8000654 <HAL_GetTick>
 80016a0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	4b66      	ldr	r3, [pc, #408]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80016aa:	d0c3      	beq.n	8001634 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7fe ffd2 	bl	8000654 <HAL_GetTick>
 80016b0:	1b40      	subs	r0, r0, r5
 80016b2:	2864      	cmp	r0, #100	@ 0x64
 80016b4:	d9f5      	bls.n	80016a2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80016b6:	2003      	movs	r0, #3
 80016b8:	e160      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ba:	4b60      	ldr	r3, [pc, #384]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80016c2:	d1c6      	bne.n	8001652 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c4:	4b5d      	ldr	r3, [pc, #372]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f013 0f02 	tst.w	r3, #2
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_OscConfig+0x12e>
 80016ce:	68e3      	ldr	r3, [r4, #12]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	f040 8150 	bne.w	8001976 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4a59      	ldr	r2, [pc, #356]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80016de:	6921      	ldr	r1, [r4, #16]
 80016e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016e4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	f013 0f08 	tst.w	r3, #8
 80016ec:	d042      	beq.n	8001774 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016ee:	6963      	ldr	r3, [r4, #20]
 80016f0:	b36b      	cbz	r3, 800174e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f2:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <HAL_RCC_OscConfig+0x298>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fa:	f7fe ffab 	bl	8000654 <HAL_GetTick>
 80016fe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001700:	4b4e      	ldr	r3, [pc, #312]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 8001702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001704:	f013 0f02 	tst.w	r3, #2
 8001708:	d134      	bne.n	8001774 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170a:	f7fe ffa3 	bl	8000654 <HAL_GetTick>
 800170e:	1b40      	subs	r0, r0, r5
 8001710:	2802      	cmp	r0, #2
 8001712:	d9f5      	bls.n	8001700 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001714:	2003      	movs	r0, #3
 8001716:	e131      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4a48      	ldr	r2, [pc, #288]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 800171a:	6813      	ldr	r3, [r2, #0]
 800171c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001720:	6921      	ldr	r1, [r4, #16]
 8001722:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e7dd      	b.n	80016e6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800172a:	4b45      	ldr	r3, [pc, #276]	@ (8001840 <HAL_RCC_OscConfig+0x298>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001730:	f7fe ff90 	bl	8000654 <HAL_GetTick>
 8001734:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4b41      	ldr	r3, [pc, #260]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f013 0f02 	tst.w	r3, #2
 800173e:	d0d2      	beq.n	80016e6 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001740:	f7fe ff88 	bl	8000654 <HAL_GetTick>
 8001744:	1b40      	subs	r0, r0, r5
 8001746:	2802      	cmp	r0, #2
 8001748:	d9f5      	bls.n	8001736 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800174a:	2003      	movs	r0, #3
 800174c:	e116      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174e:	4b3c      	ldr	r3, [pc, #240]	@ (8001840 <HAL_RCC_OscConfig+0x298>)
 8001750:	2200      	movs	r2, #0
 8001752:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7fe ff7d 	bl	8000654 <HAL_GetTick>
 800175a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175c:	4b37      	ldr	r3, [pc, #220]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 800175e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001760:	f013 0f02 	tst.w	r3, #2
 8001764:	d006      	beq.n	8001774 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001766:	f7fe ff75 	bl	8000654 <HAL_GetTick>
 800176a:	1b40      	subs	r0, r0, r5
 800176c:	2802      	cmp	r0, #2
 800176e:	d9f5      	bls.n	800175c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001770:	2003      	movs	r0, #3
 8001772:	e103      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	f013 0f04 	tst.w	r3, #4
 800177a:	d077      	beq.n	800186c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177c:	4b2f      	ldr	r3, [pc, #188]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001784:	d133      	bne.n	80017ee <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	4b2c      	ldr	r3, [pc, #176]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 800178c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800178e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800179e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b28      	ldr	r3, [pc, #160]	@ (8001844 <HAL_RCC_OscConfig+0x29c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80017a8:	d023      	beq.n	80017f2 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017aa:	68a3      	ldr	r3, [r4, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d034      	beq.n	800181a <HAL_RCC_OscConfig+0x272>
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d038      	beq.n	8001826 <HAL_RCC_OscConfig+0x27e>
 80017b4:	4b21      	ldr	r3, [pc, #132]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 80017b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80017be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017c0:	f022 0204 	bic.w	r2, r2, #4
 80017c4:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c6:	68a3      	ldr	r3, [r4, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d03d      	beq.n	8001848 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7fe ff42 	bl	8000654 <HAL_GetTick>
 80017d0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d6:	f013 0f02 	tst.w	r3, #2
 80017da:	d146      	bne.n	800186a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7fe ff3a 	bl	8000654 <HAL_GetTick>
 80017e0:	1b80      	subs	r0, r0, r6
 80017e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017e6:	4298      	cmp	r0, r3
 80017e8:	d9f3      	bls.n	80017d2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80017ea:	2003      	movs	r0, #3
 80017ec:	e0c6      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80017ee:	2500      	movs	r5, #0
 80017f0:	e7d6      	b.n	80017a0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <HAL_RCC_OscConfig+0x29c>)
 80017f4:	6813      	ldr	r3, [r2, #0]
 80017f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80017fc:	f7fe ff2a 	bl	8000654 <HAL_GetTick>
 8001800:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <HAL_RCC_OscConfig+0x29c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800180a:	d1ce      	bne.n	80017aa <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180c:	f7fe ff22 	bl	8000654 <HAL_GetTick>
 8001810:	1b80      	subs	r0, r0, r6
 8001812:	2802      	cmp	r0, #2
 8001814:	d9f5      	bls.n	8001802 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001816:	2003      	movs	r0, #3
 8001818:	e0b0      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181a:	4a08      	ldr	r2, [pc, #32]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 800181c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	@ 0x70
 8001824:	e7cf      	b.n	80017c6 <HAL_RCC_OscConfig+0x21e>
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <HAL_RCC_OscConfig+0x294>)
 8001828:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800182a:	f042 0204 	orr.w	r2, r2, #4
 800182e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001830:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	671a      	str	r2, [r3, #112]	@ 0x70
 8001838:	e7c5      	b.n	80017c6 <HAL_RCC_OscConfig+0x21e>
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	42470000 	.word	0x42470000
 8001844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7fe ff04 	bl	8000654 <HAL_GetTick>
 800184c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184e:	4b52      	ldr	r3, [pc, #328]	@ (8001998 <HAL_RCC_OscConfig+0x3f0>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001852:	f013 0f02 	tst.w	r3, #2
 8001856:	d008      	beq.n	800186a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7fe fefc 	bl	8000654 <HAL_GetTick>
 800185c:	1b80      	subs	r0, r0, r6
 800185e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001862:	4298      	cmp	r0, r3
 8001864:	d9f3      	bls.n	800184e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001866:	2003      	movs	r0, #3
 8001868:	e088      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800186a:	b9ed      	cbnz	r5, 80018a8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186c:	69a3      	ldr	r3, [r4, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8083 	beq.w	800197a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001874:	4a48      	ldr	r2, [pc, #288]	@ (8001998 <HAL_RCC_OscConfig+0x3f0>)
 8001876:	6892      	ldr	r2, [r2, #8]
 8001878:	f002 020c 	and.w	r2, r2, #12
 800187c:	2a08      	cmp	r2, #8
 800187e:	d051      	beq.n	8001924 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001880:	2b02      	cmp	r3, #2
 8001882:	d017      	beq.n	80018b4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001884:	4b45      	ldr	r3, [pc, #276]	@ (800199c <HAL_RCC_OscConfig+0x3f4>)
 8001886:	2200      	movs	r2, #0
 8001888:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7fe fee3 	bl	8000654 <HAL_GetTick>
 800188e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001890:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_RCC_OscConfig+0x3f0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001898:	d042      	beq.n	8001920 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189a:	f7fe fedb 	bl	8000654 <HAL_GetTick>
 800189e:	1b00      	subs	r0, r0, r4
 80018a0:	2802      	cmp	r0, #2
 80018a2:	d9f5      	bls.n	8001890 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80018a4:	2003      	movs	r0, #3
 80018a6:	e069      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001998 <HAL_RCC_OscConfig+0x3f0>)
 80018aa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80018ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b2:	e7db      	b.n	800186c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80018b4:	4b39      	ldr	r3, [pc, #228]	@ (800199c <HAL_RCC_OscConfig+0x3f4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80018ba:	f7fe fecb 	bl	8000654 <HAL_GetTick>
 80018be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c0:	4b35      	ldr	r3, [pc, #212]	@ (8001998 <HAL_RCC_OscConfig+0x3f0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80018c8:	d006      	beq.n	80018d8 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7fe fec3 	bl	8000654 <HAL_GetTick>
 80018ce:	1b40      	subs	r0, r0, r5
 80018d0:	2802      	cmp	r0, #2
 80018d2:	d9f5      	bls.n	80018c0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80018d4:	2003      	movs	r0, #3
 80018d6:	e051      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018d8:	69e3      	ldr	r3, [r4, #28]
 80018da:	6a22      	ldr	r2, [r4, #32]
 80018dc:	4313      	orrs	r3, r2
 80018de:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80018e0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018e4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80018e6:	0852      	lsrs	r2, r2, #1
 80018e8:	3a01      	subs	r2, #1
 80018ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80018f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018f4:	4a28      	ldr	r2, [pc, #160]	@ (8001998 <HAL_RCC_OscConfig+0x3f0>)
 80018f6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80018f8:	4b28      	ldr	r3, [pc, #160]	@ (800199c <HAL_RCC_OscConfig+0x3f4>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80018fe:	f7fe fea9 	bl	8000654 <HAL_GetTick>
 8001902:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <HAL_RCC_OscConfig+0x3f0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800190c:	d106      	bne.n	800191c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7fe fea1 	bl	8000654 <HAL_GetTick>
 8001912:	1b00      	subs	r0, r0, r4
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f5      	bls.n	8001904 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001918:	2003      	movs	r0, #3
 800191a:	e02f      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800191c:	2000      	movs	r0, #0
 800191e:	e02d      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
 8001920:	2000      	movs	r0, #0
 8001922:	e02b      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001924:	2b01      	cmp	r3, #1
 8001926:	d02b      	beq.n	8001980 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_RCC_OscConfig+0x3f0>)
 800192a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001930:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001932:	4291      	cmp	r1, r2
 8001934:	d126      	bne.n	8001984 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001936:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800193a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193c:	428a      	cmp	r2, r1
 800193e:	d123      	bne.n	8001988 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001940:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001942:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001946:	401a      	ands	r2, r3
 8001948:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800194c:	d11e      	bne.n	800198c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001952:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001958:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800195c:	d118      	bne.n	8001990 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800195e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001962:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001964:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001968:	d114      	bne.n	8001994 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800196a:	2000      	movs	r0, #0
 800196c:	e006      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800196e:	2001      	movs	r0, #1
}
 8001970:	4770      	bx	lr
        return HAL_ERROR;
 8001972:	2001      	movs	r0, #1
 8001974:	e002      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001976:	2001      	movs	r0, #1
 8001978:	e000      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800197a:	2000      	movs	r0, #0
}
 800197c:	b002      	add	sp, #8
 800197e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001980:	2001      	movs	r0, #1
 8001982:	e7fb      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001984:	2001      	movs	r0, #1
 8001986:	e7f9      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
 8001988:	2001      	movs	r0, #1
 800198a:	e7f7      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
 800198c:	2001      	movs	r0, #1
 800198e:	e7f5      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
 8001990:	2001      	movs	r0, #1
 8001992:	e7f3      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
 8001994:	2001      	movs	r0, #1
 8001996:	e7f1      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
 8001998:	40023800 	.word	0x40023800
 800199c:	42470000 	.word	0x42470000

080019a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a0:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a2:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ae:	482f      	ldr	r0, [pc, #188]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019b0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80019c0:	d02c      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c2:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019c4:	6858      	ldr	r0, [r3, #4]
 80019c6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80019ca:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80019ce:	ebbc 0c00 	subs.w	ip, ip, r0
 80019d2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80019d6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80019da:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80019de:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80019e2:	ebb1 010c 	subs.w	r1, r1, ip
 80019e6:	eb63 030e 	sbc.w	r3, r3, lr
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019f0:	00c9      	lsls	r1, r1, #3
 80019f2:	eb11 0c00 	adds.w	ip, r1, r0
 80019f6:	f143 0300 	adc.w	r3, r3, #0
 80019fa:	0299      	lsls	r1, r3, #10
 80019fc:	2300      	movs	r3, #0
 80019fe:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001a02:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001a06:	f7fe fc33 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a0a:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001a12:	3301      	adds	r3, #1
 8001a14:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001a16:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001a1a:	e7c9      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a1e:	6858      	ldr	r0, [r3, #4]
 8001a20:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001a24:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001a28:	ebbc 0c00 	subs.w	ip, ip, r0
 8001a2c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001a30:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001a34:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001a38:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001a3c:	ebb1 010c 	subs.w	r1, r1, ip
 8001a40:	eb63 030e 	sbc.w	r3, r3, lr
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a4a:	00c9      	lsls	r1, r1, #3
 8001a4c:	eb11 0c00 	adds.w	ip, r1, r0
 8001a50:	f143 0300 	adc.w	r3, r3, #0
 8001a54:	0299      	lsls	r1, r3, #10
 8001a56:	2300      	movs	r3, #0
 8001a58:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001a5c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001a60:	f7fe fc06 	bl	8000270 <__aeabi_uldivmod>
 8001a64:	e7d1      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x6a>
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	00f42400 	.word	0x00f42400

08001a70 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001a70:	2800      	cmp	r0, #0
 8001a72:	f000 809b 	beq.w	8001bac <HAL_RCC_ClockConfig+0x13c>
{
 8001a76:	b570      	push	{r4, r5, r6, lr}
 8001a78:	460d      	mov	r5, r1
 8001a7a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001bbc <HAL_RCC_ClockConfig+0x14c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	428b      	cmp	r3, r1
 8001a86:	d208      	bcs.n	8001a9a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a88:	b2cb      	uxtb	r3, r1
 8001a8a:	4a4c      	ldr	r2, [pc, #304]	@ (8001bbc <HAL_RCC_ClockConfig+0x14c>)
 8001a8c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	6813      	ldr	r3, [r2, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	428b      	cmp	r3, r1
 8001a96:	f040 808b 	bne.w	8001bb0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	f013 0f02 	tst.w	r3, #2
 8001aa0:	d017      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa2:	f013 0f04 	tst.w	r3, #4
 8001aa6:	d004      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa8:	4a45      	ldr	r2, [pc, #276]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001aaa:	6893      	ldr	r3, [r2, #8]
 8001aac:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ab0:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	f013 0f08 	tst.w	r3, #8
 8001ab8:	d004      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aba:	4a41      	ldr	r2, [pc, #260]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001abc:	6893      	ldr	r3, [r2, #8]
 8001abe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ac2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001ac6:	6893      	ldr	r3, [r2, #8]
 8001ac8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001acc:	68a1      	ldr	r1, [r4, #8]
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	f013 0f01 	tst.w	r3, #1
 8001ad8:	d032      	beq.n	8001b40 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ada:	6863      	ldr	r3, [r4, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d021      	beq.n	8001b24 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae0:	1e9a      	subs	r2, r3, #2
 8001ae2:	2a01      	cmp	r2, #1
 8001ae4:	d925      	bls.n	8001b32 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	4a36      	ldr	r2, [pc, #216]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	f012 0f02 	tst.w	r2, #2
 8001aee:	d061      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af0:	4933      	ldr	r1, [pc, #204]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001af2:	688a      	ldr	r2, [r1, #8]
 8001af4:	f022 0203 	bic.w	r2, r2, #3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001afc:	f7fe fdaa 	bl	8000654 <HAL_GetTick>
 8001b00:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	6862      	ldr	r2, [r4, #4]
 8001b0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b10:	d016      	beq.n	8001b40 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b12:	f7fe fd9f 	bl	8000654 <HAL_GetTick>
 8001b16:	1b80      	subs	r0, r0, r6
 8001b18:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b1c:	4298      	cmp	r0, r3
 8001b1e:	d9f0      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001b20:	2003      	movs	r0, #3
 8001b22:	e042      	b.n	8001baa <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b24:	4a26      	ldr	r2, [pc, #152]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001b2c:	d1e0      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001b2e:	2001      	movs	r0, #1
 8001b30:	e03b      	b.n	8001baa <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4a23      	ldr	r2, [pc, #140]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001b3a:	d1d9      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e034      	b.n	8001baa <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <HAL_RCC_ClockConfig+0x14c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	42ab      	cmp	r3, r5
 8001b4a:	d907      	bls.n	8001b5c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4c:	b2ea      	uxtb	r2, r5
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <HAL_RCC_ClockConfig+0x14c>)
 8001b50:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	42ab      	cmp	r3, r5
 8001b5a:	d12d      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	f013 0f04 	tst.w	r3, #4
 8001b62:	d006      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001b66:	6893      	ldr	r3, [r2, #8]
 8001b68:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001b6c:	68e1      	ldr	r1, [r4, #12]
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	f013 0f08 	tst.w	r3, #8
 8001b78:	d007      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7a:	4a11      	ldr	r2, [pc, #68]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001b7c:	6893      	ldr	r3, [r2, #8]
 8001b7e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001b82:	6921      	ldr	r1, [r4, #16]
 8001b84:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b88:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8a:	f7ff ff09 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <HAL_RCC_ClockConfig+0x150>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b96:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc4 <HAL_RCC_ClockConfig+0x154>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
 8001b9a:	40d8      	lsrs	r0, r3
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <HAL_RCC_ClockConfig+0x158>)
 8001b9e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <HAL_RCC_ClockConfig+0x15c>)
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	f7ff f808 	bl	8000bb8 <HAL_InitTick>
  return HAL_OK;
 8001ba8:	2000      	movs	r0, #0
}
 8001baa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001bac:	2001      	movs	r0, #1
}
 8001bae:	4770      	bx	lr
      return HAL_ERROR;
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	e7fa      	b.n	8001baa <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	e7f8      	b.n	8001baa <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001bb8:	2001      	movs	r0, #1
 8001bba:	e7f6      	b.n	8001baa <HAL_RCC_ClockConfig+0x13a>
 8001bbc:	40023c00 	.word	0x40023c00
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	08003278 	.word	0x08003278
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001bd0:	4b01      	ldr	r3, [pc, #4]	@ (8001bd8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000000 	.word	0x20000000

08001bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bdc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bde:	f7ff fff7 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001be2:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001bea:	4a03      	ldr	r2, [pc, #12]	@ (8001bf8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bee:	40d8      	lsrs	r0, r3
 8001bf0:	bd08      	pop	{r3, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	08003270 	.word	0x08003270

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bfe:	f7ff ffe7 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001c02:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001c0a:	4a03      	ldr	r2, [pc, #12]	@ (8001c18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c0e:	40d8      	lsrs	r0, r3
 8001c10:	bd08      	pop	{r3, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	08003270 	.word	0x08003270

08001c1c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c1c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d137      	bne.n	8001c96 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c26:	2302      	movs	r3, #2
 8001c28:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c2c:	6802      	ldr	r2, [r0, #0]
 8001c2e:	68d3      	ldr	r3, [r2, #12]
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c36:	6803      	ldr	r3, [r0, #0]
 8001c38:	4a19      	ldr	r2, [pc, #100]	@ (8001ca0 <HAL_TIM_Base_Start_IT+0x84>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d020      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x64>
 8001c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c42:	d01d      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x64>
 8001c44:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d019      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x64>
 8001c4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d015      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x64>
 8001c54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d011      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x64>
 8001c5c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00d      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x64>
 8001c64:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x64>
 8001c6c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d005      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c86:	2a06      	cmp	r2, #6
 8001c88:	d007      	beq.n	8001c9a <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001c92:	2000      	movs	r0, #0
 8001c94:	4770      	bx	lr
    return HAL_ERROR;
 8001c96:	2001      	movs	r0, #1
 8001c98:	4770      	bx	lr
  return HAL_OK;
 8001c9a:	2000      	movs	r0, #0
}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000

08001ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ca8:	4770      	bx	lr

08001caa <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001caa:	4770      	bx	lr

08001cac <HAL_TIM_IRQHandler>:
{
 8001cac:	b570      	push	{r4, r5, r6, lr}
 8001cae:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8001cb0:	6803      	ldr	r3, [r0, #0]
 8001cb2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cb4:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cb6:	f015 0f02 	tst.w	r5, #2
 8001cba:	d010      	beq.n	8001cde <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cbc:	f016 0f02 	tst.w	r6, #2
 8001cc0:	d00d      	beq.n	8001cde <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cc2:	f06f 0202 	mvn.w	r2, #2
 8001cc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ccc:	6803      	ldr	r3, [r0, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f013 0f03 	tst.w	r3, #3
 8001cd4:	d05e      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	f7ff ffe6 	bl	8001ca6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cde:	f015 0f04 	tst.w	r5, #4
 8001ce2:	d012      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ce4:	f016 0f04 	tst.w	r6, #4
 8001ce8:	d00f      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	f06f 0204 	mvn.w	r2, #4
 8001cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001cfe:	d04f      	beq.n	8001da0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7ff ffd0 	bl	8001ca6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d06:	2300      	movs	r3, #0
 8001d08:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d0a:	f015 0f08 	tst.w	r5, #8
 8001d0e:	d012      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d10:	f016 0f08 	tst.w	r6, #8
 8001d14:	d00f      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	f06f 0208 	mvn.w	r2, #8
 8001d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f013 0f03 	tst.w	r3, #3
 8001d2a:	d040      	beq.n	8001dae <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff ffba 	bl	8001ca6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	2300      	movs	r3, #0
 8001d34:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d36:	f015 0f10 	tst.w	r5, #16
 8001d3a:	d012      	beq.n	8001d62 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d3c:	f016 0f10 	tst.w	r6, #16
 8001d40:	d00f      	beq.n	8001d62 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	f06f 0210 	mvn.w	r2, #16
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001d56:	d031      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f7ff ffa4 	bl	8001ca6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d62:	f015 0f01 	tst.w	r5, #1
 8001d66:	d002      	beq.n	8001d6e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d68:	f016 0f01 	tst.w	r6, #1
 8001d6c:	d12d      	bne.n	8001dca <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d6e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001d72:	d002      	beq.n	8001d7a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d74:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001d78:	d12f      	bne.n	8001dda <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d7a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001d7e:	d002      	beq.n	8001d86 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d80:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8001d84:	d131      	bne.n	8001dea <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d86:	f015 0f20 	tst.w	r5, #32
 8001d8a:	d002      	beq.n	8001d92 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d8c:	f016 0f20 	tst.w	r6, #32
 8001d90:	d133      	bne.n	8001dfa <HAL_TIM_IRQHandler+0x14e>
}
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d94:	f7ff ff86 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff ff85 	bl	8001ca8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d9e:	e79c      	b.n	8001cda <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff ff7f 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7ff ff7e 	bl	8001ca8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dac:	e7ab      	b.n	8001d06 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	4620      	mov	r0, r4
 8001db0:	f7ff ff78 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	4620      	mov	r0, r4
 8001db6:	f7ff ff77 	bl	8001ca8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dba:	e7ba      	b.n	8001d32 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f7ff ff71 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f7ff ff70 	bl	8001ca8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dc8:	e7c9      	b.n	8001d5e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	f06f 0201 	mvn.w	r2, #1
 8001dd0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f7fe fc44 	bl	8000660 <HAL_TIM_PeriodElapsedCallback>
 8001dd8:	e7c9      	b.n	8001d6e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001de0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001de2:	4620      	mov	r0, r4
 8001de4:	f000 f8f1 	bl	8001fca <HAL_TIMEx_BreakCallback>
 8001de8:	e7c7      	b.n	8001d7a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001df0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff ff59 	bl	8001caa <HAL_TIM_TriggerCallback>
 8001df8:	e7c5      	b.n	8001d86 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	f06f 0220 	mvn.w	r2, #32
 8001e00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001e02:	4620      	mov	r0, r4
 8001e04:	f000 f8e0 	bl	8001fc8 <HAL_TIMEx_CommutCallback>
}
 8001e08:	e7c3      	b.n	8001d92 <HAL_TIM_IRQHandler+0xe6>
	...

08001e0c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e0c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e0e:	4a34      	ldr	r2, [pc, #208]	@ (8001ee0 <TIM_Base_SetConfig+0xd4>)
 8001e10:	4290      	cmp	r0, r2
 8001e12:	d012      	beq.n	8001e3a <TIM_Base_SetConfig+0x2e>
 8001e14:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001e18:	d00f      	beq.n	8001e3a <TIM_Base_SetConfig+0x2e>
 8001e1a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001e1e:	4290      	cmp	r0, r2
 8001e20:	d00b      	beq.n	8001e3a <TIM_Base_SetConfig+0x2e>
 8001e22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e26:	4290      	cmp	r0, r2
 8001e28:	d007      	beq.n	8001e3a <TIM_Base_SetConfig+0x2e>
 8001e2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e2e:	4290      	cmp	r0, r2
 8001e30:	d003      	beq.n	8001e3a <TIM_Base_SetConfig+0x2e>
 8001e32:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001e36:	4290      	cmp	r0, r2
 8001e38:	d103      	bne.n	8001e42 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e3e:	684a      	ldr	r2, [r1, #4]
 8001e40:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	4a27      	ldr	r2, [pc, #156]	@ (8001ee0 <TIM_Base_SetConfig+0xd4>)
 8001e44:	4290      	cmp	r0, r2
 8001e46:	d02a      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e48:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001e4c:	d027      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e4e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001e52:	4290      	cmp	r0, r2
 8001e54:	d023      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e5a:	4290      	cmp	r0, r2
 8001e5c:	d01f      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e62:	4290      	cmp	r0, r2
 8001e64:	d01b      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e66:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001e6a:	4290      	cmp	r0, r2
 8001e6c:	d017      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e6e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001e72:	4290      	cmp	r0, r2
 8001e74:	d013      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e7a:	4290      	cmp	r0, r2
 8001e7c:	d00f      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e82:	4290      	cmp	r0, r2
 8001e84:	d00b      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e86:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001e8a:	4290      	cmp	r0, r2
 8001e8c:	d007      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e92:	4290      	cmp	r0, r2
 8001e94:	d003      	beq.n	8001e9e <TIM_Base_SetConfig+0x92>
 8001e96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e9a:	4290      	cmp	r0, r2
 8001e9c:	d103      	bne.n	8001ea6 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ea2:	68ca      	ldr	r2, [r1, #12]
 8001ea4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001eaa:	694a      	ldr	r2, [r1, #20]
 8001eac:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001eae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb0:	688b      	ldr	r3, [r1, #8]
 8001eb2:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb4:	680b      	ldr	r3, [r1, #0]
 8001eb6:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <TIM_Base_SetConfig+0xd4>)
 8001eba:	4298      	cmp	r0, r3
 8001ebc:	d003      	beq.n	8001ec6 <TIM_Base_SetConfig+0xba>
 8001ebe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ec2:	4298      	cmp	r0, r3
 8001ec4:	d101      	bne.n	8001eca <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec6:	690b      	ldr	r3, [r1, #16]
 8001ec8:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ece:	6903      	ldr	r3, [r0, #16]
 8001ed0:	f013 0f01 	tst.w	r3, #1
 8001ed4:	d003      	beq.n	8001ede <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ed6:	6903      	ldr	r3, [r0, #16]
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6103      	str	r3, [r0, #16]
  }
}
 8001ede:	4770      	bx	lr
 8001ee0:	40010000 	.word	0x40010000

08001ee4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001ee4:	b340      	cbz	r0, 8001f38 <HAL_TIM_Base_Init+0x54>
{
 8001ee6:	b510      	push	{r4, lr}
 8001ee8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001eea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001eee:	b1f3      	cbz	r3, 8001f2e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	f851 0b04 	ldr.w	r0, [r1], #4
 8001efc:	f7ff ff86 	bl	8001e0c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f06:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001f0a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001f0e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001f12:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f16:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f1e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001f22:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001f26:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001f2a:	2000      	movs	r0, #0
}
 8001f2c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001f32:	f7fe fd53 	bl	80009dc <HAL_TIM_Base_MspInit>
 8001f36:	e7db      	b.n	8001ef0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001f38:	2001      	movs	r0, #1
}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f3c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001f40:	2a01      	cmp	r2, #1
 8001f42:	d03d      	beq.n	8001fc0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8001f44:	b410      	push	{r4}
 8001f46:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f54:	6802      	ldr	r2, [r0, #0]
 8001f56:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f58:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f5a:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f5e:	6808      	ldr	r0, [r1, #0]
 8001f60:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f64:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4816      	ldr	r0, [pc, #88]	@ (8001fc4 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8001f6a:	4282      	cmp	r2, r0
 8001f6c:	d01a      	beq.n	8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f6e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001f72:	d017      	beq.n	8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f74:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8001f78:	4282      	cmp	r2, r0
 8001f7a:	d013      	beq.n	8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f7c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001f80:	4282      	cmp	r2, r0
 8001f82:	d00f      	beq.n	8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f84:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001f88:	4282      	cmp	r2, r0
 8001f8a:	d00b      	beq.n	8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f8c:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8001f90:	4282      	cmp	r2, r0
 8001f92:	d007      	beq.n	8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f94:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8001f98:	4282      	cmp	r2, r0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f9c:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8001fa0:	4282      	cmp	r2, r0
 8001fa2:	d104      	bne.n	8001fae <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fa4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fa8:	6849      	ldr	r1, [r1, #4]
 8001faa:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fac:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fbe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001fc0:	2002      	movs	r0, #2
}
 8001fc2:	4770      	bx	lr
 8001fc4:	40010000 	.word	0x40010000

08001fc8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc8:	4770      	bx	lr

08001fca <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fca:	4770      	bx	lr

08001fcc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fcc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fce:	f102 030c 	add.w	r3, r2, #12
 8001fd2:	e853 3f00 	ldrex	r3, [r3]
 8001fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fda:	320c      	adds	r2, #12
 8001fdc:	e842 3100 	strex	r1, r3, [r2]
 8001fe0:	2900      	cmp	r1, #0
 8001fe2:	d1f3      	bne.n	8001fcc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fe4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe6:	f102 0314 	add.w	r3, r2, #20
 8001fea:	e853 3f00 	ldrex	r3, [r3]
 8001fee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff2:	3214      	adds	r2, #20
 8001ff4:	e842 3100 	strex	r1, r3, [r2]
 8001ff8:	2900      	cmp	r1, #0
 8001ffa:	d1f3      	bne.n	8001fe4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ffc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d005      	beq.n	800200e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002002:	2320      	movs	r3, #32
 8002004:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002008:	2300      	movs	r3, #0
 800200a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800200c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800200e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002010:	f102 030c 	add.w	r3, r2, #12
 8002014:	e853 3f00 	ldrex	r3, [r3]
 8002018:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201c:	320c      	adds	r2, #12
 800201e:	e842 3100 	strex	r1, r3, [r2]
 8002022:	2900      	cmp	r1, #0
 8002024:	d1f3      	bne.n	800200e <UART_EndRxTransfer+0x42>
 8002026:	e7ec      	b.n	8002002 <UART_EndRxTransfer+0x36>

08002028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800202c:	6802      	ldr	r2, [r0, #0]
 800202e:	6913      	ldr	r3, [r2, #16]
 8002030:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002034:	68c1      	ldr	r1, [r0, #12]
 8002036:	430b      	orrs	r3, r1
 8002038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800203a:	6883      	ldr	r3, [r0, #8]
 800203c:	6902      	ldr	r2, [r0, #16]
 800203e:	431a      	orrs	r2, r3
 8002040:	6943      	ldr	r3, [r0, #20]
 8002042:	431a      	orrs	r2, r3
 8002044:	69c3      	ldr	r3, [r0, #28]
 8002046:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002048:	6801      	ldr	r1, [r0, #0]
 800204a:	68cb      	ldr	r3, [r1, #12]
 800204c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002050:	f023 030c 	bic.w	r3, r3, #12
 8002054:	4313      	orrs	r3, r2
 8002056:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002058:	6802      	ldr	r2, [r0, #0]
 800205a:	6953      	ldr	r3, [r2, #20]
 800205c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002060:	6981      	ldr	r1, [r0, #24]
 8002062:	430b      	orrs	r3, r1
 8002064:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002066:	6803      	ldr	r3, [r0, #0]
 8002068:	4a31      	ldr	r2, [pc, #196]	@ (8002130 <UART_SetConfig+0x108>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d006      	beq.n	800207c <UART_SetConfig+0x54>
 800206e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002072:	4293      	cmp	r3, r2
 8002074:	d002      	beq.n	800207c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002076:	f7ff fdb1 	bl	8001bdc <HAL_RCC_GetPCLK1Freq>
 800207a:	e001      	b.n	8002080 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800207c:	f7ff fdbe 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002080:	69e3      	ldr	r3, [r4, #28]
 8002082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002086:	d029      	beq.n	80020dc <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002088:	2100      	movs	r1, #0
 800208a:	1803      	adds	r3, r0, r0
 800208c:	4149      	adcs	r1, r1
 800208e:	181b      	adds	r3, r3, r0
 8002090:	f141 0100 	adc.w	r1, r1, #0
 8002094:	00c9      	lsls	r1, r1, #3
 8002096:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	1818      	adds	r0, r3, r0
 800209e:	6863      	ldr	r3, [r4, #4]
 80020a0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80020a4:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80020a8:	f141 0100 	adc.w	r1, r1, #0
 80020ac:	f7fe f8e0 	bl	8000270 <__aeabi_uldivmod>
 80020b0:	4a20      	ldr	r2, [pc, #128]	@ (8002134 <UART_SetConfig+0x10c>)
 80020b2:	fba2 3100 	umull	r3, r1, r2, r0
 80020b6:	0949      	lsrs	r1, r1, #5
 80020b8:	2364      	movs	r3, #100	@ 0x64
 80020ba:	fb03 0311 	mls	r3, r3, r1, r0
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	3332      	adds	r3, #50	@ 0x32
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020cc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	6821      	ldr	r1, [r4, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }
}
 80020da:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020dc:	2300      	movs	r3, #0
 80020de:	1802      	adds	r2, r0, r0
 80020e0:	eb43 0103 	adc.w	r1, r3, r3
 80020e4:	1812      	adds	r2, r2, r0
 80020e6:	f141 0100 	adc.w	r1, r1, #0
 80020ea:	00c9      	lsls	r1, r1, #3
 80020ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020f0:	00d2      	lsls	r2, r2, #3
 80020f2:	1810      	adds	r0, r2, r0
 80020f4:	f141 0100 	adc.w	r1, r1, #0
 80020f8:	6862      	ldr	r2, [r4, #4]
 80020fa:	1892      	adds	r2, r2, r2
 80020fc:	415b      	adcs	r3, r3
 80020fe:	f7fe f8b7 	bl	8000270 <__aeabi_uldivmod>
 8002102:	4a0c      	ldr	r2, [pc, #48]	@ (8002134 <UART_SetConfig+0x10c>)
 8002104:	fba2 3100 	umull	r3, r1, r2, r0
 8002108:	0949      	lsrs	r1, r1, #5
 800210a:	2364      	movs	r3, #100	@ 0x64
 800210c:	fb03 0311 	mls	r3, r3, r1, r0
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	3332      	adds	r3, #50	@ 0x32
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	005a      	lsls	r2, r3, #1
 800211c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002120:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	6821      	ldr	r1, [r4, #0]
 800212a:	4413      	add	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
 800212e:	e7d4      	b.n	80020da <UART_SetConfig+0xb2>
 8002130:	40011000 	.word	0x40011000
 8002134:	51eb851f 	.word	0x51eb851f

08002138 <UART_WaitOnFlagUntilTimeout>:
{
 8002138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800213c:	b083      	sub	sp, #12
 800213e:	4605      	mov	r5, r0
 8002140:	460e      	mov	r6, r1
 8002142:	4617      	mov	r7, r2
 8002144:	4699      	mov	r9, r3
 8002146:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800214a:	682b      	ldr	r3, [r5, #0]
 800214c:	681c      	ldr	r4, [r3, #0]
 800214e:	ea36 0404 	bics.w	r4, r6, r4
 8002152:	bf0c      	ite	eq
 8002154:	2401      	moveq	r4, #1
 8002156:	2400      	movne	r4, #0
 8002158:	42bc      	cmp	r4, r7
 800215a:	d128      	bne.n	80021ae <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800215c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002160:	d0f3      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002162:	f7fe fa77 	bl	8000654 <HAL_GetTick>
 8002166:	eba0 0009 	sub.w	r0, r0, r9
 800216a:	4540      	cmp	r0, r8
 800216c:	d823      	bhi.n	80021b6 <UART_WaitOnFlagUntilTimeout+0x7e>
 800216e:	f1b8 0f00 	cmp.w	r8, #0
 8002172:	d022      	beq.n	80021ba <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	f012 0f04 	tst.w	r2, #4
 800217c:	d0e5      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x12>
 800217e:	2e80      	cmp	r6, #128	@ 0x80
 8002180:	d0e3      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x12>
 8002182:	2e40      	cmp	r6, #64	@ 0x40
 8002184:	d0e1      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f012 0f08 	tst.w	r2, #8
 800218c:	d0dd      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800218e:	2400      	movs	r4, #0
 8002190:	9401      	str	r4, [sp, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	9201      	str	r2, [sp, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800219c:	4628      	mov	r0, r5
 800219e:	f7ff ff15 	bl	8001fcc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021a2:	2308      	movs	r3, #8
 80021a4:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80021a6:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80021aa:	2001      	movs	r0, #1
 80021ac:	e000      	b.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80021ae:	2000      	movs	r0, #0
}
 80021b0:	b003      	add	sp, #12
 80021b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80021b6:	2003      	movs	r0, #3
 80021b8:	e7fa      	b.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x78>
 80021ba:	2003      	movs	r0, #3
 80021bc:	e7f8      	b.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x78>

080021be <HAL_UART_Init>:
  if (huart == NULL)
 80021be:	b360      	cbz	r0, 800221a <HAL_UART_Init+0x5c>
{
 80021c0:	b510      	push	{r4, lr}
 80021c2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80021c4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80021c8:	b313      	cbz	r3, 8002210 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80021ca:	2324      	movs	r3, #36	@ 0x24
 80021cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	68d3      	ldr	r3, [r2, #12]
 80021d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80021d8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021da:	4620      	mov	r0, r4
 80021dc:	f7ff ff24 	bl	8002028 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e0:	6822      	ldr	r2, [r4, #0]
 80021e2:	6913      	ldr	r3, [r2, #16]
 80021e4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80021e8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ea:	6822      	ldr	r2, [r4, #0]
 80021ec:	6953      	ldr	r3, [r2, #20]
 80021ee:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80021f2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80021f4:	6822      	ldr	r2, [r4, #0]
 80021f6:	68d3      	ldr	r3, [r2, #12]
 80021f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021fc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fe:	2000      	movs	r0, #0
 8002200:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002202:	2320      	movs	r3, #32
 8002204:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800220c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800220e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002210:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002214:	f7fe fc02 	bl	8000a1c <HAL_UART_MspInit>
 8002218:	e7d7      	b.n	80021ca <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800221a:	2001      	movs	r0, #1
}
 800221c:	4770      	bx	lr

0800221e <HAL_UART_Transmit>:
{
 800221e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002226:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b20      	cmp	r3, #32
 800222e:	d156      	bne.n	80022de <HAL_UART_Transmit+0xc0>
 8002230:	4604      	mov	r4, r0
 8002232:	460d      	mov	r5, r1
 8002234:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002236:	2900      	cmp	r1, #0
 8002238:	d055      	beq.n	80022e6 <HAL_UART_Transmit+0xc8>
 800223a:	b90a      	cbnz	r2, 8002240 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800223c:	2001      	movs	r0, #1
 800223e:	e04f      	b.n	80022e0 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002240:	2300      	movs	r3, #0
 8002242:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002244:	2321      	movs	r3, #33	@ 0x21
 8002246:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800224a:	f7fe fa03 	bl	8000654 <HAL_GetTick>
 800224e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002250:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002254:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002258:	68a3      	ldr	r3, [r4, #8]
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800225e:	d002      	beq.n	8002266 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002260:	f04f 0800 	mov.w	r8, #0
 8002264:	e014      	b.n	8002290 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002266:	6923      	ldr	r3, [r4, #16]
 8002268:	b32b      	cbz	r3, 80022b6 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800226a:	f04f 0800 	mov.w	r8, #0
 800226e:	e00f      	b.n	8002290 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002270:	2320      	movs	r3, #32
 8002272:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002276:	2003      	movs	r0, #3
 8002278:	e032      	b.n	80022e0 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800227a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800227e:	6822      	ldr	r2, [r4, #0]
 8002280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002284:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002286:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002288:	b292      	uxth	r2, r2
 800228a:	3a01      	subs	r2, #1
 800228c:	b292      	uxth	r2, r2
 800228e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002290:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002292:	b29b      	uxth	r3, r3
 8002294:	b193      	cbz	r3, 80022bc <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002296:	9600      	str	r6, [sp, #0]
 8002298:	463b      	mov	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	2180      	movs	r1, #128	@ 0x80
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff ff4a 	bl	8002138 <UART_WaitOnFlagUntilTimeout>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	d1e3      	bne.n	8002270 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	d0e6      	beq.n	800227a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ac:	f815 2b01 	ldrb.w	r2, [r5], #1
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022b4:	e7e7      	b.n	8002286 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80022b6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80022b8:	2500      	movs	r5, #0
 80022ba:	e7e9      	b.n	8002290 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022bc:	9600      	str	r6, [sp, #0]
 80022be:	463b      	mov	r3, r7
 80022c0:	2200      	movs	r2, #0
 80022c2:	2140      	movs	r1, #64	@ 0x40
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff ff37 	bl	8002138 <UART_WaitOnFlagUntilTimeout>
 80022ca:	b918      	cbnz	r0, 80022d4 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80022cc:	2320      	movs	r3, #32
 80022ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80022d2:	e005      	b.n	80022e0 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80022d4:	2320      	movs	r3, #32
 80022d6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80022da:	2003      	movs	r0, #3
 80022dc:	e000      	b.n	80022e0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80022de:	2002      	movs	r0, #2
}
 80022e0:	b002      	add	sp, #8
 80022e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80022e6:	2001      	movs	r0, #1
 80022e8:	e7fa      	b.n	80022e0 <HAL_UART_Transmit+0xc2>
	...

080022ec <std>:
 80022ec:	2300      	movs	r3, #0
 80022ee:	b510      	push	{r4, lr}
 80022f0:	4604      	mov	r4, r0
 80022f2:	e9c0 3300 	strd	r3, r3, [r0]
 80022f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022fa:	6083      	str	r3, [r0, #8]
 80022fc:	8181      	strh	r1, [r0, #12]
 80022fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8002300:	81c2      	strh	r2, [r0, #14]
 8002302:	6183      	str	r3, [r0, #24]
 8002304:	4619      	mov	r1, r3
 8002306:	2208      	movs	r2, #8
 8002308:	305c      	adds	r0, #92	@ 0x5c
 800230a:	f000 f9f9 	bl	8002700 <memset>
 800230e:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <std+0x58>)
 8002310:	6263      	str	r3, [r4, #36]	@ 0x24
 8002312:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <std+0x5c>)
 8002314:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002316:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <std+0x60>)
 8002318:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800231a:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <std+0x64>)
 800231c:	6323      	str	r3, [r4, #48]	@ 0x30
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <std+0x68>)
 8002320:	6224      	str	r4, [r4, #32]
 8002322:	429c      	cmp	r4, r3
 8002324:	d006      	beq.n	8002334 <std+0x48>
 8002326:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800232a:	4294      	cmp	r4, r2
 800232c:	d002      	beq.n	8002334 <std+0x48>
 800232e:	33d0      	adds	r3, #208	@ 0xd0
 8002330:	429c      	cmp	r4, r3
 8002332:	d105      	bne.n	8002340 <std+0x54>
 8002334:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800233c:	f000 ba58 	b.w	80027f0 <__retarget_lock_init_recursive>
 8002340:	bd10      	pop	{r4, pc}
 8002342:	bf00      	nop
 8002344:	08002551 	.word	0x08002551
 8002348:	08002573 	.word	0x08002573
 800234c:	080025ab 	.word	0x080025ab
 8002350:	080025cf 	.word	0x080025cf
 8002354:	20000330 	.word	0x20000330

08002358 <stdio_exit_handler>:
 8002358:	4a02      	ldr	r2, [pc, #8]	@ (8002364 <stdio_exit_handler+0xc>)
 800235a:	4903      	ldr	r1, [pc, #12]	@ (8002368 <stdio_exit_handler+0x10>)
 800235c:	4803      	ldr	r0, [pc, #12]	@ (800236c <stdio_exit_handler+0x14>)
 800235e:	f000 b869 	b.w	8002434 <_fwalk_sglue>
 8002362:	bf00      	nop
 8002364:	2000000c 	.word	0x2000000c
 8002368:	08003091 	.word	0x08003091
 800236c:	2000001c 	.word	0x2000001c

08002370 <cleanup_stdio>:
 8002370:	6841      	ldr	r1, [r0, #4]
 8002372:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <cleanup_stdio+0x34>)
 8002374:	4299      	cmp	r1, r3
 8002376:	b510      	push	{r4, lr}
 8002378:	4604      	mov	r4, r0
 800237a:	d001      	beq.n	8002380 <cleanup_stdio+0x10>
 800237c:	f000 fe88 	bl	8003090 <_fflush_r>
 8002380:	68a1      	ldr	r1, [r4, #8]
 8002382:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <cleanup_stdio+0x38>)
 8002384:	4299      	cmp	r1, r3
 8002386:	d002      	beq.n	800238e <cleanup_stdio+0x1e>
 8002388:	4620      	mov	r0, r4
 800238a:	f000 fe81 	bl	8003090 <_fflush_r>
 800238e:	68e1      	ldr	r1, [r4, #12]
 8002390:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <cleanup_stdio+0x3c>)
 8002392:	4299      	cmp	r1, r3
 8002394:	d004      	beq.n	80023a0 <cleanup_stdio+0x30>
 8002396:	4620      	mov	r0, r4
 8002398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800239c:	f000 be78 	b.w	8003090 <_fflush_r>
 80023a0:	bd10      	pop	{r4, pc}
 80023a2:	bf00      	nop
 80023a4:	20000330 	.word	0x20000330
 80023a8:	20000398 	.word	0x20000398
 80023ac:	20000400 	.word	0x20000400

080023b0 <global_stdio_init.part.0>:
 80023b0:	b510      	push	{r4, lr}
 80023b2:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <global_stdio_init.part.0+0x30>)
 80023b4:	4c0b      	ldr	r4, [pc, #44]	@ (80023e4 <global_stdio_init.part.0+0x34>)
 80023b6:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <global_stdio_init.part.0+0x38>)
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	4620      	mov	r0, r4
 80023bc:	2200      	movs	r2, #0
 80023be:	2104      	movs	r1, #4
 80023c0:	f7ff ff94 	bl	80022ec <std>
 80023c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80023c8:	2201      	movs	r2, #1
 80023ca:	2109      	movs	r1, #9
 80023cc:	f7ff ff8e 	bl	80022ec <std>
 80023d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80023d4:	2202      	movs	r2, #2
 80023d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023da:	2112      	movs	r1, #18
 80023dc:	f7ff bf86 	b.w	80022ec <std>
 80023e0:	20000468 	.word	0x20000468
 80023e4:	20000330 	.word	0x20000330
 80023e8:	08002359 	.word	0x08002359

080023ec <__sfp_lock_acquire>:
 80023ec:	4801      	ldr	r0, [pc, #4]	@ (80023f4 <__sfp_lock_acquire+0x8>)
 80023ee:	f000 ba00 	b.w	80027f2 <__retarget_lock_acquire_recursive>
 80023f2:	bf00      	nop
 80023f4:	20000471 	.word	0x20000471

080023f8 <__sfp_lock_release>:
 80023f8:	4801      	ldr	r0, [pc, #4]	@ (8002400 <__sfp_lock_release+0x8>)
 80023fa:	f000 b9fb 	b.w	80027f4 <__retarget_lock_release_recursive>
 80023fe:	bf00      	nop
 8002400:	20000471 	.word	0x20000471

08002404 <__sinit>:
 8002404:	b510      	push	{r4, lr}
 8002406:	4604      	mov	r4, r0
 8002408:	f7ff fff0 	bl	80023ec <__sfp_lock_acquire>
 800240c:	6a23      	ldr	r3, [r4, #32]
 800240e:	b11b      	cbz	r3, 8002418 <__sinit+0x14>
 8002410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002414:	f7ff bff0 	b.w	80023f8 <__sfp_lock_release>
 8002418:	4b04      	ldr	r3, [pc, #16]	@ (800242c <__sinit+0x28>)
 800241a:	6223      	str	r3, [r4, #32]
 800241c:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <__sinit+0x2c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f5      	bne.n	8002410 <__sinit+0xc>
 8002424:	f7ff ffc4 	bl	80023b0 <global_stdio_init.part.0>
 8002428:	e7f2      	b.n	8002410 <__sinit+0xc>
 800242a:	bf00      	nop
 800242c:	08002371 	.word	0x08002371
 8002430:	20000468 	.word	0x20000468

08002434 <_fwalk_sglue>:
 8002434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002438:	4607      	mov	r7, r0
 800243a:	4688      	mov	r8, r1
 800243c:	4614      	mov	r4, r2
 800243e:	2600      	movs	r6, #0
 8002440:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002444:	f1b9 0901 	subs.w	r9, r9, #1
 8002448:	d505      	bpl.n	8002456 <_fwalk_sglue+0x22>
 800244a:	6824      	ldr	r4, [r4, #0]
 800244c:	2c00      	cmp	r4, #0
 800244e:	d1f7      	bne.n	8002440 <_fwalk_sglue+0xc>
 8002450:	4630      	mov	r0, r6
 8002452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002456:	89ab      	ldrh	r3, [r5, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d907      	bls.n	800246c <_fwalk_sglue+0x38>
 800245c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002460:	3301      	adds	r3, #1
 8002462:	d003      	beq.n	800246c <_fwalk_sglue+0x38>
 8002464:	4629      	mov	r1, r5
 8002466:	4638      	mov	r0, r7
 8002468:	47c0      	blx	r8
 800246a:	4306      	orrs	r6, r0
 800246c:	3568      	adds	r5, #104	@ 0x68
 800246e:	e7e9      	b.n	8002444 <_fwalk_sglue+0x10>

08002470 <iprintf>:
 8002470:	b40f      	push	{r0, r1, r2, r3}
 8002472:	b507      	push	{r0, r1, r2, lr}
 8002474:	4906      	ldr	r1, [pc, #24]	@ (8002490 <iprintf+0x20>)
 8002476:	ab04      	add	r3, sp, #16
 8002478:	6808      	ldr	r0, [r1, #0]
 800247a:	f853 2b04 	ldr.w	r2, [r3], #4
 800247e:	6881      	ldr	r1, [r0, #8]
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	f000 fadb 	bl	8002a3c <_vfiprintf_r>
 8002486:	b003      	add	sp, #12
 8002488:	f85d eb04 	ldr.w	lr, [sp], #4
 800248c:	b004      	add	sp, #16
 800248e:	4770      	bx	lr
 8002490:	20000018 	.word	0x20000018

08002494 <_puts_r>:
 8002494:	6a03      	ldr	r3, [r0, #32]
 8002496:	b570      	push	{r4, r5, r6, lr}
 8002498:	6884      	ldr	r4, [r0, #8]
 800249a:	4605      	mov	r5, r0
 800249c:	460e      	mov	r6, r1
 800249e:	b90b      	cbnz	r3, 80024a4 <_puts_r+0x10>
 80024a0:	f7ff ffb0 	bl	8002404 <__sinit>
 80024a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024a6:	07db      	lsls	r3, r3, #31
 80024a8:	d405      	bmi.n	80024b6 <_puts_r+0x22>
 80024aa:	89a3      	ldrh	r3, [r4, #12]
 80024ac:	0598      	lsls	r0, r3, #22
 80024ae:	d402      	bmi.n	80024b6 <_puts_r+0x22>
 80024b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024b2:	f000 f99e 	bl	80027f2 <__retarget_lock_acquire_recursive>
 80024b6:	89a3      	ldrh	r3, [r4, #12]
 80024b8:	0719      	lsls	r1, r3, #28
 80024ba:	d502      	bpl.n	80024c2 <_puts_r+0x2e>
 80024bc:	6923      	ldr	r3, [r4, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d135      	bne.n	800252e <_puts_r+0x9a>
 80024c2:	4621      	mov	r1, r4
 80024c4:	4628      	mov	r0, r5
 80024c6:	f000 f8c5 	bl	8002654 <__swsetup_r>
 80024ca:	b380      	cbz	r0, 800252e <_puts_r+0x9a>
 80024cc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80024d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024d2:	07da      	lsls	r2, r3, #31
 80024d4:	d405      	bmi.n	80024e2 <_puts_r+0x4e>
 80024d6:	89a3      	ldrh	r3, [r4, #12]
 80024d8:	059b      	lsls	r3, r3, #22
 80024da:	d402      	bmi.n	80024e2 <_puts_r+0x4e>
 80024dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024de:	f000 f989 	bl	80027f4 <__retarget_lock_release_recursive>
 80024e2:	4628      	mov	r0, r5
 80024e4:	bd70      	pop	{r4, r5, r6, pc}
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	da04      	bge.n	80024f4 <_puts_r+0x60>
 80024ea:	69a2      	ldr	r2, [r4, #24]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dc17      	bgt.n	8002520 <_puts_r+0x8c>
 80024f0:	290a      	cmp	r1, #10
 80024f2:	d015      	beq.n	8002520 <_puts_r+0x8c>
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	6022      	str	r2, [r4, #0]
 80024fa:	7019      	strb	r1, [r3, #0]
 80024fc:	68a3      	ldr	r3, [r4, #8]
 80024fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002502:	3b01      	subs	r3, #1
 8002504:	60a3      	str	r3, [r4, #8]
 8002506:	2900      	cmp	r1, #0
 8002508:	d1ed      	bne.n	80024e6 <_puts_r+0x52>
 800250a:	2b00      	cmp	r3, #0
 800250c:	da11      	bge.n	8002532 <_puts_r+0x9e>
 800250e:	4622      	mov	r2, r4
 8002510:	210a      	movs	r1, #10
 8002512:	4628      	mov	r0, r5
 8002514:	f000 f85f 	bl	80025d6 <__swbuf_r>
 8002518:	3001      	adds	r0, #1
 800251a:	d0d7      	beq.n	80024cc <_puts_r+0x38>
 800251c:	250a      	movs	r5, #10
 800251e:	e7d7      	b.n	80024d0 <_puts_r+0x3c>
 8002520:	4622      	mov	r2, r4
 8002522:	4628      	mov	r0, r5
 8002524:	f000 f857 	bl	80025d6 <__swbuf_r>
 8002528:	3001      	adds	r0, #1
 800252a:	d1e7      	bne.n	80024fc <_puts_r+0x68>
 800252c:	e7ce      	b.n	80024cc <_puts_r+0x38>
 800252e:	3e01      	subs	r6, #1
 8002530:	e7e4      	b.n	80024fc <_puts_r+0x68>
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	6022      	str	r2, [r4, #0]
 8002538:	220a      	movs	r2, #10
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e7ee      	b.n	800251c <_puts_r+0x88>
	...

08002540 <puts>:
 8002540:	4b02      	ldr	r3, [pc, #8]	@ (800254c <puts+0xc>)
 8002542:	4601      	mov	r1, r0
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	f7ff bfa5 	b.w	8002494 <_puts_r>
 800254a:	bf00      	nop
 800254c:	20000018 	.word	0x20000018

08002550 <__sread>:
 8002550:	b510      	push	{r4, lr}
 8002552:	460c      	mov	r4, r1
 8002554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002558:	f000 f8fc 	bl	8002754 <_read_r>
 800255c:	2800      	cmp	r0, #0
 800255e:	bfab      	itete	ge
 8002560:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002562:	89a3      	ldrhlt	r3, [r4, #12]
 8002564:	181b      	addge	r3, r3, r0
 8002566:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800256a:	bfac      	ite	ge
 800256c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800256e:	81a3      	strhlt	r3, [r4, #12]
 8002570:	bd10      	pop	{r4, pc}

08002572 <__swrite>:
 8002572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002576:	461f      	mov	r7, r3
 8002578:	898b      	ldrh	r3, [r1, #12]
 800257a:	05db      	lsls	r3, r3, #23
 800257c:	4605      	mov	r5, r0
 800257e:	460c      	mov	r4, r1
 8002580:	4616      	mov	r6, r2
 8002582:	d505      	bpl.n	8002590 <__swrite+0x1e>
 8002584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002588:	2302      	movs	r3, #2
 800258a:	2200      	movs	r2, #0
 800258c:	f000 f8d0 	bl	8002730 <_lseek_r>
 8002590:	89a3      	ldrh	r3, [r4, #12]
 8002592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002596:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800259a:	81a3      	strh	r3, [r4, #12]
 800259c:	4632      	mov	r2, r6
 800259e:	463b      	mov	r3, r7
 80025a0:	4628      	mov	r0, r5
 80025a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025a6:	f000 b8e7 	b.w	8002778 <_write_r>

080025aa <__sseek>:
 80025aa:	b510      	push	{r4, lr}
 80025ac:	460c      	mov	r4, r1
 80025ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b2:	f000 f8bd 	bl	8002730 <_lseek_r>
 80025b6:	1c43      	adds	r3, r0, #1
 80025b8:	89a3      	ldrh	r3, [r4, #12]
 80025ba:	bf15      	itete	ne
 80025bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80025be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80025c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80025c6:	81a3      	strheq	r3, [r4, #12]
 80025c8:	bf18      	it	ne
 80025ca:	81a3      	strhne	r3, [r4, #12]
 80025cc:	bd10      	pop	{r4, pc}

080025ce <__sclose>:
 80025ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025d2:	f000 b89d 	b.w	8002710 <_close_r>

080025d6 <__swbuf_r>:
 80025d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d8:	460e      	mov	r6, r1
 80025da:	4614      	mov	r4, r2
 80025dc:	4605      	mov	r5, r0
 80025de:	b118      	cbz	r0, 80025e8 <__swbuf_r+0x12>
 80025e0:	6a03      	ldr	r3, [r0, #32]
 80025e2:	b90b      	cbnz	r3, 80025e8 <__swbuf_r+0x12>
 80025e4:	f7ff ff0e 	bl	8002404 <__sinit>
 80025e8:	69a3      	ldr	r3, [r4, #24]
 80025ea:	60a3      	str	r3, [r4, #8]
 80025ec:	89a3      	ldrh	r3, [r4, #12]
 80025ee:	071a      	lsls	r2, r3, #28
 80025f0:	d501      	bpl.n	80025f6 <__swbuf_r+0x20>
 80025f2:	6923      	ldr	r3, [r4, #16]
 80025f4:	b943      	cbnz	r3, 8002608 <__swbuf_r+0x32>
 80025f6:	4621      	mov	r1, r4
 80025f8:	4628      	mov	r0, r5
 80025fa:	f000 f82b 	bl	8002654 <__swsetup_r>
 80025fe:	b118      	cbz	r0, 8002608 <__swbuf_r+0x32>
 8002600:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002604:	4638      	mov	r0, r7
 8002606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	6922      	ldr	r2, [r4, #16]
 800260c:	1a98      	subs	r0, r3, r2
 800260e:	6963      	ldr	r3, [r4, #20]
 8002610:	b2f6      	uxtb	r6, r6
 8002612:	4283      	cmp	r3, r0
 8002614:	4637      	mov	r7, r6
 8002616:	dc05      	bgt.n	8002624 <__swbuf_r+0x4e>
 8002618:	4621      	mov	r1, r4
 800261a:	4628      	mov	r0, r5
 800261c:	f000 fd38 	bl	8003090 <_fflush_r>
 8002620:	2800      	cmp	r0, #0
 8002622:	d1ed      	bne.n	8002600 <__swbuf_r+0x2a>
 8002624:	68a3      	ldr	r3, [r4, #8]
 8002626:	3b01      	subs	r3, #1
 8002628:	60a3      	str	r3, [r4, #8]
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	6022      	str	r2, [r4, #0]
 8002630:	701e      	strb	r6, [r3, #0]
 8002632:	6962      	ldr	r2, [r4, #20]
 8002634:	1c43      	adds	r3, r0, #1
 8002636:	429a      	cmp	r2, r3
 8002638:	d004      	beq.n	8002644 <__swbuf_r+0x6e>
 800263a:	89a3      	ldrh	r3, [r4, #12]
 800263c:	07db      	lsls	r3, r3, #31
 800263e:	d5e1      	bpl.n	8002604 <__swbuf_r+0x2e>
 8002640:	2e0a      	cmp	r6, #10
 8002642:	d1df      	bne.n	8002604 <__swbuf_r+0x2e>
 8002644:	4621      	mov	r1, r4
 8002646:	4628      	mov	r0, r5
 8002648:	f000 fd22 	bl	8003090 <_fflush_r>
 800264c:	2800      	cmp	r0, #0
 800264e:	d0d9      	beq.n	8002604 <__swbuf_r+0x2e>
 8002650:	e7d6      	b.n	8002600 <__swbuf_r+0x2a>
	...

08002654 <__swsetup_r>:
 8002654:	b538      	push	{r3, r4, r5, lr}
 8002656:	4b29      	ldr	r3, [pc, #164]	@ (80026fc <__swsetup_r+0xa8>)
 8002658:	4605      	mov	r5, r0
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	460c      	mov	r4, r1
 800265e:	b118      	cbz	r0, 8002668 <__swsetup_r+0x14>
 8002660:	6a03      	ldr	r3, [r0, #32]
 8002662:	b90b      	cbnz	r3, 8002668 <__swsetup_r+0x14>
 8002664:	f7ff fece 	bl	8002404 <__sinit>
 8002668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800266c:	0719      	lsls	r1, r3, #28
 800266e:	d422      	bmi.n	80026b6 <__swsetup_r+0x62>
 8002670:	06da      	lsls	r2, r3, #27
 8002672:	d407      	bmi.n	8002684 <__swsetup_r+0x30>
 8002674:	2209      	movs	r2, #9
 8002676:	602a      	str	r2, [r5, #0]
 8002678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800267c:	81a3      	strh	r3, [r4, #12]
 800267e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002682:	e033      	b.n	80026ec <__swsetup_r+0x98>
 8002684:	0758      	lsls	r0, r3, #29
 8002686:	d512      	bpl.n	80026ae <__swsetup_r+0x5a>
 8002688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800268a:	b141      	cbz	r1, 800269e <__swsetup_r+0x4a>
 800268c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002690:	4299      	cmp	r1, r3
 8002692:	d002      	beq.n	800269a <__swsetup_r+0x46>
 8002694:	4628      	mov	r0, r5
 8002696:	f000 f8af 	bl	80027f8 <_free_r>
 800269a:	2300      	movs	r3, #0
 800269c:	6363      	str	r3, [r4, #52]	@ 0x34
 800269e:	89a3      	ldrh	r3, [r4, #12]
 80026a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80026a4:	81a3      	strh	r3, [r4, #12]
 80026a6:	2300      	movs	r3, #0
 80026a8:	6063      	str	r3, [r4, #4]
 80026aa:	6923      	ldr	r3, [r4, #16]
 80026ac:	6023      	str	r3, [r4, #0]
 80026ae:	89a3      	ldrh	r3, [r4, #12]
 80026b0:	f043 0308 	orr.w	r3, r3, #8
 80026b4:	81a3      	strh	r3, [r4, #12]
 80026b6:	6923      	ldr	r3, [r4, #16]
 80026b8:	b94b      	cbnz	r3, 80026ce <__swsetup_r+0x7a>
 80026ba:	89a3      	ldrh	r3, [r4, #12]
 80026bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c4:	d003      	beq.n	80026ce <__swsetup_r+0x7a>
 80026c6:	4621      	mov	r1, r4
 80026c8:	4628      	mov	r0, r5
 80026ca:	f000 fd2f 	bl	800312c <__smakebuf_r>
 80026ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026d2:	f013 0201 	ands.w	r2, r3, #1
 80026d6:	d00a      	beq.n	80026ee <__swsetup_r+0x9a>
 80026d8:	2200      	movs	r2, #0
 80026da:	60a2      	str	r2, [r4, #8]
 80026dc:	6962      	ldr	r2, [r4, #20]
 80026de:	4252      	negs	r2, r2
 80026e0:	61a2      	str	r2, [r4, #24]
 80026e2:	6922      	ldr	r2, [r4, #16]
 80026e4:	b942      	cbnz	r2, 80026f8 <__swsetup_r+0xa4>
 80026e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80026ea:	d1c5      	bne.n	8002678 <__swsetup_r+0x24>
 80026ec:	bd38      	pop	{r3, r4, r5, pc}
 80026ee:	0799      	lsls	r1, r3, #30
 80026f0:	bf58      	it	pl
 80026f2:	6962      	ldrpl	r2, [r4, #20]
 80026f4:	60a2      	str	r2, [r4, #8]
 80026f6:	e7f4      	b.n	80026e2 <__swsetup_r+0x8e>
 80026f8:	2000      	movs	r0, #0
 80026fa:	e7f7      	b.n	80026ec <__swsetup_r+0x98>
 80026fc:	20000018 	.word	0x20000018

08002700 <memset>:
 8002700:	4402      	add	r2, r0
 8002702:	4603      	mov	r3, r0
 8002704:	4293      	cmp	r3, r2
 8002706:	d100      	bne.n	800270a <memset+0xa>
 8002708:	4770      	bx	lr
 800270a:	f803 1b01 	strb.w	r1, [r3], #1
 800270e:	e7f9      	b.n	8002704 <memset+0x4>

08002710 <_close_r>:
 8002710:	b538      	push	{r3, r4, r5, lr}
 8002712:	4d06      	ldr	r5, [pc, #24]	@ (800272c <_close_r+0x1c>)
 8002714:	2300      	movs	r3, #0
 8002716:	4604      	mov	r4, r0
 8002718:	4608      	mov	r0, r1
 800271a:	602b      	str	r3, [r5, #0]
 800271c:	f7fe f9e8 	bl	8000af0 <_close>
 8002720:	1c43      	adds	r3, r0, #1
 8002722:	d102      	bne.n	800272a <_close_r+0x1a>
 8002724:	682b      	ldr	r3, [r5, #0]
 8002726:	b103      	cbz	r3, 800272a <_close_r+0x1a>
 8002728:	6023      	str	r3, [r4, #0]
 800272a:	bd38      	pop	{r3, r4, r5, pc}
 800272c:	2000046c 	.word	0x2000046c

08002730 <_lseek_r>:
 8002730:	b538      	push	{r3, r4, r5, lr}
 8002732:	4d07      	ldr	r5, [pc, #28]	@ (8002750 <_lseek_r+0x20>)
 8002734:	4604      	mov	r4, r0
 8002736:	4608      	mov	r0, r1
 8002738:	4611      	mov	r1, r2
 800273a:	2200      	movs	r2, #0
 800273c:	602a      	str	r2, [r5, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	f7fe f9e0 	bl	8000b04 <_lseek>
 8002744:	1c43      	adds	r3, r0, #1
 8002746:	d102      	bne.n	800274e <_lseek_r+0x1e>
 8002748:	682b      	ldr	r3, [r5, #0]
 800274a:	b103      	cbz	r3, 800274e <_lseek_r+0x1e>
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	bd38      	pop	{r3, r4, r5, pc}
 8002750:	2000046c 	.word	0x2000046c

08002754 <_read_r>:
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	4d07      	ldr	r5, [pc, #28]	@ (8002774 <_read_r+0x20>)
 8002758:	4604      	mov	r4, r0
 800275a:	4608      	mov	r0, r1
 800275c:	4611      	mov	r1, r2
 800275e:	2200      	movs	r2, #0
 8002760:	602a      	str	r2, [r5, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	f7fe f9b4 	bl	8000ad0 <_read>
 8002768:	1c43      	adds	r3, r0, #1
 800276a:	d102      	bne.n	8002772 <_read_r+0x1e>
 800276c:	682b      	ldr	r3, [r5, #0]
 800276e:	b103      	cbz	r3, 8002772 <_read_r+0x1e>
 8002770:	6023      	str	r3, [r4, #0]
 8002772:	bd38      	pop	{r3, r4, r5, pc}
 8002774:	2000046c 	.word	0x2000046c

08002778 <_write_r>:
 8002778:	b538      	push	{r3, r4, r5, lr}
 800277a:	4d07      	ldr	r5, [pc, #28]	@ (8002798 <_write_r+0x20>)
 800277c:	4604      	mov	r4, r0
 800277e:	4608      	mov	r0, r1
 8002780:	4611      	mov	r1, r2
 8002782:	2200      	movs	r2, #0
 8002784:	602a      	str	r2, [r5, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	f7fd ff4e 	bl	8000628 <_write>
 800278c:	1c43      	adds	r3, r0, #1
 800278e:	d102      	bne.n	8002796 <_write_r+0x1e>
 8002790:	682b      	ldr	r3, [r5, #0]
 8002792:	b103      	cbz	r3, 8002796 <_write_r+0x1e>
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	bd38      	pop	{r3, r4, r5, pc}
 8002798:	2000046c 	.word	0x2000046c

0800279c <__errno>:
 800279c:	4b01      	ldr	r3, [pc, #4]	@ (80027a4 <__errno+0x8>)
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000018 	.word	0x20000018

080027a8 <__libc_init_array>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	4d0d      	ldr	r5, [pc, #52]	@ (80027e0 <__libc_init_array+0x38>)
 80027ac:	4c0d      	ldr	r4, [pc, #52]	@ (80027e4 <__libc_init_array+0x3c>)
 80027ae:	1b64      	subs	r4, r4, r5
 80027b0:	10a4      	asrs	r4, r4, #2
 80027b2:	2600      	movs	r6, #0
 80027b4:	42a6      	cmp	r6, r4
 80027b6:	d109      	bne.n	80027cc <__libc_init_array+0x24>
 80027b8:	4d0b      	ldr	r5, [pc, #44]	@ (80027e8 <__libc_init_array+0x40>)
 80027ba:	4c0c      	ldr	r4, [pc, #48]	@ (80027ec <__libc_init_array+0x44>)
 80027bc:	f000 fd24 	bl	8003208 <_init>
 80027c0:	1b64      	subs	r4, r4, r5
 80027c2:	10a4      	asrs	r4, r4, #2
 80027c4:	2600      	movs	r6, #0
 80027c6:	42a6      	cmp	r6, r4
 80027c8:	d105      	bne.n	80027d6 <__libc_init_array+0x2e>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d0:	4798      	blx	r3
 80027d2:	3601      	adds	r6, #1
 80027d4:	e7ee      	b.n	80027b4 <__libc_init_array+0xc>
 80027d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027da:	4798      	blx	r3
 80027dc:	3601      	adds	r6, #1
 80027de:	e7f2      	b.n	80027c6 <__libc_init_array+0x1e>
 80027e0:	080032cc 	.word	0x080032cc
 80027e4:	080032cc 	.word	0x080032cc
 80027e8:	080032cc 	.word	0x080032cc
 80027ec:	080032d0 	.word	0x080032d0

080027f0 <__retarget_lock_init_recursive>:
 80027f0:	4770      	bx	lr

080027f2 <__retarget_lock_acquire_recursive>:
 80027f2:	4770      	bx	lr

080027f4 <__retarget_lock_release_recursive>:
 80027f4:	4770      	bx	lr
	...

080027f8 <_free_r>:
 80027f8:	b538      	push	{r3, r4, r5, lr}
 80027fa:	4605      	mov	r5, r0
 80027fc:	2900      	cmp	r1, #0
 80027fe:	d041      	beq.n	8002884 <_free_r+0x8c>
 8002800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002804:	1f0c      	subs	r4, r1, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	bfb8      	it	lt
 800280a:	18e4      	addlt	r4, r4, r3
 800280c:	f000 f8e0 	bl	80029d0 <__malloc_lock>
 8002810:	4a1d      	ldr	r2, [pc, #116]	@ (8002888 <_free_r+0x90>)
 8002812:	6813      	ldr	r3, [r2, #0]
 8002814:	b933      	cbnz	r3, 8002824 <_free_r+0x2c>
 8002816:	6063      	str	r3, [r4, #4]
 8002818:	6014      	str	r4, [r2, #0]
 800281a:	4628      	mov	r0, r5
 800281c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002820:	f000 b8dc 	b.w	80029dc <__malloc_unlock>
 8002824:	42a3      	cmp	r3, r4
 8002826:	d908      	bls.n	800283a <_free_r+0x42>
 8002828:	6820      	ldr	r0, [r4, #0]
 800282a:	1821      	adds	r1, r4, r0
 800282c:	428b      	cmp	r3, r1
 800282e:	bf01      	itttt	eq
 8002830:	6819      	ldreq	r1, [r3, #0]
 8002832:	685b      	ldreq	r3, [r3, #4]
 8002834:	1809      	addeq	r1, r1, r0
 8002836:	6021      	streq	r1, [r4, #0]
 8002838:	e7ed      	b.n	8002816 <_free_r+0x1e>
 800283a:	461a      	mov	r2, r3
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	b10b      	cbz	r3, 8002844 <_free_r+0x4c>
 8002840:	42a3      	cmp	r3, r4
 8002842:	d9fa      	bls.n	800283a <_free_r+0x42>
 8002844:	6811      	ldr	r1, [r2, #0]
 8002846:	1850      	adds	r0, r2, r1
 8002848:	42a0      	cmp	r0, r4
 800284a:	d10b      	bne.n	8002864 <_free_r+0x6c>
 800284c:	6820      	ldr	r0, [r4, #0]
 800284e:	4401      	add	r1, r0
 8002850:	1850      	adds	r0, r2, r1
 8002852:	4283      	cmp	r3, r0
 8002854:	6011      	str	r1, [r2, #0]
 8002856:	d1e0      	bne.n	800281a <_free_r+0x22>
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	6053      	str	r3, [r2, #4]
 800285e:	4408      	add	r0, r1
 8002860:	6010      	str	r0, [r2, #0]
 8002862:	e7da      	b.n	800281a <_free_r+0x22>
 8002864:	d902      	bls.n	800286c <_free_r+0x74>
 8002866:	230c      	movs	r3, #12
 8002868:	602b      	str	r3, [r5, #0]
 800286a:	e7d6      	b.n	800281a <_free_r+0x22>
 800286c:	6820      	ldr	r0, [r4, #0]
 800286e:	1821      	adds	r1, r4, r0
 8002870:	428b      	cmp	r3, r1
 8002872:	bf04      	itt	eq
 8002874:	6819      	ldreq	r1, [r3, #0]
 8002876:	685b      	ldreq	r3, [r3, #4]
 8002878:	6063      	str	r3, [r4, #4]
 800287a:	bf04      	itt	eq
 800287c:	1809      	addeq	r1, r1, r0
 800287e:	6021      	streq	r1, [r4, #0]
 8002880:	6054      	str	r4, [r2, #4]
 8002882:	e7ca      	b.n	800281a <_free_r+0x22>
 8002884:	bd38      	pop	{r3, r4, r5, pc}
 8002886:	bf00      	nop
 8002888:	20000478 	.word	0x20000478

0800288c <sbrk_aligned>:
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	4e0f      	ldr	r6, [pc, #60]	@ (80028cc <sbrk_aligned+0x40>)
 8002890:	460c      	mov	r4, r1
 8002892:	6831      	ldr	r1, [r6, #0]
 8002894:	4605      	mov	r5, r0
 8002896:	b911      	cbnz	r1, 800289e <sbrk_aligned+0x12>
 8002898:	f000 fca6 	bl	80031e8 <_sbrk_r>
 800289c:	6030      	str	r0, [r6, #0]
 800289e:	4621      	mov	r1, r4
 80028a0:	4628      	mov	r0, r5
 80028a2:	f000 fca1 	bl	80031e8 <_sbrk_r>
 80028a6:	1c43      	adds	r3, r0, #1
 80028a8:	d103      	bne.n	80028b2 <sbrk_aligned+0x26>
 80028aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80028ae:	4620      	mov	r0, r4
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
 80028b2:	1cc4      	adds	r4, r0, #3
 80028b4:	f024 0403 	bic.w	r4, r4, #3
 80028b8:	42a0      	cmp	r0, r4
 80028ba:	d0f8      	beq.n	80028ae <sbrk_aligned+0x22>
 80028bc:	1a21      	subs	r1, r4, r0
 80028be:	4628      	mov	r0, r5
 80028c0:	f000 fc92 	bl	80031e8 <_sbrk_r>
 80028c4:	3001      	adds	r0, #1
 80028c6:	d1f2      	bne.n	80028ae <sbrk_aligned+0x22>
 80028c8:	e7ef      	b.n	80028aa <sbrk_aligned+0x1e>
 80028ca:	bf00      	nop
 80028cc:	20000474 	.word	0x20000474

080028d0 <_malloc_r>:
 80028d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028d4:	1ccd      	adds	r5, r1, #3
 80028d6:	f025 0503 	bic.w	r5, r5, #3
 80028da:	3508      	adds	r5, #8
 80028dc:	2d0c      	cmp	r5, #12
 80028de:	bf38      	it	cc
 80028e0:	250c      	movcc	r5, #12
 80028e2:	2d00      	cmp	r5, #0
 80028e4:	4606      	mov	r6, r0
 80028e6:	db01      	blt.n	80028ec <_malloc_r+0x1c>
 80028e8:	42a9      	cmp	r1, r5
 80028ea:	d904      	bls.n	80028f6 <_malloc_r+0x26>
 80028ec:	230c      	movs	r3, #12
 80028ee:	6033      	str	r3, [r6, #0]
 80028f0:	2000      	movs	r0, #0
 80028f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80029cc <_malloc_r+0xfc>
 80028fa:	f000 f869 	bl	80029d0 <__malloc_lock>
 80028fe:	f8d8 3000 	ldr.w	r3, [r8]
 8002902:	461c      	mov	r4, r3
 8002904:	bb44      	cbnz	r4, 8002958 <_malloc_r+0x88>
 8002906:	4629      	mov	r1, r5
 8002908:	4630      	mov	r0, r6
 800290a:	f7ff ffbf 	bl	800288c <sbrk_aligned>
 800290e:	1c43      	adds	r3, r0, #1
 8002910:	4604      	mov	r4, r0
 8002912:	d158      	bne.n	80029c6 <_malloc_r+0xf6>
 8002914:	f8d8 4000 	ldr.w	r4, [r8]
 8002918:	4627      	mov	r7, r4
 800291a:	2f00      	cmp	r7, #0
 800291c:	d143      	bne.n	80029a6 <_malloc_r+0xd6>
 800291e:	2c00      	cmp	r4, #0
 8002920:	d04b      	beq.n	80029ba <_malloc_r+0xea>
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	4639      	mov	r1, r7
 8002926:	4630      	mov	r0, r6
 8002928:	eb04 0903 	add.w	r9, r4, r3
 800292c:	f000 fc5c 	bl	80031e8 <_sbrk_r>
 8002930:	4581      	cmp	r9, r0
 8002932:	d142      	bne.n	80029ba <_malloc_r+0xea>
 8002934:	6821      	ldr	r1, [r4, #0]
 8002936:	1a6d      	subs	r5, r5, r1
 8002938:	4629      	mov	r1, r5
 800293a:	4630      	mov	r0, r6
 800293c:	f7ff ffa6 	bl	800288c <sbrk_aligned>
 8002940:	3001      	adds	r0, #1
 8002942:	d03a      	beq.n	80029ba <_malloc_r+0xea>
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	442b      	add	r3, r5
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	f8d8 3000 	ldr.w	r3, [r8]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	bb62      	cbnz	r2, 80029ac <_malloc_r+0xdc>
 8002952:	f8c8 7000 	str.w	r7, [r8]
 8002956:	e00f      	b.n	8002978 <_malloc_r+0xa8>
 8002958:	6822      	ldr	r2, [r4, #0]
 800295a:	1b52      	subs	r2, r2, r5
 800295c:	d420      	bmi.n	80029a0 <_malloc_r+0xd0>
 800295e:	2a0b      	cmp	r2, #11
 8002960:	d917      	bls.n	8002992 <_malloc_r+0xc2>
 8002962:	1961      	adds	r1, r4, r5
 8002964:	42a3      	cmp	r3, r4
 8002966:	6025      	str	r5, [r4, #0]
 8002968:	bf18      	it	ne
 800296a:	6059      	strne	r1, [r3, #4]
 800296c:	6863      	ldr	r3, [r4, #4]
 800296e:	bf08      	it	eq
 8002970:	f8c8 1000 	streq.w	r1, [r8]
 8002974:	5162      	str	r2, [r4, r5]
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	4630      	mov	r0, r6
 800297a:	f000 f82f 	bl	80029dc <__malloc_unlock>
 800297e:	f104 000b 	add.w	r0, r4, #11
 8002982:	1d23      	adds	r3, r4, #4
 8002984:	f020 0007 	bic.w	r0, r0, #7
 8002988:	1ac2      	subs	r2, r0, r3
 800298a:	bf1c      	itt	ne
 800298c:	1a1b      	subne	r3, r3, r0
 800298e:	50a3      	strne	r3, [r4, r2]
 8002990:	e7af      	b.n	80028f2 <_malloc_r+0x22>
 8002992:	6862      	ldr	r2, [r4, #4]
 8002994:	42a3      	cmp	r3, r4
 8002996:	bf0c      	ite	eq
 8002998:	f8c8 2000 	streq.w	r2, [r8]
 800299c:	605a      	strne	r2, [r3, #4]
 800299e:	e7eb      	b.n	8002978 <_malloc_r+0xa8>
 80029a0:	4623      	mov	r3, r4
 80029a2:	6864      	ldr	r4, [r4, #4]
 80029a4:	e7ae      	b.n	8002904 <_malloc_r+0x34>
 80029a6:	463c      	mov	r4, r7
 80029a8:	687f      	ldr	r7, [r7, #4]
 80029aa:	e7b6      	b.n	800291a <_malloc_r+0x4a>
 80029ac:	461a      	mov	r2, r3
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	42a3      	cmp	r3, r4
 80029b2:	d1fb      	bne.n	80029ac <_malloc_r+0xdc>
 80029b4:	2300      	movs	r3, #0
 80029b6:	6053      	str	r3, [r2, #4]
 80029b8:	e7de      	b.n	8002978 <_malloc_r+0xa8>
 80029ba:	230c      	movs	r3, #12
 80029bc:	6033      	str	r3, [r6, #0]
 80029be:	4630      	mov	r0, r6
 80029c0:	f000 f80c 	bl	80029dc <__malloc_unlock>
 80029c4:	e794      	b.n	80028f0 <_malloc_r+0x20>
 80029c6:	6005      	str	r5, [r0, #0]
 80029c8:	e7d6      	b.n	8002978 <_malloc_r+0xa8>
 80029ca:	bf00      	nop
 80029cc:	20000478 	.word	0x20000478

080029d0 <__malloc_lock>:
 80029d0:	4801      	ldr	r0, [pc, #4]	@ (80029d8 <__malloc_lock+0x8>)
 80029d2:	f7ff bf0e 	b.w	80027f2 <__retarget_lock_acquire_recursive>
 80029d6:	bf00      	nop
 80029d8:	20000470 	.word	0x20000470

080029dc <__malloc_unlock>:
 80029dc:	4801      	ldr	r0, [pc, #4]	@ (80029e4 <__malloc_unlock+0x8>)
 80029de:	f7ff bf09 	b.w	80027f4 <__retarget_lock_release_recursive>
 80029e2:	bf00      	nop
 80029e4:	20000470 	.word	0x20000470

080029e8 <__sfputc_r>:
 80029e8:	6893      	ldr	r3, [r2, #8]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	b410      	push	{r4}
 80029f0:	6093      	str	r3, [r2, #8]
 80029f2:	da08      	bge.n	8002a06 <__sfputc_r+0x1e>
 80029f4:	6994      	ldr	r4, [r2, #24]
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	db01      	blt.n	80029fe <__sfputc_r+0x16>
 80029fa:	290a      	cmp	r1, #10
 80029fc:	d103      	bne.n	8002a06 <__sfputc_r+0x1e>
 80029fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a02:	f7ff bde8 	b.w	80025d6 <__swbuf_r>
 8002a06:	6813      	ldr	r3, [r2, #0]
 8002a08:	1c58      	adds	r0, r3, #1
 8002a0a:	6010      	str	r0, [r2, #0]
 8002a0c:	7019      	strb	r1, [r3, #0]
 8002a0e:	4608      	mov	r0, r1
 8002a10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <__sfputs_r>:
 8002a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a18:	4606      	mov	r6, r0
 8002a1a:	460f      	mov	r7, r1
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	18d5      	adds	r5, r2, r3
 8002a20:	42ac      	cmp	r4, r5
 8002a22:	d101      	bne.n	8002a28 <__sfputs_r+0x12>
 8002a24:	2000      	movs	r0, #0
 8002a26:	e007      	b.n	8002a38 <__sfputs_r+0x22>
 8002a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a2c:	463a      	mov	r2, r7
 8002a2e:	4630      	mov	r0, r6
 8002a30:	f7ff ffda 	bl	80029e8 <__sfputc_r>
 8002a34:	1c43      	adds	r3, r0, #1
 8002a36:	d1f3      	bne.n	8002a20 <__sfputs_r+0xa>
 8002a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a3c <_vfiprintf_r>:
 8002a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a40:	460d      	mov	r5, r1
 8002a42:	b09d      	sub	sp, #116	@ 0x74
 8002a44:	4614      	mov	r4, r2
 8002a46:	4698      	mov	r8, r3
 8002a48:	4606      	mov	r6, r0
 8002a4a:	b118      	cbz	r0, 8002a54 <_vfiprintf_r+0x18>
 8002a4c:	6a03      	ldr	r3, [r0, #32]
 8002a4e:	b90b      	cbnz	r3, 8002a54 <_vfiprintf_r+0x18>
 8002a50:	f7ff fcd8 	bl	8002404 <__sinit>
 8002a54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a56:	07d9      	lsls	r1, r3, #31
 8002a58:	d405      	bmi.n	8002a66 <_vfiprintf_r+0x2a>
 8002a5a:	89ab      	ldrh	r3, [r5, #12]
 8002a5c:	059a      	lsls	r2, r3, #22
 8002a5e:	d402      	bmi.n	8002a66 <_vfiprintf_r+0x2a>
 8002a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a62:	f7ff fec6 	bl	80027f2 <__retarget_lock_acquire_recursive>
 8002a66:	89ab      	ldrh	r3, [r5, #12]
 8002a68:	071b      	lsls	r3, r3, #28
 8002a6a:	d501      	bpl.n	8002a70 <_vfiprintf_r+0x34>
 8002a6c:	692b      	ldr	r3, [r5, #16]
 8002a6e:	b99b      	cbnz	r3, 8002a98 <_vfiprintf_r+0x5c>
 8002a70:	4629      	mov	r1, r5
 8002a72:	4630      	mov	r0, r6
 8002a74:	f7ff fdee 	bl	8002654 <__swsetup_r>
 8002a78:	b170      	cbz	r0, 8002a98 <_vfiprintf_r+0x5c>
 8002a7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a7c:	07dc      	lsls	r4, r3, #31
 8002a7e:	d504      	bpl.n	8002a8a <_vfiprintf_r+0x4e>
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a84:	b01d      	add	sp, #116	@ 0x74
 8002a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a8a:	89ab      	ldrh	r3, [r5, #12]
 8002a8c:	0598      	lsls	r0, r3, #22
 8002a8e:	d4f7      	bmi.n	8002a80 <_vfiprintf_r+0x44>
 8002a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a92:	f7ff feaf 	bl	80027f4 <__retarget_lock_release_recursive>
 8002a96:	e7f3      	b.n	8002a80 <_vfiprintf_r+0x44>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002aa6:	2330      	movs	r3, #48	@ 0x30
 8002aa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002c58 <_vfiprintf_r+0x21c>
 8002aac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ab0:	f04f 0901 	mov.w	r9, #1
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	469a      	mov	sl, r3
 8002ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002abc:	b10a      	cbz	r2, 8002ac2 <_vfiprintf_r+0x86>
 8002abe:	2a25      	cmp	r2, #37	@ 0x25
 8002ac0:	d1f9      	bne.n	8002ab6 <_vfiprintf_r+0x7a>
 8002ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8002ac6:	d00b      	beq.n	8002ae0 <_vfiprintf_r+0xa4>
 8002ac8:	465b      	mov	r3, fp
 8002aca:	4622      	mov	r2, r4
 8002acc:	4629      	mov	r1, r5
 8002ace:	4630      	mov	r0, r6
 8002ad0:	f7ff ffa1 	bl	8002a16 <__sfputs_r>
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	f000 80a7 	beq.w	8002c28 <_vfiprintf_r+0x1ec>
 8002ada:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002adc:	445a      	add	r2, fp
 8002ade:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 809f 	beq.w	8002c28 <_vfiprintf_r+0x1ec>
 8002aea:	2300      	movs	r3, #0
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002af4:	f10a 0a01 	add.w	sl, sl, #1
 8002af8:	9304      	str	r3, [sp, #16]
 8002afa:	9307      	str	r3, [sp, #28]
 8002afc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b00:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b02:	4654      	mov	r4, sl
 8002b04:	2205      	movs	r2, #5
 8002b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b0a:	4853      	ldr	r0, [pc, #332]	@ (8002c58 <_vfiprintf_r+0x21c>)
 8002b0c:	f7fd fb60 	bl	80001d0 <memchr>
 8002b10:	9a04      	ldr	r2, [sp, #16]
 8002b12:	b9d8      	cbnz	r0, 8002b4c <_vfiprintf_r+0x110>
 8002b14:	06d1      	lsls	r1, r2, #27
 8002b16:	bf44      	itt	mi
 8002b18:	2320      	movmi	r3, #32
 8002b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b1e:	0713      	lsls	r3, r2, #28
 8002b20:	bf44      	itt	mi
 8002b22:	232b      	movmi	r3, #43	@ 0x2b
 8002b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b28:	f89a 3000 	ldrb.w	r3, [sl]
 8002b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b2e:	d015      	beq.n	8002b5c <_vfiprintf_r+0x120>
 8002b30:	9a07      	ldr	r2, [sp, #28]
 8002b32:	4654      	mov	r4, sl
 8002b34:	2000      	movs	r0, #0
 8002b36:	f04f 0c0a 	mov.w	ip, #10
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b40:	3b30      	subs	r3, #48	@ 0x30
 8002b42:	2b09      	cmp	r3, #9
 8002b44:	d94b      	bls.n	8002bde <_vfiprintf_r+0x1a2>
 8002b46:	b1b0      	cbz	r0, 8002b76 <_vfiprintf_r+0x13a>
 8002b48:	9207      	str	r2, [sp, #28]
 8002b4a:	e014      	b.n	8002b76 <_vfiprintf_r+0x13a>
 8002b4c:	eba0 0308 	sub.w	r3, r0, r8
 8002b50:	fa09 f303 	lsl.w	r3, r9, r3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9304      	str	r3, [sp, #16]
 8002b58:	46a2      	mov	sl, r4
 8002b5a:	e7d2      	b.n	8002b02 <_vfiprintf_r+0xc6>
 8002b5c:	9b03      	ldr	r3, [sp, #12]
 8002b5e:	1d19      	adds	r1, r3, #4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	9103      	str	r1, [sp, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bfbb      	ittet	lt
 8002b68:	425b      	neglt	r3, r3
 8002b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8002b6e:	9307      	strge	r3, [sp, #28]
 8002b70:	9307      	strlt	r3, [sp, #28]
 8002b72:	bfb8      	it	lt
 8002b74:	9204      	strlt	r2, [sp, #16]
 8002b76:	7823      	ldrb	r3, [r4, #0]
 8002b78:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b7a:	d10a      	bne.n	8002b92 <_vfiprintf_r+0x156>
 8002b7c:	7863      	ldrb	r3, [r4, #1]
 8002b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b80:	d132      	bne.n	8002be8 <_vfiprintf_r+0x1ac>
 8002b82:	9b03      	ldr	r3, [sp, #12]
 8002b84:	1d1a      	adds	r2, r3, #4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	9203      	str	r2, [sp, #12]
 8002b8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b8e:	3402      	adds	r4, #2
 8002b90:	9305      	str	r3, [sp, #20]
 8002b92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002c68 <_vfiprintf_r+0x22c>
 8002b96:	7821      	ldrb	r1, [r4, #0]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	4650      	mov	r0, sl
 8002b9c:	f7fd fb18 	bl	80001d0 <memchr>
 8002ba0:	b138      	cbz	r0, 8002bb2 <_vfiprintf_r+0x176>
 8002ba2:	9b04      	ldr	r3, [sp, #16]
 8002ba4:	eba0 000a 	sub.w	r0, r0, sl
 8002ba8:	2240      	movs	r2, #64	@ 0x40
 8002baa:	4082      	lsls	r2, r0
 8002bac:	4313      	orrs	r3, r2
 8002bae:	3401      	adds	r4, #1
 8002bb0:	9304      	str	r3, [sp, #16]
 8002bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bb6:	4829      	ldr	r0, [pc, #164]	@ (8002c5c <_vfiprintf_r+0x220>)
 8002bb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002bbc:	2206      	movs	r2, #6
 8002bbe:	f7fd fb07 	bl	80001d0 <memchr>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d03f      	beq.n	8002c46 <_vfiprintf_r+0x20a>
 8002bc6:	4b26      	ldr	r3, [pc, #152]	@ (8002c60 <_vfiprintf_r+0x224>)
 8002bc8:	bb1b      	cbnz	r3, 8002c12 <_vfiprintf_r+0x1d6>
 8002bca:	9b03      	ldr	r3, [sp, #12]
 8002bcc:	3307      	adds	r3, #7
 8002bce:	f023 0307 	bic.w	r3, r3, #7
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	9303      	str	r3, [sp, #12]
 8002bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002bd8:	443b      	add	r3, r7
 8002bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bdc:	e76a      	b.n	8002ab4 <_vfiprintf_r+0x78>
 8002bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8002be2:	460c      	mov	r4, r1
 8002be4:	2001      	movs	r0, #1
 8002be6:	e7a8      	b.n	8002b3a <_vfiprintf_r+0xfe>
 8002be8:	2300      	movs	r3, #0
 8002bea:	3401      	adds	r4, #1
 8002bec:	9305      	str	r3, [sp, #20]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f04f 0c0a 	mov.w	ip, #10
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bfa:	3a30      	subs	r2, #48	@ 0x30
 8002bfc:	2a09      	cmp	r2, #9
 8002bfe:	d903      	bls.n	8002c08 <_vfiprintf_r+0x1cc>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0c6      	beq.n	8002b92 <_vfiprintf_r+0x156>
 8002c04:	9105      	str	r1, [sp, #20]
 8002c06:	e7c4      	b.n	8002b92 <_vfiprintf_r+0x156>
 8002c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e7f0      	b.n	8002bf4 <_vfiprintf_r+0x1b8>
 8002c12:	ab03      	add	r3, sp, #12
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	462a      	mov	r2, r5
 8002c18:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <_vfiprintf_r+0x228>)
 8002c1a:	a904      	add	r1, sp, #16
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	f3af 8000 	nop.w
 8002c22:	4607      	mov	r7, r0
 8002c24:	1c78      	adds	r0, r7, #1
 8002c26:	d1d6      	bne.n	8002bd6 <_vfiprintf_r+0x19a>
 8002c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c2a:	07d9      	lsls	r1, r3, #31
 8002c2c:	d405      	bmi.n	8002c3a <_vfiprintf_r+0x1fe>
 8002c2e:	89ab      	ldrh	r3, [r5, #12]
 8002c30:	059a      	lsls	r2, r3, #22
 8002c32:	d402      	bmi.n	8002c3a <_vfiprintf_r+0x1fe>
 8002c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c36:	f7ff fddd 	bl	80027f4 <__retarget_lock_release_recursive>
 8002c3a:	89ab      	ldrh	r3, [r5, #12]
 8002c3c:	065b      	lsls	r3, r3, #25
 8002c3e:	f53f af1f 	bmi.w	8002a80 <_vfiprintf_r+0x44>
 8002c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c44:	e71e      	b.n	8002a84 <_vfiprintf_r+0x48>
 8002c46:	ab03      	add	r3, sp, #12
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	462a      	mov	r2, r5
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <_vfiprintf_r+0x228>)
 8002c4e:	a904      	add	r1, sp, #16
 8002c50:	4630      	mov	r0, r6
 8002c52:	f000 f879 	bl	8002d48 <_printf_i>
 8002c56:	e7e4      	b.n	8002c22 <_vfiprintf_r+0x1e6>
 8002c58:	08003290 	.word	0x08003290
 8002c5c:	0800329a 	.word	0x0800329a
 8002c60:	00000000 	.word	0x00000000
 8002c64:	08002a17 	.word	0x08002a17
 8002c68:	08003296 	.word	0x08003296

08002c6c <_printf_common>:
 8002c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c70:	4616      	mov	r6, r2
 8002c72:	4698      	mov	r8, r3
 8002c74:	688a      	ldr	r2, [r1, #8]
 8002c76:	690b      	ldr	r3, [r1, #16]
 8002c78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	bfb8      	it	lt
 8002c80:	4613      	movlt	r3, r2
 8002c82:	6033      	str	r3, [r6, #0]
 8002c84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c88:	4607      	mov	r7, r0
 8002c8a:	460c      	mov	r4, r1
 8002c8c:	b10a      	cbz	r2, 8002c92 <_printf_common+0x26>
 8002c8e:	3301      	adds	r3, #1
 8002c90:	6033      	str	r3, [r6, #0]
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	0699      	lsls	r1, r3, #26
 8002c96:	bf42      	ittt	mi
 8002c98:	6833      	ldrmi	r3, [r6, #0]
 8002c9a:	3302      	addmi	r3, #2
 8002c9c:	6033      	strmi	r3, [r6, #0]
 8002c9e:	6825      	ldr	r5, [r4, #0]
 8002ca0:	f015 0506 	ands.w	r5, r5, #6
 8002ca4:	d106      	bne.n	8002cb4 <_printf_common+0x48>
 8002ca6:	f104 0a19 	add.w	sl, r4, #25
 8002caa:	68e3      	ldr	r3, [r4, #12]
 8002cac:	6832      	ldr	r2, [r6, #0]
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	42ab      	cmp	r3, r5
 8002cb2:	dc26      	bgt.n	8002d02 <_printf_common+0x96>
 8002cb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002cb8:	6822      	ldr	r2, [r4, #0]
 8002cba:	3b00      	subs	r3, #0
 8002cbc:	bf18      	it	ne
 8002cbe:	2301      	movne	r3, #1
 8002cc0:	0692      	lsls	r2, r2, #26
 8002cc2:	d42b      	bmi.n	8002d1c <_printf_common+0xb0>
 8002cc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002cc8:	4641      	mov	r1, r8
 8002cca:	4638      	mov	r0, r7
 8002ccc:	47c8      	blx	r9
 8002cce:	3001      	adds	r0, #1
 8002cd0:	d01e      	beq.n	8002d10 <_printf_common+0xa4>
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	6922      	ldr	r2, [r4, #16]
 8002cd6:	f003 0306 	and.w	r3, r3, #6
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	bf02      	ittt	eq
 8002cde:	68e5      	ldreq	r5, [r4, #12]
 8002ce0:	6833      	ldreq	r3, [r6, #0]
 8002ce2:	1aed      	subeq	r5, r5, r3
 8002ce4:	68a3      	ldr	r3, [r4, #8]
 8002ce6:	bf0c      	ite	eq
 8002ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cec:	2500      	movne	r5, #0
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	bfc4      	itt	gt
 8002cf2:	1a9b      	subgt	r3, r3, r2
 8002cf4:	18ed      	addgt	r5, r5, r3
 8002cf6:	2600      	movs	r6, #0
 8002cf8:	341a      	adds	r4, #26
 8002cfa:	42b5      	cmp	r5, r6
 8002cfc:	d11a      	bne.n	8002d34 <_printf_common+0xc8>
 8002cfe:	2000      	movs	r0, #0
 8002d00:	e008      	b.n	8002d14 <_printf_common+0xa8>
 8002d02:	2301      	movs	r3, #1
 8002d04:	4652      	mov	r2, sl
 8002d06:	4641      	mov	r1, r8
 8002d08:	4638      	mov	r0, r7
 8002d0a:	47c8      	blx	r9
 8002d0c:	3001      	adds	r0, #1
 8002d0e:	d103      	bne.n	8002d18 <_printf_common+0xac>
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d18:	3501      	adds	r5, #1
 8002d1a:	e7c6      	b.n	8002caa <_printf_common+0x3e>
 8002d1c:	18e1      	adds	r1, r4, r3
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	2030      	movs	r0, #48	@ 0x30
 8002d22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d26:	4422      	add	r2, r4
 8002d28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002d2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002d30:	3302      	adds	r3, #2
 8002d32:	e7c7      	b.n	8002cc4 <_printf_common+0x58>
 8002d34:	2301      	movs	r3, #1
 8002d36:	4622      	mov	r2, r4
 8002d38:	4641      	mov	r1, r8
 8002d3a:	4638      	mov	r0, r7
 8002d3c:	47c8      	blx	r9
 8002d3e:	3001      	adds	r0, #1
 8002d40:	d0e6      	beq.n	8002d10 <_printf_common+0xa4>
 8002d42:	3601      	adds	r6, #1
 8002d44:	e7d9      	b.n	8002cfa <_printf_common+0x8e>
	...

08002d48 <_printf_i>:
 8002d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d4c:	7e0f      	ldrb	r7, [r1, #24]
 8002d4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d50:	2f78      	cmp	r7, #120	@ 0x78
 8002d52:	4691      	mov	r9, r2
 8002d54:	4680      	mov	r8, r0
 8002d56:	460c      	mov	r4, r1
 8002d58:	469a      	mov	sl, r3
 8002d5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d5e:	d807      	bhi.n	8002d70 <_printf_i+0x28>
 8002d60:	2f62      	cmp	r7, #98	@ 0x62
 8002d62:	d80a      	bhi.n	8002d7a <_printf_i+0x32>
 8002d64:	2f00      	cmp	r7, #0
 8002d66:	f000 80d2 	beq.w	8002f0e <_printf_i+0x1c6>
 8002d6a:	2f58      	cmp	r7, #88	@ 0x58
 8002d6c:	f000 80b9 	beq.w	8002ee2 <_printf_i+0x19a>
 8002d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d78:	e03a      	b.n	8002df0 <_printf_i+0xa8>
 8002d7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d7e:	2b15      	cmp	r3, #21
 8002d80:	d8f6      	bhi.n	8002d70 <_printf_i+0x28>
 8002d82:	a101      	add	r1, pc, #4	@ (adr r1, 8002d88 <_printf_i+0x40>)
 8002d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d88:	08002de1 	.word	0x08002de1
 8002d8c:	08002df5 	.word	0x08002df5
 8002d90:	08002d71 	.word	0x08002d71
 8002d94:	08002d71 	.word	0x08002d71
 8002d98:	08002d71 	.word	0x08002d71
 8002d9c:	08002d71 	.word	0x08002d71
 8002da0:	08002df5 	.word	0x08002df5
 8002da4:	08002d71 	.word	0x08002d71
 8002da8:	08002d71 	.word	0x08002d71
 8002dac:	08002d71 	.word	0x08002d71
 8002db0:	08002d71 	.word	0x08002d71
 8002db4:	08002ef5 	.word	0x08002ef5
 8002db8:	08002e1f 	.word	0x08002e1f
 8002dbc:	08002eaf 	.word	0x08002eaf
 8002dc0:	08002d71 	.word	0x08002d71
 8002dc4:	08002d71 	.word	0x08002d71
 8002dc8:	08002f17 	.word	0x08002f17
 8002dcc:	08002d71 	.word	0x08002d71
 8002dd0:	08002e1f 	.word	0x08002e1f
 8002dd4:	08002d71 	.word	0x08002d71
 8002dd8:	08002d71 	.word	0x08002d71
 8002ddc:	08002eb7 	.word	0x08002eb7
 8002de0:	6833      	ldr	r3, [r6, #0]
 8002de2:	1d1a      	adds	r2, r3, #4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6032      	str	r2, [r6, #0]
 8002de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002dec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002df0:	2301      	movs	r3, #1
 8002df2:	e09d      	b.n	8002f30 <_printf_i+0x1e8>
 8002df4:	6833      	ldr	r3, [r6, #0]
 8002df6:	6820      	ldr	r0, [r4, #0]
 8002df8:	1d19      	adds	r1, r3, #4
 8002dfa:	6031      	str	r1, [r6, #0]
 8002dfc:	0606      	lsls	r6, r0, #24
 8002dfe:	d501      	bpl.n	8002e04 <_printf_i+0xbc>
 8002e00:	681d      	ldr	r5, [r3, #0]
 8002e02:	e003      	b.n	8002e0c <_printf_i+0xc4>
 8002e04:	0645      	lsls	r5, r0, #25
 8002e06:	d5fb      	bpl.n	8002e00 <_printf_i+0xb8>
 8002e08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e0c:	2d00      	cmp	r5, #0
 8002e0e:	da03      	bge.n	8002e18 <_printf_i+0xd0>
 8002e10:	232d      	movs	r3, #45	@ 0x2d
 8002e12:	426d      	negs	r5, r5
 8002e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e18:	4859      	ldr	r0, [pc, #356]	@ (8002f80 <_printf_i+0x238>)
 8002e1a:	230a      	movs	r3, #10
 8002e1c:	e011      	b.n	8002e42 <_printf_i+0xfa>
 8002e1e:	6821      	ldr	r1, [r4, #0]
 8002e20:	6833      	ldr	r3, [r6, #0]
 8002e22:	0608      	lsls	r0, r1, #24
 8002e24:	f853 5b04 	ldr.w	r5, [r3], #4
 8002e28:	d402      	bmi.n	8002e30 <_printf_i+0xe8>
 8002e2a:	0649      	lsls	r1, r1, #25
 8002e2c:	bf48      	it	mi
 8002e2e:	b2ad      	uxthmi	r5, r5
 8002e30:	2f6f      	cmp	r7, #111	@ 0x6f
 8002e32:	4853      	ldr	r0, [pc, #332]	@ (8002f80 <_printf_i+0x238>)
 8002e34:	6033      	str	r3, [r6, #0]
 8002e36:	bf14      	ite	ne
 8002e38:	230a      	movne	r3, #10
 8002e3a:	2308      	moveq	r3, #8
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002e42:	6866      	ldr	r6, [r4, #4]
 8002e44:	60a6      	str	r6, [r4, #8]
 8002e46:	2e00      	cmp	r6, #0
 8002e48:	bfa2      	ittt	ge
 8002e4a:	6821      	ldrge	r1, [r4, #0]
 8002e4c:	f021 0104 	bicge.w	r1, r1, #4
 8002e50:	6021      	strge	r1, [r4, #0]
 8002e52:	b90d      	cbnz	r5, 8002e58 <_printf_i+0x110>
 8002e54:	2e00      	cmp	r6, #0
 8002e56:	d04b      	beq.n	8002ef0 <_printf_i+0x1a8>
 8002e58:	4616      	mov	r6, r2
 8002e5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e5e:	fb03 5711 	mls	r7, r3, r1, r5
 8002e62:	5dc7      	ldrb	r7, [r0, r7]
 8002e64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e68:	462f      	mov	r7, r5
 8002e6a:	42bb      	cmp	r3, r7
 8002e6c:	460d      	mov	r5, r1
 8002e6e:	d9f4      	bls.n	8002e5a <_printf_i+0x112>
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d10b      	bne.n	8002e8c <_printf_i+0x144>
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	07df      	lsls	r7, r3, #31
 8002e78:	d508      	bpl.n	8002e8c <_printf_i+0x144>
 8002e7a:	6923      	ldr	r3, [r4, #16]
 8002e7c:	6861      	ldr	r1, [r4, #4]
 8002e7e:	4299      	cmp	r1, r3
 8002e80:	bfde      	ittt	le
 8002e82:	2330      	movle	r3, #48	@ 0x30
 8002e84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e88:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002e8c:	1b92      	subs	r2, r2, r6
 8002e8e:	6122      	str	r2, [r4, #16]
 8002e90:	f8cd a000 	str.w	sl, [sp]
 8002e94:	464b      	mov	r3, r9
 8002e96:	aa03      	add	r2, sp, #12
 8002e98:	4621      	mov	r1, r4
 8002e9a:	4640      	mov	r0, r8
 8002e9c:	f7ff fee6 	bl	8002c6c <_printf_common>
 8002ea0:	3001      	adds	r0, #1
 8002ea2:	d14a      	bne.n	8002f3a <_printf_i+0x1f2>
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ea8:	b004      	add	sp, #16
 8002eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	6023      	str	r3, [r4, #0]
 8002eb6:	4833      	ldr	r0, [pc, #204]	@ (8002f84 <_printf_i+0x23c>)
 8002eb8:	2778      	movs	r7, #120	@ 0x78
 8002eba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	6831      	ldr	r1, [r6, #0]
 8002ec2:	061f      	lsls	r7, r3, #24
 8002ec4:	f851 5b04 	ldr.w	r5, [r1], #4
 8002ec8:	d402      	bmi.n	8002ed0 <_printf_i+0x188>
 8002eca:	065f      	lsls	r7, r3, #25
 8002ecc:	bf48      	it	mi
 8002ece:	b2ad      	uxthmi	r5, r5
 8002ed0:	6031      	str	r1, [r6, #0]
 8002ed2:	07d9      	lsls	r1, r3, #31
 8002ed4:	bf44      	itt	mi
 8002ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8002eda:	6023      	strmi	r3, [r4, #0]
 8002edc:	b11d      	cbz	r5, 8002ee6 <_printf_i+0x19e>
 8002ede:	2310      	movs	r3, #16
 8002ee0:	e7ac      	b.n	8002e3c <_printf_i+0xf4>
 8002ee2:	4827      	ldr	r0, [pc, #156]	@ (8002f80 <_printf_i+0x238>)
 8002ee4:	e7e9      	b.n	8002eba <_printf_i+0x172>
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	f023 0320 	bic.w	r3, r3, #32
 8002eec:	6023      	str	r3, [r4, #0]
 8002eee:	e7f6      	b.n	8002ede <_printf_i+0x196>
 8002ef0:	4616      	mov	r6, r2
 8002ef2:	e7bd      	b.n	8002e70 <_printf_i+0x128>
 8002ef4:	6833      	ldr	r3, [r6, #0]
 8002ef6:	6825      	ldr	r5, [r4, #0]
 8002ef8:	6961      	ldr	r1, [r4, #20]
 8002efa:	1d18      	adds	r0, r3, #4
 8002efc:	6030      	str	r0, [r6, #0]
 8002efe:	062e      	lsls	r6, r5, #24
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	d501      	bpl.n	8002f08 <_printf_i+0x1c0>
 8002f04:	6019      	str	r1, [r3, #0]
 8002f06:	e002      	b.n	8002f0e <_printf_i+0x1c6>
 8002f08:	0668      	lsls	r0, r5, #25
 8002f0a:	d5fb      	bpl.n	8002f04 <_printf_i+0x1bc>
 8002f0c:	8019      	strh	r1, [r3, #0]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6123      	str	r3, [r4, #16]
 8002f12:	4616      	mov	r6, r2
 8002f14:	e7bc      	b.n	8002e90 <_printf_i+0x148>
 8002f16:	6833      	ldr	r3, [r6, #0]
 8002f18:	1d1a      	adds	r2, r3, #4
 8002f1a:	6032      	str	r2, [r6, #0]
 8002f1c:	681e      	ldr	r6, [r3, #0]
 8002f1e:	6862      	ldr	r2, [r4, #4]
 8002f20:	2100      	movs	r1, #0
 8002f22:	4630      	mov	r0, r6
 8002f24:	f7fd f954 	bl	80001d0 <memchr>
 8002f28:	b108      	cbz	r0, 8002f2e <_printf_i+0x1e6>
 8002f2a:	1b80      	subs	r0, r0, r6
 8002f2c:	6060      	str	r0, [r4, #4]
 8002f2e:	6863      	ldr	r3, [r4, #4]
 8002f30:	6123      	str	r3, [r4, #16]
 8002f32:	2300      	movs	r3, #0
 8002f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f38:	e7aa      	b.n	8002e90 <_printf_i+0x148>
 8002f3a:	6923      	ldr	r3, [r4, #16]
 8002f3c:	4632      	mov	r2, r6
 8002f3e:	4649      	mov	r1, r9
 8002f40:	4640      	mov	r0, r8
 8002f42:	47d0      	blx	sl
 8002f44:	3001      	adds	r0, #1
 8002f46:	d0ad      	beq.n	8002ea4 <_printf_i+0x15c>
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	079b      	lsls	r3, r3, #30
 8002f4c:	d413      	bmi.n	8002f76 <_printf_i+0x22e>
 8002f4e:	68e0      	ldr	r0, [r4, #12]
 8002f50:	9b03      	ldr	r3, [sp, #12]
 8002f52:	4298      	cmp	r0, r3
 8002f54:	bfb8      	it	lt
 8002f56:	4618      	movlt	r0, r3
 8002f58:	e7a6      	b.n	8002ea8 <_printf_i+0x160>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4632      	mov	r2, r6
 8002f5e:	4649      	mov	r1, r9
 8002f60:	4640      	mov	r0, r8
 8002f62:	47d0      	blx	sl
 8002f64:	3001      	adds	r0, #1
 8002f66:	d09d      	beq.n	8002ea4 <_printf_i+0x15c>
 8002f68:	3501      	adds	r5, #1
 8002f6a:	68e3      	ldr	r3, [r4, #12]
 8002f6c:	9903      	ldr	r1, [sp, #12]
 8002f6e:	1a5b      	subs	r3, r3, r1
 8002f70:	42ab      	cmp	r3, r5
 8002f72:	dcf2      	bgt.n	8002f5a <_printf_i+0x212>
 8002f74:	e7eb      	b.n	8002f4e <_printf_i+0x206>
 8002f76:	2500      	movs	r5, #0
 8002f78:	f104 0619 	add.w	r6, r4, #25
 8002f7c:	e7f5      	b.n	8002f6a <_printf_i+0x222>
 8002f7e:	bf00      	nop
 8002f80:	080032a1 	.word	0x080032a1
 8002f84:	080032b2 	.word	0x080032b2

08002f88 <__sflush_r>:
 8002f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f90:	0716      	lsls	r6, r2, #28
 8002f92:	4605      	mov	r5, r0
 8002f94:	460c      	mov	r4, r1
 8002f96:	d454      	bmi.n	8003042 <__sflush_r+0xba>
 8002f98:	684b      	ldr	r3, [r1, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	dc02      	bgt.n	8002fa4 <__sflush_r+0x1c>
 8002f9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	dd48      	ble.n	8003036 <__sflush_r+0xae>
 8002fa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002fa6:	2e00      	cmp	r6, #0
 8002fa8:	d045      	beq.n	8003036 <__sflush_r+0xae>
 8002faa:	2300      	movs	r3, #0
 8002fac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002fb0:	682f      	ldr	r7, [r5, #0]
 8002fb2:	6a21      	ldr	r1, [r4, #32]
 8002fb4:	602b      	str	r3, [r5, #0]
 8002fb6:	d030      	beq.n	800301a <__sflush_r+0x92>
 8002fb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	0759      	lsls	r1, r3, #29
 8002fbe:	d505      	bpl.n	8002fcc <__sflush_r+0x44>
 8002fc0:	6863      	ldr	r3, [r4, #4]
 8002fc2:	1ad2      	subs	r2, r2, r3
 8002fc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002fc6:	b10b      	cbz	r3, 8002fcc <__sflush_r+0x44>
 8002fc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	2300      	movs	r3, #0
 8002fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002fd0:	6a21      	ldr	r1, [r4, #32]
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	47b0      	blx	r6
 8002fd6:	1c43      	adds	r3, r0, #1
 8002fd8:	89a3      	ldrh	r3, [r4, #12]
 8002fda:	d106      	bne.n	8002fea <__sflush_r+0x62>
 8002fdc:	6829      	ldr	r1, [r5, #0]
 8002fde:	291d      	cmp	r1, #29
 8002fe0:	d82b      	bhi.n	800303a <__sflush_r+0xb2>
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800308c <__sflush_r+0x104>)
 8002fe4:	410a      	asrs	r2, r1
 8002fe6:	07d6      	lsls	r6, r2, #31
 8002fe8:	d427      	bmi.n	800303a <__sflush_r+0xb2>
 8002fea:	2200      	movs	r2, #0
 8002fec:	6062      	str	r2, [r4, #4]
 8002fee:	04d9      	lsls	r1, r3, #19
 8002ff0:	6922      	ldr	r2, [r4, #16]
 8002ff2:	6022      	str	r2, [r4, #0]
 8002ff4:	d504      	bpl.n	8003000 <__sflush_r+0x78>
 8002ff6:	1c42      	adds	r2, r0, #1
 8002ff8:	d101      	bne.n	8002ffe <__sflush_r+0x76>
 8002ffa:	682b      	ldr	r3, [r5, #0]
 8002ffc:	b903      	cbnz	r3, 8003000 <__sflush_r+0x78>
 8002ffe:	6560      	str	r0, [r4, #84]	@ 0x54
 8003000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003002:	602f      	str	r7, [r5, #0]
 8003004:	b1b9      	cbz	r1, 8003036 <__sflush_r+0xae>
 8003006:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800300a:	4299      	cmp	r1, r3
 800300c:	d002      	beq.n	8003014 <__sflush_r+0x8c>
 800300e:	4628      	mov	r0, r5
 8003010:	f7ff fbf2 	bl	80027f8 <_free_r>
 8003014:	2300      	movs	r3, #0
 8003016:	6363      	str	r3, [r4, #52]	@ 0x34
 8003018:	e00d      	b.n	8003036 <__sflush_r+0xae>
 800301a:	2301      	movs	r3, #1
 800301c:	4628      	mov	r0, r5
 800301e:	47b0      	blx	r6
 8003020:	4602      	mov	r2, r0
 8003022:	1c50      	adds	r0, r2, #1
 8003024:	d1c9      	bne.n	8002fba <__sflush_r+0x32>
 8003026:	682b      	ldr	r3, [r5, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0c6      	beq.n	8002fba <__sflush_r+0x32>
 800302c:	2b1d      	cmp	r3, #29
 800302e:	d001      	beq.n	8003034 <__sflush_r+0xac>
 8003030:	2b16      	cmp	r3, #22
 8003032:	d11e      	bne.n	8003072 <__sflush_r+0xea>
 8003034:	602f      	str	r7, [r5, #0]
 8003036:	2000      	movs	r0, #0
 8003038:	e022      	b.n	8003080 <__sflush_r+0xf8>
 800303a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800303e:	b21b      	sxth	r3, r3
 8003040:	e01b      	b.n	800307a <__sflush_r+0xf2>
 8003042:	690f      	ldr	r7, [r1, #16]
 8003044:	2f00      	cmp	r7, #0
 8003046:	d0f6      	beq.n	8003036 <__sflush_r+0xae>
 8003048:	0793      	lsls	r3, r2, #30
 800304a:	680e      	ldr	r6, [r1, #0]
 800304c:	bf08      	it	eq
 800304e:	694b      	ldreq	r3, [r1, #20]
 8003050:	600f      	str	r7, [r1, #0]
 8003052:	bf18      	it	ne
 8003054:	2300      	movne	r3, #0
 8003056:	eba6 0807 	sub.w	r8, r6, r7
 800305a:	608b      	str	r3, [r1, #8]
 800305c:	f1b8 0f00 	cmp.w	r8, #0
 8003060:	dde9      	ble.n	8003036 <__sflush_r+0xae>
 8003062:	6a21      	ldr	r1, [r4, #32]
 8003064:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003066:	4643      	mov	r3, r8
 8003068:	463a      	mov	r2, r7
 800306a:	4628      	mov	r0, r5
 800306c:	47b0      	blx	r6
 800306e:	2800      	cmp	r0, #0
 8003070:	dc08      	bgt.n	8003084 <__sflush_r+0xfc>
 8003072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800307a:	81a3      	strh	r3, [r4, #12]
 800307c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003084:	4407      	add	r7, r0
 8003086:	eba8 0800 	sub.w	r8, r8, r0
 800308a:	e7e7      	b.n	800305c <__sflush_r+0xd4>
 800308c:	dfbffffe 	.word	0xdfbffffe

08003090 <_fflush_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	690b      	ldr	r3, [r1, #16]
 8003094:	4605      	mov	r5, r0
 8003096:	460c      	mov	r4, r1
 8003098:	b913      	cbnz	r3, 80030a0 <_fflush_r+0x10>
 800309a:	2500      	movs	r5, #0
 800309c:	4628      	mov	r0, r5
 800309e:	bd38      	pop	{r3, r4, r5, pc}
 80030a0:	b118      	cbz	r0, 80030aa <_fflush_r+0x1a>
 80030a2:	6a03      	ldr	r3, [r0, #32]
 80030a4:	b90b      	cbnz	r3, 80030aa <_fflush_r+0x1a>
 80030a6:	f7ff f9ad 	bl	8002404 <__sinit>
 80030aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f3      	beq.n	800309a <_fflush_r+0xa>
 80030b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80030b4:	07d0      	lsls	r0, r2, #31
 80030b6:	d404      	bmi.n	80030c2 <_fflush_r+0x32>
 80030b8:	0599      	lsls	r1, r3, #22
 80030ba:	d402      	bmi.n	80030c2 <_fflush_r+0x32>
 80030bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030be:	f7ff fb98 	bl	80027f2 <__retarget_lock_acquire_recursive>
 80030c2:	4628      	mov	r0, r5
 80030c4:	4621      	mov	r1, r4
 80030c6:	f7ff ff5f 	bl	8002f88 <__sflush_r>
 80030ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030cc:	07da      	lsls	r2, r3, #31
 80030ce:	4605      	mov	r5, r0
 80030d0:	d4e4      	bmi.n	800309c <_fflush_r+0xc>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	059b      	lsls	r3, r3, #22
 80030d6:	d4e1      	bmi.n	800309c <_fflush_r+0xc>
 80030d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030da:	f7ff fb8b 	bl	80027f4 <__retarget_lock_release_recursive>
 80030de:	e7dd      	b.n	800309c <_fflush_r+0xc>

080030e0 <__swhatbuf_r>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	460c      	mov	r4, r1
 80030e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e8:	2900      	cmp	r1, #0
 80030ea:	b096      	sub	sp, #88	@ 0x58
 80030ec:	4615      	mov	r5, r2
 80030ee:	461e      	mov	r6, r3
 80030f0:	da0d      	bge.n	800310e <__swhatbuf_r+0x2e>
 80030f2:	89a3      	ldrh	r3, [r4, #12]
 80030f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	bf14      	ite	ne
 80030fe:	2340      	movne	r3, #64	@ 0x40
 8003100:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003104:	2000      	movs	r0, #0
 8003106:	6031      	str	r1, [r6, #0]
 8003108:	602b      	str	r3, [r5, #0]
 800310a:	b016      	add	sp, #88	@ 0x58
 800310c:	bd70      	pop	{r4, r5, r6, pc}
 800310e:	466a      	mov	r2, sp
 8003110:	f000 f848 	bl	80031a4 <_fstat_r>
 8003114:	2800      	cmp	r0, #0
 8003116:	dbec      	blt.n	80030f2 <__swhatbuf_r+0x12>
 8003118:	9901      	ldr	r1, [sp, #4]
 800311a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800311e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003122:	4259      	negs	r1, r3
 8003124:	4159      	adcs	r1, r3
 8003126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800312a:	e7eb      	b.n	8003104 <__swhatbuf_r+0x24>

0800312c <__smakebuf_r>:
 800312c:	898b      	ldrh	r3, [r1, #12]
 800312e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003130:	079d      	lsls	r5, r3, #30
 8003132:	4606      	mov	r6, r0
 8003134:	460c      	mov	r4, r1
 8003136:	d507      	bpl.n	8003148 <__smakebuf_r+0x1c>
 8003138:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	6123      	str	r3, [r4, #16]
 8003140:	2301      	movs	r3, #1
 8003142:	6163      	str	r3, [r4, #20]
 8003144:	b003      	add	sp, #12
 8003146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003148:	ab01      	add	r3, sp, #4
 800314a:	466a      	mov	r2, sp
 800314c:	f7ff ffc8 	bl	80030e0 <__swhatbuf_r>
 8003150:	9f00      	ldr	r7, [sp, #0]
 8003152:	4605      	mov	r5, r0
 8003154:	4639      	mov	r1, r7
 8003156:	4630      	mov	r0, r6
 8003158:	f7ff fbba 	bl	80028d0 <_malloc_r>
 800315c:	b948      	cbnz	r0, 8003172 <__smakebuf_r+0x46>
 800315e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003162:	059a      	lsls	r2, r3, #22
 8003164:	d4ee      	bmi.n	8003144 <__smakebuf_r+0x18>
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	f043 0302 	orr.w	r3, r3, #2
 800316e:	81a3      	strh	r3, [r4, #12]
 8003170:	e7e2      	b.n	8003138 <__smakebuf_r+0xc>
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	6020      	str	r0, [r4, #0]
 8003176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800317a:	81a3      	strh	r3, [r4, #12]
 800317c:	9b01      	ldr	r3, [sp, #4]
 800317e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003182:	b15b      	cbz	r3, 800319c <__smakebuf_r+0x70>
 8003184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003188:	4630      	mov	r0, r6
 800318a:	f000 f81d 	bl	80031c8 <_isatty_r>
 800318e:	b128      	cbz	r0, 800319c <__smakebuf_r+0x70>
 8003190:	89a3      	ldrh	r3, [r4, #12]
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	81a3      	strh	r3, [r4, #12]
 800319c:	89a3      	ldrh	r3, [r4, #12]
 800319e:	431d      	orrs	r5, r3
 80031a0:	81a5      	strh	r5, [r4, #12]
 80031a2:	e7cf      	b.n	8003144 <__smakebuf_r+0x18>

080031a4 <_fstat_r>:
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	4d07      	ldr	r5, [pc, #28]	@ (80031c4 <_fstat_r+0x20>)
 80031a8:	2300      	movs	r3, #0
 80031aa:	4604      	mov	r4, r0
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	602b      	str	r3, [r5, #0]
 80031b2:	f7fd fca0 	bl	8000af6 <_fstat>
 80031b6:	1c43      	adds	r3, r0, #1
 80031b8:	d102      	bne.n	80031c0 <_fstat_r+0x1c>
 80031ba:	682b      	ldr	r3, [r5, #0]
 80031bc:	b103      	cbz	r3, 80031c0 <_fstat_r+0x1c>
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	bd38      	pop	{r3, r4, r5, pc}
 80031c2:	bf00      	nop
 80031c4:	2000046c 	.word	0x2000046c

080031c8 <_isatty_r>:
 80031c8:	b538      	push	{r3, r4, r5, lr}
 80031ca:	4d06      	ldr	r5, [pc, #24]	@ (80031e4 <_isatty_r+0x1c>)
 80031cc:	2300      	movs	r3, #0
 80031ce:	4604      	mov	r4, r0
 80031d0:	4608      	mov	r0, r1
 80031d2:	602b      	str	r3, [r5, #0]
 80031d4:	f7fd fc94 	bl	8000b00 <_isatty>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d102      	bne.n	80031e2 <_isatty_r+0x1a>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	b103      	cbz	r3, 80031e2 <_isatty_r+0x1a>
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	2000046c 	.word	0x2000046c

080031e8 <_sbrk_r>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	4d06      	ldr	r5, [pc, #24]	@ (8003204 <_sbrk_r+0x1c>)
 80031ec:	2300      	movs	r3, #0
 80031ee:	4604      	mov	r4, r0
 80031f0:	4608      	mov	r0, r1
 80031f2:	602b      	str	r3, [r5, #0]
 80031f4:	f7fd fc88 	bl	8000b08 <_sbrk>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_sbrk_r+0x1a>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_sbrk_r+0x1a>
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	2000046c 	.word	0x2000046c

08003208 <_init>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr

08003214 <_fini>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr
