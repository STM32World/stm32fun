
stm32world_dac1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004690  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08004820  08004820  00005820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa0  08004aa0  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa0  08004aa0  00005aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa8  08004aa8  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa8  08004aa8  00005aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aac  08004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004ab0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          00001228  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001294  20001294  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b8b  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f3  00000000  00000000  00017c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000904f  00000000  00000000  0001a11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e28  00000000  00000000  00023170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ac7  00000000  00000000  00023f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020772  00000000  00000000  00024a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000149fc  00000000  00000000  000451d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4309  00000000  00000000  00059bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0011ded6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000030bc  00000000  00000000  0011df1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  00120fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004808 	.word	0x08004808

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004808 	.word	0x08004808

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2iz>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000954:	d215      	bcs.n	8000982 <__aeabi_d2iz+0x36>
 8000956:	d511      	bpl.n	800097c <__aeabi_d2iz+0x30>
 8000958:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000960:	d912      	bls.n	8000988 <__aeabi_d2iz+0x3c>
 8000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800096e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000972:	fa23 f002 	lsr.w	r0, r3, r2
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	4770      	bx	lr
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	4770      	bx	lr
 8000982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000986:	d105      	bne.n	8000994 <__aeabi_d2iz+0x48>
 8000988:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800098c:	bf08      	it	eq
 800098e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_d2uiz>:
 800099c:	004a      	lsls	r2, r1, #1
 800099e:	d211      	bcs.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a4:	d211      	bcs.n	80009ca <__aeabi_d2uiz+0x2e>
 80009a6:	d50d      	bpl.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d40e      	bmi.n	80009d0 <__aeabi_d2uiz+0x34>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d102      	bne.n	80009d6 <__aeabi_d2uiz+0x3a>
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009f0:	f000 b96a 	b.w	8000cc8 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9d08      	ldr	r5, [sp, #32]
 8000a12:	460c      	mov	r4, r1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d14e      	bne.n	8000ab6 <__udivmoddi4+0xaa>
 8000a18:	4694      	mov	ip, r2
 8000a1a:	458c      	cmp	ip, r1
 8000a1c:	4686      	mov	lr, r0
 8000a1e:	fab2 f282 	clz	r2, r2
 8000a22:	d962      	bls.n	8000aea <__udivmoddi4+0xde>
 8000a24:	b14a      	cbz	r2, 8000a3a <__udivmoddi4+0x2e>
 8000a26:	f1c2 0320 	rsb	r3, r2, #32
 8000a2a:	4091      	lsls	r1, r2
 8000a2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a34:	4319      	orrs	r1, r3
 8000a36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3e:	fa1f f68c 	uxth.w	r6, ip
 8000a42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a52:	fb04 f106 	mul.w	r1, r4, r6
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d90a      	bls.n	8000a70 <__udivmoddi4+0x64>
 8000a5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a62:	f080 8112 	bcs.w	8000c8a <__udivmoddi4+0x27e>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 810f 	bls.w	8000c8a <__udivmoddi4+0x27e>
 8000a6c:	3c02      	subs	r4, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	1a59      	subs	r1, r3, r1
 8000a72:	fa1f f38e 	uxth.w	r3, lr
 8000a76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb00 f606 	mul.w	r6, r0, r6
 8000a86:	429e      	cmp	r6, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x94>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a92:	f080 80fc 	bcs.w	8000c8e <__udivmoddi4+0x282>
 8000a96:	429e      	cmp	r6, r3
 8000a98:	f240 80f9 	bls.w	8000c8e <__udivmoddi4+0x282>
 8000a9c:	4463      	add	r3, ip
 8000a9e:	3802      	subs	r0, #2
 8000aa0:	1b9b      	subs	r3, r3, r6
 8000aa2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	b11d      	cbz	r5, 8000ab2 <__udivmoddi4+0xa6>
 8000aaa:	40d3      	lsrs	r3, r2
 8000aac:	2200      	movs	r2, #0
 8000aae:	e9c5 3200 	strd	r3, r2, [r5]
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d905      	bls.n	8000ac6 <__udivmoddi4+0xba>
 8000aba:	b10d      	cbz	r5, 8000ac0 <__udivmoddi4+0xb4>
 8000abc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e7f5      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000ac6:	fab3 f183 	clz	r1, r3
 8000aca:	2900      	cmp	r1, #0
 8000acc:	d146      	bne.n	8000b5c <__udivmoddi4+0x150>
 8000ace:	42a3      	cmp	r3, r4
 8000ad0:	d302      	bcc.n	8000ad8 <__udivmoddi4+0xcc>
 8000ad2:	4290      	cmp	r0, r2
 8000ad4:	f0c0 80f0 	bcc.w	8000cb8 <__udivmoddi4+0x2ac>
 8000ad8:	1a86      	subs	r6, r0, r2
 8000ada:	eb64 0303 	sbc.w	r3, r4, r3
 8000ade:	2001      	movs	r0, #1
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d0e6      	beq.n	8000ab2 <__udivmoddi4+0xa6>
 8000ae4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ae8:	e7e3      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	f040 8090 	bne.w	8000c10 <__udivmoddi4+0x204>
 8000af0:	eba1 040c 	sub.w	r4, r1, ip
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa1f f78c 	uxth.w	r7, ip
 8000afc:	2101      	movs	r1, #1
 8000afe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b06:	fb08 4416 	mls	r4, r8, r6, r4
 8000b0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b0e:	fb07 f006 	mul.w	r0, r7, r6
 8000b12:	4298      	cmp	r0, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x11c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x11a>
 8000b20:	4298      	cmp	r0, r3
 8000b22:	f200 80cd 	bhi.w	8000cc0 <__udivmoddi4+0x2b4>
 8000b26:	4626      	mov	r6, r4
 8000b28:	1a1c      	subs	r4, r3, r0
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b32:	fb08 4410 	mls	r4, r8, r0, r4
 8000b36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3a:	fb00 f707 	mul.w	r7, r0, r7
 8000b3e:	429f      	cmp	r7, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x148>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b4a:	d202      	bcs.n	8000b52 <__udivmoddi4+0x146>
 8000b4c:	429f      	cmp	r7, r3
 8000b4e:	f200 80b0 	bhi.w	8000cb2 <__udivmoddi4+0x2a6>
 8000b52:	4620      	mov	r0, r4
 8000b54:	1bdb      	subs	r3, r3, r7
 8000b56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5a:	e7a5      	b.n	8000aa8 <__udivmoddi4+0x9c>
 8000b5c:	f1c1 0620 	rsb	r6, r1, #32
 8000b60:	408b      	lsls	r3, r1
 8000b62:	fa22 f706 	lsr.w	r7, r2, r6
 8000b66:	431f      	orrs	r7, r3
 8000b68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b70:	ea43 030c 	orr.w	r3, r3, ip
 8000b74:	40f4      	lsrs	r4, r6
 8000b76:	fa00 f801 	lsl.w	r8, r0, r1
 8000b7a:	0c38      	lsrs	r0, r7, #16
 8000b7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b80:	fbb4 fef0 	udiv	lr, r4, r0
 8000b84:	fa1f fc87 	uxth.w	ip, r7
 8000b88:	fb00 441e 	mls	r4, r0, lr, r4
 8000b8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b90:	fb0e f90c 	mul.w	r9, lr, ip
 8000b94:	45a1      	cmp	r9, r4
 8000b96:	fa02 f201 	lsl.w	r2, r2, r1
 8000b9a:	d90a      	bls.n	8000bb2 <__udivmoddi4+0x1a6>
 8000b9c:	193c      	adds	r4, r7, r4
 8000b9e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ba2:	f080 8084 	bcs.w	8000cae <__udivmoddi4+0x2a2>
 8000ba6:	45a1      	cmp	r9, r4
 8000ba8:	f240 8081 	bls.w	8000cae <__udivmoddi4+0x2a2>
 8000bac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb0:	443c      	add	r4, r7
 8000bb2:	eba4 0409 	sub.w	r4, r4, r9
 8000bb6:	fa1f f983 	uxth.w	r9, r3
 8000bba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000bc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bca:	45a4      	cmp	ip, r4
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x1d2>
 8000bce:	193c      	adds	r4, r7, r4
 8000bd0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bd4:	d267      	bcs.n	8000ca6 <__udivmoddi4+0x29a>
 8000bd6:	45a4      	cmp	ip, r4
 8000bd8:	d965      	bls.n	8000ca6 <__udivmoddi4+0x29a>
 8000bda:	3b02      	subs	r3, #2
 8000bdc:	443c      	add	r4, r7
 8000bde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000be2:	fba0 9302 	umull	r9, r3, r0, r2
 8000be6:	eba4 040c 	sub.w	r4, r4, ip
 8000bea:	429c      	cmp	r4, r3
 8000bec:	46ce      	mov	lr, r9
 8000bee:	469c      	mov	ip, r3
 8000bf0:	d351      	bcc.n	8000c96 <__udivmoddi4+0x28a>
 8000bf2:	d04e      	beq.n	8000c92 <__udivmoddi4+0x286>
 8000bf4:	b155      	cbz	r5, 8000c0c <__udivmoddi4+0x200>
 8000bf6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000bfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000c02:	40cb      	lsrs	r3, r1
 8000c04:	431e      	orrs	r6, r3
 8000c06:	40cc      	lsrs	r4, r1
 8000c08:	e9c5 6400 	strd	r6, r4, [r5]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e750      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000c10:	f1c2 0320 	rsb	r3, r2, #32
 8000c14:	fa20 f103 	lsr.w	r1, r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c20:	4094      	lsls	r4, r2
 8000c22:	430c      	orrs	r4, r1
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2c:	fa1f f78c 	uxth.w	r7, ip
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3110 	mls	r1, r8, r0, r3
 8000c38:	0c23      	lsrs	r3, r4, #16
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb00 f107 	mul.w	r1, r0, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x24c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c4e:	d22c      	bcs.n	8000caa <__udivmoddi4+0x29e>
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d92a      	bls.n	8000caa <__udivmoddi4+0x29e>
 8000c54:	3802      	subs	r0, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c60:	fb08 3311 	mls	r3, r8, r1, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb01 f307 	mul.w	r3, r1, r7
 8000c6c:	42a3      	cmp	r3, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x276>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c78:	d213      	bcs.n	8000ca2 <__udivmoddi4+0x296>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d911      	bls.n	8000ca2 <__udivmoddi4+0x296>
 8000c7e:	3902      	subs	r1, #2
 8000c80:	4464      	add	r4, ip
 8000c82:	1ae4      	subs	r4, r4, r3
 8000c84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c88:	e739      	b.n	8000afe <__udivmoddi4+0xf2>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	e6f0      	b.n	8000a70 <__udivmoddi4+0x64>
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e706      	b.n	8000aa0 <__udivmoddi4+0x94>
 8000c92:	45c8      	cmp	r8, r9
 8000c94:	d2ae      	bcs.n	8000bf4 <__udivmoddi4+0x1e8>
 8000c96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c9e:	3801      	subs	r0, #1
 8000ca0:	e7a8      	b.n	8000bf4 <__udivmoddi4+0x1e8>
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	e7ed      	b.n	8000c82 <__udivmoddi4+0x276>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	e799      	b.n	8000bde <__udivmoddi4+0x1d2>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e7d4      	b.n	8000c58 <__udivmoddi4+0x24c>
 8000cae:	46d6      	mov	lr, sl
 8000cb0:	e77f      	b.n	8000bb2 <__udivmoddi4+0x1a6>
 8000cb2:	4463      	add	r3, ip
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	e74d      	b.n	8000b54 <__udivmoddi4+0x148>
 8000cb8:	4606      	mov	r6, r0
 8000cba:	4623      	mov	r3, r4
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e70f      	b.n	8000ae0 <__udivmoddi4+0xd4>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	e730      	b.n	8000b28 <__udivmoddi4+0x11c>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_idiv0>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <do_dac>:
//		++cb_cnt;
//	}
//
//}

static inline void do_dac(uint16_t *buffer) {
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	4606      	mov	r6, r0
    for (int i = 0; i < DMA_BUFFER_SIZE; ++i) {
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	e000      	b.n	8000cd6 <do_dac+0xa>
 8000cd4:	3401      	adds	r4, #1
 8000cd6:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8000cda:	da2c      	bge.n	8000d36 <do_dac+0x6a>
        buffer[i] = OUTPUT_MID - (OUTPUT_MID * sin(angle));
 8000cdc:	4d16      	ldr	r5, [pc, #88]	@ (8000d38 <do_dac+0x6c>)
 8000cde:	6828      	ldr	r0, [r5, #0]
 8000ce0:	f7ff fd54 	bl	800078c <__aeabi_f2d>
 8000ce4:	ec41 0b10 	vmov	d0, r0, r1
 8000ce8:	f002 fd5e 	bl	80037a8 <sin>
 8000cec:	ec51 0b10 	vmov	r0, r1, d0
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <do_dac+0x70>)
 8000cf4:	f7ff fabc 	bl	8000270 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	490f      	ldr	r1, [pc, #60]	@ (8000d3c <do_dac+0x70>)
 8000d00:	f7ff fbe4 	bl	80004cc <__aeabi_dsub>
 8000d04:	f7ff fe4a 	bl	800099c <__aeabi_d2uiz>
 8000d08:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
        angle += angle_change;
 8000d0c:	edd5 7a00 	vldr	s15, [r5]
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <do_dac+0x74>)
 8000d12:	ed93 7a00 	vldr	s14, [r3]
 8000d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d1a:	edc5 7a00 	vstr	s15, [r5]
        if (angle >= two_pi) {
 8000d1e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000d44 <do_dac+0x78>
 8000d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2a:	dbd3      	blt.n	8000cd4 <do_dac+0x8>
            angle -= two_pi;
 8000d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d30:	edc5 7a00 	vstr	s15, [r5]
 8000d34:	e7ce      	b.n	8000cd4 <do_dac+0x8>
        }
        //buffer[i] = 40 * i;
    }
}
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	20000088 	.word	0x20000088
 8000d3c:	40a00000 	.word	0x40a00000
 8000d40:	20000000 	.word	0x20000000
 8000d44:	40c90fdb 	.word	0x40c90fdb

08000d48 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d48:	b530      	push	{r4, r5, lr}
 8000d4a:	b08b      	sub	sp, #44	@ 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d4c:	2400      	movs	r4, #0
 8000d4e:	9405      	str	r4, [sp, #20]
 8000d50:	9406      	str	r4, [sp, #24]
 8000d52:	9407      	str	r4, [sp, #28]
 8000d54:	9408      	str	r4, [sp, #32]
 8000d56:	9409      	str	r4, [sp, #36]	@ 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d58:	9401      	str	r4, [sp, #4]
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <MX_GPIO_Init+0x8c>)
 8000d5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d5e:	f042 0204 	orr.w	r2, r2, #4
 8000d62:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d66:	f002 0204 	and.w	r2, r2, #4
 8000d6a:	9201      	str	r2, [sp, #4]
 8000d6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	9402      	str	r4, [sp, #8]
 8000d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d76:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d7a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000d7e:	9202      	str	r2, [sp, #8]
 8000d80:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	9403      	str	r4, [sp, #12]
 8000d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d86:	f042 0201 	orr.w	r2, r2, #1
 8000d8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d8e:	f002 0201 	and.w	r2, r2, #1
 8000d92:	9203      	str	r2, [sp, #12]
 8000d94:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	9404      	str	r4, [sp, #16]
 8000d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d9a:	f042 0202 	orr.w	r2, r2, #2
 8000d9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	9304      	str	r3, [sp, #16]
 8000da8:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000daa:	4d0b      	ldr	r5, [pc, #44]	@ (8000dd8 <MX_GPIO_Init+0x90>)
 8000dac:	4622      	mov	r2, r4
 8000dae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000db2:	4628      	mov	r0, r5
 8000db4:	f000 ff78 	bl	8001ca8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000db8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dbc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	a905      	add	r1, sp, #20
 8000dc8:	4628      	mov	r0, r5
 8000dca:	f000 fe77 	bl	8001abc <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	b00b      	add	sp, #44	@ 0x2c
 8000dd0:	bd30      	pop	{r4, r5, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020800 	.word	0x40020800

08000ddc <MX_DMA_Init>:
{
 8000ddc:	b500      	push	{lr}
 8000dde:	b083      	sub	sp, #12
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000de0:	2100      	movs	r1, #0
 8000de2:	9101      	str	r1, [sp, #4]
 8000de4:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_DMA_Init+0x30>)
 8000de6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000de8:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000dec:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000df8:	460a      	mov	r2, r1
 8000dfa:	2010      	movs	r0, #16
 8000dfc:	f000 fb3a 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e00:	2010      	movs	r0, #16
 8000e02:	f000 fb47 	bl	8001494 <HAL_NVIC_EnableIRQ>
}
 8000e06:	b003      	add	sp, #12
 8000e08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e0c:	40023800 	.word	0x40023800

08000e10 <_write>:
    if (fd == 1 || fd == 2) {
 8000e10:	3801      	subs	r0, #1
 8000e12:	2801      	cmp	r0, #1
 8000e14:	d80a      	bhi.n	8000e2c <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000e16:	b510      	push	{r4, lr}
 8000e18:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e1e:	b292      	uxth	r2, r2
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <_write+0x28>)
 8000e22:	f001 fccc 	bl	80027be <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000e26:	b920      	cbnz	r0, 8000e32 <_write+0x22>
            return len;
 8000e28:	4620      	mov	r0, r4
}
 8000e2a:	bd10      	pop	{r4, pc}
    return -1;
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000e30:	4770      	bx	lr
            return -1;
 8000e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e36:	e7f8      	b.n	8000e2a <_write+0x1a>
 8000e38:	2000103c 	.word	0x2000103c

08000e3c <HAL_GetTick>:
    return uwTick;
 8000e3c:	4b01      	ldr	r3, [pc, #4]	@ (8000e44 <HAL_GetTick+0x8>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20001144 	.word	0x20001144

08000e48 <HAL_DAC_ConvCpltCallbackCh1>:
inline void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8000e48:	b508      	push	{r3, lr}
    ++cb_full;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_DAC_ConvCpltCallbackCh1+0x14>)
 8000e4c:	6813      	ldr	r3, [r2, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	6013      	str	r3, [r2, #0]
    do_dac(&dma_buffer[DMA_BUFFER_SIZE]);
 8000e52:	4803      	ldr	r0, [pc, #12]	@ (8000e60 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8000e54:	f7ff ff3a 	bl	8000ccc <do_dac>
}
 8000e58:	bd08      	pop	{r3, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20001034 	.word	0x20001034
 8000e60:	2000085c 	.word	0x2000085c

08000e64 <HAL_DAC_ConvHalfCpltCallbackCh1>:
inline void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8000e64:	b508      	push	{r3, lr}
    ++cb_half;
 8000e66:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_DAC_ConvHalfCpltCallbackCh1+0x14>)
 8000e68:	6813      	ldr	r3, [r2, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
    do_dac(&dma_buffer[0]);
 8000e6e:	4803      	ldr	r0, [pc, #12]	@ (8000e7c <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8000e70:	f7ff ff2c 	bl	8000ccc <do_dac>
}
 8000e74:	bd08      	pop	{r3, pc}
 8000e76:	bf00      	nop
 8000e78:	20001030 	.word	0x20001030
 8000e7c:	2000008c 	.word	0x2000008c

08000e80 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000e82:	e7fe      	b.n	8000e82 <Error_Handler+0x2>

08000e84 <MX_DAC_Init>:
{
 8000e84:	b500      	push	{lr}
 8000e86:	b083      	sub	sp, #12
    DAC_ChannelConfTypeDef sConfig = { 0 };
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	9301      	str	r3, [sp, #4]
    hdac.Instance = DAC;
 8000e8e:	480b      	ldr	r0, [pc, #44]	@ (8000ebc <MX_DAC_Init+0x38>)
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <MX_DAC_Init+0x3c>)
 8000e92:	6003      	str	r3, [r0, #0]
    if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e94:	f000 fb16 	bl	80014c4 <HAL_DAC_Init>
 8000e98:	b958      	cbnz	r0, 8000eb2 <MX_DAC_Init+0x2e>
    sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	9300      	str	r3, [sp, #0]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	9201      	str	r2, [sp, #4]
    if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ea2:	4669      	mov	r1, sp
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <MX_DAC_Init+0x38>)
 8000ea6:	f000 fbb1 	bl	800160c <HAL_DAC_ConfigChannel>
 8000eaa:	b920      	cbnz	r0, 8000eb6 <MX_DAC_Init+0x32>
}
 8000eac:	b003      	add	sp, #12
 8000eae:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000eb2:	f7ff ffe5 	bl	8000e80 <Error_Handler>
        Error_Handler();
 8000eb6:	f7ff ffe3 	bl	8000e80 <Error_Handler>
 8000eba:	bf00      	nop
 8000ebc:	2000112c 	.word	0x2000112c
 8000ec0:	40007400 	.word	0x40007400

08000ec4 <MX_USART1_UART_Init>:
{
 8000ec4:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 8000ec6:	480a      	ldr	r0, [pc, #40]	@ (8000ef0 <MX_USART1_UART_Init+0x2c>)
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <MX_USART1_UART_Init+0x30>)
 8000eca:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8000ecc:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000ed0:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed6:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000ed8:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000eda:	220c      	movs	r2, #12
 8000edc:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee2:	f001 fc3c 	bl	800275e <HAL_UART_Init>
 8000ee6:	b900      	cbnz	r0, 8000eea <MX_USART1_UART_Init+0x26>
}
 8000ee8:	bd08      	pop	{r3, pc}
        Error_Handler();
 8000eea:	f7ff ffc9 	bl	8000e80 <Error_Handler>
 8000eee:	bf00      	nop
 8000ef0:	2000103c 	.word	0x2000103c
 8000ef4:	40011000 	.word	0x40011000

08000ef8 <MX_TIM6_Init>:
{
 8000ef8:	b500      	push	{lr}
 8000efa:	b083      	sub	sp, #12
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000efc:	2300      	movs	r3, #0
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	9301      	str	r3, [sp, #4]
    htim6.Instance = TIM6;
 8000f02:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <MX_TIM6_Init+0x44>)
 8000f04:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <MX_TIM6_Init+0x48>)
 8000f06:	6002      	str	r2, [r0, #0]
    htim6.Init.Prescaler = 83;
 8000f08:	2253      	movs	r2, #83	@ 0x53
 8000f0a:	6042      	str	r2, [r0, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	6083      	str	r3, [r0, #8]
    htim6.Init.Period = 49;
 8000f0e:	2231      	movs	r2, #49	@ 0x31
 8000f10:	60c2      	str	r2, [r0, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f12:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f14:	f001 fab8 	bl	8002488 <HAL_TIM_Base_Init>
 8000f18:	b958      	cbnz	r0, 8000f32 <MX_TIM6_Init+0x3a>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	9300      	str	r3, [sp, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	9301      	str	r3, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f22:	4669      	mov	r1, sp
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_TIM6_Init+0x44>)
 8000f26:	f001 fadb 	bl	80024e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2a:	b920      	cbnz	r0, 8000f36 <MX_TIM6_Init+0x3e>
}
 8000f2c:	b003      	add	sp, #12
 8000f2e:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000f32:	f7ff ffa5 	bl	8000e80 <Error_Handler>
        Error_Handler();
 8000f36:	f7ff ffa3 	bl	8000e80 <Error_Handler>
 8000f3a:	bf00      	nop
 8000f3c:	20001084 	.word	0x20001084
 8000f40:	40001000 	.word	0x40001000

08000f44 <SystemClock_Config>:
{
 8000f44:	b500      	push	{lr}
 8000f46:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f48:	2230      	movs	r2, #48	@ 0x30
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	a808      	add	r0, sp, #32
 8000f4e:	f001 fea7 	bl	8002ca0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f52:	2300      	movs	r3, #0
 8000f54:	9303      	str	r3, [sp, #12]
 8000f56:	9304      	str	r3, [sp, #16]
 8000f58:	9305      	str	r3, [sp, #20]
 8000f5a:	9306      	str	r3, [sp, #24]
 8000f5c:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	4a20      	ldr	r2, [pc, #128]	@ (8000fe4 <SystemClock_Config+0xa0>)
 8000f62:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000f64:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000f68:	6411      	str	r1, [r2, #64]	@ 0x40
 8000f6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000f6c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000f70:	9201      	str	r2, [sp, #4]
 8000f72:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <SystemClock_Config+0xa4>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f92:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	2302      	movs	r3, #2
 8000f96:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f98:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f9c:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8000fa2:	22a8      	movs	r2, #168	@ 0xa8
 8000fa4:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa6:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	a808      	add	r0, sp, #32
 8000fae:	f000 fe81 	bl	8001cb4 <HAL_RCC_OscConfig>
 8000fb2:	b998      	cbnz	r0, 8000fdc <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fc4:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fca:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fcc:	2105      	movs	r1, #5
 8000fce:	a803      	add	r0, sp, #12
 8000fd0:	f001 f8d4 	bl	800217c <HAL_RCC_ClockConfig>
 8000fd4:	b920      	cbnz	r0, 8000fe0 <SystemClock_Config+0x9c>
}
 8000fd6:	b015      	add	sp, #84	@ 0x54
 8000fd8:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000fdc:	f7ff ff50 	bl	8000e80 <Error_Handler>
        Error_Handler();
 8000fe0:	f7ff ff4e 	bl	8000e80 <Error_Handler>
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <main>:
{
 8000fec:	b530      	push	{r4, r5, lr}
 8000fee:	b083      	sub	sp, #12
    HAL_Init();
 8000ff0:	f000 f9c6 	bl	8001380 <HAL_Init>
    SystemClock_Config();
 8000ff4:	f7ff ffa6 	bl	8000f44 <SystemClock_Config>
    MX_GPIO_Init();
 8000ff8:	f7ff fea6 	bl	8000d48 <MX_GPIO_Init>
    MX_DMA_Init();
 8000ffc:	f7ff feee 	bl	8000ddc <MX_DMA_Init>
    MX_DAC_Init();
 8001000:	f7ff ff40 	bl	8000e84 <MX_DAC_Init>
    MX_USART1_UART_Init();
 8001004:	f7ff ff5e 	bl	8000ec4 <MX_USART1_UART_Init>
    MX_TIM6_Init();
 8001008:	f7ff ff76 	bl	8000ef8 <MX_TIM6_Init>
    printf("\n\n\n\n--------\nStarting\n");
 800100c:	4817      	ldr	r0, [pc, #92]	@ (800106c <main+0x80>)
 800100e:	f001 fd67 	bl	8002ae0 <puts>
    HAL_TIM_Base_Start_IT(&htim6);
 8001012:	4817      	ldr	r0, [pc, #92]	@ (8001070 <main+0x84>)
 8001014:	f001 f988 	bl	8002328 <HAL_TIM_Base_Start_IT>
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) &dma_buffer, 2 * DMA_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001018:	2100      	movs	r1, #0
 800101a:	9100      	str	r1, [sp, #0]
 800101c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001020:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <main+0x88>)
 8001022:	4815      	ldr	r0, [pc, #84]	@ (8001078 <main+0x8c>)
 8001024:	f000 fa60 	bl	80014e8 <HAL_DAC_Start_DMA>
    uint32_t now = 0, next_tick = 1000;
 8001028:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800102c:	e018      	b.n	8001060 <main+0x74>
            printf("Tick %lu (loop = %lu cb = %lu full = %lu half = %lu)\n", now / 1000, loop_cnt, cb_cnt, cb_full, cb_half);
 800102e:	4d13      	ldr	r5, [pc, #76]	@ (800107c <main+0x90>)
 8001030:	4913      	ldr	r1, [pc, #76]	@ (8001080 <main+0x94>)
 8001032:	fba1 3104 	umull	r3, r1, r1, r4
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <main+0x98>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <main+0x9c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <main+0xa0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	682a      	ldr	r2, [r5, #0]
 8001048:	0989      	lsrs	r1, r1, #6
 800104a:	4811      	ldr	r0, [pc, #68]	@ (8001090 <main+0xa4>)
 800104c:	f001 fce0 	bl	8002a10 <iprintf>
            loop_cnt = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	602b      	str	r3, [r5, #0]
            next_tick = now + 1000;
 8001054:	f504 717a 	add.w	r1, r4, #1000	@ 0x3e8
        ++loop_cnt;
 8001058:	4a08      	ldr	r2, [pc, #32]	@ (800107c <main+0x90>)
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	6013      	str	r3, [r2, #0]
    return uwTick;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <main+0xa8>)
 8001062:	681c      	ldr	r4, [r3, #0]
        if (now >= next_tick) {
 8001064:	42a1      	cmp	r1, r4
 8001066:	d8f7      	bhi.n	8001058 <main+0x6c>
 8001068:	e7e1      	b.n	800102e <main+0x42>
 800106a:	bf00      	nop
 800106c:	08004820 	.word	0x08004820
 8001070:	20001084 	.word	0x20001084
 8001074:	2000008c 	.word	0x2000008c
 8001078:	2000112c 	.word	0x2000112c
 800107c:	2000102c 	.word	0x2000102c
 8001080:	10624dd3 	.word	0x10624dd3
 8001084:	20001030 	.word	0x20001030
 8001088:	20001034 	.word	0x20001034
 800108c:	20001038 	.word	0x20001038
 8001090:	08004838 	.word	0x08004838
 8001094:	20001144 	.word	0x20001144

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2100      	movs	r1, #0
 800109c:	9100      	str	r1, [sp, #0]
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <HAL_MspInit+0x34>)
 80010a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80010a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80010a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010aa:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80010ae:	9200      	str	r2, [sp, #0]
 80010b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	9101      	str	r1, [sp, #4]
 80010b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010b6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80010ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	b002      	add	sp, #8
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010d0:	b530      	push	{r4, r5, lr}
 80010d2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	2300      	movs	r3, #0
 80010d6:	9303      	str	r3, [sp, #12]
 80010d8:	9304      	str	r3, [sp, #16]
 80010da:	9305      	str	r3, [sp, #20]
 80010dc:	9306      	str	r3, [sp, #24]
 80010de:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <HAL_DAC_MspInit+0xa0>)
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_DAC_MspInit+0x1c>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80010e8:	b009      	add	sp, #36	@ 0x24
 80010ea:	bd30      	pop	{r4, r5, pc}
 80010ec:	4604      	mov	r4, r0
    __HAL_RCC_DAC_CLK_ENABLE();
 80010ee:	2500      	movs	r5, #0
 80010f0:	9501      	str	r5, [sp, #4]
 80010f2:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 80010f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010f8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80010fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80010fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001100:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001104:	9201      	str	r2, [sp, #4]
 8001106:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	9502      	str	r5, [sp, #8]
 800110a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800110c:	f042 0201 	orr.w	r2, r2, #1
 8001110:	631a      	str	r2, [r3, #48]	@ 0x30
 8001112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800111c:	2310      	movs	r3, #16
 800111e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001120:	2303      	movs	r3, #3
 8001122:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	a903      	add	r1, sp, #12
 8001126:	4813      	ldr	r0, [pc, #76]	@ (8001174 <HAL_DAC_MspInit+0xa4>)
 8001128:	f000 fcc8 	bl	8001abc <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 800112c:	4812      	ldr	r0, [pc, #72]	@ (8001178 <HAL_DAC_MspInit+0xa8>)
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <HAL_DAC_MspInit+0xac>)
 8001130:	6003      	str	r3, [r0, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001132:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 8001136:	6043      	str	r3, [r0, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001138:	2340      	movs	r3, #64	@ 0x40
 800113a:	6083      	str	r3, [r0, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800113c:	60c5      	str	r5, [r0, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001142:	6103      	str	r3, [r0, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001144:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001148:	6143      	str	r3, [r0, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800114e:	6183      	str	r3, [r0, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001154:	61c3      	str	r3, [r0, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001156:	6205      	str	r5, [r0, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001158:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800115a:	f000 fb25 	bl	80017a8 <HAL_DMA_Init>
 800115e:	b918      	cbnz	r0, 8001168 <HAL_DAC_MspInit+0x98>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_DAC_MspInit+0xa8>)
 8001162:	60a3      	str	r3, [r4, #8]
 8001164:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8001166:	e7bf      	b.n	80010e8 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 8001168:	f7ff fe8a 	bl	8000e80 <Error_Handler>
 800116c:	e7f8      	b.n	8001160 <HAL_DAC_MspInit+0x90>
 800116e:	bf00      	nop
 8001170:	40007400 	.word	0x40007400
 8001174:	40020000 	.word	0x40020000
 8001178:	200010cc 	.word	0x200010cc
 800117c:	40026088 	.word	0x40026088

08001180 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8001180:	6802      	ldr	r2, [r0, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <HAL_TIM_Base_MspInit+0x28>)
 8001184:	429a      	cmp	r2, r3
 8001186:	d000      	beq.n	800118a <HAL_TIM_Base_MspInit+0xa>
 8001188:	4770      	bx	lr
{
 800118a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_TIM_Base_MspInit+0x2c>)
 8001192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001194:	f042 0210 	orr.w	r2, r2, #16
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80011a4:	b002      	add	sp, #8
 80011a6:	4770      	bx	lr
 80011a8:	40001000 	.word	0x40001000
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b500      	push	{lr}
 80011b2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	2300      	movs	r3, #0
 80011b6:	9303      	str	r3, [sp, #12]
 80011b8:	9304      	str	r3, [sp, #16]
 80011ba:	9305      	str	r3, [sp, #20]
 80011bc:	9306      	str	r3, [sp, #24]
 80011be:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80011c0:	6802      	ldr	r2, [r0, #0]
 80011c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80011c6:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d002      	beq.n	80011d4 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011ce:	b009      	add	sp, #36	@ 0x24
 80011d0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d4:	2100      	movs	r1, #0
 80011d6:	9101      	str	r1, [sp, #4]
 80011d8:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80011dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011de:	f042 0210 	orr.w	r2, r2, #16
 80011e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80011e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011e6:	f002 0210 	and.w	r2, r2, #16
 80011ea:	9201      	str	r2, [sp, #4]
 80011ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	9102      	str	r1, [sp, #8]
 80011f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001202:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001206:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001210:	2307      	movs	r3, #7
 8001212:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	a903      	add	r1, sp, #12
 8001216:	4802      	ldr	r0, [pc, #8]	@ (8001220 <HAL_UART_MspInit+0x70>)
 8001218:	f000 fc50 	bl	8001abc <HAL_GPIO_Init>
}
 800121c:	e7d7      	b.n	80011ce <HAL_UART_MspInit+0x1e>
 800121e:	bf00      	nop
 8001220:	40020000 	.word	0x40020000

08001224 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler>

08001226 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler>

08001228 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler>

0800122a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler>

0800122c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler>

0800122e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f8bd 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bd08      	pop	{r3, pc}

0800123c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800123c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800123e:	4802      	ldr	r0, [pc, #8]	@ (8001248 <DMA1_Stream5_IRQHandler+0xc>)
 8001240:	f000 fb4e 	bl	80018e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001244:	bd08      	pop	{r3, pc}
 8001246:	bf00      	nop
 8001248:	200010cc 	.word	0x200010cc

0800124c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	460c      	mov	r4, r1
 8001250:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	2500      	movs	r5, #0
 8001254:	e006      	b.n	8001264 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001256:	f3af 8000 	nop.w
 800125a:	4621      	mov	r1, r4
 800125c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001262:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001264:	42b5      	cmp	r5, r6
 8001266:	dbf6      	blt.n	8001256 <_read+0xa>
  }

  return len;
}
 8001268:	4630      	mov	r0, r6
 800126a:	bd70      	pop	{r4, r5, r6, pc}

0800126c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800126c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001270:	4770      	bx	lr

08001272 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001272:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001276:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001278:	2000      	movs	r0, #0
 800127a:	4770      	bx	lr

0800127c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800127c:	2001      	movs	r0, #1
 800127e:	4770      	bx	lr

08001280 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001280:	2000      	movs	r0, #0
 8001282:	4770      	bx	lr

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b510      	push	{r4, lr}
 8001286:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <_sbrk+0x38>)
 800128a:	490d      	ldr	r1, [pc, #52]	@ (80012c0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <_sbrk+0x40>)
 800128e:	6800      	ldr	r0, [r0, #0]
 8001290:	b140      	cbz	r0, 80012a4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <_sbrk+0x40>)
 8001294:	6800      	ldr	r0, [r0, #0]
 8001296:	4403      	add	r3, r0
 8001298:	1a52      	subs	r2, r2, r1
 800129a:	4293      	cmp	r3, r2
 800129c:	d806      	bhi.n	80012ac <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800129e:	4a09      	ldr	r2, [pc, #36]	@ (80012c4 <_sbrk+0x40>)
 80012a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80012a2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80012a4:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <_sbrk+0x40>)
 80012a6:	4c08      	ldr	r4, [pc, #32]	@ (80012c8 <_sbrk+0x44>)
 80012a8:	6004      	str	r4, [r0, #0]
 80012aa:	e7f2      	b.n	8001292 <_sbrk+0xe>
    errno = ENOMEM;
 80012ac:	f001 fd46 	bl	8002d3c <__errno>
 80012b0:	230c      	movs	r3, #12
 80012b2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012b8:	e7f3      	b.n	80012a2 <_sbrk+0x1e>
 80012ba:	bf00      	nop
 80012bc:	20020000 	.word	0x20020000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	20001140 	.word	0x20001140
 80012c8:	20001298 	.word	0x20001298

080012cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012cc:	4a03      	ldr	r2, [pc, #12]	@ (80012dc <SystemInit+0x10>)
 80012ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80012d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001318 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012e4:	f7ff fff2 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	@ (8001320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	@ (800132c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800130e:	f001 fd1b 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff fe6b 	bl	8000fec <main>
  bx  lr    
 8001316:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001324:	08004ab0 	.word	0x08004ab0
  ldr r2, =_sbss
 8001328:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800132c:	20001294 	.word	0x20001294

08001330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC_IRQHandler>
	...

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b510      	push	{r4, lr}
 8001336:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_InitTick+0x40>)
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001340:	fbb3 f3f2 	udiv	r3, r3, r2
 8001344:	4a0c      	ldr	r2, [pc, #48]	@ (8001378 <HAL_InitTick+0x44>)
 8001346:	6810      	ldr	r0, [r2, #0]
 8001348:	fbb0 f0f3 	udiv	r0, r0, r3
 800134c:	f000 f8a6 	bl	800149c <HAL_SYSTICK_Config>
 8001350:	b968      	cbnz	r0, 800136e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	2c0f      	cmp	r4, #15
 8001354:	d901      	bls.n	800135a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001356:	2001      	movs	r0, #1
 8001358:	e00a      	b.n	8001370 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135a:	2200      	movs	r2, #0
 800135c:	4621      	mov	r1, r4
 800135e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001362:	f000 f887 	bl	8001474 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_InitTick+0x48>)
 8001368:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2000      	movs	r0, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800136e:	2001      	movs	r0, #1
}
 8001370:	bd10      	pop	{r4, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	20000004 	.word	0x20000004
 800137c:	2000000c 	.word	0x2000000c

08001380 <HAL_Init>:
{
 8001380:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_Init+0x30>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800138a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001392:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800139a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 f857 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a2:	200f      	movs	r0, #15
 80013a4:	f7ff ffc6 	bl	8001334 <HAL_InitTick>
  HAL_MspInit();
 80013a8:	f7ff fe76 	bl	8001098 <HAL_MspInit>
}
 80013ac:	2000      	movs	r0, #0
 80013ae:	bd08      	pop	{r3, pc}
 80013b0:	40023c00 	.word	0x40023c00

080013b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013b4:	4a03      	ldr	r2, [pc, #12]	@ (80013c4 <HAL_IncTick+0x10>)
 80013b6:	6811      	ldr	r1, [r2, #0]
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_IncTick+0x14>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	440b      	add	r3, r1
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20001144 	.word	0x20001144
 80013c8:	20000008 	.word	0x20000008

080013cc <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80013cc:	2800      	cmp	r0, #0
 80013ce:	db07      	blt.n	80013e0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d0:	f000 021f 	and.w	r2, r0, #31
 80013d4:	0940      	lsrs	r0, r0, #5
 80013d6:	2301      	movs	r3, #1
 80013d8:	4093      	lsls	r3, r2
 80013da:	4a02      	ldr	r2, [pc, #8]	@ (80013e4 <__NVIC_EnableIRQ+0x18>)
 80013dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80013e8:	2800      	cmp	r0, #0
 80013ea:	db08      	blt.n	80013fe <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	0109      	lsls	r1, r1, #4
 80013ee:	b2c9      	uxtb	r1, r1
 80013f0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80013f4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80013f8:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80013fc:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	f000 000f 	and.w	r0, r0, #15
 8001402:	0109      	lsls	r1, r1, #4
 8001404:	b2c9      	uxtb	r1, r1
 8001406:	4b01      	ldr	r3, [pc, #4]	@ (800140c <__NVIC_SetPriority+0x24>)
 8001408:	5419      	strb	r1, [r3, r0]
  }
}
 800140a:	4770      	bx	lr
 800140c:	e000ed14 	.word	0xe000ed14

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001412:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001416:	f1c0 0c07 	rsb	ip, r0, #7
 800141a:	f1bc 0f04 	cmp.w	ip, #4
 800141e:	bf28      	it	cs
 8001420:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001424:	1d03      	adds	r3, r0, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d90f      	bls.n	800144a <NVIC_EncodePriority+0x3a>
 800142a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001430:	fa0e f00c 	lsl.w	r0, lr, ip
 8001434:	ea21 0100 	bic.w	r1, r1, r0
 8001438:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143a:	fa0e fe03 	lsl.w	lr, lr, r3
 800143e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001442:	ea41 0002 	orr.w	r0, r1, r2
 8001446:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	2300      	movs	r3, #0
 800144c:	e7ee      	b.n	800142c <NVIC_EncodePriority+0x1c>
	...

08001450 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001452:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001454:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	0200      	lsls	r0, r0, #8
 800145e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001462:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001464:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800146c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001474:	b510      	push	{r4, lr}
 8001476:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_NVIC_SetPriority+0x1c>)
 800147a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001480:	f7ff ffc6 	bl	8001410 <NVIC_EncodePriority>
 8001484:	4601      	mov	r1, r0
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff ffae 	bl	80013e8 <__NVIC_SetPriority>
}
 800148c:	bd10      	pop	{r4, pc}
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001496:	f7ff ff99 	bl	80013cc <__NVIC_EnableIRQ>
}
 800149a:	bd08      	pop	{r3, pc}

0800149c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	3801      	subs	r0, #1
 800149e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80014a2:	d20b      	bcs.n	80014bc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80014a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <HAL_SYSTICK_Config+0x24>)
 80014ac:	21f0      	movs	r1, #240	@ 0xf0
 80014ae:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b2:	2000      	movs	r0, #0
 80014b4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	2207      	movs	r2, #7
 80014b8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014bc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014c4:	b170      	cbz	r0, 80014e4 <HAL_DAC_Init+0x20>
{
 80014c6:	b510      	push	{r4, lr}
 80014c8:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014ca:	7903      	ldrb	r3, [r0, #4]
 80014cc:	b133      	cbz	r3, 80014dc <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014ce:	2302      	movs	r3, #2
 80014d0:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014d2:	2000      	movs	r0, #0
 80014d4:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014d6:	2301      	movs	r3, #1
 80014d8:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 80014da:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80014dc:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80014de:	f7ff fdf7 	bl	80010d0 <HAL_DAC_MspInit>
 80014e2:	e7f4      	b.n	80014ce <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 80014e4:	2001      	movs	r0, #1
}
 80014e6:	4770      	bx	lr

080014e8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	460d      	mov	r5, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	9a04      	ldr	r2, [sp, #16]
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014f0:	2800      	cmp	r0, #0
 80014f2:	d061      	beq.n	80015b8 <HAL_DAC_Start_DMA+0xd0>
 80014f4:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014f6:	7940      	ldrb	r0, [r0, #5]
 80014f8:	2801      	cmp	r0, #1
 80014fa:	d05f      	beq.n	80015bc <HAL_DAC_Start_DMA+0xd4>
 80014fc:	2001      	movs	r0, #1
 80014fe:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001500:	2002      	movs	r0, #2
 8001502:	7120      	strb	r0, [r4, #4]

  if (Channel == DAC_CHANNEL_1)
 8001504:	2d00      	cmp	r5, #0
 8001506:	d12f      	bne.n	8001568 <HAL_DAC_Start_DMA+0x80>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001508:	68a0      	ldr	r0, [r4, #8]
 800150a:	4e2d      	ldr	r6, [pc, #180]	@ (80015c0 <HAL_DAC_Start_DMA+0xd8>)
 800150c:	63c6      	str	r6, [r0, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800150e:	68a0      	ldr	r0, [r4, #8]
 8001510:	4e2c      	ldr	r6, [pc, #176]	@ (80015c4 <HAL_DAC_Start_DMA+0xdc>)
 8001512:	6406      	str	r6, [r0, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001514:	68a0      	ldr	r0, [r4, #8]
 8001516:	4e2c      	ldr	r6, [pc, #176]	@ (80015c8 <HAL_DAC_Start_DMA+0xe0>)
 8001518:	64c6      	str	r6, [r0, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800151a:	6826      	ldr	r6, [r4, #0]
 800151c:	6830      	ldr	r0, [r6, #0]
 800151e:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8001522:	6030      	str	r0, [r6, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001524:	b122      	cbz	r2, 8001530 <HAL_DAC_Start_DMA+0x48>
 8001526:	2a04      	cmp	r2, #4
 8001528:	d01b      	beq.n	8001562 <HAL_DAC_Start_DMA+0x7a>
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
        break;
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800152a:	6822      	ldr	r2, [r4, #0]
 800152c:	3210      	adds	r2, #16
        break;
 800152e:	e001      	b.n	8001534 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	3208      	adds	r2, #8
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001534:	2d00      	cmp	r5, #0
 8001536:	d131      	bne.n	800159c <HAL_DAC_Start_DMA+0xb4>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001538:	6826      	ldr	r6, [r4, #0]
 800153a:	6830      	ldr	r0, [r6, #0]
 800153c:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8001540:	6030      	str	r0, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001542:	68a0      	ldr	r0, [r4, #8]
 8001544:	f000 f996 	bl	8001874 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001548:	2300      	movs	r3, #0
 800154a:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800154c:	2800      	cmp	r0, #0
 800154e:	d12e      	bne.n	80015ae <HAL_DAC_Start_DMA+0xc6>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001550:	6821      	ldr	r1, [r4, #0]
 8001552:	680b      	ldr	r3, [r1, #0]
 8001554:	f005 0510 	and.w	r5, r5, #16
 8001558:	2201      	movs	r2, #1
 800155a:	40aa      	lsls	r2, r5
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8001560:	bd70      	pop	{r4, r5, r6, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001562:	6822      	ldr	r2, [r4, #0]
 8001564:	320c      	adds	r2, #12
        break;
 8001566:	e7e5      	b.n	8001534 <HAL_DAC_Start_DMA+0x4c>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001568:	68e0      	ldr	r0, [r4, #12]
 800156a:	4e18      	ldr	r6, [pc, #96]	@ (80015cc <HAL_DAC_Start_DMA+0xe4>)
 800156c:	63c6      	str	r6, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800156e:	68e0      	ldr	r0, [r4, #12]
 8001570:	4e17      	ldr	r6, [pc, #92]	@ (80015d0 <HAL_DAC_Start_DMA+0xe8>)
 8001572:	6406      	str	r6, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001574:	68e0      	ldr	r0, [r4, #12]
 8001576:	4e17      	ldr	r6, [pc, #92]	@ (80015d4 <HAL_DAC_Start_DMA+0xec>)
 8001578:	64c6      	str	r6, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800157a:	6826      	ldr	r6, [r4, #0]
 800157c:	6830      	ldr	r0, [r6, #0]
 800157e:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001582:	6030      	str	r0, [r6, #0]
    switch (Alignment)
 8001584:	b122      	cbz	r2, 8001590 <HAL_DAC_Start_DMA+0xa8>
 8001586:	2a04      	cmp	r2, #4
 8001588:	d005      	beq.n	8001596 <HAL_DAC_Start_DMA+0xae>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800158a:	6822      	ldr	r2, [r4, #0]
 800158c:	321c      	adds	r2, #28
        break;
 800158e:	e7d1      	b.n	8001534 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001590:	6822      	ldr	r2, [r4, #0]
 8001592:	3214      	adds	r2, #20
        break;
 8001594:	e7ce      	b.n	8001534 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001596:	6822      	ldr	r2, [r4, #0]
 8001598:	3218      	adds	r2, #24
        break;
 800159a:	e7cb      	b.n	8001534 <HAL_DAC_Start_DMA+0x4c>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800159c:	6826      	ldr	r6, [r4, #0]
 800159e:	6830      	ldr	r0, [r6, #0]
 80015a0:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
 80015a4:	6030      	str	r0, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80015a6:	68e0      	ldr	r0, [r4, #12]
 80015a8:	f000 f964 	bl	8001874 <HAL_DMA_Start_IT>
 80015ac:	e7cc      	b.n	8001548 <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80015ae:	6923      	ldr	r3, [r4, #16]
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6123      	str	r3, [r4, #16]
 80015b6:	e7d3      	b.n	8001560 <HAL_DAC_Start_DMA+0x78>
    return HAL_ERROR;
 80015b8:	2001      	movs	r0, #1
 80015ba:	e7d1      	b.n	8001560 <HAL_DAC_Start_DMA+0x78>
  __HAL_LOCK(hdac);
 80015bc:	2002      	movs	r0, #2
 80015be:	e7cf      	b.n	8001560 <HAL_DAC_Start_DMA+0x78>
 80015c0:	080015d9 	.word	0x080015d9
 80015c4:	080015e9 	.word	0x080015e9
 80015c8:	080015f5 	.word	0x080015f5
 80015cc:	08001675 	.word	0x08001675
 80015d0:	08001685 	.word	0x08001685
 80015d4:	0800168f 	.word	0x0800168f

080015d8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80015d8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015da:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff fc33 	bl	8000e48 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80015e2:	2301      	movs	r3, #1
 80015e4:	7123      	strb	r3, [r4, #4]
}
 80015e6:	bd10      	pop	{r4, pc}

080015e8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80015e8:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80015ea:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80015ec:	f7ff fc3a 	bl	8000e64 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80015f0:	bd08      	pop	{r3, pc}

080015f2 <HAL_DAC_ErrorCallbackCh1>:
}
 80015f2:	4770      	bx	lr

080015f4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80015f4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015f6:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80015f8:	6923      	ldr	r3, [r4, #16]
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff fff6 	bl	80015f2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001606:	2301      	movs	r3, #1
 8001608:	7123      	strb	r3, [r4, #4]
}
 800160a:	bd10      	pop	{r4, pc}

0800160c <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 800160c:	b348      	cbz	r0, 8001662 <HAL_DAC_ConfigChannel+0x56>
 800160e:	4684      	mov	ip, r0
 8001610:	b349      	cbz	r1, 8001666 <HAL_DAC_ConfigChannel+0x5a>
  __HAL_LOCK(hdac);
 8001612:	7943      	ldrb	r3, [r0, #5]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d028      	beq.n	800166a <HAL_DAC_ConfigChannel+0x5e>
{
 8001618:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 800161a:	f04f 0e01 	mov.w	lr, #1
 800161e:	f880 e005 	strb.w	lr, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001622:	2302      	movs	r3, #2
 8001624:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8001626:	6804      	ldr	r4, [r0, #0]
 8001628:	6820      	ldr	r0, [r4, #0]
               << (Channel & 0x10UL));
 800162a:	f002 0210 	and.w	r2, r2, #16
 800162e:	f640 73fe 	movw	r3, #4094	@ 0xffe
 8001632:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001634:	ea20 0003 	bic.w	r0, r0, r3
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001638:	680b      	ldr	r3, [r1, #0]
 800163a:	6849      	ldr	r1, [r1, #4]
 800163c:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800163e:	4093      	lsls	r3, r2
 8001640:	4303      	orrs	r3, r0
  hdac->Instance->CR = tmpreg1;
 8001642:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001644:	f8dc 0000 	ldr.w	r0, [ip]
 8001648:	6803      	ldr	r3, [r0, #0]
 800164a:	21c0      	movs	r1, #192	@ 0xc0
 800164c:	fa01 f202 	lsl.w	r2, r1, r2
 8001650:	ea23 0302 	bic.w	r3, r3, r2
 8001654:	6003      	str	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001656:	f88c e004 	strb.w	lr, [ip, #4]
  __HAL_UNLOCK(hdac);
 800165a:	2000      	movs	r0, #0
 800165c:	f88c 0005 	strb.w	r0, [ip, #5]
}
 8001660:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001662:	2001      	movs	r0, #1
 8001664:	4770      	bx	lr
 8001666:	2001      	movs	r0, #1
 8001668:	4770      	bx	lr
  __HAL_LOCK(hdac);
 800166a:	2002      	movs	r0, #2
}
 800166c:	4770      	bx	lr

0800166e <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800166e:	4770      	bx	lr

08001670 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001670:	4770      	bx	lr

08001672 <HAL_DACEx_ErrorCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001672:	4770      	bx	lr

08001674 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001674:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001676:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff fff8 	bl	800166e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800167e:	2301      	movs	r3, #1
 8001680:	7123      	strb	r3, [r4, #4]
}
 8001682:	bd10      	pop	{r4, pc}

08001684 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001684:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001686:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001688:	f7ff fff2 	bl	8001670 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800168c:	bd08      	pop	{r3, pc}

0800168e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800168e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001690:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001692:	6923      	ldr	r3, [r4, #16]
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff ffe9 	bl	8001672 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016a0:	2301      	movs	r3, #1
 80016a2:	7123      	strb	r3, [r4, #4]
}
 80016a4:	bd10      	pop	{r4, pc}

080016a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a6:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016a8:	6805      	ldr	r5, [r0, #0]
 80016aa:	682c      	ldr	r4, [r5, #0]
 80016ac:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 80016b0:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016b2:	6804      	ldr	r4, [r0, #0]
 80016b4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b6:	6883      	ldr	r3, [r0, #8]
 80016b8:	2b40      	cmp	r3, #64	@ 0x40
 80016ba:	d005      	beq.n	80016c8 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80016bc:	6803      	ldr	r3, [r0, #0]
 80016be:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80016c0:	6803      	ldr	r3, [r0, #0]
 80016c2:	60da      	str	r2, [r3, #12]
  }
}
 80016c4:	bc30      	pop	{r4, r5}
 80016c6:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80016c8:	6803      	ldr	r3, [r0, #0]
 80016ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80016cc:	6803      	ldr	r3, [r0, #0]
 80016ce:	60d9      	str	r1, [r3, #12]
 80016d0:	e7f8      	b.n	80016c4 <DMA_SetConfig+0x1e>
	...

080016d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016d4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016d6:	6803      	ldr	r3, [r0, #0]
 80016d8:	b2d9      	uxtb	r1, r3
 80016da:	3910      	subs	r1, #16
 80016dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001710 <DMA_CalcBaseAndBitshift+0x3c>)
 80016de:	fba2 4201 	umull	r4, r2, r2, r1
 80016e2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016e4:	4c0b      	ldr	r4, [pc, #44]	@ (8001714 <DMA_CalcBaseAndBitshift+0x40>)
 80016e6:	5ca2      	ldrb	r2, [r4, r2]
 80016e8:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80016ea:	295f      	cmp	r1, #95	@ 0x5f
 80016ec:	d909      	bls.n	8001702 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016f2:	f023 0303 	bic.w	r3, r3, #3
 80016f6:	3304      	adds	r3, #4
 80016f8:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80016fa:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80016fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001700:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001702:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001706:	f023 0303 	bic.w	r3, r3, #3
 800170a:	6583      	str	r3, [r0, #88]	@ 0x58
 800170c:	e7f5      	b.n	80016fa <DMA_CalcBaseAndBitshift+0x26>
 800170e:	bf00      	nop
 8001710:	aaaaaaab 	.word	0xaaaaaaab
 8001714:	08004888 	.word	0x08004888

08001718 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001718:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800171a:	6982      	ldr	r2, [r0, #24]
 800171c:	b992      	cbnz	r2, 8001744 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800171e:	2b01      	cmp	r3, #1
 8001720:	d00a      	beq.n	8001738 <DMA_CheckFifoParam+0x20>
 8001722:	2b02      	cmp	r3, #2
 8001724:	d002      	beq.n	800172c <DMA_CheckFifoParam+0x14>
 8001726:	b10b      	cbz	r3, 800172c <DMA_CheckFifoParam+0x14>
 8001728:	2000      	movs	r0, #0
 800172a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800172c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800172e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001732:	d128      	bne.n	8001786 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001734:	2000      	movs	r0, #0
 8001736:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001738:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800173a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800173e:	d024      	beq.n	800178a <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2000      	movs	r0, #0
 8001742:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001744:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001748:	d009      	beq.n	800175e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800174a:	2b02      	cmp	r3, #2
 800174c:	d925      	bls.n	800179a <DMA_CheckFifoParam+0x82>
 800174e:	2b03      	cmp	r3, #3
 8001750:	d125      	bne.n	800179e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001752:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001754:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001758:	d123      	bne.n	80017a2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800175a:	2000      	movs	r0, #0
 800175c:	4770      	bx	lr
    switch (tmp)
 800175e:	2b03      	cmp	r3, #3
 8001760:	d803      	bhi.n	800176a <DMA_CheckFifoParam+0x52>
 8001762:	e8df f003 	tbb	[pc, r3]
 8001766:	0414      	.short	0x0414
 8001768:	0a14      	.short	0x0a14
 800176a:	2000      	movs	r0, #0
 800176c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800176e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001770:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001774:	d10d      	bne.n	8001792 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001776:	2000      	movs	r0, #0
 8001778:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800177a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800177c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001780:	d009      	beq.n	8001796 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001782:	2000      	movs	r0, #0
 8001784:	4770      	bx	lr
        status = HAL_ERROR;
 8001786:	2001      	movs	r0, #1
 8001788:	4770      	bx	lr
        status = HAL_ERROR;
 800178a:	2001      	movs	r0, #1
 800178c:	4770      	bx	lr
      status = HAL_ERROR;
 800178e:	2001      	movs	r0, #1
 8001790:	4770      	bx	lr
        status = HAL_ERROR;
 8001792:	2001      	movs	r0, #1
 8001794:	4770      	bx	lr
        status = HAL_ERROR;
 8001796:	2001      	movs	r0, #1
 8001798:	4770      	bx	lr
      status = HAL_ERROR;
 800179a:	2001      	movs	r0, #1
 800179c:	4770      	bx	lr
    switch (tmp)
 800179e:	2000      	movs	r0, #0
 80017a0:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80017a2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_DMA_Init>:
{
 80017a8:	b570      	push	{r4, r5, r6, lr}
 80017aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff fb46 	bl	8000e3c <HAL_GetTick>
  if(hdma == NULL)
 80017b0:	2c00      	cmp	r4, #0
 80017b2:	d05b      	beq.n	800186c <HAL_DMA_Init+0xc4>
 80017b4:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b6:	2302      	movs	r3, #2
 80017b8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80017bc:	2300      	movs	r3, #0
 80017be:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80017c2:	6822      	ldr	r2, [r4, #0]
 80017c4:	6813      	ldr	r3, [r2, #0]
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	f012 0f01 	tst.w	r2, #1
 80017d4:	d00a      	beq.n	80017ec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017d6:	f7ff fb31 	bl	8000e3c <HAL_GetTick>
 80017da:	1b43      	subs	r3, r0, r5
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d9f5      	bls.n	80017cc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e0:	2320      	movs	r3, #32
 80017e2:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017e4:	2003      	movs	r0, #3
 80017e6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 80017ea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80017ec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ee:	4920      	ldr	r1, [pc, #128]	@ (8001870 <HAL_DMA_Init+0xc8>)
 80017f0:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f2:	6862      	ldr	r2, [r4, #4]
 80017f4:	68a0      	ldr	r0, [r4, #8]
 80017f6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017fa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fc:	6920      	ldr	r0, [r4, #16]
 80017fe:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001800:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001802:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001804:	69a0      	ldr	r0, [r4, #24]
 8001806:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001808:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800180c:	6a20      	ldr	r0, [r4, #32]
 800180e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001810:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001812:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001814:	2904      	cmp	r1, #4
 8001816:	d01e      	beq.n	8001856 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001818:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800181a:	6826      	ldr	r6, [r4, #0]
 800181c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800181e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001824:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001826:	2b04      	cmp	r3, #4
 8001828:	d107      	bne.n	800183a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800182a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800182c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800182e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001830:	b11b      	cbz	r3, 800183a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff ff70 	bl	8001718 <DMA_CheckFifoParam>
 8001838:	b990      	cbnz	r0, 8001860 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800183a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff ff49 	bl	80016d4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001842:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001844:	233f      	movs	r3, #63	@ 0x3f
 8001846:	4093      	lsls	r3, r2
 8001848:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184a:	2000      	movs	r0, #0
 800184c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800184e:	2301      	movs	r3, #1
 8001850:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001854:	e7c9      	b.n	80017ea <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001856:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001858:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800185a:	4301      	orrs	r1, r0
 800185c:	430a      	orrs	r2, r1
 800185e:	e7db      	b.n	8001818 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001860:	2340      	movs	r3, #64	@ 0x40
 8001862:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001864:	2001      	movs	r0, #1
 8001866:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800186a:	e7be      	b.n	80017ea <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800186c:	2001      	movs	r0, #1
 800186e:	e7bc      	b.n	80017ea <HAL_DMA_Init+0x42>
 8001870:	f010803f 	.word	0xf010803f

08001874 <HAL_DMA_Start_IT>:
{
 8001874:	b538      	push	{r3, r4, r5, lr}
 8001876:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001878:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800187a:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800187e:	2801      	cmp	r0, #1
 8001880:	d02b      	beq.n	80018da <HAL_DMA_Start_IT+0x66>
 8001882:	2001      	movs	r0, #1
 8001884:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001888:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 800188c:	b2c0      	uxtb	r0, r0
 800188e:	2801      	cmp	r0, #1
 8001890:	d004      	beq.n	800189c <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001892:	2300      	movs	r3, #0
 8001894:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001898:	2002      	movs	r0, #2
}
 800189a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800189c:	2002      	movs	r0, #2
 800189e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a2:	2000      	movs	r0, #0
 80018a4:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018a6:	4620      	mov	r0, r4
 80018a8:	f7ff fefd 	bl	80016a6 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ac:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80018ae:	233f      	movs	r3, #63	@ 0x3f
 80018b0:	4093      	lsls	r3, r2
 80018b2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	6813      	ldr	r3, [r2, #0]
 80018b8:	f043 0316 	orr.w	r3, r3, #22
 80018bc:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80018be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018c0:	b123      	cbz	r3, 80018cc <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80018c2:	6822      	ldr	r2, [r4, #0]
 80018c4:	6813      	ldr	r3, [r2, #0]
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80018cc:	6822      	ldr	r2, [r4, #0]
 80018ce:	6813      	ldr	r3, [r2, #0]
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018d6:	2000      	movs	r0, #0
 80018d8:	e7df      	b.n	800189a <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80018da:	2002      	movs	r0, #2
 80018dc:	e7dd      	b.n	800189a <HAL_DMA_Start_IT+0x26>
	...

080018e0 <HAL_DMA_IRQHandler>:
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b083      	sub	sp, #12
 80018e4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018ea:	4b72      	ldr	r3, [pc, #456]	@ (8001ab4 <HAL_DMA_IRQHandler+0x1d4>)
 80018ec:	681d      	ldr	r5, [r3, #0]
 80018ee:	4b72      	ldr	r3, [pc, #456]	@ (8001ab8 <HAL_DMA_IRQHandler+0x1d8>)
 80018f0:	fba3 3505 	umull	r3, r5, r3, r5
 80018f4:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80018f8:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fa:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80018fc:	2308      	movs	r3, #8
 80018fe:	4093      	lsls	r3, r2
 8001900:	4233      	tst	r3, r6
 8001902:	d010      	beq.n	8001926 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001904:	6803      	ldr	r3, [r0, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	f012 0f04 	tst.w	r2, #4
 800190c:	d00b      	beq.n	8001926 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	f022 0204 	bic.w	r2, r2, #4
 8001914:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001916:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001918:	2308      	movs	r3, #8
 800191a:	4093      	lsls	r3, r2
 800191c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800191e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001926:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001928:	2301      	movs	r3, #1
 800192a:	4093      	lsls	r3, r2
 800192c:	4233      	tst	r3, r6
 800192e:	d009      	beq.n	8001944 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001930:	6822      	ldr	r2, [r4, #0]
 8001932:	6952      	ldr	r2, [r2, #20]
 8001934:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001938:	d004      	beq.n	8001944 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800193a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800193c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001944:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001946:	2304      	movs	r3, #4
 8001948:	4093      	lsls	r3, r2
 800194a:	4233      	tst	r3, r6
 800194c:	d009      	beq.n	8001962 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800194e:	6822      	ldr	r2, [r4, #0]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	f012 0f02 	tst.w	r2, #2
 8001956:	d004      	beq.n	8001962 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001958:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800195a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001962:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001964:	2310      	movs	r3, #16
 8001966:	4093      	lsls	r3, r2
 8001968:	4233      	tst	r3, r6
 800196a:	d024      	beq.n	80019b6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800196c:	6822      	ldr	r2, [r4, #0]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	f012 0f08 	tst.w	r2, #8
 8001974:	d01f      	beq.n	80019b6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001976:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001980:	d00d      	beq.n	800199e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001988:	d104      	bne.n	8001994 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800198a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800198c:	b19b      	cbz	r3, 80019b6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800198e:	4620      	mov	r0, r4
 8001990:	4798      	blx	r3
 8001992:	e010      	b.n	80019b6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001994:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001996:	b173      	cbz	r3, 80019b6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001998:	4620      	mov	r0, r4
 800199a:	4798      	blx	r3
 800199c:	e00b      	b.n	80019b6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80019a4:	d103      	bne.n	80019ae <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	f022 0208 	bic.w	r2, r2, #8
 80019ac:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80019ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019b0:	b10b      	cbz	r3, 80019b6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80019b2:	4620      	mov	r0, r4
 80019b4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019b6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80019b8:	2320      	movs	r3, #32
 80019ba:	4093      	lsls	r3, r2
 80019bc:	4233      	tst	r3, r6
 80019be:	d055      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019c0:	6822      	ldr	r2, [r4, #0]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	f012 0f10 	tst.w	r2, #16
 80019c8:	d050      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ca:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019cc:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d00e      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80019de:	d033      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80019e6:	d12a      	bne.n	8001a3e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80019e8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d03e      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80019ee:	4620      	mov	r0, r4
 80019f0:	4798      	blx	r3
 80019f2:	e03b      	b.n	8001a6c <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f4:	6822      	ldr	r2, [r4, #0]
 80019f6:	6813      	ldr	r3, [r2, #0]
 80019f8:	f023 0316 	bic.w	r3, r3, #22
 80019fc:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	6953      	ldr	r3, [r2, #20]
 8001a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a06:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a0a:	b1a3      	cbz	r3, 8001a36 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a0c:	6822      	ldr	r2, [r4, #0]
 8001a0e:	6813      	ldr	r3, [r2, #0]
 8001a10:	f023 0308 	bic.w	r3, r3, #8
 8001a14:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a16:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001a18:	233f      	movs	r3, #63	@ 0x3f
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001a24:	2300      	movs	r3, #0
 8001a26:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001a2a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d03f      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001a30:	4620      	mov	r0, r4
 8001a32:	4798      	blx	r3
        return;
 8001a34:	e03c      	b.n	8001ab0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a36:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e7      	bne.n	8001a0c <HAL_DMA_IRQHandler+0x12c>
 8001a3c:	e7eb      	b.n	8001a16 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001a3e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001a40:	b1a3      	cbz	r3, 8001a6c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001a42:	4620      	mov	r0, r4
 8001a44:	4798      	blx	r3
 8001a46:	e011      	b.n	8001a6c <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001a4e:	d109      	bne.n	8001a64 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	f022 0210 	bic.w	r2, r2, #16
 8001a56:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001a64:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001a66:	b10b      	cbz	r3, 8001a6c <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a6e:	b1fb      	cbz	r3, 8001ab0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a70:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a72:	f013 0f01 	tst.w	r3, #1
 8001a76:	d017      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a78:	2305      	movs	r3, #5
 8001a7a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001a88:	9b01      	ldr	r3, [sp, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	42ab      	cmp	r3, r5
 8001a90:	d804      	bhi.n	8001a9c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f013 0f01 	tst.w	r3, #1
 8001a9a:	d1f5      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001aa8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001aaa:	b10b      	cbz	r3, 8001ab0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001aac:	4620      	mov	r0, r4
 8001aae:	4798      	blx	r3
}
 8001ab0:	b003      	add	sp, #12
 8001ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	1b4e81b5 	.word	0x1b4e81b5

08001abc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	f200 80e9 	bhi.w	8001c96 <HAL_GPIO_Init+0x1da>
{
 8001ac4:	b570      	push	{r4, r5, r6, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	e065      	b.n	8001b96 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001acc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001ad0:	2403      	movs	r4, #3
 8001ad2:	fa04 f40e 	lsl.w	r4, r4, lr
 8001ad6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	68cc      	ldr	r4, [r1, #12]
 8001adc:	fa04 f40e 	lsl.w	r4, r4, lr
 8001ae0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001ae2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aea:	684a      	ldr	r2, [r1, #4]
 8001aec:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001af0:	409a      	lsls	r2, r3
 8001af2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001af4:	6042      	str	r2, [r0, #4]
 8001af6:	e05c      	b.n	8001bb2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af8:	08dc      	lsrs	r4, r3, #3
 8001afa:	3408      	adds	r4, #8
 8001afc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b00:	f003 0507 	and.w	r5, r3, #7
 8001b04:	00ad      	lsls	r5, r5, #2
 8001b06:	f04f 0e0f 	mov.w	lr, #15
 8001b0a:	fa0e fe05 	lsl.w	lr, lr, r5
 8001b0e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b12:	690a      	ldr	r2, [r1, #16]
 8001b14:	40aa      	lsls	r2, r5
 8001b16:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001b1a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001b1e:	e05c      	b.n	8001bda <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b20:	2207      	movs	r2, #7
 8001b22:	e000      	b.n	8001b26 <HAL_GPIO_Init+0x6a>
 8001b24:	2200      	movs	r2, #0
 8001b26:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b2a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2c:	3402      	adds	r4, #2
 8001b2e:	4d5a      	ldr	r5, [pc, #360]	@ (8001c98 <HAL_GPIO_Init+0x1dc>)
 8001b30:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b34:	4a59      	ldr	r2, [pc, #356]	@ (8001c9c <HAL_GPIO_Init+0x1e0>)
 8001b36:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	ea6f 020c 	mvn.w	r2, ip
 8001b3c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b40:	684e      	ldr	r6, [r1, #4]
 8001b42:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001b46:	d001      	beq.n	8001b4c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001b48:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001b4c:	4c53      	ldr	r4, [pc, #332]	@ (8001c9c <HAL_GPIO_Init+0x1e0>)
 8001b4e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001b50:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b56:	684e      	ldr	r6, [r1, #4]
 8001b58:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001b5c:	d001      	beq.n	8001b62 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001b5e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001b62:	4c4e      	ldr	r4, [pc, #312]	@ (8001c9c <HAL_GPIO_Init+0x1e0>)
 8001b64:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001b66:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b6c:	684e      	ldr	r6, [r1, #4]
 8001b6e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001b72:	d001      	beq.n	8001b78 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001b74:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001b78:	4c48      	ldr	r4, [pc, #288]	@ (8001c9c <HAL_GPIO_Init+0x1e0>)
 8001b7a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b80:	684d      	ldr	r5, [r1, #4]
 8001b82:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001b86:	d001      	beq.n	8001b8c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001b88:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001b8c:	4c43      	ldr	r4, [pc, #268]	@ (8001c9c <HAL_GPIO_Init+0x1e0>)
 8001b8e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b90:	3301      	adds	r3, #1
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	d87d      	bhi.n	8001c92 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001b96:	2201      	movs	r2, #1
 8001b98:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	680c      	ldr	r4, [r1, #0]
 8001b9c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001ba0:	ea32 0404 	bics.w	r4, r2, r4
 8001ba4:	d1f4      	bne.n	8001b90 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba6:	684c      	ldr	r4, [r1, #4]
 8001ba8:	f004 0403 	and.w	r4, r4, #3
 8001bac:	3c01      	subs	r4, #1
 8001bae:	2c01      	cmp	r4, #1
 8001bb0:	d98b      	bls.n	8001aca <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb2:	684a      	ldr	r2, [r1, #4]
 8001bb4:	f002 0203 	and.w	r2, r2, #3
 8001bb8:	2a03      	cmp	r2, #3
 8001bba:	d009      	beq.n	8001bd0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001bbc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bbe:	005d      	lsls	r5, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	40aa      	lsls	r2, r5
 8001bc4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc8:	688a      	ldr	r2, [r1, #8]
 8001bca:	40aa      	lsls	r2, r5
 8001bcc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001bce:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd0:	684a      	ldr	r2, [r1, #4]
 8001bd2:	f002 0203 	and.w	r2, r2, #3
 8001bd6:	2a02      	cmp	r2, #2
 8001bd8:	d08e      	beq.n	8001af8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001bda:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bdc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f20e 	lsl.w	r2, r2, lr
 8001be6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bea:	684a      	ldr	r2, [r1, #4]
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	fa02 f20e 	lsl.w	r2, r2, lr
 8001bf4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001bf6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf8:	684a      	ldr	r2, [r1, #4]
 8001bfa:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001bfe:	d0c7      	beq.n	8001b90 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c00:	2200      	movs	r2, #0
 8001c02:	9201      	str	r2, [sp, #4]
 8001c04:	4a26      	ldr	r2, [pc, #152]	@ (8001ca0 <HAL_GPIO_Init+0x1e4>)
 8001c06:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001c08:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001c0c:	6454      	str	r4, [r2, #68]	@ 0x44
 8001c0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c10:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001c14:	9201      	str	r2, [sp, #4]
 8001c16:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c18:	089c      	lsrs	r4, r3, #2
 8001c1a:	1ca5      	adds	r5, r4, #2
 8001c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001c98 <HAL_GPIO_Init+0x1dc>)
 8001c1e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c22:	f003 0e03 	and.w	lr, r3, #3
 8001c26:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c30:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca4 <HAL_GPIO_Init+0x1e8>)
 8001c36:	4290      	cmp	r0, r2
 8001c38:	f43f af74 	beq.w	8001b24 <HAL_GPIO_Init+0x68>
 8001c3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c40:	4290      	cmp	r0, r2
 8001c42:	d01a      	beq.n	8001c7a <HAL_GPIO_Init+0x1be>
 8001c44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c48:	4290      	cmp	r0, r2
 8001c4a:	d018      	beq.n	8001c7e <HAL_GPIO_Init+0x1c2>
 8001c4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c50:	4290      	cmp	r0, r2
 8001c52:	d016      	beq.n	8001c82 <HAL_GPIO_Init+0x1c6>
 8001c54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c58:	4290      	cmp	r0, r2
 8001c5a:	d014      	beq.n	8001c86 <HAL_GPIO_Init+0x1ca>
 8001c5c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c60:	4290      	cmp	r0, r2
 8001c62:	d012      	beq.n	8001c8a <HAL_GPIO_Init+0x1ce>
 8001c64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c68:	4290      	cmp	r0, r2
 8001c6a:	d010      	beq.n	8001c8e <HAL_GPIO_Init+0x1d2>
 8001c6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c70:	4290      	cmp	r0, r2
 8001c72:	f43f af55 	beq.w	8001b20 <HAL_GPIO_Init+0x64>
 8001c76:	2208      	movs	r2, #8
 8001c78:	e755      	b.n	8001b26 <HAL_GPIO_Init+0x6a>
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	e753      	b.n	8001b26 <HAL_GPIO_Init+0x6a>
 8001c7e:	2202      	movs	r2, #2
 8001c80:	e751      	b.n	8001b26 <HAL_GPIO_Init+0x6a>
 8001c82:	2203      	movs	r2, #3
 8001c84:	e74f      	b.n	8001b26 <HAL_GPIO_Init+0x6a>
 8001c86:	2204      	movs	r2, #4
 8001c88:	e74d      	b.n	8001b26 <HAL_GPIO_Init+0x6a>
 8001c8a:	2205      	movs	r2, #5
 8001c8c:	e74b      	b.n	8001b26 <HAL_GPIO_Init+0x6a>
 8001c8e:	2206      	movs	r2, #6
 8001c90:	e749      	b.n	8001b26 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001c92:	b002      	add	sp, #8
 8001c94:	bd70      	pop	{r4, r5, r6, pc}
 8001c96:	4770      	bx	lr
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	40013c00 	.word	0x40013c00
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca8:	b10a      	cbz	r2, 8001cae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001caa:	6181      	str	r1, [r0, #24]
 8001cac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cae:	0409      	lsls	r1, r1, #16
 8001cb0:	6181      	str	r1, [r0, #24]
  }
}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	f000 81e0 	beq.w	800207a <HAL_RCC_OscConfig+0x3c6>
{
 8001cba:	b570      	push	{r4, r5, r6, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc0:	6803      	ldr	r3, [r0, #0]
 8001cc2:	f013 0f01 	tst.w	r3, #1
 8001cc6:	d03b      	beq.n	8001d40 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cc8:	4b9f      	ldr	r3, [pc, #636]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d02c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d021      	beq.n	8001d24 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce0:	6863      	ldr	r3, [r4, #4]
 8001ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce6:	d04f      	beq.n	8001d88 <HAL_RCC_OscConfig+0xd4>
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cec:	d052      	beq.n	8001d94 <HAL_RCC_OscConfig+0xe0>
 8001cee:	4b96      	ldr	r3, [pc, #600]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d00:	6863      	ldr	r3, [r4, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d050      	beq.n	8001da8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff f899 	bl	8000e3c <HAL_GetTick>
 8001d0a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0c:	4b8e      	ldr	r3, [pc, #568]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001d14:	d114      	bne.n	8001d40 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d16:	f7ff f891 	bl	8000e3c <HAL_GetTick>
 8001d1a:	1b40      	subs	r0, r0, r5
 8001d1c:	2864      	cmp	r0, #100	@ 0x64
 8001d1e:	d9f5      	bls.n	8001d0c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001d20:	2003      	movs	r0, #3
 8001d22:	e1b1      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d24:	4b88      	ldr	r3, [pc, #544]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001d2c:	d0d8      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2e:	4b86      	ldr	r3, [pc, #536]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001d36:	d003      	beq.n	8001d40 <HAL_RCC_OscConfig+0x8c>
 8001d38:	6863      	ldr	r3, [r4, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 819f 	beq.w	800207e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f013 0f02 	tst.w	r3, #2
 8001d46:	d054      	beq.n	8001df2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d48:	4b7f      	ldr	r3, [pc, #508]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f013 0f0c 	tst.w	r3, #12
 8001d50:	d03e      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b7d      	ldr	r3, [pc, #500]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d033      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d5e:	68e3      	ldr	r3, [r4, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d068      	beq.n	8001e36 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b79      	ldr	r3, [pc, #484]	@ (8001f4c <HAL_RCC_OscConfig+0x298>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f867 	bl	8000e3c <HAL_GetTick>
 8001d6e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b75      	ldr	r3, [pc, #468]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f013 0f02 	tst.w	r3, #2
 8001d78:	d154      	bne.n	8001e24 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7ff f85f 	bl	8000e3c <HAL_GetTick>
 8001d7e:	1b40      	subs	r0, r0, r5
 8001d80:	2802      	cmp	r0, #2
 8001d82:	d9f5      	bls.n	8001d70 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001d84:	2003      	movs	r0, #3
 8001d86:	e17f      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d88:	4a6f      	ldr	r2, [pc, #444]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e7b5      	b.n	8001d00 <HAL_RCC_OscConfig+0x4c>
 8001d94:	4b6c      	ldr	r3, [pc, #432]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e7ab      	b.n	8001d00 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001da8:	f7ff f848 	bl	8000e3c <HAL_GetTick>
 8001dac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	4b66      	ldr	r3, [pc, #408]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001db6:	d0c3      	beq.n	8001d40 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff f840 	bl	8000e3c <HAL_GetTick>
 8001dbc:	1b40      	subs	r0, r0, r5
 8001dbe:	2864      	cmp	r0, #100	@ 0x64
 8001dc0:	d9f5      	bls.n	8001dae <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	e160      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc6:	4b60      	ldr	r3, [pc, #384]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001dce:	d1c6      	bne.n	8001d5e <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd0:	4b5d      	ldr	r3, [pc, #372]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f013 0f02 	tst.w	r3, #2
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_OscConfig+0x12e>
 8001dda:	68e3      	ldr	r3, [r4, #12]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	f040 8150 	bne.w	8002082 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4a59      	ldr	r2, [pc, #356]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001de4:	6813      	ldr	r3, [r2, #0]
 8001de6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001dea:	6921      	ldr	r1, [r4, #16]
 8001dec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001df0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	f013 0f08 	tst.w	r3, #8
 8001df8:	d042      	beq.n	8001e80 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dfa:	6963      	ldr	r3, [r4, #20]
 8001dfc:	b36b      	cbz	r3, 8001e5a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <HAL_RCC_OscConfig+0x298>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7ff f819 	bl	8000e3c <HAL_GetTick>
 8001e0a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e10:	f013 0f02 	tst.w	r3, #2
 8001e14:	d134      	bne.n	8001e80 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e16:	f7ff f811 	bl	8000e3c <HAL_GetTick>
 8001e1a:	1b40      	subs	r0, r0, r5
 8001e1c:	2802      	cmp	r0, #2
 8001e1e:	d9f5      	bls.n	8001e0c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001e20:	2003      	movs	r0, #3
 8001e22:	e131      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4a48      	ldr	r2, [pc, #288]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001e26:	6813      	ldr	r3, [r2, #0]
 8001e28:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001e2c:	6921      	ldr	r1, [r4, #16]
 8001e2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e7dd      	b.n	8001df2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001e36:	4b45      	ldr	r3, [pc, #276]	@ (8001f4c <HAL_RCC_OscConfig+0x298>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fffe 	bl	8000e3c <HAL_GetTick>
 8001e40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	4b41      	ldr	r3, [pc, #260]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f013 0f02 	tst.w	r3, #2
 8001e4a:	d0d2      	beq.n	8001df2 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fff6 	bl	8000e3c <HAL_GetTick>
 8001e50:	1b40      	subs	r0, r0, r5
 8001e52:	2802      	cmp	r0, #2
 8001e54:	d9f5      	bls.n	8001e42 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001e56:	2003      	movs	r0, #3
 8001e58:	e116      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f4c <HAL_RCC_OscConfig+0x298>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7fe ffeb 	bl	8000e3c <HAL_GetTick>
 8001e66:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e6c:	f013 0f02 	tst.w	r3, #2
 8001e70:	d006      	beq.n	8001e80 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e72:	f7fe ffe3 	bl	8000e3c <HAL_GetTick>
 8001e76:	1b40      	subs	r0, r0, r5
 8001e78:	2802      	cmp	r0, #2
 8001e7a:	d9f5      	bls.n	8001e68 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	e103      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	f013 0f04 	tst.w	r3, #4
 8001e86:	d077      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e88:	4b2f      	ldr	r3, [pc, #188]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001e90:	d133      	bne.n	8001efa <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	4b2c      	ldr	r3, [pc, #176]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e9a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001eaa:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <HAL_RCC_OscConfig+0x29c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001eb4:	d023      	beq.n	8001efe <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb6:	68a3      	ldr	r3, [r4, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d034      	beq.n	8001f26 <HAL_RCC_OscConfig+0x272>
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d038      	beq.n	8001f32 <HAL_RCC_OscConfig+0x27e>
 8001ec0:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001ec2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	671a      	str	r2, [r3, #112]	@ 0x70
 8001eca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ecc:	f022 0204 	bic.w	r2, r2, #4
 8001ed0:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ed2:	68a3      	ldr	r3, [r4, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d03d      	beq.n	8001f54 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7fe ffb0 	bl	8000e3c <HAL_GetTick>
 8001edc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ede:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	f013 0f02 	tst.w	r3, #2
 8001ee6:	d146      	bne.n	8001f76 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7fe ffa8 	bl	8000e3c <HAL_GetTick>
 8001eec:	1b80      	subs	r0, r0, r6
 8001eee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ef2:	4298      	cmp	r0, r3
 8001ef4:	d9f3      	bls.n	8001ede <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	e0c6      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2500      	movs	r5, #0
 8001efc:	e7d6      	b.n	8001eac <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efe:	4a14      	ldr	r2, [pc, #80]	@ (8001f50 <HAL_RCC_OscConfig+0x29c>)
 8001f00:	6813      	ldr	r3, [r2, #0]
 8001f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f06:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f08:	f7fe ff98 	bl	8000e3c <HAL_GetTick>
 8001f0c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_RCC_OscConfig+0x29c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f16:	d1ce      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7fe ff90 	bl	8000e3c <HAL_GetTick>
 8001f1c:	1b80      	subs	r0, r0, r6
 8001f1e:	2802      	cmp	r0, #2
 8001f20:	d9f5      	bls.n	8001f0e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001f22:	2003      	movs	r0, #3
 8001f24:	e0b0      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f26:	4a08      	ldr	r2, [pc, #32]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001f28:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f30:	e7cf      	b.n	8001ed2 <HAL_RCC_OscConfig+0x21e>
 8001f32:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_RCC_OscConfig+0x294>)
 8001f34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f36:	f042 0204 	orr.w	r2, r2, #4
 8001f3a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001f3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	671a      	str	r2, [r3, #112]	@ 0x70
 8001f44:	e7c5      	b.n	8001ed2 <HAL_RCC_OscConfig+0x21e>
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470000 	.word	0x42470000
 8001f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f54:	f7fe ff72 	bl	8000e3c <HAL_GetTick>
 8001f58:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5a:	4b52      	ldr	r3, [pc, #328]	@ (80020a4 <HAL_RCC_OscConfig+0x3f0>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5e:	f013 0f02 	tst.w	r3, #2
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f7fe ff6a 	bl	8000e3c <HAL_GetTick>
 8001f68:	1b80      	subs	r0, r0, r6
 8001f6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001f6e:	4298      	cmp	r0, r3
 8001f70:	d9f3      	bls.n	8001f5a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001f72:	2003      	movs	r0, #3
 8001f74:	e088      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f76:	b9ed      	cbnz	r5, 8001fb4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f78:	69a3      	ldr	r3, [r4, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8083 	beq.w	8002086 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f80:	4a48      	ldr	r2, [pc, #288]	@ (80020a4 <HAL_RCC_OscConfig+0x3f0>)
 8001f82:	6892      	ldr	r2, [r2, #8]
 8001f84:	f002 020c 	and.w	r2, r2, #12
 8001f88:	2a08      	cmp	r2, #8
 8001f8a:	d051      	beq.n	8002030 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d017      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b45      	ldr	r3, [pc, #276]	@ (80020a8 <HAL_RCC_OscConfig+0x3f4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe ff51 	bl	8000e3c <HAL_GetTick>
 8001f9a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9c:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <HAL_RCC_OscConfig+0x3f0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001fa4:	d042      	beq.n	800202c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe ff49 	bl	8000e3c <HAL_GetTick>
 8001faa:	1b00      	subs	r0, r0, r4
 8001fac:	2802      	cmp	r0, #2
 8001fae:	d9f5      	bls.n	8001f9c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	e069      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4a3b      	ldr	r2, [pc, #236]	@ (80020a4 <HAL_RCC_OscConfig+0x3f0>)
 8001fb6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbe:	e7db      	b.n	8001f78 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001fc0:	4b39      	ldr	r3, [pc, #228]	@ (80020a8 <HAL_RCC_OscConfig+0x3f4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001fc6:	f7fe ff39 	bl	8000e3c <HAL_GetTick>
 8001fca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fcc:	4b35      	ldr	r3, [pc, #212]	@ (80020a4 <HAL_RCC_OscConfig+0x3f0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001fd4:	d006      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7fe ff31 	bl	8000e3c <HAL_GetTick>
 8001fda:	1b40      	subs	r0, r0, r5
 8001fdc:	2802      	cmp	r0, #2
 8001fde:	d9f5      	bls.n	8001fcc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	e051      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe4:	69e3      	ldr	r3, [r4, #28]
 8001fe6:	6a22      	ldr	r2, [r4, #32]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001fec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ff0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001ff2:	0852      	lsrs	r2, r2, #1
 8001ff4:	3a01      	subs	r2, #1
 8001ff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ffa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001ffc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002000:	4a28      	ldr	r2, [pc, #160]	@ (80020a4 <HAL_RCC_OscConfig+0x3f0>)
 8002002:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b28      	ldr	r3, [pc, #160]	@ (80020a8 <HAL_RCC_OscConfig+0x3f4>)
 8002006:	2201      	movs	r2, #1
 8002008:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800200a:	f7fe ff17 	bl	8000e3c <HAL_GetTick>
 800200e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002010:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <HAL_RCC_OscConfig+0x3f0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002018:	d106      	bne.n	8002028 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7fe ff0f 	bl	8000e3c <HAL_GetTick>
 800201e:	1b00      	subs	r0, r0, r4
 8002020:	2802      	cmp	r0, #2
 8002022:	d9f5      	bls.n	8002010 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002024:	2003      	movs	r0, #3
 8002026:	e02f      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002028:	2000      	movs	r0, #0
 800202a:	e02d      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
 800202c:	2000      	movs	r0, #0
 800202e:	e02b      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002030:	2b01      	cmp	r3, #1
 8002032:	d02b      	beq.n	800208c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002034:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_RCC_OscConfig+0x3f0>)
 8002036:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002038:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800203c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800203e:	4291      	cmp	r1, r2
 8002040:	d126      	bne.n	8002090 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002042:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002046:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002048:	428a      	cmp	r2, r1
 800204a:	d123      	bne.n	8002094 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800204c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800204e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002052:	401a      	ands	r2, r3
 8002054:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002058:	d11e      	bne.n	8002098 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800205a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800205e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002060:	0852      	lsrs	r2, r2, #1
 8002062:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002064:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002068:	d118      	bne.n	800209c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800206a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800206e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002070:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002074:	d114      	bne.n	80020a0 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002076:	2000      	movs	r0, #0
 8002078:	e006      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800207a:	2001      	movs	r0, #1
}
 800207c:	4770      	bx	lr
        return HAL_ERROR;
 800207e:	2001      	movs	r0, #1
 8002080:	e002      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002082:	2001      	movs	r0, #1
 8002084:	e000      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002086:	2000      	movs	r0, #0
}
 8002088:	b002      	add	sp, #8
 800208a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800208c:	2001      	movs	r0, #1
 800208e:	e7fb      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002090:	2001      	movs	r0, #1
 8002092:	e7f9      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
 8002094:	2001      	movs	r0, #1
 8002096:	e7f7      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
 8002098:	2001      	movs	r0, #1
 800209a:	e7f5      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
 800209c:	2001      	movs	r0, #1
 800209e:	e7f3      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
 80020a0:	2001      	movs	r0, #1
 80020a2:	e7f1      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	42470000 	.word	0x42470000

080020ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ac:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ae:	4b31      	ldr	r3, [pc, #196]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d001      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020ba:	482f      	ldr	r0, [pc, #188]	@ (8002178 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020bc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020be:	4b2d      	ldr	r3, [pc, #180]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80020cc:	d02c      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ce:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020d0:	6858      	ldr	r0, [r3, #4]
 80020d2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80020d6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80020da:	ebbc 0c00 	subs.w	ip, ip, r0
 80020de:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80020e2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80020e6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80020ea:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80020ee:	ebb1 010c 	subs.w	r1, r1, ip
 80020f2:	eb63 030e 	sbc.w	r3, r3, lr
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020fc:	00c9      	lsls	r1, r1, #3
 80020fe:	eb11 0c00 	adds.w	ip, r1, r0
 8002102:	f143 0300 	adc.w	r3, r3, #0
 8002106:	0299      	lsls	r1, r3, #10
 8002108:	2300      	movs	r3, #0
 800210a:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800210e:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002112:	f7fe fc63 	bl	80009dc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002116:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800211e:	3301      	adds	r3, #1
 8002120:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8002122:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002126:	e7c9      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <HAL_RCC_GetSysClockFreq+0xc8>)
 800212a:	6858      	ldr	r0, [r3, #4]
 800212c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002130:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002134:	ebbc 0c00 	subs.w	ip, ip, r0
 8002138:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800213c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002140:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002144:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002148:	ebb1 010c 	subs.w	r1, r1, ip
 800214c:	eb63 030e 	sbc.w	r3, r3, lr
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002156:	00c9      	lsls	r1, r1, #3
 8002158:	eb11 0c00 	adds.w	ip, r1, r0
 800215c:	f143 0300 	adc.w	r3, r3, #0
 8002160:	0299      	lsls	r1, r3, #10
 8002162:	2300      	movs	r3, #0
 8002164:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002168:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800216c:	f7fe fc36 	bl	80009dc <__aeabi_uldivmod>
 8002170:	e7d1      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x6a>
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	00f42400 	.word	0x00f42400

0800217c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800217c:	2800      	cmp	r0, #0
 800217e:	f000 809b 	beq.w	80022b8 <HAL_RCC_ClockConfig+0x13c>
{
 8002182:	b570      	push	{r4, r5, r6, lr}
 8002184:	460d      	mov	r5, r1
 8002186:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b4f      	ldr	r3, [pc, #316]	@ (80022c8 <HAL_RCC_ClockConfig+0x14c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	428b      	cmp	r3, r1
 8002192:	d208      	bcs.n	80021a6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002194:	b2cb      	uxtb	r3, r1
 8002196:	4a4c      	ldr	r2, [pc, #304]	@ (80022c8 <HAL_RCC_ClockConfig+0x14c>)
 8002198:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	6813      	ldr	r3, [r2, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	428b      	cmp	r3, r1
 80021a2:	f040 808b 	bne.w	80022bc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	f013 0f02 	tst.w	r3, #2
 80021ac:	d017      	beq.n	80021de <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ae:	f013 0f04 	tst.w	r3, #4
 80021b2:	d004      	beq.n	80021be <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b4:	4a45      	ldr	r2, [pc, #276]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 80021b6:	6893      	ldr	r3, [r2, #8]
 80021b8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021bc:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	f013 0f08 	tst.w	r3, #8
 80021c4:	d004      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c6:	4a41      	ldr	r2, [pc, #260]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 80021c8:	6893      	ldr	r3, [r2, #8]
 80021ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ce:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4a3e      	ldr	r2, [pc, #248]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 80021d2:	6893      	ldr	r3, [r2, #8]
 80021d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021d8:	68a1      	ldr	r1, [r4, #8]
 80021da:	430b      	orrs	r3, r1
 80021dc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	f013 0f01 	tst.w	r3, #1
 80021e4:	d032      	beq.n	800224c <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	6863      	ldr	r3, [r4, #4]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d021      	beq.n	8002230 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ec:	1e9a      	subs	r2, r3, #2
 80021ee:	2a01      	cmp	r2, #1
 80021f0:	d925      	bls.n	800223e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f2:	4a36      	ldr	r2, [pc, #216]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	f012 0f02 	tst.w	r2, #2
 80021fa:	d061      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fc:	4933      	ldr	r1, [pc, #204]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 80021fe:	688a      	ldr	r2, [r1, #8]
 8002200:	f022 0203 	bic.w	r2, r2, #3
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002208:	f7fe fe18 	bl	8000e3c <HAL_GetTick>
 800220c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	4b2f      	ldr	r3, [pc, #188]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	6862      	ldr	r2, [r4, #4]
 8002218:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800221c:	d016      	beq.n	800224c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221e:	f7fe fe0d 	bl	8000e3c <HAL_GetTick>
 8002222:	1b80      	subs	r0, r0, r6
 8002224:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002228:	4298      	cmp	r0, r3
 800222a:	d9f0      	bls.n	800220e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800222c:	2003      	movs	r0, #3
 800222e:	e042      	b.n	80022b6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002230:	4a26      	ldr	r2, [pc, #152]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002238:	d1e0      	bne.n	80021fc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800223a:	2001      	movs	r0, #1
 800223c:	e03b      	b.n	80022b6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4a23      	ldr	r2, [pc, #140]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002246:	d1d9      	bne.n	80021fc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002248:	2001      	movs	r0, #1
 800224a:	e034      	b.n	80022b6 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <HAL_RCC_ClockConfig+0x14c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	42ab      	cmp	r3, r5
 8002256:	d907      	bls.n	8002268 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002258:	b2ea      	uxtb	r2, r5
 800225a:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <HAL_RCC_ClockConfig+0x14c>)
 800225c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	42ab      	cmp	r3, r5
 8002266:	d12d      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	f013 0f04 	tst.w	r3, #4
 800226e:	d006      	beq.n	800227e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4a16      	ldr	r2, [pc, #88]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 8002272:	6893      	ldr	r3, [r2, #8]
 8002274:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002278:	68e1      	ldr	r1, [r4, #12]
 800227a:	430b      	orrs	r3, r1
 800227c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	f013 0f08 	tst.w	r3, #8
 8002284:	d007      	beq.n	8002296 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002286:	4a11      	ldr	r2, [pc, #68]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 8002288:	6893      	ldr	r3, [r2, #8]
 800228a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800228e:	6921      	ldr	r1, [r4, #16]
 8002290:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002294:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002296:	f7ff ff09 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_RCC_ClockConfig+0x150>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022a2:	4a0b      	ldr	r2, [pc, #44]	@ (80022d0 <HAL_RCC_ClockConfig+0x154>)
 80022a4:	5cd3      	ldrb	r3, [r2, r3]
 80022a6:	40d8      	lsrs	r0, r3
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_RCC_ClockConfig+0x158>)
 80022aa:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80022ac:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <HAL_RCC_ClockConfig+0x15c>)
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	f7ff f840 	bl	8001334 <HAL_InitTick>
  return HAL_OK;
 80022b4:	2000      	movs	r0, #0
}
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
}
 80022ba:	4770      	bx	lr
      return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
 80022be:	e7fa      	b.n	80022b6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80022c0:	2001      	movs	r0, #1
 80022c2:	e7f8      	b.n	80022b6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80022c4:	2001      	movs	r0, #1
 80022c6:	e7f6      	b.n	80022b6 <HAL_RCC_ClockConfig+0x13a>
 80022c8:	40023c00 	.word	0x40023c00
 80022cc:	40023800 	.word	0x40023800
 80022d0:	08004878 	.word	0x08004878
 80022d4:	20000004 	.word	0x20000004
 80022d8:	2000000c 	.word	0x2000000c

080022dc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80022dc:	4b01      	ldr	r3, [pc, #4]	@ (80022e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022ea:	f7ff fff7 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022ee:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <HAL_RCC_GetPCLK1Freq+0x18>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80022f6:	4a03      	ldr	r2, [pc, #12]	@ (8002304 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
}
 80022fa:	40d8      	lsrs	r0, r3
 80022fc:	bd08      	pop	{r3, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	08004870 	.word	0x08004870

08002308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002308:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800230a:	f7ff ffe7 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002316:	4a03      	ldr	r2, [pc, #12]	@ (8002324 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
}
 800231a:	40d8      	lsrs	r0, r3
 800231c:	bd08      	pop	{r3, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	08004870 	.word	0x08004870

08002328 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002328:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d137      	bne.n	80023a2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002338:	6802      	ldr	r2, [r0, #0]
 800233a:	68d3      	ldr	r3, [r2, #12]
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002342:	6803      	ldr	r3, [r0, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	@ (80023ac <HAL_TIM_Base_Start_IT+0x84>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d020      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x64>
 800234a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800234e:	d01d      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x64>
 8002350:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002354:	4293      	cmp	r3, r2
 8002356:	d019      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x64>
 8002358:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800235c:	4293      	cmp	r3, r2
 800235e:	d015      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x64>
 8002360:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002364:	4293      	cmp	r3, r2
 8002366:	d011      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x64>
 8002368:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800236c:	4293      	cmp	r3, r2
 800236e:	d00d      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x64>
 8002370:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002374:	4293      	cmp	r3, r2
 8002376:	d009      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x64>
 8002378:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800237c:	4293      	cmp	r3, r2
 800237e:	d005      	beq.n	800238c <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002388:	2000      	movs	r0, #0
 800238a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002392:	2a06      	cmp	r2, #6
 8002394:	d007      	beq.n	80023a6 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800239e:	2000      	movs	r0, #0
 80023a0:	4770      	bx	lr
    return HAL_ERROR;
 80023a2:	2001      	movs	r0, #1
 80023a4:	4770      	bx	lr
  return HAL_OK;
 80023a6:	2000      	movs	r0, #0
}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40010000 	.word	0x40010000

080023b0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023b0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b2:	4a34      	ldr	r2, [pc, #208]	@ (8002484 <TIM_Base_SetConfig+0xd4>)
 80023b4:	4290      	cmp	r0, r2
 80023b6:	d012      	beq.n	80023de <TIM_Base_SetConfig+0x2e>
 80023b8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80023bc:	d00f      	beq.n	80023de <TIM_Base_SetConfig+0x2e>
 80023be:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80023c2:	4290      	cmp	r0, r2
 80023c4:	d00b      	beq.n	80023de <TIM_Base_SetConfig+0x2e>
 80023c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80023ca:	4290      	cmp	r0, r2
 80023cc:	d007      	beq.n	80023de <TIM_Base_SetConfig+0x2e>
 80023ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80023d2:	4290      	cmp	r0, r2
 80023d4:	d003      	beq.n	80023de <TIM_Base_SetConfig+0x2e>
 80023d6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80023da:	4290      	cmp	r0, r2
 80023dc:	d103      	bne.n	80023e6 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80023e2:	684a      	ldr	r2, [r1, #4]
 80023e4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023e6:	4a27      	ldr	r2, [pc, #156]	@ (8002484 <TIM_Base_SetConfig+0xd4>)
 80023e8:	4290      	cmp	r0, r2
 80023ea:	d02a      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 80023ec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80023f0:	d027      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 80023f2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80023f6:	4290      	cmp	r0, r2
 80023f8:	d023      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 80023fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80023fe:	4290      	cmp	r0, r2
 8002400:	d01f      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 8002402:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002406:	4290      	cmp	r0, r2
 8002408:	d01b      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 800240a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800240e:	4290      	cmp	r0, r2
 8002410:	d017      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 8002412:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002416:	4290      	cmp	r0, r2
 8002418:	d013      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 800241a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800241e:	4290      	cmp	r0, r2
 8002420:	d00f      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 8002422:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002426:	4290      	cmp	r0, r2
 8002428:	d00b      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 800242a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800242e:	4290      	cmp	r0, r2
 8002430:	d007      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 8002432:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002436:	4290      	cmp	r0, r2
 8002438:	d003      	beq.n	8002442 <TIM_Base_SetConfig+0x92>
 800243a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800243e:	4290      	cmp	r0, r2
 8002440:	d103      	bne.n	800244a <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002446:	68ca      	ldr	r2, [r1, #12]
 8002448:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800244a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800244e:	694a      	ldr	r2, [r1, #20]
 8002450:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002452:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002454:	688b      	ldr	r3, [r1, #8]
 8002456:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002458:	680b      	ldr	r3, [r1, #0]
 800245a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <TIM_Base_SetConfig+0xd4>)
 800245e:	4298      	cmp	r0, r3
 8002460:	d003      	beq.n	800246a <TIM_Base_SetConfig+0xba>
 8002462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002466:	4298      	cmp	r0, r3
 8002468:	d101      	bne.n	800246e <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800246a:	690b      	ldr	r3, [r1, #16]
 800246c:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800246e:	2301      	movs	r3, #1
 8002470:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002472:	6903      	ldr	r3, [r0, #16]
 8002474:	f013 0f01 	tst.w	r3, #1
 8002478:	d003      	beq.n	8002482 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800247a:	6903      	ldr	r3, [r0, #16]
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6103      	str	r3, [r0, #16]
  }
}
 8002482:	4770      	bx	lr
 8002484:	40010000 	.word	0x40010000

08002488 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002488:	b340      	cbz	r0, 80024dc <HAL_TIM_Base_Init+0x54>
{
 800248a:	b510      	push	{r4, lr}
 800248c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800248e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002492:	b1f3      	cbz	r3, 80024d2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002494:	2302      	movs	r3, #2
 8002496:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800249a:	4621      	mov	r1, r4
 800249c:	f851 0b04 	ldr.w	r0, [r1], #4
 80024a0:	f7ff ff86 	bl	80023b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80024ae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80024b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80024b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80024be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024c2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80024c6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80024ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80024ce:	2000      	movs	r0, #0
}
 80024d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80024d2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80024d6:	f7fe fe53 	bl	8001180 <HAL_TIM_Base_MspInit>
 80024da:	e7db      	b.n	8002494 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
}
 80024de:	4770      	bx	lr

080024e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024e0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80024e4:	2a01      	cmp	r2, #1
 80024e6:	d03d      	beq.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 80024e8:	b410      	push	{r4}
 80024ea:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80024ec:	2201      	movs	r2, #1
 80024ee:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f2:	2202      	movs	r2, #2
 80024f4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024f8:	6802      	ldr	r2, [r0, #0]
 80024fa:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024fc:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024fe:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002502:	6808      	ldr	r0, [r1, #0]
 8002504:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002508:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4816      	ldr	r0, [pc, #88]	@ (8002568 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800250e:	4282      	cmp	r2, r0
 8002510:	d01a      	beq.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002512:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002516:	d017      	beq.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002518:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800251c:	4282      	cmp	r2, r0
 800251e:	d013      	beq.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002520:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002524:	4282      	cmp	r2, r0
 8002526:	d00f      	beq.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002528:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800252c:	4282      	cmp	r2, r0
 800252e:	d00b      	beq.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002530:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8002534:	4282      	cmp	r2, r0
 8002536:	d007      	beq.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002538:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 800253c:	4282      	cmp	r2, r0
 800253e:	d003      	beq.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002540:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002544:	4282      	cmp	r2, r0
 8002546:	d104      	bne.n	8002552 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002548:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800254c:	6849      	ldr	r1, [r1, #4]
 800254e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002550:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002558:	2000      	movs	r0, #0
 800255a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800255e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002562:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002564:	2002      	movs	r0, #2
}
 8002566:	4770      	bx	lr
 8002568:	40010000 	.word	0x40010000

0800256c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800256c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256e:	f102 030c 	add.w	r3, r2, #12
 8002572:	e853 3f00 	ldrex	r3, [r3]
 8002576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257a:	320c      	adds	r2, #12
 800257c:	e842 3100 	strex	r1, r3, [r2]
 8002580:	2900      	cmp	r1, #0
 8002582:	d1f3      	bne.n	800256c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002584:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002586:	f102 0314 	add.w	r3, r2, #20
 800258a:	e853 3f00 	ldrex	r3, [r3]
 800258e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002592:	3214      	adds	r2, #20
 8002594:	e842 3100 	strex	r1, r3, [r2]
 8002598:	2900      	cmp	r1, #0
 800259a:	d1f3      	bne.n	8002584 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800259c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d005      	beq.n	80025ae <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025a2:	2320      	movs	r3, #32
 80025a4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a8:	2300      	movs	r3, #0
 80025aa:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80025ac:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b0:	f102 030c 	add.w	r3, r2, #12
 80025b4:	e853 3f00 	ldrex	r3, [r3]
 80025b8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025bc:	320c      	adds	r2, #12
 80025be:	e842 3100 	strex	r1, r3, [r2]
 80025c2:	2900      	cmp	r1, #0
 80025c4:	d1f3      	bne.n	80025ae <UART_EndRxTransfer+0x42>
 80025c6:	e7ec      	b.n	80025a2 <UART_EndRxTransfer+0x36>

080025c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c8:	b510      	push	{r4, lr}
 80025ca:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025cc:	6802      	ldr	r2, [r0, #0]
 80025ce:	6913      	ldr	r3, [r2, #16]
 80025d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025d4:	68c1      	ldr	r1, [r0, #12]
 80025d6:	430b      	orrs	r3, r1
 80025d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025da:	6883      	ldr	r3, [r0, #8]
 80025dc:	6902      	ldr	r2, [r0, #16]
 80025de:	431a      	orrs	r2, r3
 80025e0:	6943      	ldr	r3, [r0, #20]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	69c3      	ldr	r3, [r0, #28]
 80025e6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80025e8:	6801      	ldr	r1, [r0, #0]
 80025ea:	68cb      	ldr	r3, [r1, #12]
 80025ec:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80025f0:	f023 030c 	bic.w	r3, r3, #12
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f8:	6802      	ldr	r2, [r0, #0]
 80025fa:	6953      	ldr	r3, [r2, #20]
 80025fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002600:	6981      	ldr	r1, [r0, #24]
 8002602:	430b      	orrs	r3, r1
 8002604:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002606:	6803      	ldr	r3, [r0, #0]
 8002608:	4a31      	ldr	r2, [pc, #196]	@ (80026d0 <UART_SetConfig+0x108>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d006      	beq.n	800261c <UART_SetConfig+0x54>
 800260e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002612:	4293      	cmp	r3, r2
 8002614:	d002      	beq.n	800261c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002616:	f7ff fe67 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 800261a:	e001      	b.n	8002620 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800261c:	f7ff fe74 	bl	8002308 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002620:	69e3      	ldr	r3, [r4, #28]
 8002622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002626:	d029      	beq.n	800267c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002628:	2100      	movs	r1, #0
 800262a:	1803      	adds	r3, r0, r0
 800262c:	4149      	adcs	r1, r1
 800262e:	181b      	adds	r3, r3, r0
 8002630:	f141 0100 	adc.w	r1, r1, #0
 8002634:	00c9      	lsls	r1, r1, #3
 8002636:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	1818      	adds	r0, r3, r0
 800263e:	6863      	ldr	r3, [r4, #4]
 8002640:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002644:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002648:	f141 0100 	adc.w	r1, r1, #0
 800264c:	f7fe f9c6 	bl	80009dc <__aeabi_uldivmod>
 8002650:	4a20      	ldr	r2, [pc, #128]	@ (80026d4 <UART_SetConfig+0x10c>)
 8002652:	fba2 3100 	umull	r3, r1, r2, r0
 8002656:	0949      	lsrs	r1, r1, #5
 8002658:	2364      	movs	r3, #100	@ 0x64
 800265a:	fb03 0311 	mls	r3, r3, r1, r0
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	3332      	adds	r3, #50	@ 0x32
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800266c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	6821      	ldr	r1, [r4, #0]
 8002676:	4413      	add	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }
}
 800267a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800267c:	2300      	movs	r3, #0
 800267e:	1802      	adds	r2, r0, r0
 8002680:	eb43 0103 	adc.w	r1, r3, r3
 8002684:	1812      	adds	r2, r2, r0
 8002686:	f141 0100 	adc.w	r1, r1, #0
 800268a:	00c9      	lsls	r1, r1, #3
 800268c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002690:	00d2      	lsls	r2, r2, #3
 8002692:	1810      	adds	r0, r2, r0
 8002694:	f141 0100 	adc.w	r1, r1, #0
 8002698:	6862      	ldr	r2, [r4, #4]
 800269a:	1892      	adds	r2, r2, r2
 800269c:	415b      	adcs	r3, r3
 800269e:	f7fe f99d 	bl	80009dc <__aeabi_uldivmod>
 80026a2:	4a0c      	ldr	r2, [pc, #48]	@ (80026d4 <UART_SetConfig+0x10c>)
 80026a4:	fba2 3100 	umull	r3, r1, r2, r0
 80026a8:	0949      	lsrs	r1, r1, #5
 80026aa:	2364      	movs	r3, #100	@ 0x64
 80026ac:	fb03 0311 	mls	r3, r3, r1, r0
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	3332      	adds	r3, #50	@ 0x32
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	005a      	lsls	r2, r3, #1
 80026bc:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80026c0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	6821      	ldr	r1, [r4, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
 80026ce:	e7d4      	b.n	800267a <UART_SetConfig+0xb2>
 80026d0:	40011000 	.word	0x40011000
 80026d4:	51eb851f 	.word	0x51eb851f

080026d8 <UART_WaitOnFlagUntilTimeout>:
{
 80026d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026dc:	b083      	sub	sp, #12
 80026de:	4605      	mov	r5, r0
 80026e0:	460e      	mov	r6, r1
 80026e2:	4617      	mov	r7, r2
 80026e4:	4699      	mov	r9, r3
 80026e6:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ea:	682b      	ldr	r3, [r5, #0]
 80026ec:	681c      	ldr	r4, [r3, #0]
 80026ee:	ea36 0404 	bics.w	r4, r6, r4
 80026f2:	bf0c      	ite	eq
 80026f4:	2401      	moveq	r4, #1
 80026f6:	2400      	movne	r4, #0
 80026f8:	42bc      	cmp	r4, r7
 80026fa:	d128      	bne.n	800274e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002700:	d0f3      	beq.n	80026ea <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7fe fb9b 	bl	8000e3c <HAL_GetTick>
 8002706:	eba0 0009 	sub.w	r0, r0, r9
 800270a:	4540      	cmp	r0, r8
 800270c:	d823      	bhi.n	8002756 <UART_WaitOnFlagUntilTimeout+0x7e>
 800270e:	f1b8 0f00 	cmp.w	r8, #0
 8002712:	d022      	beq.n	800275a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	f012 0f04 	tst.w	r2, #4
 800271c:	d0e5      	beq.n	80026ea <UART_WaitOnFlagUntilTimeout+0x12>
 800271e:	2e80      	cmp	r6, #128	@ 0x80
 8002720:	d0e3      	beq.n	80026ea <UART_WaitOnFlagUntilTimeout+0x12>
 8002722:	2e40      	cmp	r6, #64	@ 0x40
 8002724:	d0e1      	beq.n	80026ea <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	f012 0f08 	tst.w	r2, #8
 800272c:	d0dd      	beq.n	80026ea <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800272e:	2400      	movs	r4, #0
 8002730:	9401      	str	r4, [sp, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	9201      	str	r2, [sp, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800273c:	4628      	mov	r0, r5
 800273e:	f7ff ff15 	bl	800256c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002742:	2308      	movs	r3, #8
 8002744:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002746:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800274a:	2001      	movs	r0, #1
 800274c:	e000      	b.n	8002750 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800274e:	2000      	movs	r0, #0
}
 8002750:	b003      	add	sp, #12
 8002752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002756:	2003      	movs	r0, #3
 8002758:	e7fa      	b.n	8002750 <UART_WaitOnFlagUntilTimeout+0x78>
 800275a:	2003      	movs	r0, #3
 800275c:	e7f8      	b.n	8002750 <UART_WaitOnFlagUntilTimeout+0x78>

0800275e <HAL_UART_Init>:
  if (huart == NULL)
 800275e:	b360      	cbz	r0, 80027ba <HAL_UART_Init+0x5c>
{
 8002760:	b510      	push	{r4, lr}
 8002762:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002764:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002768:	b313      	cbz	r3, 80027b0 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800276a:	2324      	movs	r3, #36	@ 0x24
 800276c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002770:	6822      	ldr	r2, [r4, #0]
 8002772:	68d3      	ldr	r3, [r2, #12]
 8002774:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002778:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff ff24 	bl	80025c8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002780:	6822      	ldr	r2, [r4, #0]
 8002782:	6913      	ldr	r3, [r2, #16]
 8002784:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002788:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278a:	6822      	ldr	r2, [r4, #0]
 800278c:	6953      	ldr	r3, [r2, #20]
 800278e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002792:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002794:	6822      	ldr	r2, [r4, #0]
 8002796:	68d3      	ldr	r3, [r2, #12]
 8002798:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800279c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	2000      	movs	r0, #0
 80027a0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027a2:	2320      	movs	r3, #32
 80027a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027ac:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80027ae:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80027b0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80027b4:	f7fe fcfc 	bl	80011b0 <HAL_UART_MspInit>
 80027b8:	e7d7      	b.n	800276a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80027ba:	2001      	movs	r0, #1
}
 80027bc:	4770      	bx	lr

080027be <HAL_UART_Transmit>:
{
 80027be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80027c6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d156      	bne.n	800287e <HAL_UART_Transmit+0xc0>
 80027d0:	4604      	mov	r4, r0
 80027d2:	460d      	mov	r5, r1
 80027d4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d055      	beq.n	8002886 <HAL_UART_Transmit+0xc8>
 80027da:	b90a      	cbnz	r2, 80027e0 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80027dc:	2001      	movs	r0, #1
 80027de:	e04f      	b.n	8002880 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e4:	2321      	movs	r3, #33	@ 0x21
 80027e6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80027ea:	f7fe fb27 	bl	8000e3c <HAL_GetTick>
 80027ee:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80027f0:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027f4:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f8:	68a3      	ldr	r3, [r4, #8]
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027fe:	d002      	beq.n	8002806 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002800:	f04f 0800 	mov.w	r8, #0
 8002804:	e014      	b.n	8002830 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002806:	6923      	ldr	r3, [r4, #16]
 8002808:	b32b      	cbz	r3, 8002856 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800280a:	f04f 0800 	mov.w	r8, #0
 800280e:	e00f      	b.n	8002830 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002810:	2320      	movs	r3, #32
 8002812:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002816:	2003      	movs	r0, #3
 8002818:	e032      	b.n	8002880 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800281a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800281e:	6822      	ldr	r2, [r4, #0]
 8002820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002824:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002826:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002828:	b292      	uxth	r2, r2
 800282a:	3a01      	subs	r2, #1
 800282c:	b292      	uxth	r2, r2
 800282e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002830:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002832:	b29b      	uxth	r3, r3
 8002834:	b193      	cbz	r3, 800285c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002836:	9600      	str	r6, [sp, #0]
 8002838:	463b      	mov	r3, r7
 800283a:	2200      	movs	r2, #0
 800283c:	2180      	movs	r1, #128	@ 0x80
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff ff4a 	bl	80026d8 <UART_WaitOnFlagUntilTimeout>
 8002844:	2800      	cmp	r0, #0
 8002846:	d1e3      	bne.n	8002810 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002848:	2d00      	cmp	r5, #0
 800284a:	d0e6      	beq.n	800281a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800284c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002854:	e7e7      	b.n	8002826 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002856:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002858:	2500      	movs	r5, #0
 800285a:	e7e9      	b.n	8002830 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800285c:	9600      	str	r6, [sp, #0]
 800285e:	463b      	mov	r3, r7
 8002860:	2200      	movs	r2, #0
 8002862:	2140      	movs	r1, #64	@ 0x40
 8002864:	4620      	mov	r0, r4
 8002866:	f7ff ff37 	bl	80026d8 <UART_WaitOnFlagUntilTimeout>
 800286a:	b918      	cbnz	r0, 8002874 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800286c:	2320      	movs	r3, #32
 800286e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002872:	e005      	b.n	8002880 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002874:	2320      	movs	r3, #32
 8002876:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800287a:	2003      	movs	r0, #3
 800287c:	e000      	b.n	8002880 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800287e:	2002      	movs	r0, #2
}
 8002880:	b002      	add	sp, #8
 8002882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002886:	2001      	movs	r0, #1
 8002888:	e7fa      	b.n	8002880 <HAL_UART_Transmit+0xc2>
	...

0800288c <std>:
 800288c:	2300      	movs	r3, #0
 800288e:	b510      	push	{r4, lr}
 8002890:	4604      	mov	r4, r0
 8002892:	e9c0 3300 	strd	r3, r3, [r0]
 8002896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800289a:	6083      	str	r3, [r0, #8]
 800289c:	8181      	strh	r1, [r0, #12]
 800289e:	6643      	str	r3, [r0, #100]	@ 0x64
 80028a0:	81c2      	strh	r2, [r0, #14]
 80028a2:	6183      	str	r3, [r0, #24]
 80028a4:	4619      	mov	r1, r3
 80028a6:	2208      	movs	r2, #8
 80028a8:	305c      	adds	r0, #92	@ 0x5c
 80028aa:	f000 f9f9 	bl	8002ca0 <memset>
 80028ae:	4b0d      	ldr	r3, [pc, #52]	@ (80028e4 <std+0x58>)
 80028b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80028b2:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <std+0x5c>)
 80028b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80028b6:	4b0d      	ldr	r3, [pc, #52]	@ (80028ec <std+0x60>)
 80028b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80028ba:	4b0d      	ldr	r3, [pc, #52]	@ (80028f0 <std+0x64>)
 80028bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80028be:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <std+0x68>)
 80028c0:	6224      	str	r4, [r4, #32]
 80028c2:	429c      	cmp	r4, r3
 80028c4:	d006      	beq.n	80028d4 <std+0x48>
 80028c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80028ca:	4294      	cmp	r4, r2
 80028cc:	d002      	beq.n	80028d4 <std+0x48>
 80028ce:	33d0      	adds	r3, #208	@ 0xd0
 80028d0:	429c      	cmp	r4, r3
 80028d2:	d105      	bne.n	80028e0 <std+0x54>
 80028d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80028d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028dc:	f000 ba58 	b.w	8002d90 <__retarget_lock_init_recursive>
 80028e0:	bd10      	pop	{r4, pc}
 80028e2:	bf00      	nop
 80028e4:	08002af1 	.word	0x08002af1
 80028e8:	08002b13 	.word	0x08002b13
 80028ec:	08002b4b 	.word	0x08002b4b
 80028f0:	08002b6f 	.word	0x08002b6f
 80028f4:	20001148 	.word	0x20001148

080028f8 <stdio_exit_handler>:
 80028f8:	4a02      	ldr	r2, [pc, #8]	@ (8002904 <stdio_exit_handler+0xc>)
 80028fa:	4903      	ldr	r1, [pc, #12]	@ (8002908 <stdio_exit_handler+0x10>)
 80028fc:	4803      	ldr	r0, [pc, #12]	@ (800290c <stdio_exit_handler+0x14>)
 80028fe:	f000 b869 	b.w	80029d4 <_fwalk_sglue>
 8002902:	bf00      	nop
 8002904:	20000010 	.word	0x20000010
 8002908:	08003631 	.word	0x08003631
 800290c:	20000020 	.word	0x20000020

08002910 <cleanup_stdio>:
 8002910:	6841      	ldr	r1, [r0, #4]
 8002912:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <cleanup_stdio+0x34>)
 8002914:	4299      	cmp	r1, r3
 8002916:	b510      	push	{r4, lr}
 8002918:	4604      	mov	r4, r0
 800291a:	d001      	beq.n	8002920 <cleanup_stdio+0x10>
 800291c:	f000 fe88 	bl	8003630 <_fflush_r>
 8002920:	68a1      	ldr	r1, [r4, #8]
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <cleanup_stdio+0x38>)
 8002924:	4299      	cmp	r1, r3
 8002926:	d002      	beq.n	800292e <cleanup_stdio+0x1e>
 8002928:	4620      	mov	r0, r4
 800292a:	f000 fe81 	bl	8003630 <_fflush_r>
 800292e:	68e1      	ldr	r1, [r4, #12]
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <cleanup_stdio+0x3c>)
 8002932:	4299      	cmp	r1, r3
 8002934:	d004      	beq.n	8002940 <cleanup_stdio+0x30>
 8002936:	4620      	mov	r0, r4
 8002938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800293c:	f000 be78 	b.w	8003630 <_fflush_r>
 8002940:	bd10      	pop	{r4, pc}
 8002942:	bf00      	nop
 8002944:	20001148 	.word	0x20001148
 8002948:	200011b0 	.word	0x200011b0
 800294c:	20001218 	.word	0x20001218

08002950 <global_stdio_init.part.0>:
 8002950:	b510      	push	{r4, lr}
 8002952:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <global_stdio_init.part.0+0x30>)
 8002954:	4c0b      	ldr	r4, [pc, #44]	@ (8002984 <global_stdio_init.part.0+0x34>)
 8002956:	4a0c      	ldr	r2, [pc, #48]	@ (8002988 <global_stdio_init.part.0+0x38>)
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	4620      	mov	r0, r4
 800295c:	2200      	movs	r2, #0
 800295e:	2104      	movs	r1, #4
 8002960:	f7ff ff94 	bl	800288c <std>
 8002964:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002968:	2201      	movs	r2, #1
 800296a:	2109      	movs	r1, #9
 800296c:	f7ff ff8e 	bl	800288c <std>
 8002970:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002974:	2202      	movs	r2, #2
 8002976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800297a:	2112      	movs	r1, #18
 800297c:	f7ff bf86 	b.w	800288c <std>
 8002980:	20001280 	.word	0x20001280
 8002984:	20001148 	.word	0x20001148
 8002988:	080028f9 	.word	0x080028f9

0800298c <__sfp_lock_acquire>:
 800298c:	4801      	ldr	r0, [pc, #4]	@ (8002994 <__sfp_lock_acquire+0x8>)
 800298e:	f000 ba00 	b.w	8002d92 <__retarget_lock_acquire_recursive>
 8002992:	bf00      	nop
 8002994:	20001289 	.word	0x20001289

08002998 <__sfp_lock_release>:
 8002998:	4801      	ldr	r0, [pc, #4]	@ (80029a0 <__sfp_lock_release+0x8>)
 800299a:	f000 b9fb 	b.w	8002d94 <__retarget_lock_release_recursive>
 800299e:	bf00      	nop
 80029a0:	20001289 	.word	0x20001289

080029a4 <__sinit>:
 80029a4:	b510      	push	{r4, lr}
 80029a6:	4604      	mov	r4, r0
 80029a8:	f7ff fff0 	bl	800298c <__sfp_lock_acquire>
 80029ac:	6a23      	ldr	r3, [r4, #32]
 80029ae:	b11b      	cbz	r3, 80029b8 <__sinit+0x14>
 80029b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029b4:	f7ff bff0 	b.w	8002998 <__sfp_lock_release>
 80029b8:	4b04      	ldr	r3, [pc, #16]	@ (80029cc <__sinit+0x28>)
 80029ba:	6223      	str	r3, [r4, #32]
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <__sinit+0x2c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f5      	bne.n	80029b0 <__sinit+0xc>
 80029c4:	f7ff ffc4 	bl	8002950 <global_stdio_init.part.0>
 80029c8:	e7f2      	b.n	80029b0 <__sinit+0xc>
 80029ca:	bf00      	nop
 80029cc:	08002911 	.word	0x08002911
 80029d0:	20001280 	.word	0x20001280

080029d4 <_fwalk_sglue>:
 80029d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029d8:	4607      	mov	r7, r0
 80029da:	4688      	mov	r8, r1
 80029dc:	4614      	mov	r4, r2
 80029de:	2600      	movs	r6, #0
 80029e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029e4:	f1b9 0901 	subs.w	r9, r9, #1
 80029e8:	d505      	bpl.n	80029f6 <_fwalk_sglue+0x22>
 80029ea:	6824      	ldr	r4, [r4, #0]
 80029ec:	2c00      	cmp	r4, #0
 80029ee:	d1f7      	bne.n	80029e0 <_fwalk_sglue+0xc>
 80029f0:	4630      	mov	r0, r6
 80029f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029f6:	89ab      	ldrh	r3, [r5, #12]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d907      	bls.n	8002a0c <_fwalk_sglue+0x38>
 80029fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a00:	3301      	adds	r3, #1
 8002a02:	d003      	beq.n	8002a0c <_fwalk_sglue+0x38>
 8002a04:	4629      	mov	r1, r5
 8002a06:	4638      	mov	r0, r7
 8002a08:	47c0      	blx	r8
 8002a0a:	4306      	orrs	r6, r0
 8002a0c:	3568      	adds	r5, #104	@ 0x68
 8002a0e:	e7e9      	b.n	80029e4 <_fwalk_sglue+0x10>

08002a10 <iprintf>:
 8002a10:	b40f      	push	{r0, r1, r2, r3}
 8002a12:	b507      	push	{r0, r1, r2, lr}
 8002a14:	4906      	ldr	r1, [pc, #24]	@ (8002a30 <iprintf+0x20>)
 8002a16:	ab04      	add	r3, sp, #16
 8002a18:	6808      	ldr	r0, [r1, #0]
 8002a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a1e:	6881      	ldr	r1, [r0, #8]
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	f000 fadb 	bl	8002fdc <_vfiprintf_r>
 8002a26:	b003      	add	sp, #12
 8002a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a2c:	b004      	add	sp, #16
 8002a2e:	4770      	bx	lr
 8002a30:	2000001c 	.word	0x2000001c

08002a34 <_puts_r>:
 8002a34:	6a03      	ldr	r3, [r0, #32]
 8002a36:	b570      	push	{r4, r5, r6, lr}
 8002a38:	6884      	ldr	r4, [r0, #8]
 8002a3a:	4605      	mov	r5, r0
 8002a3c:	460e      	mov	r6, r1
 8002a3e:	b90b      	cbnz	r3, 8002a44 <_puts_r+0x10>
 8002a40:	f7ff ffb0 	bl	80029a4 <__sinit>
 8002a44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a46:	07db      	lsls	r3, r3, #31
 8002a48:	d405      	bmi.n	8002a56 <_puts_r+0x22>
 8002a4a:	89a3      	ldrh	r3, [r4, #12]
 8002a4c:	0598      	lsls	r0, r3, #22
 8002a4e:	d402      	bmi.n	8002a56 <_puts_r+0x22>
 8002a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a52:	f000 f99e 	bl	8002d92 <__retarget_lock_acquire_recursive>
 8002a56:	89a3      	ldrh	r3, [r4, #12]
 8002a58:	0719      	lsls	r1, r3, #28
 8002a5a:	d502      	bpl.n	8002a62 <_puts_r+0x2e>
 8002a5c:	6923      	ldr	r3, [r4, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d135      	bne.n	8002ace <_puts_r+0x9a>
 8002a62:	4621      	mov	r1, r4
 8002a64:	4628      	mov	r0, r5
 8002a66:	f000 f8c5 	bl	8002bf4 <__swsetup_r>
 8002a6a:	b380      	cbz	r0, 8002ace <_puts_r+0x9a>
 8002a6c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002a70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a72:	07da      	lsls	r2, r3, #31
 8002a74:	d405      	bmi.n	8002a82 <_puts_r+0x4e>
 8002a76:	89a3      	ldrh	r3, [r4, #12]
 8002a78:	059b      	lsls	r3, r3, #22
 8002a7a:	d402      	bmi.n	8002a82 <_puts_r+0x4e>
 8002a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a7e:	f000 f989 	bl	8002d94 <__retarget_lock_release_recursive>
 8002a82:	4628      	mov	r0, r5
 8002a84:	bd70      	pop	{r4, r5, r6, pc}
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da04      	bge.n	8002a94 <_puts_r+0x60>
 8002a8a:	69a2      	ldr	r2, [r4, #24]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	dc17      	bgt.n	8002ac0 <_puts_r+0x8c>
 8002a90:	290a      	cmp	r1, #10
 8002a92:	d015      	beq.n	8002ac0 <_puts_r+0x8c>
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	6022      	str	r2, [r4, #0]
 8002a9a:	7019      	strb	r1, [r3, #0]
 8002a9c:	68a3      	ldr	r3, [r4, #8]
 8002a9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	60a3      	str	r3, [r4, #8]
 8002aa6:	2900      	cmp	r1, #0
 8002aa8:	d1ed      	bne.n	8002a86 <_puts_r+0x52>
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da11      	bge.n	8002ad2 <_puts_r+0x9e>
 8002aae:	4622      	mov	r2, r4
 8002ab0:	210a      	movs	r1, #10
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f000 f85f 	bl	8002b76 <__swbuf_r>
 8002ab8:	3001      	adds	r0, #1
 8002aba:	d0d7      	beq.n	8002a6c <_puts_r+0x38>
 8002abc:	250a      	movs	r5, #10
 8002abe:	e7d7      	b.n	8002a70 <_puts_r+0x3c>
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f000 f857 	bl	8002b76 <__swbuf_r>
 8002ac8:	3001      	adds	r0, #1
 8002aca:	d1e7      	bne.n	8002a9c <_puts_r+0x68>
 8002acc:	e7ce      	b.n	8002a6c <_puts_r+0x38>
 8002ace:	3e01      	subs	r6, #1
 8002ad0:	e7e4      	b.n	8002a9c <_puts_r+0x68>
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	6022      	str	r2, [r4, #0]
 8002ad8:	220a      	movs	r2, #10
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e7ee      	b.n	8002abc <_puts_r+0x88>
	...

08002ae0 <puts>:
 8002ae0:	4b02      	ldr	r3, [pc, #8]	@ (8002aec <puts+0xc>)
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	f7ff bfa5 	b.w	8002a34 <_puts_r>
 8002aea:	bf00      	nop
 8002aec:	2000001c 	.word	0x2000001c

08002af0 <__sread>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	460c      	mov	r4, r1
 8002af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002af8:	f000 f8fc 	bl	8002cf4 <_read_r>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	bfab      	itete	ge
 8002b00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002b02:	89a3      	ldrhlt	r3, [r4, #12]
 8002b04:	181b      	addge	r3, r3, r0
 8002b06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002b0a:	bfac      	ite	ge
 8002b0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002b0e:	81a3      	strhlt	r3, [r4, #12]
 8002b10:	bd10      	pop	{r4, pc}

08002b12 <__swrite>:
 8002b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b16:	461f      	mov	r7, r3
 8002b18:	898b      	ldrh	r3, [r1, #12]
 8002b1a:	05db      	lsls	r3, r3, #23
 8002b1c:	4605      	mov	r5, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	4616      	mov	r6, r2
 8002b22:	d505      	bpl.n	8002b30 <__swrite+0x1e>
 8002b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b28:	2302      	movs	r3, #2
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f000 f8d0 	bl	8002cd0 <_lseek_r>
 8002b30:	89a3      	ldrh	r3, [r4, #12]
 8002b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b3a:	81a3      	strh	r3, [r4, #12]
 8002b3c:	4632      	mov	r2, r6
 8002b3e:	463b      	mov	r3, r7
 8002b40:	4628      	mov	r0, r5
 8002b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b46:	f000 b8e7 	b.w	8002d18 <_write_r>

08002b4a <__sseek>:
 8002b4a:	b510      	push	{r4, lr}
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b52:	f000 f8bd 	bl	8002cd0 <_lseek_r>
 8002b56:	1c43      	adds	r3, r0, #1
 8002b58:	89a3      	ldrh	r3, [r4, #12]
 8002b5a:	bf15      	itete	ne
 8002b5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b66:	81a3      	strheq	r3, [r4, #12]
 8002b68:	bf18      	it	ne
 8002b6a:	81a3      	strhne	r3, [r4, #12]
 8002b6c:	bd10      	pop	{r4, pc}

08002b6e <__sclose>:
 8002b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b72:	f000 b89d 	b.w	8002cb0 <_close_r>

08002b76 <__swbuf_r>:
 8002b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b78:	460e      	mov	r6, r1
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	4605      	mov	r5, r0
 8002b7e:	b118      	cbz	r0, 8002b88 <__swbuf_r+0x12>
 8002b80:	6a03      	ldr	r3, [r0, #32]
 8002b82:	b90b      	cbnz	r3, 8002b88 <__swbuf_r+0x12>
 8002b84:	f7ff ff0e 	bl	80029a4 <__sinit>
 8002b88:	69a3      	ldr	r3, [r4, #24]
 8002b8a:	60a3      	str	r3, [r4, #8]
 8002b8c:	89a3      	ldrh	r3, [r4, #12]
 8002b8e:	071a      	lsls	r2, r3, #28
 8002b90:	d501      	bpl.n	8002b96 <__swbuf_r+0x20>
 8002b92:	6923      	ldr	r3, [r4, #16]
 8002b94:	b943      	cbnz	r3, 8002ba8 <__swbuf_r+0x32>
 8002b96:	4621      	mov	r1, r4
 8002b98:	4628      	mov	r0, r5
 8002b9a:	f000 f82b 	bl	8002bf4 <__swsetup_r>
 8002b9e:	b118      	cbz	r0, 8002ba8 <__swbuf_r+0x32>
 8002ba0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002ba4:	4638      	mov	r0, r7
 8002ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	6922      	ldr	r2, [r4, #16]
 8002bac:	1a98      	subs	r0, r3, r2
 8002bae:	6963      	ldr	r3, [r4, #20]
 8002bb0:	b2f6      	uxtb	r6, r6
 8002bb2:	4283      	cmp	r3, r0
 8002bb4:	4637      	mov	r7, r6
 8002bb6:	dc05      	bgt.n	8002bc4 <__swbuf_r+0x4e>
 8002bb8:	4621      	mov	r1, r4
 8002bba:	4628      	mov	r0, r5
 8002bbc:	f000 fd38 	bl	8003630 <_fflush_r>
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d1ed      	bne.n	8002ba0 <__swbuf_r+0x2a>
 8002bc4:	68a3      	ldr	r3, [r4, #8]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	60a3      	str	r3, [r4, #8]
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	6022      	str	r2, [r4, #0]
 8002bd0:	701e      	strb	r6, [r3, #0]
 8002bd2:	6962      	ldr	r2, [r4, #20]
 8002bd4:	1c43      	adds	r3, r0, #1
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d004      	beq.n	8002be4 <__swbuf_r+0x6e>
 8002bda:	89a3      	ldrh	r3, [r4, #12]
 8002bdc:	07db      	lsls	r3, r3, #31
 8002bde:	d5e1      	bpl.n	8002ba4 <__swbuf_r+0x2e>
 8002be0:	2e0a      	cmp	r6, #10
 8002be2:	d1df      	bne.n	8002ba4 <__swbuf_r+0x2e>
 8002be4:	4621      	mov	r1, r4
 8002be6:	4628      	mov	r0, r5
 8002be8:	f000 fd22 	bl	8003630 <_fflush_r>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d0d9      	beq.n	8002ba4 <__swbuf_r+0x2e>
 8002bf0:	e7d6      	b.n	8002ba0 <__swbuf_r+0x2a>
	...

08002bf4 <__swsetup_r>:
 8002bf4:	b538      	push	{r3, r4, r5, lr}
 8002bf6:	4b29      	ldr	r3, [pc, #164]	@ (8002c9c <__swsetup_r+0xa8>)
 8002bf8:	4605      	mov	r5, r0
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	460c      	mov	r4, r1
 8002bfe:	b118      	cbz	r0, 8002c08 <__swsetup_r+0x14>
 8002c00:	6a03      	ldr	r3, [r0, #32]
 8002c02:	b90b      	cbnz	r3, 8002c08 <__swsetup_r+0x14>
 8002c04:	f7ff fece 	bl	80029a4 <__sinit>
 8002c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c0c:	0719      	lsls	r1, r3, #28
 8002c0e:	d422      	bmi.n	8002c56 <__swsetup_r+0x62>
 8002c10:	06da      	lsls	r2, r3, #27
 8002c12:	d407      	bmi.n	8002c24 <__swsetup_r+0x30>
 8002c14:	2209      	movs	r2, #9
 8002c16:	602a      	str	r2, [r5, #0]
 8002c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c22:	e033      	b.n	8002c8c <__swsetup_r+0x98>
 8002c24:	0758      	lsls	r0, r3, #29
 8002c26:	d512      	bpl.n	8002c4e <__swsetup_r+0x5a>
 8002c28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c2a:	b141      	cbz	r1, 8002c3e <__swsetup_r+0x4a>
 8002c2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c30:	4299      	cmp	r1, r3
 8002c32:	d002      	beq.n	8002c3a <__swsetup_r+0x46>
 8002c34:	4628      	mov	r0, r5
 8002c36:	f000 f8af 	bl	8002d98 <_free_r>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c3e:	89a3      	ldrh	r3, [r4, #12]
 8002c40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002c44:	81a3      	strh	r3, [r4, #12]
 8002c46:	2300      	movs	r3, #0
 8002c48:	6063      	str	r3, [r4, #4]
 8002c4a:	6923      	ldr	r3, [r4, #16]
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	89a3      	ldrh	r3, [r4, #12]
 8002c50:	f043 0308 	orr.w	r3, r3, #8
 8002c54:	81a3      	strh	r3, [r4, #12]
 8002c56:	6923      	ldr	r3, [r4, #16]
 8002c58:	b94b      	cbnz	r3, 8002c6e <__swsetup_r+0x7a>
 8002c5a:	89a3      	ldrh	r3, [r4, #12]
 8002c5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c64:	d003      	beq.n	8002c6e <__swsetup_r+0x7a>
 8002c66:	4621      	mov	r1, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f000 fd2f 	bl	80036cc <__smakebuf_r>
 8002c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c72:	f013 0201 	ands.w	r2, r3, #1
 8002c76:	d00a      	beq.n	8002c8e <__swsetup_r+0x9a>
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60a2      	str	r2, [r4, #8]
 8002c7c:	6962      	ldr	r2, [r4, #20]
 8002c7e:	4252      	negs	r2, r2
 8002c80:	61a2      	str	r2, [r4, #24]
 8002c82:	6922      	ldr	r2, [r4, #16]
 8002c84:	b942      	cbnz	r2, 8002c98 <__swsetup_r+0xa4>
 8002c86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002c8a:	d1c5      	bne.n	8002c18 <__swsetup_r+0x24>
 8002c8c:	bd38      	pop	{r3, r4, r5, pc}
 8002c8e:	0799      	lsls	r1, r3, #30
 8002c90:	bf58      	it	pl
 8002c92:	6962      	ldrpl	r2, [r4, #20]
 8002c94:	60a2      	str	r2, [r4, #8]
 8002c96:	e7f4      	b.n	8002c82 <__swsetup_r+0x8e>
 8002c98:	2000      	movs	r0, #0
 8002c9a:	e7f7      	b.n	8002c8c <__swsetup_r+0x98>
 8002c9c:	2000001c 	.word	0x2000001c

08002ca0 <memset>:
 8002ca0:	4402      	add	r2, r0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d100      	bne.n	8002caa <memset+0xa>
 8002ca8:	4770      	bx	lr
 8002caa:	f803 1b01 	strb.w	r1, [r3], #1
 8002cae:	e7f9      	b.n	8002ca4 <memset+0x4>

08002cb0 <_close_r>:
 8002cb0:	b538      	push	{r3, r4, r5, lr}
 8002cb2:	4d06      	ldr	r5, [pc, #24]	@ (8002ccc <_close_r+0x1c>)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	4604      	mov	r4, r0
 8002cb8:	4608      	mov	r0, r1
 8002cba:	602b      	str	r3, [r5, #0]
 8002cbc:	f7fe fad6 	bl	800126c <_close>
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	d102      	bne.n	8002cca <_close_r+0x1a>
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	b103      	cbz	r3, 8002cca <_close_r+0x1a>
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
 8002ccc:	20001284 	.word	0x20001284

08002cd0 <_lseek_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	4d07      	ldr	r5, [pc, #28]	@ (8002cf0 <_lseek_r+0x20>)
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	4608      	mov	r0, r1
 8002cd8:	4611      	mov	r1, r2
 8002cda:	2200      	movs	r2, #0
 8002cdc:	602a      	str	r2, [r5, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f7fe face 	bl	8001280 <_lseek>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	d102      	bne.n	8002cee <_lseek_r+0x1e>
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	b103      	cbz	r3, 8002cee <_lseek_r+0x1e>
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	20001284 	.word	0x20001284

08002cf4 <_read_r>:
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	4d07      	ldr	r5, [pc, #28]	@ (8002d14 <_read_r+0x20>)
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	4608      	mov	r0, r1
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	2200      	movs	r2, #0
 8002d00:	602a      	str	r2, [r5, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f7fe faa2 	bl	800124c <_read>
 8002d08:	1c43      	adds	r3, r0, #1
 8002d0a:	d102      	bne.n	8002d12 <_read_r+0x1e>
 8002d0c:	682b      	ldr	r3, [r5, #0]
 8002d0e:	b103      	cbz	r3, 8002d12 <_read_r+0x1e>
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
 8002d14:	20001284 	.word	0x20001284

08002d18 <_write_r>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4d07      	ldr	r5, [pc, #28]	@ (8002d38 <_write_r+0x20>)
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	4608      	mov	r0, r1
 8002d20:	4611      	mov	r1, r2
 8002d22:	2200      	movs	r2, #0
 8002d24:	602a      	str	r2, [r5, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f7fe f872 	bl	8000e10 <_write>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_write_r+0x1e>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_write_r+0x1e>
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	20001284 	.word	0x20001284

08002d3c <__errno>:
 8002d3c:	4b01      	ldr	r3, [pc, #4]	@ (8002d44 <__errno+0x8>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	2000001c 	.word	0x2000001c

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002d80 <__libc_init_array+0x38>)
 8002d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002d84 <__libc_init_array+0x3c>)
 8002d4e:	1b64      	subs	r4, r4, r5
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	2600      	movs	r6, #0
 8002d54:	42a6      	cmp	r6, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	4d0b      	ldr	r5, [pc, #44]	@ (8002d88 <__libc_init_array+0x40>)
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002d8c <__libc_init_array+0x44>)
 8002d5c:	f001 fd54 	bl	8004808 <_init>
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	2600      	movs	r6, #0
 8002d66:	42a6      	cmp	r6, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d70:	4798      	blx	r3
 8002d72:	3601      	adds	r6, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7a:	4798      	blx	r3
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08004aa8 	.word	0x08004aa8
 8002d84:	08004aa8 	.word	0x08004aa8
 8002d88:	08004aa8 	.word	0x08004aa8
 8002d8c:	08004aac 	.word	0x08004aac

08002d90 <__retarget_lock_init_recursive>:
 8002d90:	4770      	bx	lr

08002d92 <__retarget_lock_acquire_recursive>:
 8002d92:	4770      	bx	lr

08002d94 <__retarget_lock_release_recursive>:
 8002d94:	4770      	bx	lr
	...

08002d98 <_free_r>:
 8002d98:	b538      	push	{r3, r4, r5, lr}
 8002d9a:	4605      	mov	r5, r0
 8002d9c:	2900      	cmp	r1, #0
 8002d9e:	d041      	beq.n	8002e24 <_free_r+0x8c>
 8002da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002da4:	1f0c      	subs	r4, r1, #4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bfb8      	it	lt
 8002daa:	18e4      	addlt	r4, r4, r3
 8002dac:	f000 f8e0 	bl	8002f70 <__malloc_lock>
 8002db0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e28 <_free_r+0x90>)
 8002db2:	6813      	ldr	r3, [r2, #0]
 8002db4:	b933      	cbnz	r3, 8002dc4 <_free_r+0x2c>
 8002db6:	6063      	str	r3, [r4, #4]
 8002db8:	6014      	str	r4, [r2, #0]
 8002dba:	4628      	mov	r0, r5
 8002dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dc0:	f000 b8dc 	b.w	8002f7c <__malloc_unlock>
 8002dc4:	42a3      	cmp	r3, r4
 8002dc6:	d908      	bls.n	8002dda <_free_r+0x42>
 8002dc8:	6820      	ldr	r0, [r4, #0]
 8002dca:	1821      	adds	r1, r4, r0
 8002dcc:	428b      	cmp	r3, r1
 8002dce:	bf01      	itttt	eq
 8002dd0:	6819      	ldreq	r1, [r3, #0]
 8002dd2:	685b      	ldreq	r3, [r3, #4]
 8002dd4:	1809      	addeq	r1, r1, r0
 8002dd6:	6021      	streq	r1, [r4, #0]
 8002dd8:	e7ed      	b.n	8002db6 <_free_r+0x1e>
 8002dda:	461a      	mov	r2, r3
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	b10b      	cbz	r3, 8002de4 <_free_r+0x4c>
 8002de0:	42a3      	cmp	r3, r4
 8002de2:	d9fa      	bls.n	8002dda <_free_r+0x42>
 8002de4:	6811      	ldr	r1, [r2, #0]
 8002de6:	1850      	adds	r0, r2, r1
 8002de8:	42a0      	cmp	r0, r4
 8002dea:	d10b      	bne.n	8002e04 <_free_r+0x6c>
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	4401      	add	r1, r0
 8002df0:	1850      	adds	r0, r2, r1
 8002df2:	4283      	cmp	r3, r0
 8002df4:	6011      	str	r1, [r2, #0]
 8002df6:	d1e0      	bne.n	8002dba <_free_r+0x22>
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	6053      	str	r3, [r2, #4]
 8002dfe:	4408      	add	r0, r1
 8002e00:	6010      	str	r0, [r2, #0]
 8002e02:	e7da      	b.n	8002dba <_free_r+0x22>
 8002e04:	d902      	bls.n	8002e0c <_free_r+0x74>
 8002e06:	230c      	movs	r3, #12
 8002e08:	602b      	str	r3, [r5, #0]
 8002e0a:	e7d6      	b.n	8002dba <_free_r+0x22>
 8002e0c:	6820      	ldr	r0, [r4, #0]
 8002e0e:	1821      	adds	r1, r4, r0
 8002e10:	428b      	cmp	r3, r1
 8002e12:	bf04      	itt	eq
 8002e14:	6819      	ldreq	r1, [r3, #0]
 8002e16:	685b      	ldreq	r3, [r3, #4]
 8002e18:	6063      	str	r3, [r4, #4]
 8002e1a:	bf04      	itt	eq
 8002e1c:	1809      	addeq	r1, r1, r0
 8002e1e:	6021      	streq	r1, [r4, #0]
 8002e20:	6054      	str	r4, [r2, #4]
 8002e22:	e7ca      	b.n	8002dba <_free_r+0x22>
 8002e24:	bd38      	pop	{r3, r4, r5, pc}
 8002e26:	bf00      	nop
 8002e28:	20001290 	.word	0x20001290

08002e2c <sbrk_aligned>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	4e0f      	ldr	r6, [pc, #60]	@ (8002e6c <sbrk_aligned+0x40>)
 8002e30:	460c      	mov	r4, r1
 8002e32:	6831      	ldr	r1, [r6, #0]
 8002e34:	4605      	mov	r5, r0
 8002e36:	b911      	cbnz	r1, 8002e3e <sbrk_aligned+0x12>
 8002e38:	f000 fca6 	bl	8003788 <_sbrk_r>
 8002e3c:	6030      	str	r0, [r6, #0]
 8002e3e:	4621      	mov	r1, r4
 8002e40:	4628      	mov	r0, r5
 8002e42:	f000 fca1 	bl	8003788 <_sbrk_r>
 8002e46:	1c43      	adds	r3, r0, #1
 8002e48:	d103      	bne.n	8002e52 <sbrk_aligned+0x26>
 8002e4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002e4e:	4620      	mov	r0, r4
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
 8002e52:	1cc4      	adds	r4, r0, #3
 8002e54:	f024 0403 	bic.w	r4, r4, #3
 8002e58:	42a0      	cmp	r0, r4
 8002e5a:	d0f8      	beq.n	8002e4e <sbrk_aligned+0x22>
 8002e5c:	1a21      	subs	r1, r4, r0
 8002e5e:	4628      	mov	r0, r5
 8002e60:	f000 fc92 	bl	8003788 <_sbrk_r>
 8002e64:	3001      	adds	r0, #1
 8002e66:	d1f2      	bne.n	8002e4e <sbrk_aligned+0x22>
 8002e68:	e7ef      	b.n	8002e4a <sbrk_aligned+0x1e>
 8002e6a:	bf00      	nop
 8002e6c:	2000128c 	.word	0x2000128c

08002e70 <_malloc_r>:
 8002e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e74:	1ccd      	adds	r5, r1, #3
 8002e76:	f025 0503 	bic.w	r5, r5, #3
 8002e7a:	3508      	adds	r5, #8
 8002e7c:	2d0c      	cmp	r5, #12
 8002e7e:	bf38      	it	cc
 8002e80:	250c      	movcc	r5, #12
 8002e82:	2d00      	cmp	r5, #0
 8002e84:	4606      	mov	r6, r0
 8002e86:	db01      	blt.n	8002e8c <_malloc_r+0x1c>
 8002e88:	42a9      	cmp	r1, r5
 8002e8a:	d904      	bls.n	8002e96 <_malloc_r+0x26>
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	6033      	str	r3, [r6, #0]
 8002e90:	2000      	movs	r0, #0
 8002e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f6c <_malloc_r+0xfc>
 8002e9a:	f000 f869 	bl	8002f70 <__malloc_lock>
 8002e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8002ea2:	461c      	mov	r4, r3
 8002ea4:	bb44      	cbnz	r4, 8002ef8 <_malloc_r+0x88>
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f7ff ffbf 	bl	8002e2c <sbrk_aligned>
 8002eae:	1c43      	adds	r3, r0, #1
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	d158      	bne.n	8002f66 <_malloc_r+0xf6>
 8002eb4:	f8d8 4000 	ldr.w	r4, [r8]
 8002eb8:	4627      	mov	r7, r4
 8002eba:	2f00      	cmp	r7, #0
 8002ebc:	d143      	bne.n	8002f46 <_malloc_r+0xd6>
 8002ebe:	2c00      	cmp	r4, #0
 8002ec0:	d04b      	beq.n	8002f5a <_malloc_r+0xea>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	4639      	mov	r1, r7
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	eb04 0903 	add.w	r9, r4, r3
 8002ecc:	f000 fc5c 	bl	8003788 <_sbrk_r>
 8002ed0:	4581      	cmp	r9, r0
 8002ed2:	d142      	bne.n	8002f5a <_malloc_r+0xea>
 8002ed4:	6821      	ldr	r1, [r4, #0]
 8002ed6:	1a6d      	subs	r5, r5, r1
 8002ed8:	4629      	mov	r1, r5
 8002eda:	4630      	mov	r0, r6
 8002edc:	f7ff ffa6 	bl	8002e2c <sbrk_aligned>
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	d03a      	beq.n	8002f5a <_malloc_r+0xea>
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	442b      	add	r3, r5
 8002ee8:	6023      	str	r3, [r4, #0]
 8002eea:	f8d8 3000 	ldr.w	r3, [r8]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	bb62      	cbnz	r2, 8002f4c <_malloc_r+0xdc>
 8002ef2:	f8c8 7000 	str.w	r7, [r8]
 8002ef6:	e00f      	b.n	8002f18 <_malloc_r+0xa8>
 8002ef8:	6822      	ldr	r2, [r4, #0]
 8002efa:	1b52      	subs	r2, r2, r5
 8002efc:	d420      	bmi.n	8002f40 <_malloc_r+0xd0>
 8002efe:	2a0b      	cmp	r2, #11
 8002f00:	d917      	bls.n	8002f32 <_malloc_r+0xc2>
 8002f02:	1961      	adds	r1, r4, r5
 8002f04:	42a3      	cmp	r3, r4
 8002f06:	6025      	str	r5, [r4, #0]
 8002f08:	bf18      	it	ne
 8002f0a:	6059      	strne	r1, [r3, #4]
 8002f0c:	6863      	ldr	r3, [r4, #4]
 8002f0e:	bf08      	it	eq
 8002f10:	f8c8 1000 	streq.w	r1, [r8]
 8002f14:	5162      	str	r2, [r4, r5]
 8002f16:	604b      	str	r3, [r1, #4]
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f000 f82f 	bl	8002f7c <__malloc_unlock>
 8002f1e:	f104 000b 	add.w	r0, r4, #11
 8002f22:	1d23      	adds	r3, r4, #4
 8002f24:	f020 0007 	bic.w	r0, r0, #7
 8002f28:	1ac2      	subs	r2, r0, r3
 8002f2a:	bf1c      	itt	ne
 8002f2c:	1a1b      	subne	r3, r3, r0
 8002f2e:	50a3      	strne	r3, [r4, r2]
 8002f30:	e7af      	b.n	8002e92 <_malloc_r+0x22>
 8002f32:	6862      	ldr	r2, [r4, #4]
 8002f34:	42a3      	cmp	r3, r4
 8002f36:	bf0c      	ite	eq
 8002f38:	f8c8 2000 	streq.w	r2, [r8]
 8002f3c:	605a      	strne	r2, [r3, #4]
 8002f3e:	e7eb      	b.n	8002f18 <_malloc_r+0xa8>
 8002f40:	4623      	mov	r3, r4
 8002f42:	6864      	ldr	r4, [r4, #4]
 8002f44:	e7ae      	b.n	8002ea4 <_malloc_r+0x34>
 8002f46:	463c      	mov	r4, r7
 8002f48:	687f      	ldr	r7, [r7, #4]
 8002f4a:	e7b6      	b.n	8002eba <_malloc_r+0x4a>
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	42a3      	cmp	r3, r4
 8002f52:	d1fb      	bne.n	8002f4c <_malloc_r+0xdc>
 8002f54:	2300      	movs	r3, #0
 8002f56:	6053      	str	r3, [r2, #4]
 8002f58:	e7de      	b.n	8002f18 <_malloc_r+0xa8>
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	6033      	str	r3, [r6, #0]
 8002f5e:	4630      	mov	r0, r6
 8002f60:	f000 f80c 	bl	8002f7c <__malloc_unlock>
 8002f64:	e794      	b.n	8002e90 <_malloc_r+0x20>
 8002f66:	6005      	str	r5, [r0, #0]
 8002f68:	e7d6      	b.n	8002f18 <_malloc_r+0xa8>
 8002f6a:	bf00      	nop
 8002f6c:	20001290 	.word	0x20001290

08002f70 <__malloc_lock>:
 8002f70:	4801      	ldr	r0, [pc, #4]	@ (8002f78 <__malloc_lock+0x8>)
 8002f72:	f7ff bf0e 	b.w	8002d92 <__retarget_lock_acquire_recursive>
 8002f76:	bf00      	nop
 8002f78:	20001288 	.word	0x20001288

08002f7c <__malloc_unlock>:
 8002f7c:	4801      	ldr	r0, [pc, #4]	@ (8002f84 <__malloc_unlock+0x8>)
 8002f7e:	f7ff bf09 	b.w	8002d94 <__retarget_lock_release_recursive>
 8002f82:	bf00      	nop
 8002f84:	20001288 	.word	0x20001288

08002f88 <__sfputc_r>:
 8002f88:	6893      	ldr	r3, [r2, #8]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	b410      	push	{r4}
 8002f90:	6093      	str	r3, [r2, #8]
 8002f92:	da08      	bge.n	8002fa6 <__sfputc_r+0x1e>
 8002f94:	6994      	ldr	r4, [r2, #24]
 8002f96:	42a3      	cmp	r3, r4
 8002f98:	db01      	blt.n	8002f9e <__sfputc_r+0x16>
 8002f9a:	290a      	cmp	r1, #10
 8002f9c:	d103      	bne.n	8002fa6 <__sfputc_r+0x1e>
 8002f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fa2:	f7ff bde8 	b.w	8002b76 <__swbuf_r>
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	1c58      	adds	r0, r3, #1
 8002faa:	6010      	str	r0, [r2, #0]
 8002fac:	7019      	strb	r1, [r3, #0]
 8002fae:	4608      	mov	r0, r1
 8002fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <__sfputs_r>:
 8002fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb8:	4606      	mov	r6, r0
 8002fba:	460f      	mov	r7, r1
 8002fbc:	4614      	mov	r4, r2
 8002fbe:	18d5      	adds	r5, r2, r3
 8002fc0:	42ac      	cmp	r4, r5
 8002fc2:	d101      	bne.n	8002fc8 <__sfputs_r+0x12>
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	e007      	b.n	8002fd8 <__sfputs_r+0x22>
 8002fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fcc:	463a      	mov	r2, r7
 8002fce:	4630      	mov	r0, r6
 8002fd0:	f7ff ffda 	bl	8002f88 <__sfputc_r>
 8002fd4:	1c43      	adds	r3, r0, #1
 8002fd6:	d1f3      	bne.n	8002fc0 <__sfputs_r+0xa>
 8002fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fdc <_vfiprintf_r>:
 8002fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe0:	460d      	mov	r5, r1
 8002fe2:	b09d      	sub	sp, #116	@ 0x74
 8002fe4:	4614      	mov	r4, r2
 8002fe6:	4698      	mov	r8, r3
 8002fe8:	4606      	mov	r6, r0
 8002fea:	b118      	cbz	r0, 8002ff4 <_vfiprintf_r+0x18>
 8002fec:	6a03      	ldr	r3, [r0, #32]
 8002fee:	b90b      	cbnz	r3, 8002ff4 <_vfiprintf_r+0x18>
 8002ff0:	f7ff fcd8 	bl	80029a4 <__sinit>
 8002ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ff6:	07d9      	lsls	r1, r3, #31
 8002ff8:	d405      	bmi.n	8003006 <_vfiprintf_r+0x2a>
 8002ffa:	89ab      	ldrh	r3, [r5, #12]
 8002ffc:	059a      	lsls	r2, r3, #22
 8002ffe:	d402      	bmi.n	8003006 <_vfiprintf_r+0x2a>
 8003000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003002:	f7ff fec6 	bl	8002d92 <__retarget_lock_acquire_recursive>
 8003006:	89ab      	ldrh	r3, [r5, #12]
 8003008:	071b      	lsls	r3, r3, #28
 800300a:	d501      	bpl.n	8003010 <_vfiprintf_r+0x34>
 800300c:	692b      	ldr	r3, [r5, #16]
 800300e:	b99b      	cbnz	r3, 8003038 <_vfiprintf_r+0x5c>
 8003010:	4629      	mov	r1, r5
 8003012:	4630      	mov	r0, r6
 8003014:	f7ff fdee 	bl	8002bf4 <__swsetup_r>
 8003018:	b170      	cbz	r0, 8003038 <_vfiprintf_r+0x5c>
 800301a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800301c:	07dc      	lsls	r4, r3, #31
 800301e:	d504      	bpl.n	800302a <_vfiprintf_r+0x4e>
 8003020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003024:	b01d      	add	sp, #116	@ 0x74
 8003026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800302a:	89ab      	ldrh	r3, [r5, #12]
 800302c:	0598      	lsls	r0, r3, #22
 800302e:	d4f7      	bmi.n	8003020 <_vfiprintf_r+0x44>
 8003030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003032:	f7ff feaf 	bl	8002d94 <__retarget_lock_release_recursive>
 8003036:	e7f3      	b.n	8003020 <_vfiprintf_r+0x44>
 8003038:	2300      	movs	r3, #0
 800303a:	9309      	str	r3, [sp, #36]	@ 0x24
 800303c:	2320      	movs	r3, #32
 800303e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003042:	f8cd 800c 	str.w	r8, [sp, #12]
 8003046:	2330      	movs	r3, #48	@ 0x30
 8003048:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80031f8 <_vfiprintf_r+0x21c>
 800304c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003050:	f04f 0901 	mov.w	r9, #1
 8003054:	4623      	mov	r3, r4
 8003056:	469a      	mov	sl, r3
 8003058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800305c:	b10a      	cbz	r2, 8003062 <_vfiprintf_r+0x86>
 800305e:	2a25      	cmp	r2, #37	@ 0x25
 8003060:	d1f9      	bne.n	8003056 <_vfiprintf_r+0x7a>
 8003062:	ebba 0b04 	subs.w	fp, sl, r4
 8003066:	d00b      	beq.n	8003080 <_vfiprintf_r+0xa4>
 8003068:	465b      	mov	r3, fp
 800306a:	4622      	mov	r2, r4
 800306c:	4629      	mov	r1, r5
 800306e:	4630      	mov	r0, r6
 8003070:	f7ff ffa1 	bl	8002fb6 <__sfputs_r>
 8003074:	3001      	adds	r0, #1
 8003076:	f000 80a7 	beq.w	80031c8 <_vfiprintf_r+0x1ec>
 800307a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800307c:	445a      	add	r2, fp
 800307e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003080:	f89a 3000 	ldrb.w	r3, [sl]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 809f 	beq.w	80031c8 <_vfiprintf_r+0x1ec>
 800308a:	2300      	movs	r3, #0
 800308c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003094:	f10a 0a01 	add.w	sl, sl, #1
 8003098:	9304      	str	r3, [sp, #16]
 800309a:	9307      	str	r3, [sp, #28]
 800309c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80030a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80030a2:	4654      	mov	r4, sl
 80030a4:	2205      	movs	r2, #5
 80030a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030aa:	4853      	ldr	r0, [pc, #332]	@ (80031f8 <_vfiprintf_r+0x21c>)
 80030ac:	f7fd f890 	bl	80001d0 <memchr>
 80030b0:	9a04      	ldr	r2, [sp, #16]
 80030b2:	b9d8      	cbnz	r0, 80030ec <_vfiprintf_r+0x110>
 80030b4:	06d1      	lsls	r1, r2, #27
 80030b6:	bf44      	itt	mi
 80030b8:	2320      	movmi	r3, #32
 80030ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030be:	0713      	lsls	r3, r2, #28
 80030c0:	bf44      	itt	mi
 80030c2:	232b      	movmi	r3, #43	@ 0x2b
 80030c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030c8:	f89a 3000 	ldrb.w	r3, [sl]
 80030cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80030ce:	d015      	beq.n	80030fc <_vfiprintf_r+0x120>
 80030d0:	9a07      	ldr	r2, [sp, #28]
 80030d2:	4654      	mov	r4, sl
 80030d4:	2000      	movs	r0, #0
 80030d6:	f04f 0c0a 	mov.w	ip, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030e0:	3b30      	subs	r3, #48	@ 0x30
 80030e2:	2b09      	cmp	r3, #9
 80030e4:	d94b      	bls.n	800317e <_vfiprintf_r+0x1a2>
 80030e6:	b1b0      	cbz	r0, 8003116 <_vfiprintf_r+0x13a>
 80030e8:	9207      	str	r2, [sp, #28]
 80030ea:	e014      	b.n	8003116 <_vfiprintf_r+0x13a>
 80030ec:	eba0 0308 	sub.w	r3, r0, r8
 80030f0:	fa09 f303 	lsl.w	r3, r9, r3
 80030f4:	4313      	orrs	r3, r2
 80030f6:	9304      	str	r3, [sp, #16]
 80030f8:	46a2      	mov	sl, r4
 80030fa:	e7d2      	b.n	80030a2 <_vfiprintf_r+0xc6>
 80030fc:	9b03      	ldr	r3, [sp, #12]
 80030fe:	1d19      	adds	r1, r3, #4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	9103      	str	r1, [sp, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	bfbb      	ittet	lt
 8003108:	425b      	neglt	r3, r3
 800310a:	f042 0202 	orrlt.w	r2, r2, #2
 800310e:	9307      	strge	r3, [sp, #28]
 8003110:	9307      	strlt	r3, [sp, #28]
 8003112:	bfb8      	it	lt
 8003114:	9204      	strlt	r2, [sp, #16]
 8003116:	7823      	ldrb	r3, [r4, #0]
 8003118:	2b2e      	cmp	r3, #46	@ 0x2e
 800311a:	d10a      	bne.n	8003132 <_vfiprintf_r+0x156>
 800311c:	7863      	ldrb	r3, [r4, #1]
 800311e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003120:	d132      	bne.n	8003188 <_vfiprintf_r+0x1ac>
 8003122:	9b03      	ldr	r3, [sp, #12]
 8003124:	1d1a      	adds	r2, r3, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	9203      	str	r2, [sp, #12]
 800312a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800312e:	3402      	adds	r4, #2
 8003130:	9305      	str	r3, [sp, #20]
 8003132:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003208 <_vfiprintf_r+0x22c>
 8003136:	7821      	ldrb	r1, [r4, #0]
 8003138:	2203      	movs	r2, #3
 800313a:	4650      	mov	r0, sl
 800313c:	f7fd f848 	bl	80001d0 <memchr>
 8003140:	b138      	cbz	r0, 8003152 <_vfiprintf_r+0x176>
 8003142:	9b04      	ldr	r3, [sp, #16]
 8003144:	eba0 000a 	sub.w	r0, r0, sl
 8003148:	2240      	movs	r2, #64	@ 0x40
 800314a:	4082      	lsls	r2, r0
 800314c:	4313      	orrs	r3, r2
 800314e:	3401      	adds	r4, #1
 8003150:	9304      	str	r3, [sp, #16]
 8003152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003156:	4829      	ldr	r0, [pc, #164]	@ (80031fc <_vfiprintf_r+0x220>)
 8003158:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800315c:	2206      	movs	r2, #6
 800315e:	f7fd f837 	bl	80001d0 <memchr>
 8003162:	2800      	cmp	r0, #0
 8003164:	d03f      	beq.n	80031e6 <_vfiprintf_r+0x20a>
 8003166:	4b26      	ldr	r3, [pc, #152]	@ (8003200 <_vfiprintf_r+0x224>)
 8003168:	bb1b      	cbnz	r3, 80031b2 <_vfiprintf_r+0x1d6>
 800316a:	9b03      	ldr	r3, [sp, #12]
 800316c:	3307      	adds	r3, #7
 800316e:	f023 0307 	bic.w	r3, r3, #7
 8003172:	3308      	adds	r3, #8
 8003174:	9303      	str	r3, [sp, #12]
 8003176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003178:	443b      	add	r3, r7
 800317a:	9309      	str	r3, [sp, #36]	@ 0x24
 800317c:	e76a      	b.n	8003054 <_vfiprintf_r+0x78>
 800317e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003182:	460c      	mov	r4, r1
 8003184:	2001      	movs	r0, #1
 8003186:	e7a8      	b.n	80030da <_vfiprintf_r+0xfe>
 8003188:	2300      	movs	r3, #0
 800318a:	3401      	adds	r4, #1
 800318c:	9305      	str	r3, [sp, #20]
 800318e:	4619      	mov	r1, r3
 8003190:	f04f 0c0a 	mov.w	ip, #10
 8003194:	4620      	mov	r0, r4
 8003196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800319a:	3a30      	subs	r2, #48	@ 0x30
 800319c:	2a09      	cmp	r2, #9
 800319e:	d903      	bls.n	80031a8 <_vfiprintf_r+0x1cc>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0c6      	beq.n	8003132 <_vfiprintf_r+0x156>
 80031a4:	9105      	str	r1, [sp, #20]
 80031a6:	e7c4      	b.n	8003132 <_vfiprintf_r+0x156>
 80031a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80031ac:	4604      	mov	r4, r0
 80031ae:	2301      	movs	r3, #1
 80031b0:	e7f0      	b.n	8003194 <_vfiprintf_r+0x1b8>
 80031b2:	ab03      	add	r3, sp, #12
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	462a      	mov	r2, r5
 80031b8:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <_vfiprintf_r+0x228>)
 80031ba:	a904      	add	r1, sp, #16
 80031bc:	4630      	mov	r0, r6
 80031be:	f3af 8000 	nop.w
 80031c2:	4607      	mov	r7, r0
 80031c4:	1c78      	adds	r0, r7, #1
 80031c6:	d1d6      	bne.n	8003176 <_vfiprintf_r+0x19a>
 80031c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80031ca:	07d9      	lsls	r1, r3, #31
 80031cc:	d405      	bmi.n	80031da <_vfiprintf_r+0x1fe>
 80031ce:	89ab      	ldrh	r3, [r5, #12]
 80031d0:	059a      	lsls	r2, r3, #22
 80031d2:	d402      	bmi.n	80031da <_vfiprintf_r+0x1fe>
 80031d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80031d6:	f7ff fddd 	bl	8002d94 <__retarget_lock_release_recursive>
 80031da:	89ab      	ldrh	r3, [r5, #12]
 80031dc:	065b      	lsls	r3, r3, #25
 80031de:	f53f af1f 	bmi.w	8003020 <_vfiprintf_r+0x44>
 80031e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80031e4:	e71e      	b.n	8003024 <_vfiprintf_r+0x48>
 80031e6:	ab03      	add	r3, sp, #12
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	462a      	mov	r2, r5
 80031ec:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <_vfiprintf_r+0x228>)
 80031ee:	a904      	add	r1, sp, #16
 80031f0:	4630      	mov	r0, r6
 80031f2:	f000 f879 	bl	80032e8 <_printf_i>
 80031f6:	e7e4      	b.n	80031c2 <_vfiprintf_r+0x1e6>
 80031f8:	08004890 	.word	0x08004890
 80031fc:	0800489a 	.word	0x0800489a
 8003200:	00000000 	.word	0x00000000
 8003204:	08002fb7 	.word	0x08002fb7
 8003208:	08004896 	.word	0x08004896

0800320c <_printf_common>:
 800320c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003210:	4616      	mov	r6, r2
 8003212:	4698      	mov	r8, r3
 8003214:	688a      	ldr	r2, [r1, #8]
 8003216:	690b      	ldr	r3, [r1, #16]
 8003218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800321c:	4293      	cmp	r3, r2
 800321e:	bfb8      	it	lt
 8003220:	4613      	movlt	r3, r2
 8003222:	6033      	str	r3, [r6, #0]
 8003224:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003228:	4607      	mov	r7, r0
 800322a:	460c      	mov	r4, r1
 800322c:	b10a      	cbz	r2, 8003232 <_printf_common+0x26>
 800322e:	3301      	adds	r3, #1
 8003230:	6033      	str	r3, [r6, #0]
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	0699      	lsls	r1, r3, #26
 8003236:	bf42      	ittt	mi
 8003238:	6833      	ldrmi	r3, [r6, #0]
 800323a:	3302      	addmi	r3, #2
 800323c:	6033      	strmi	r3, [r6, #0]
 800323e:	6825      	ldr	r5, [r4, #0]
 8003240:	f015 0506 	ands.w	r5, r5, #6
 8003244:	d106      	bne.n	8003254 <_printf_common+0x48>
 8003246:	f104 0a19 	add.w	sl, r4, #25
 800324a:	68e3      	ldr	r3, [r4, #12]
 800324c:	6832      	ldr	r2, [r6, #0]
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	42ab      	cmp	r3, r5
 8003252:	dc26      	bgt.n	80032a2 <_printf_common+0x96>
 8003254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	3b00      	subs	r3, #0
 800325c:	bf18      	it	ne
 800325e:	2301      	movne	r3, #1
 8003260:	0692      	lsls	r2, r2, #26
 8003262:	d42b      	bmi.n	80032bc <_printf_common+0xb0>
 8003264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003268:	4641      	mov	r1, r8
 800326a:	4638      	mov	r0, r7
 800326c:	47c8      	blx	r9
 800326e:	3001      	adds	r0, #1
 8003270:	d01e      	beq.n	80032b0 <_printf_common+0xa4>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	6922      	ldr	r2, [r4, #16]
 8003276:	f003 0306 	and.w	r3, r3, #6
 800327a:	2b04      	cmp	r3, #4
 800327c:	bf02      	ittt	eq
 800327e:	68e5      	ldreq	r5, [r4, #12]
 8003280:	6833      	ldreq	r3, [r6, #0]
 8003282:	1aed      	subeq	r5, r5, r3
 8003284:	68a3      	ldr	r3, [r4, #8]
 8003286:	bf0c      	ite	eq
 8003288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800328c:	2500      	movne	r5, #0
 800328e:	4293      	cmp	r3, r2
 8003290:	bfc4      	itt	gt
 8003292:	1a9b      	subgt	r3, r3, r2
 8003294:	18ed      	addgt	r5, r5, r3
 8003296:	2600      	movs	r6, #0
 8003298:	341a      	adds	r4, #26
 800329a:	42b5      	cmp	r5, r6
 800329c:	d11a      	bne.n	80032d4 <_printf_common+0xc8>
 800329e:	2000      	movs	r0, #0
 80032a0:	e008      	b.n	80032b4 <_printf_common+0xa8>
 80032a2:	2301      	movs	r3, #1
 80032a4:	4652      	mov	r2, sl
 80032a6:	4641      	mov	r1, r8
 80032a8:	4638      	mov	r0, r7
 80032aa:	47c8      	blx	r9
 80032ac:	3001      	adds	r0, #1
 80032ae:	d103      	bne.n	80032b8 <_printf_common+0xac>
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b8:	3501      	adds	r5, #1
 80032ba:	e7c6      	b.n	800324a <_printf_common+0x3e>
 80032bc:	18e1      	adds	r1, r4, r3
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	2030      	movs	r0, #48	@ 0x30
 80032c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80032c6:	4422      	add	r2, r4
 80032c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80032cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80032d0:	3302      	adds	r3, #2
 80032d2:	e7c7      	b.n	8003264 <_printf_common+0x58>
 80032d4:	2301      	movs	r3, #1
 80032d6:	4622      	mov	r2, r4
 80032d8:	4641      	mov	r1, r8
 80032da:	4638      	mov	r0, r7
 80032dc:	47c8      	blx	r9
 80032de:	3001      	adds	r0, #1
 80032e0:	d0e6      	beq.n	80032b0 <_printf_common+0xa4>
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7d9      	b.n	800329a <_printf_common+0x8e>
	...

080032e8 <_printf_i>:
 80032e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032ec:	7e0f      	ldrb	r7, [r1, #24]
 80032ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80032f0:	2f78      	cmp	r7, #120	@ 0x78
 80032f2:	4691      	mov	r9, r2
 80032f4:	4680      	mov	r8, r0
 80032f6:	460c      	mov	r4, r1
 80032f8:	469a      	mov	sl, r3
 80032fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032fe:	d807      	bhi.n	8003310 <_printf_i+0x28>
 8003300:	2f62      	cmp	r7, #98	@ 0x62
 8003302:	d80a      	bhi.n	800331a <_printf_i+0x32>
 8003304:	2f00      	cmp	r7, #0
 8003306:	f000 80d2 	beq.w	80034ae <_printf_i+0x1c6>
 800330a:	2f58      	cmp	r7, #88	@ 0x58
 800330c:	f000 80b9 	beq.w	8003482 <_printf_i+0x19a>
 8003310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003314:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003318:	e03a      	b.n	8003390 <_printf_i+0xa8>
 800331a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800331e:	2b15      	cmp	r3, #21
 8003320:	d8f6      	bhi.n	8003310 <_printf_i+0x28>
 8003322:	a101      	add	r1, pc, #4	@ (adr r1, 8003328 <_printf_i+0x40>)
 8003324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003328:	08003381 	.word	0x08003381
 800332c:	08003395 	.word	0x08003395
 8003330:	08003311 	.word	0x08003311
 8003334:	08003311 	.word	0x08003311
 8003338:	08003311 	.word	0x08003311
 800333c:	08003311 	.word	0x08003311
 8003340:	08003395 	.word	0x08003395
 8003344:	08003311 	.word	0x08003311
 8003348:	08003311 	.word	0x08003311
 800334c:	08003311 	.word	0x08003311
 8003350:	08003311 	.word	0x08003311
 8003354:	08003495 	.word	0x08003495
 8003358:	080033bf 	.word	0x080033bf
 800335c:	0800344f 	.word	0x0800344f
 8003360:	08003311 	.word	0x08003311
 8003364:	08003311 	.word	0x08003311
 8003368:	080034b7 	.word	0x080034b7
 800336c:	08003311 	.word	0x08003311
 8003370:	080033bf 	.word	0x080033bf
 8003374:	08003311 	.word	0x08003311
 8003378:	08003311 	.word	0x08003311
 800337c:	08003457 	.word	0x08003457
 8003380:	6833      	ldr	r3, [r6, #0]
 8003382:	1d1a      	adds	r2, r3, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6032      	str	r2, [r6, #0]
 8003388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800338c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003390:	2301      	movs	r3, #1
 8003392:	e09d      	b.n	80034d0 <_printf_i+0x1e8>
 8003394:	6833      	ldr	r3, [r6, #0]
 8003396:	6820      	ldr	r0, [r4, #0]
 8003398:	1d19      	adds	r1, r3, #4
 800339a:	6031      	str	r1, [r6, #0]
 800339c:	0606      	lsls	r6, r0, #24
 800339e:	d501      	bpl.n	80033a4 <_printf_i+0xbc>
 80033a0:	681d      	ldr	r5, [r3, #0]
 80033a2:	e003      	b.n	80033ac <_printf_i+0xc4>
 80033a4:	0645      	lsls	r5, r0, #25
 80033a6:	d5fb      	bpl.n	80033a0 <_printf_i+0xb8>
 80033a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033ac:	2d00      	cmp	r5, #0
 80033ae:	da03      	bge.n	80033b8 <_printf_i+0xd0>
 80033b0:	232d      	movs	r3, #45	@ 0x2d
 80033b2:	426d      	negs	r5, r5
 80033b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033b8:	4859      	ldr	r0, [pc, #356]	@ (8003520 <_printf_i+0x238>)
 80033ba:	230a      	movs	r3, #10
 80033bc:	e011      	b.n	80033e2 <_printf_i+0xfa>
 80033be:	6821      	ldr	r1, [r4, #0]
 80033c0:	6833      	ldr	r3, [r6, #0]
 80033c2:	0608      	lsls	r0, r1, #24
 80033c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80033c8:	d402      	bmi.n	80033d0 <_printf_i+0xe8>
 80033ca:	0649      	lsls	r1, r1, #25
 80033cc:	bf48      	it	mi
 80033ce:	b2ad      	uxthmi	r5, r5
 80033d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80033d2:	4853      	ldr	r0, [pc, #332]	@ (8003520 <_printf_i+0x238>)
 80033d4:	6033      	str	r3, [r6, #0]
 80033d6:	bf14      	ite	ne
 80033d8:	230a      	movne	r3, #10
 80033da:	2308      	moveq	r3, #8
 80033dc:	2100      	movs	r1, #0
 80033de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80033e2:	6866      	ldr	r6, [r4, #4]
 80033e4:	60a6      	str	r6, [r4, #8]
 80033e6:	2e00      	cmp	r6, #0
 80033e8:	bfa2      	ittt	ge
 80033ea:	6821      	ldrge	r1, [r4, #0]
 80033ec:	f021 0104 	bicge.w	r1, r1, #4
 80033f0:	6021      	strge	r1, [r4, #0]
 80033f2:	b90d      	cbnz	r5, 80033f8 <_printf_i+0x110>
 80033f4:	2e00      	cmp	r6, #0
 80033f6:	d04b      	beq.n	8003490 <_printf_i+0x1a8>
 80033f8:	4616      	mov	r6, r2
 80033fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80033fe:	fb03 5711 	mls	r7, r3, r1, r5
 8003402:	5dc7      	ldrb	r7, [r0, r7]
 8003404:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003408:	462f      	mov	r7, r5
 800340a:	42bb      	cmp	r3, r7
 800340c:	460d      	mov	r5, r1
 800340e:	d9f4      	bls.n	80033fa <_printf_i+0x112>
 8003410:	2b08      	cmp	r3, #8
 8003412:	d10b      	bne.n	800342c <_printf_i+0x144>
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	07df      	lsls	r7, r3, #31
 8003418:	d508      	bpl.n	800342c <_printf_i+0x144>
 800341a:	6923      	ldr	r3, [r4, #16]
 800341c:	6861      	ldr	r1, [r4, #4]
 800341e:	4299      	cmp	r1, r3
 8003420:	bfde      	ittt	le
 8003422:	2330      	movle	r3, #48	@ 0x30
 8003424:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003428:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800342c:	1b92      	subs	r2, r2, r6
 800342e:	6122      	str	r2, [r4, #16]
 8003430:	f8cd a000 	str.w	sl, [sp]
 8003434:	464b      	mov	r3, r9
 8003436:	aa03      	add	r2, sp, #12
 8003438:	4621      	mov	r1, r4
 800343a:	4640      	mov	r0, r8
 800343c:	f7ff fee6 	bl	800320c <_printf_common>
 8003440:	3001      	adds	r0, #1
 8003442:	d14a      	bne.n	80034da <_printf_i+0x1f2>
 8003444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003448:	b004      	add	sp, #16
 800344a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	f043 0320 	orr.w	r3, r3, #32
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	4833      	ldr	r0, [pc, #204]	@ (8003524 <_printf_i+0x23c>)
 8003458:	2778      	movs	r7, #120	@ 0x78
 800345a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	6831      	ldr	r1, [r6, #0]
 8003462:	061f      	lsls	r7, r3, #24
 8003464:	f851 5b04 	ldr.w	r5, [r1], #4
 8003468:	d402      	bmi.n	8003470 <_printf_i+0x188>
 800346a:	065f      	lsls	r7, r3, #25
 800346c:	bf48      	it	mi
 800346e:	b2ad      	uxthmi	r5, r5
 8003470:	6031      	str	r1, [r6, #0]
 8003472:	07d9      	lsls	r1, r3, #31
 8003474:	bf44      	itt	mi
 8003476:	f043 0320 	orrmi.w	r3, r3, #32
 800347a:	6023      	strmi	r3, [r4, #0]
 800347c:	b11d      	cbz	r5, 8003486 <_printf_i+0x19e>
 800347e:	2310      	movs	r3, #16
 8003480:	e7ac      	b.n	80033dc <_printf_i+0xf4>
 8003482:	4827      	ldr	r0, [pc, #156]	@ (8003520 <_printf_i+0x238>)
 8003484:	e7e9      	b.n	800345a <_printf_i+0x172>
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	f023 0320 	bic.w	r3, r3, #32
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	e7f6      	b.n	800347e <_printf_i+0x196>
 8003490:	4616      	mov	r6, r2
 8003492:	e7bd      	b.n	8003410 <_printf_i+0x128>
 8003494:	6833      	ldr	r3, [r6, #0]
 8003496:	6825      	ldr	r5, [r4, #0]
 8003498:	6961      	ldr	r1, [r4, #20]
 800349a:	1d18      	adds	r0, r3, #4
 800349c:	6030      	str	r0, [r6, #0]
 800349e:	062e      	lsls	r6, r5, #24
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	d501      	bpl.n	80034a8 <_printf_i+0x1c0>
 80034a4:	6019      	str	r1, [r3, #0]
 80034a6:	e002      	b.n	80034ae <_printf_i+0x1c6>
 80034a8:	0668      	lsls	r0, r5, #25
 80034aa:	d5fb      	bpl.n	80034a4 <_printf_i+0x1bc>
 80034ac:	8019      	strh	r1, [r3, #0]
 80034ae:	2300      	movs	r3, #0
 80034b0:	6123      	str	r3, [r4, #16]
 80034b2:	4616      	mov	r6, r2
 80034b4:	e7bc      	b.n	8003430 <_printf_i+0x148>
 80034b6:	6833      	ldr	r3, [r6, #0]
 80034b8:	1d1a      	adds	r2, r3, #4
 80034ba:	6032      	str	r2, [r6, #0]
 80034bc:	681e      	ldr	r6, [r3, #0]
 80034be:	6862      	ldr	r2, [r4, #4]
 80034c0:	2100      	movs	r1, #0
 80034c2:	4630      	mov	r0, r6
 80034c4:	f7fc fe84 	bl	80001d0 <memchr>
 80034c8:	b108      	cbz	r0, 80034ce <_printf_i+0x1e6>
 80034ca:	1b80      	subs	r0, r0, r6
 80034cc:	6060      	str	r0, [r4, #4]
 80034ce:	6863      	ldr	r3, [r4, #4]
 80034d0:	6123      	str	r3, [r4, #16]
 80034d2:	2300      	movs	r3, #0
 80034d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034d8:	e7aa      	b.n	8003430 <_printf_i+0x148>
 80034da:	6923      	ldr	r3, [r4, #16]
 80034dc:	4632      	mov	r2, r6
 80034de:	4649      	mov	r1, r9
 80034e0:	4640      	mov	r0, r8
 80034e2:	47d0      	blx	sl
 80034e4:	3001      	adds	r0, #1
 80034e6:	d0ad      	beq.n	8003444 <_printf_i+0x15c>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	079b      	lsls	r3, r3, #30
 80034ec:	d413      	bmi.n	8003516 <_printf_i+0x22e>
 80034ee:	68e0      	ldr	r0, [r4, #12]
 80034f0:	9b03      	ldr	r3, [sp, #12]
 80034f2:	4298      	cmp	r0, r3
 80034f4:	bfb8      	it	lt
 80034f6:	4618      	movlt	r0, r3
 80034f8:	e7a6      	b.n	8003448 <_printf_i+0x160>
 80034fa:	2301      	movs	r3, #1
 80034fc:	4632      	mov	r2, r6
 80034fe:	4649      	mov	r1, r9
 8003500:	4640      	mov	r0, r8
 8003502:	47d0      	blx	sl
 8003504:	3001      	adds	r0, #1
 8003506:	d09d      	beq.n	8003444 <_printf_i+0x15c>
 8003508:	3501      	adds	r5, #1
 800350a:	68e3      	ldr	r3, [r4, #12]
 800350c:	9903      	ldr	r1, [sp, #12]
 800350e:	1a5b      	subs	r3, r3, r1
 8003510:	42ab      	cmp	r3, r5
 8003512:	dcf2      	bgt.n	80034fa <_printf_i+0x212>
 8003514:	e7eb      	b.n	80034ee <_printf_i+0x206>
 8003516:	2500      	movs	r5, #0
 8003518:	f104 0619 	add.w	r6, r4, #25
 800351c:	e7f5      	b.n	800350a <_printf_i+0x222>
 800351e:	bf00      	nop
 8003520:	080048a1 	.word	0x080048a1
 8003524:	080048b2 	.word	0x080048b2

08003528 <__sflush_r>:
 8003528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800352c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003530:	0716      	lsls	r6, r2, #28
 8003532:	4605      	mov	r5, r0
 8003534:	460c      	mov	r4, r1
 8003536:	d454      	bmi.n	80035e2 <__sflush_r+0xba>
 8003538:	684b      	ldr	r3, [r1, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	dc02      	bgt.n	8003544 <__sflush_r+0x1c>
 800353e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	dd48      	ble.n	80035d6 <__sflush_r+0xae>
 8003544:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003546:	2e00      	cmp	r6, #0
 8003548:	d045      	beq.n	80035d6 <__sflush_r+0xae>
 800354a:	2300      	movs	r3, #0
 800354c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003550:	682f      	ldr	r7, [r5, #0]
 8003552:	6a21      	ldr	r1, [r4, #32]
 8003554:	602b      	str	r3, [r5, #0]
 8003556:	d030      	beq.n	80035ba <__sflush_r+0x92>
 8003558:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	0759      	lsls	r1, r3, #29
 800355e:	d505      	bpl.n	800356c <__sflush_r+0x44>
 8003560:	6863      	ldr	r3, [r4, #4]
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003566:	b10b      	cbz	r3, 800356c <__sflush_r+0x44>
 8003568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800356a:	1ad2      	subs	r2, r2, r3
 800356c:	2300      	movs	r3, #0
 800356e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003570:	6a21      	ldr	r1, [r4, #32]
 8003572:	4628      	mov	r0, r5
 8003574:	47b0      	blx	r6
 8003576:	1c43      	adds	r3, r0, #1
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	d106      	bne.n	800358a <__sflush_r+0x62>
 800357c:	6829      	ldr	r1, [r5, #0]
 800357e:	291d      	cmp	r1, #29
 8003580:	d82b      	bhi.n	80035da <__sflush_r+0xb2>
 8003582:	4a2a      	ldr	r2, [pc, #168]	@ (800362c <__sflush_r+0x104>)
 8003584:	410a      	asrs	r2, r1
 8003586:	07d6      	lsls	r6, r2, #31
 8003588:	d427      	bmi.n	80035da <__sflush_r+0xb2>
 800358a:	2200      	movs	r2, #0
 800358c:	6062      	str	r2, [r4, #4]
 800358e:	04d9      	lsls	r1, r3, #19
 8003590:	6922      	ldr	r2, [r4, #16]
 8003592:	6022      	str	r2, [r4, #0]
 8003594:	d504      	bpl.n	80035a0 <__sflush_r+0x78>
 8003596:	1c42      	adds	r2, r0, #1
 8003598:	d101      	bne.n	800359e <__sflush_r+0x76>
 800359a:	682b      	ldr	r3, [r5, #0]
 800359c:	b903      	cbnz	r3, 80035a0 <__sflush_r+0x78>
 800359e:	6560      	str	r0, [r4, #84]	@ 0x54
 80035a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035a2:	602f      	str	r7, [r5, #0]
 80035a4:	b1b9      	cbz	r1, 80035d6 <__sflush_r+0xae>
 80035a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035aa:	4299      	cmp	r1, r3
 80035ac:	d002      	beq.n	80035b4 <__sflush_r+0x8c>
 80035ae:	4628      	mov	r0, r5
 80035b0:	f7ff fbf2 	bl	8002d98 <_free_r>
 80035b4:	2300      	movs	r3, #0
 80035b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80035b8:	e00d      	b.n	80035d6 <__sflush_r+0xae>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4628      	mov	r0, r5
 80035be:	47b0      	blx	r6
 80035c0:	4602      	mov	r2, r0
 80035c2:	1c50      	adds	r0, r2, #1
 80035c4:	d1c9      	bne.n	800355a <__sflush_r+0x32>
 80035c6:	682b      	ldr	r3, [r5, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0c6      	beq.n	800355a <__sflush_r+0x32>
 80035cc:	2b1d      	cmp	r3, #29
 80035ce:	d001      	beq.n	80035d4 <__sflush_r+0xac>
 80035d0:	2b16      	cmp	r3, #22
 80035d2:	d11e      	bne.n	8003612 <__sflush_r+0xea>
 80035d4:	602f      	str	r7, [r5, #0]
 80035d6:	2000      	movs	r0, #0
 80035d8:	e022      	b.n	8003620 <__sflush_r+0xf8>
 80035da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035de:	b21b      	sxth	r3, r3
 80035e0:	e01b      	b.n	800361a <__sflush_r+0xf2>
 80035e2:	690f      	ldr	r7, [r1, #16]
 80035e4:	2f00      	cmp	r7, #0
 80035e6:	d0f6      	beq.n	80035d6 <__sflush_r+0xae>
 80035e8:	0793      	lsls	r3, r2, #30
 80035ea:	680e      	ldr	r6, [r1, #0]
 80035ec:	bf08      	it	eq
 80035ee:	694b      	ldreq	r3, [r1, #20]
 80035f0:	600f      	str	r7, [r1, #0]
 80035f2:	bf18      	it	ne
 80035f4:	2300      	movne	r3, #0
 80035f6:	eba6 0807 	sub.w	r8, r6, r7
 80035fa:	608b      	str	r3, [r1, #8]
 80035fc:	f1b8 0f00 	cmp.w	r8, #0
 8003600:	dde9      	ble.n	80035d6 <__sflush_r+0xae>
 8003602:	6a21      	ldr	r1, [r4, #32]
 8003604:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003606:	4643      	mov	r3, r8
 8003608:	463a      	mov	r2, r7
 800360a:	4628      	mov	r0, r5
 800360c:	47b0      	blx	r6
 800360e:	2800      	cmp	r0, #0
 8003610:	dc08      	bgt.n	8003624 <__sflush_r+0xfc>
 8003612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003624:	4407      	add	r7, r0
 8003626:	eba8 0800 	sub.w	r8, r8, r0
 800362a:	e7e7      	b.n	80035fc <__sflush_r+0xd4>
 800362c:	dfbffffe 	.word	0xdfbffffe

08003630 <_fflush_r>:
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	690b      	ldr	r3, [r1, #16]
 8003634:	4605      	mov	r5, r0
 8003636:	460c      	mov	r4, r1
 8003638:	b913      	cbnz	r3, 8003640 <_fflush_r+0x10>
 800363a:	2500      	movs	r5, #0
 800363c:	4628      	mov	r0, r5
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	b118      	cbz	r0, 800364a <_fflush_r+0x1a>
 8003642:	6a03      	ldr	r3, [r0, #32]
 8003644:	b90b      	cbnz	r3, 800364a <_fflush_r+0x1a>
 8003646:	f7ff f9ad 	bl	80029a4 <__sinit>
 800364a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f3      	beq.n	800363a <_fflush_r+0xa>
 8003652:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003654:	07d0      	lsls	r0, r2, #31
 8003656:	d404      	bmi.n	8003662 <_fflush_r+0x32>
 8003658:	0599      	lsls	r1, r3, #22
 800365a:	d402      	bmi.n	8003662 <_fflush_r+0x32>
 800365c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800365e:	f7ff fb98 	bl	8002d92 <__retarget_lock_acquire_recursive>
 8003662:	4628      	mov	r0, r5
 8003664:	4621      	mov	r1, r4
 8003666:	f7ff ff5f 	bl	8003528 <__sflush_r>
 800366a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800366c:	07da      	lsls	r2, r3, #31
 800366e:	4605      	mov	r5, r0
 8003670:	d4e4      	bmi.n	800363c <_fflush_r+0xc>
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	059b      	lsls	r3, r3, #22
 8003676:	d4e1      	bmi.n	800363c <_fflush_r+0xc>
 8003678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800367a:	f7ff fb8b 	bl	8002d94 <__retarget_lock_release_recursive>
 800367e:	e7dd      	b.n	800363c <_fflush_r+0xc>

08003680 <__swhatbuf_r>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	460c      	mov	r4, r1
 8003684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003688:	2900      	cmp	r1, #0
 800368a:	b096      	sub	sp, #88	@ 0x58
 800368c:	4615      	mov	r5, r2
 800368e:	461e      	mov	r6, r3
 8003690:	da0d      	bge.n	80036ae <__swhatbuf_r+0x2e>
 8003692:	89a3      	ldrh	r3, [r4, #12]
 8003694:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	bf14      	ite	ne
 800369e:	2340      	movne	r3, #64	@ 0x40
 80036a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80036a4:	2000      	movs	r0, #0
 80036a6:	6031      	str	r1, [r6, #0]
 80036a8:	602b      	str	r3, [r5, #0]
 80036aa:	b016      	add	sp, #88	@ 0x58
 80036ac:	bd70      	pop	{r4, r5, r6, pc}
 80036ae:	466a      	mov	r2, sp
 80036b0:	f000 f848 	bl	8003744 <_fstat_r>
 80036b4:	2800      	cmp	r0, #0
 80036b6:	dbec      	blt.n	8003692 <__swhatbuf_r+0x12>
 80036b8:	9901      	ldr	r1, [sp, #4]
 80036ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80036be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80036c2:	4259      	negs	r1, r3
 80036c4:	4159      	adcs	r1, r3
 80036c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036ca:	e7eb      	b.n	80036a4 <__swhatbuf_r+0x24>

080036cc <__smakebuf_r>:
 80036cc:	898b      	ldrh	r3, [r1, #12]
 80036ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036d0:	079d      	lsls	r5, r3, #30
 80036d2:	4606      	mov	r6, r0
 80036d4:	460c      	mov	r4, r1
 80036d6:	d507      	bpl.n	80036e8 <__smakebuf_r+0x1c>
 80036d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	6123      	str	r3, [r4, #16]
 80036e0:	2301      	movs	r3, #1
 80036e2:	6163      	str	r3, [r4, #20]
 80036e4:	b003      	add	sp, #12
 80036e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e8:	ab01      	add	r3, sp, #4
 80036ea:	466a      	mov	r2, sp
 80036ec:	f7ff ffc8 	bl	8003680 <__swhatbuf_r>
 80036f0:	9f00      	ldr	r7, [sp, #0]
 80036f2:	4605      	mov	r5, r0
 80036f4:	4639      	mov	r1, r7
 80036f6:	4630      	mov	r0, r6
 80036f8:	f7ff fbba 	bl	8002e70 <_malloc_r>
 80036fc:	b948      	cbnz	r0, 8003712 <__smakebuf_r+0x46>
 80036fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003702:	059a      	lsls	r2, r3, #22
 8003704:	d4ee      	bmi.n	80036e4 <__smakebuf_r+0x18>
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	81a3      	strh	r3, [r4, #12]
 8003710:	e7e2      	b.n	80036d8 <__smakebuf_r+0xc>
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	6020      	str	r0, [r4, #0]
 8003716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800371a:	81a3      	strh	r3, [r4, #12]
 800371c:	9b01      	ldr	r3, [sp, #4]
 800371e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003722:	b15b      	cbz	r3, 800373c <__smakebuf_r+0x70>
 8003724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003728:	4630      	mov	r0, r6
 800372a:	f000 f81d 	bl	8003768 <_isatty_r>
 800372e:	b128      	cbz	r0, 800373c <__smakebuf_r+0x70>
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	81a3      	strh	r3, [r4, #12]
 800373c:	89a3      	ldrh	r3, [r4, #12]
 800373e:	431d      	orrs	r5, r3
 8003740:	81a5      	strh	r5, [r4, #12]
 8003742:	e7cf      	b.n	80036e4 <__smakebuf_r+0x18>

08003744 <_fstat_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4d07      	ldr	r5, [pc, #28]	@ (8003764 <_fstat_r+0x20>)
 8003748:	2300      	movs	r3, #0
 800374a:	4604      	mov	r4, r0
 800374c:	4608      	mov	r0, r1
 800374e:	4611      	mov	r1, r2
 8003750:	602b      	str	r3, [r5, #0]
 8003752:	f7fd fd8e 	bl	8001272 <_fstat>
 8003756:	1c43      	adds	r3, r0, #1
 8003758:	d102      	bne.n	8003760 <_fstat_r+0x1c>
 800375a:	682b      	ldr	r3, [r5, #0]
 800375c:	b103      	cbz	r3, 8003760 <_fstat_r+0x1c>
 800375e:	6023      	str	r3, [r4, #0]
 8003760:	bd38      	pop	{r3, r4, r5, pc}
 8003762:	bf00      	nop
 8003764:	20001284 	.word	0x20001284

08003768 <_isatty_r>:
 8003768:	b538      	push	{r3, r4, r5, lr}
 800376a:	4d06      	ldr	r5, [pc, #24]	@ (8003784 <_isatty_r+0x1c>)
 800376c:	2300      	movs	r3, #0
 800376e:	4604      	mov	r4, r0
 8003770:	4608      	mov	r0, r1
 8003772:	602b      	str	r3, [r5, #0]
 8003774:	f7fd fd82 	bl	800127c <_isatty>
 8003778:	1c43      	adds	r3, r0, #1
 800377a:	d102      	bne.n	8003782 <_isatty_r+0x1a>
 800377c:	682b      	ldr	r3, [r5, #0]
 800377e:	b103      	cbz	r3, 8003782 <_isatty_r+0x1a>
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	bd38      	pop	{r3, r4, r5, pc}
 8003784:	20001284 	.word	0x20001284

08003788 <_sbrk_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	4d06      	ldr	r5, [pc, #24]	@ (80037a4 <_sbrk_r+0x1c>)
 800378c:	2300      	movs	r3, #0
 800378e:	4604      	mov	r4, r0
 8003790:	4608      	mov	r0, r1
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	f7fd fd76 	bl	8001284 <_sbrk>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d102      	bne.n	80037a2 <_sbrk_r+0x1a>
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	b103      	cbz	r3, 80037a2 <_sbrk_r+0x1a>
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	20001284 	.word	0x20001284

080037a8 <sin>:
 80037a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80037aa:	ec53 2b10 	vmov	r2, r3, d0
 80037ae:	4826      	ldr	r0, [pc, #152]	@ (8003848 <sin+0xa0>)
 80037b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80037b4:	4281      	cmp	r1, r0
 80037b6:	d807      	bhi.n	80037c8 <sin+0x20>
 80037b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003840 <sin+0x98>
 80037bc:	2000      	movs	r0, #0
 80037be:	b005      	add	sp, #20
 80037c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80037c4:	f000 b90c 	b.w	80039e0 <__kernel_sin>
 80037c8:	4820      	ldr	r0, [pc, #128]	@ (800384c <sin+0xa4>)
 80037ca:	4281      	cmp	r1, r0
 80037cc:	d908      	bls.n	80037e0 <sin+0x38>
 80037ce:	4610      	mov	r0, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	f7fc fe7b 	bl	80004cc <__aeabi_dsub>
 80037d6:	ec41 0b10 	vmov	d0, r0, r1
 80037da:	b005      	add	sp, #20
 80037dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80037e0:	4668      	mov	r0, sp
 80037e2:	f000 f9b9 	bl	8003b58 <__ieee754_rem_pio2>
 80037e6:	f000 0003 	and.w	r0, r0, #3
 80037ea:	2801      	cmp	r0, #1
 80037ec:	d00c      	beq.n	8003808 <sin+0x60>
 80037ee:	2802      	cmp	r0, #2
 80037f0:	d011      	beq.n	8003816 <sin+0x6e>
 80037f2:	b9e8      	cbnz	r0, 8003830 <sin+0x88>
 80037f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80037f8:	ed9d 0b00 	vldr	d0, [sp]
 80037fc:	2001      	movs	r0, #1
 80037fe:	f000 f8ef 	bl	80039e0 <__kernel_sin>
 8003802:	ec51 0b10 	vmov	r0, r1, d0
 8003806:	e7e6      	b.n	80037d6 <sin+0x2e>
 8003808:	ed9d 1b02 	vldr	d1, [sp, #8]
 800380c:	ed9d 0b00 	vldr	d0, [sp]
 8003810:	f000 f81e 	bl	8003850 <__kernel_cos>
 8003814:	e7f5      	b.n	8003802 <sin+0x5a>
 8003816:	ed9d 1b02 	vldr	d1, [sp, #8]
 800381a:	ed9d 0b00 	vldr	d0, [sp]
 800381e:	2001      	movs	r0, #1
 8003820:	f000 f8de 	bl	80039e0 <__kernel_sin>
 8003824:	ec53 2b10 	vmov	r2, r3, d0
 8003828:	4610      	mov	r0, r2
 800382a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800382e:	e7d2      	b.n	80037d6 <sin+0x2e>
 8003830:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003834:	ed9d 0b00 	vldr	d0, [sp]
 8003838:	f000 f80a 	bl	8003850 <__kernel_cos>
 800383c:	e7f2      	b.n	8003824 <sin+0x7c>
 800383e:	bf00      	nop
	...
 8003848:	3fe921fb 	.word	0x3fe921fb
 800384c:	7fefffff 	.word	0x7fefffff

08003850 <__kernel_cos>:
 8003850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	ec57 6b10 	vmov	r6, r7, d0
 8003858:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800385c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003860:	ed8d 1b00 	vstr	d1, [sp]
 8003864:	d206      	bcs.n	8003874 <__kernel_cos+0x24>
 8003866:	4630      	mov	r0, r6
 8003868:	4639      	mov	r1, r7
 800386a:	f7fd f86f 	bl	800094c <__aeabi_d2iz>
 800386e:	2800      	cmp	r0, #0
 8003870:	f000 8088 	beq.w	8003984 <__kernel_cos+0x134>
 8003874:	4632      	mov	r2, r6
 8003876:	463b      	mov	r3, r7
 8003878:	4630      	mov	r0, r6
 800387a:	4639      	mov	r1, r7
 800387c:	f7fc fcf8 	bl	8000270 <__aeabi_dmul>
 8003880:	4b51      	ldr	r3, [pc, #324]	@ (80039c8 <__kernel_cos+0x178>)
 8003882:	2200      	movs	r2, #0
 8003884:	4604      	mov	r4, r0
 8003886:	460d      	mov	r5, r1
 8003888:	f7fc fcf2 	bl	8000270 <__aeabi_dmul>
 800388c:	a340      	add	r3, pc, #256	@ (adr r3, 8003990 <__kernel_cos+0x140>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	4682      	mov	sl, r0
 8003894:	468b      	mov	fp, r1
 8003896:	4620      	mov	r0, r4
 8003898:	4629      	mov	r1, r5
 800389a:	f7fc fce9 	bl	8000270 <__aeabi_dmul>
 800389e:	a33e      	add	r3, pc, #248	@ (adr r3, 8003998 <__kernel_cos+0x148>)
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f7fc fe14 	bl	80004d0 <__adddf3>
 80038a8:	4622      	mov	r2, r4
 80038aa:	462b      	mov	r3, r5
 80038ac:	f7fc fce0 	bl	8000270 <__aeabi_dmul>
 80038b0:	a33b      	add	r3, pc, #236	@ (adr r3, 80039a0 <__kernel_cos+0x150>)
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f7fc fe09 	bl	80004cc <__aeabi_dsub>
 80038ba:	4622      	mov	r2, r4
 80038bc:	462b      	mov	r3, r5
 80038be:	f7fc fcd7 	bl	8000270 <__aeabi_dmul>
 80038c2:	a339      	add	r3, pc, #228	@ (adr r3, 80039a8 <__kernel_cos+0x158>)
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f7fc fe02 	bl	80004d0 <__adddf3>
 80038cc:	4622      	mov	r2, r4
 80038ce:	462b      	mov	r3, r5
 80038d0:	f7fc fcce 	bl	8000270 <__aeabi_dmul>
 80038d4:	a336      	add	r3, pc, #216	@ (adr r3, 80039b0 <__kernel_cos+0x160>)
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f7fc fdf7 	bl	80004cc <__aeabi_dsub>
 80038de:	4622      	mov	r2, r4
 80038e0:	462b      	mov	r3, r5
 80038e2:	f7fc fcc5 	bl	8000270 <__aeabi_dmul>
 80038e6:	a334      	add	r3, pc, #208	@ (adr r3, 80039b8 <__kernel_cos+0x168>)
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f7fc fdf0 	bl	80004d0 <__adddf3>
 80038f0:	4622      	mov	r2, r4
 80038f2:	462b      	mov	r3, r5
 80038f4:	f7fc fcbc 	bl	8000270 <__aeabi_dmul>
 80038f8:	4622      	mov	r2, r4
 80038fa:	462b      	mov	r3, r5
 80038fc:	f7fc fcb8 	bl	8000270 <__aeabi_dmul>
 8003900:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003904:	4604      	mov	r4, r0
 8003906:	460d      	mov	r5, r1
 8003908:	4630      	mov	r0, r6
 800390a:	4639      	mov	r1, r7
 800390c:	f7fc fcb0 	bl	8000270 <__aeabi_dmul>
 8003910:	460b      	mov	r3, r1
 8003912:	4602      	mov	r2, r0
 8003914:	4629      	mov	r1, r5
 8003916:	4620      	mov	r0, r4
 8003918:	f7fc fdd8 	bl	80004cc <__aeabi_dsub>
 800391c:	4b2b      	ldr	r3, [pc, #172]	@ (80039cc <__kernel_cos+0x17c>)
 800391e:	4598      	cmp	r8, r3
 8003920:	4606      	mov	r6, r0
 8003922:	460f      	mov	r7, r1
 8003924:	d810      	bhi.n	8003948 <__kernel_cos+0xf8>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4650      	mov	r0, sl
 800392c:	4659      	mov	r1, fp
 800392e:	f7fc fdcd 	bl	80004cc <__aeabi_dsub>
 8003932:	460b      	mov	r3, r1
 8003934:	4926      	ldr	r1, [pc, #152]	@ (80039d0 <__kernel_cos+0x180>)
 8003936:	4602      	mov	r2, r0
 8003938:	2000      	movs	r0, #0
 800393a:	f7fc fdc7 	bl	80004cc <__aeabi_dsub>
 800393e:	ec41 0b10 	vmov	d0, r0, r1
 8003942:	b003      	add	sp, #12
 8003944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003948:	4b22      	ldr	r3, [pc, #136]	@ (80039d4 <__kernel_cos+0x184>)
 800394a:	4921      	ldr	r1, [pc, #132]	@ (80039d0 <__kernel_cos+0x180>)
 800394c:	4598      	cmp	r8, r3
 800394e:	bf8c      	ite	hi
 8003950:	4d21      	ldrhi	r5, [pc, #132]	@ (80039d8 <__kernel_cos+0x188>)
 8003952:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003956:	2400      	movs	r4, #0
 8003958:	4622      	mov	r2, r4
 800395a:	462b      	mov	r3, r5
 800395c:	2000      	movs	r0, #0
 800395e:	f7fc fdb5 	bl	80004cc <__aeabi_dsub>
 8003962:	4622      	mov	r2, r4
 8003964:	4680      	mov	r8, r0
 8003966:	4689      	mov	r9, r1
 8003968:	462b      	mov	r3, r5
 800396a:	4650      	mov	r0, sl
 800396c:	4659      	mov	r1, fp
 800396e:	f7fc fdad 	bl	80004cc <__aeabi_dsub>
 8003972:	4632      	mov	r2, r6
 8003974:	463b      	mov	r3, r7
 8003976:	f7fc fda9 	bl	80004cc <__aeabi_dsub>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4640      	mov	r0, r8
 8003980:	4649      	mov	r1, r9
 8003982:	e7da      	b.n	800393a <__kernel_cos+0xea>
 8003984:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80039c0 <__kernel_cos+0x170>
 8003988:	e7db      	b.n	8003942 <__kernel_cos+0xf2>
 800398a:	bf00      	nop
 800398c:	f3af 8000 	nop.w
 8003990:	be8838d4 	.word	0xbe8838d4
 8003994:	bda8fae9 	.word	0xbda8fae9
 8003998:	bdb4b1c4 	.word	0xbdb4b1c4
 800399c:	3e21ee9e 	.word	0x3e21ee9e
 80039a0:	809c52ad 	.word	0x809c52ad
 80039a4:	3e927e4f 	.word	0x3e927e4f
 80039a8:	19cb1590 	.word	0x19cb1590
 80039ac:	3efa01a0 	.word	0x3efa01a0
 80039b0:	16c15177 	.word	0x16c15177
 80039b4:	3f56c16c 	.word	0x3f56c16c
 80039b8:	5555554c 	.word	0x5555554c
 80039bc:	3fa55555 	.word	0x3fa55555
 80039c0:	00000000 	.word	0x00000000
 80039c4:	3ff00000 	.word	0x3ff00000
 80039c8:	3fe00000 	.word	0x3fe00000
 80039cc:	3fd33332 	.word	0x3fd33332
 80039d0:	3ff00000 	.word	0x3ff00000
 80039d4:	3fe90000 	.word	0x3fe90000
 80039d8:	3fd20000 	.word	0x3fd20000
 80039dc:	00000000 	.word	0x00000000

080039e0 <__kernel_sin>:
 80039e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e4:	ec55 4b10 	vmov	r4, r5, d0
 80039e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80039ec:	b085      	sub	sp, #20
 80039ee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80039f2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80039f6:	4680      	mov	r8, r0
 80039f8:	d205      	bcs.n	8003a06 <__kernel_sin+0x26>
 80039fa:	4620      	mov	r0, r4
 80039fc:	4629      	mov	r1, r5
 80039fe:	f7fc ffa5 	bl	800094c <__aeabi_d2iz>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d052      	beq.n	8003aac <__kernel_sin+0xcc>
 8003a06:	4622      	mov	r2, r4
 8003a08:	462b      	mov	r3, r5
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	f7fc fc2f 	bl	8000270 <__aeabi_dmul>
 8003a12:	4682      	mov	sl, r0
 8003a14:	468b      	mov	fp, r1
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	f7fc fc27 	bl	8000270 <__aeabi_dmul>
 8003a22:	a342      	add	r3, pc, #264	@ (adr r3, 8003b2c <__kernel_sin+0x14c>)
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	e9cd 0100 	strd	r0, r1, [sp]
 8003a2c:	4650      	mov	r0, sl
 8003a2e:	4659      	mov	r1, fp
 8003a30:	f7fc fc1e 	bl	8000270 <__aeabi_dmul>
 8003a34:	a33f      	add	r3, pc, #252	@ (adr r3, 8003b34 <__kernel_sin+0x154>)
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f7fc fd47 	bl	80004cc <__aeabi_dsub>
 8003a3e:	4652      	mov	r2, sl
 8003a40:	465b      	mov	r3, fp
 8003a42:	f7fc fc15 	bl	8000270 <__aeabi_dmul>
 8003a46:	a33d      	add	r3, pc, #244	@ (adr r3, 8003b3c <__kernel_sin+0x15c>)
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f7fc fd40 	bl	80004d0 <__adddf3>
 8003a50:	4652      	mov	r2, sl
 8003a52:	465b      	mov	r3, fp
 8003a54:	f7fc fc0c 	bl	8000270 <__aeabi_dmul>
 8003a58:	a33a      	add	r3, pc, #232	@ (adr r3, 8003b44 <__kernel_sin+0x164>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f7fc fd35 	bl	80004cc <__aeabi_dsub>
 8003a62:	4652      	mov	r2, sl
 8003a64:	465b      	mov	r3, fp
 8003a66:	f7fc fc03 	bl	8000270 <__aeabi_dmul>
 8003a6a:	a338      	add	r3, pc, #224	@ (adr r3, 8003b4c <__kernel_sin+0x16c>)
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f7fc fd2e 	bl	80004d0 <__adddf3>
 8003a74:	4606      	mov	r6, r0
 8003a76:	460f      	mov	r7, r1
 8003a78:	f1b8 0f00 	cmp.w	r8, #0
 8003a7c:	d11b      	bne.n	8003ab6 <__kernel_sin+0xd6>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4650      	mov	r0, sl
 8003a84:	4659      	mov	r1, fp
 8003a86:	f7fc fbf3 	bl	8000270 <__aeabi_dmul>
 8003a8a:	a325      	add	r3, pc, #148	@ (adr r3, 8003b20 <__kernel_sin+0x140>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f7fc fd1c 	bl	80004cc <__aeabi_dsub>
 8003a94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a98:	f7fc fbea 	bl	8000270 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7fc fd14 	bl	80004d0 <__adddf3>
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	460d      	mov	r5, r1
 8003aac:	ec45 4b10 	vmov	d0, r4, r5
 8003ab0:	b005      	add	sp, #20
 8003ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aba:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <__kernel_sin+0x148>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	f7fc fbd7 	bl	8000270 <__aeabi_dmul>
 8003ac2:	4632      	mov	r2, r6
 8003ac4:	4680      	mov	r8, r0
 8003ac6:	4689      	mov	r9, r1
 8003ac8:	463b      	mov	r3, r7
 8003aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ace:	f7fc fbcf 	bl	8000270 <__aeabi_dmul>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4640      	mov	r0, r8
 8003ad8:	4649      	mov	r1, r9
 8003ada:	f7fc fcf7 	bl	80004cc <__aeabi_dsub>
 8003ade:	4652      	mov	r2, sl
 8003ae0:	465b      	mov	r3, fp
 8003ae2:	f7fc fbc5 	bl	8000270 <__aeabi_dmul>
 8003ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003aea:	f7fc fcef 	bl	80004cc <__aeabi_dsub>
 8003aee:	a30c      	add	r3, pc, #48	@ (adr r3, 8003b20 <__kernel_sin+0x140>)
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	4606      	mov	r6, r0
 8003af6:	460f      	mov	r7, r1
 8003af8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003afc:	f7fc fbb8 	bl	8000270 <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4630      	mov	r0, r6
 8003b06:	4639      	mov	r1, r7
 8003b08:	f7fc fce2 	bl	80004d0 <__adddf3>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4620      	mov	r0, r4
 8003b12:	4629      	mov	r1, r5
 8003b14:	f7fc fcda 	bl	80004cc <__aeabi_dsub>
 8003b18:	e7c6      	b.n	8003aa8 <__kernel_sin+0xc8>
 8003b1a:	bf00      	nop
 8003b1c:	f3af 8000 	nop.w
 8003b20:	55555549 	.word	0x55555549
 8003b24:	3fc55555 	.word	0x3fc55555
 8003b28:	3fe00000 	.word	0x3fe00000
 8003b2c:	5acfd57c 	.word	0x5acfd57c
 8003b30:	3de5d93a 	.word	0x3de5d93a
 8003b34:	8a2b9ceb 	.word	0x8a2b9ceb
 8003b38:	3e5ae5e6 	.word	0x3e5ae5e6
 8003b3c:	57b1fe7d 	.word	0x57b1fe7d
 8003b40:	3ec71de3 	.word	0x3ec71de3
 8003b44:	19c161d5 	.word	0x19c161d5
 8003b48:	3f2a01a0 	.word	0x3f2a01a0
 8003b4c:	1110f8a6 	.word	0x1110f8a6
 8003b50:	3f811111 	.word	0x3f811111
 8003b54:	00000000 	.word	0x00000000

08003b58 <__ieee754_rem_pio2>:
 8003b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5c:	ec57 6b10 	vmov	r6, r7, d0
 8003b60:	4bc5      	ldr	r3, [pc, #788]	@ (8003e78 <__ieee754_rem_pio2+0x320>)
 8003b62:	b08d      	sub	sp, #52	@ 0x34
 8003b64:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003b68:	4598      	cmp	r8, r3
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	9704      	str	r7, [sp, #16]
 8003b6e:	d807      	bhi.n	8003b80 <__ieee754_rem_pio2+0x28>
 8003b70:	2200      	movs	r2, #0
 8003b72:	2300      	movs	r3, #0
 8003b74:	ed80 0b00 	vstr	d0, [r0]
 8003b78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003b7c:	2500      	movs	r5, #0
 8003b7e:	e028      	b.n	8003bd2 <__ieee754_rem_pio2+0x7a>
 8003b80:	4bbe      	ldr	r3, [pc, #760]	@ (8003e7c <__ieee754_rem_pio2+0x324>)
 8003b82:	4598      	cmp	r8, r3
 8003b84:	d878      	bhi.n	8003c78 <__ieee754_rem_pio2+0x120>
 8003b86:	9b04      	ldr	r3, [sp, #16]
 8003b88:	4dbd      	ldr	r5, [pc, #756]	@ (8003e80 <__ieee754_rem_pio2+0x328>)
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003e40 <__ieee754_rem_pio2+0x2e8>)
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	4639      	mov	r1, r7
 8003b96:	dd38      	ble.n	8003c0a <__ieee754_rem_pio2+0xb2>
 8003b98:	f7fc fc98 	bl	80004cc <__aeabi_dsub>
 8003b9c:	45a8      	cmp	r8, r5
 8003b9e:	4606      	mov	r6, r0
 8003ba0:	460f      	mov	r7, r1
 8003ba2:	d01a      	beq.n	8003bda <__ieee754_rem_pio2+0x82>
 8003ba4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003e48 <__ieee754_rem_pio2+0x2f0>)
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	f7fc fc8f 	bl	80004cc <__aeabi_dsub>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4680      	mov	r8, r0
 8003bb4:	4689      	mov	r9, r1
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	4639      	mov	r1, r7
 8003bba:	f7fc fc87 	bl	80004cc <__aeabi_dsub>
 8003bbe:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003e48 <__ieee754_rem_pio2+0x2f0>)
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	f7fc fc82 	bl	80004cc <__aeabi_dsub>
 8003bc8:	e9c4 8900 	strd	r8, r9, [r4]
 8003bcc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003bd0:	2501      	movs	r5, #1
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	b00d      	add	sp, #52	@ 0x34
 8003bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bda:	a39d      	add	r3, pc, #628	@ (adr r3, 8003e50 <__ieee754_rem_pio2+0x2f8>)
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f7fc fc74 	bl	80004cc <__aeabi_dsub>
 8003be4:	a39c      	add	r3, pc, #624	@ (adr r3, 8003e58 <__ieee754_rem_pio2+0x300>)
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	4606      	mov	r6, r0
 8003bec:	460f      	mov	r7, r1
 8003bee:	f7fc fc6d 	bl	80004cc <__aeabi_dsub>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4680      	mov	r8, r0
 8003bf8:	4689      	mov	r9, r1
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	4639      	mov	r1, r7
 8003bfe:	f7fc fc65 	bl	80004cc <__aeabi_dsub>
 8003c02:	a395      	add	r3, pc, #596	@ (adr r3, 8003e58 <__ieee754_rem_pio2+0x300>)
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	e7dc      	b.n	8003bc4 <__ieee754_rem_pio2+0x6c>
 8003c0a:	f7fc fc61 	bl	80004d0 <__adddf3>
 8003c0e:	45a8      	cmp	r8, r5
 8003c10:	4606      	mov	r6, r0
 8003c12:	460f      	mov	r7, r1
 8003c14:	d018      	beq.n	8003c48 <__ieee754_rem_pio2+0xf0>
 8003c16:	a38c      	add	r3, pc, #560	@ (adr r3, 8003e48 <__ieee754_rem_pio2+0x2f0>)
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f7fc fc58 	bl	80004d0 <__adddf3>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4680      	mov	r8, r0
 8003c26:	4689      	mov	r9, r1
 8003c28:	4630      	mov	r0, r6
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	f7fc fc4e 	bl	80004cc <__aeabi_dsub>
 8003c30:	a385      	add	r3, pc, #532	@ (adr r3, 8003e48 <__ieee754_rem_pio2+0x2f0>)
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f7fc fc4b 	bl	80004d0 <__adddf3>
 8003c3a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003c3e:	e9c4 8900 	strd	r8, r9, [r4]
 8003c42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003c46:	e7c4      	b.n	8003bd2 <__ieee754_rem_pio2+0x7a>
 8003c48:	a381      	add	r3, pc, #516	@ (adr r3, 8003e50 <__ieee754_rem_pio2+0x2f8>)
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	f7fc fc3f 	bl	80004d0 <__adddf3>
 8003c52:	a381      	add	r3, pc, #516	@ (adr r3, 8003e58 <__ieee754_rem_pio2+0x300>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	4606      	mov	r6, r0
 8003c5a:	460f      	mov	r7, r1
 8003c5c:	f7fc fc38 	bl	80004d0 <__adddf3>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4680      	mov	r8, r0
 8003c66:	4689      	mov	r9, r1
 8003c68:	4630      	mov	r0, r6
 8003c6a:	4639      	mov	r1, r7
 8003c6c:	f7fc fc2e 	bl	80004cc <__aeabi_dsub>
 8003c70:	a379      	add	r3, pc, #484	@ (adr r3, 8003e58 <__ieee754_rem_pio2+0x300>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	e7de      	b.n	8003c36 <__ieee754_rem_pio2+0xde>
 8003c78:	4b82      	ldr	r3, [pc, #520]	@ (8003e84 <__ieee754_rem_pio2+0x32c>)
 8003c7a:	4598      	cmp	r8, r3
 8003c7c:	f200 80d1 	bhi.w	8003e22 <__ieee754_rem_pio2+0x2ca>
 8003c80:	f000 f966 	bl	8003f50 <fabs>
 8003c84:	ec57 6b10 	vmov	r6, r7, d0
 8003c88:	a375      	add	r3, pc, #468	@ (adr r3, 8003e60 <__ieee754_rem_pio2+0x308>)
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	4630      	mov	r0, r6
 8003c90:	4639      	mov	r1, r7
 8003c92:	f7fc faed 	bl	8000270 <__aeabi_dmul>
 8003c96:	4b7c      	ldr	r3, [pc, #496]	@ (8003e88 <__ieee754_rem_pio2+0x330>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f7fc fc19 	bl	80004d0 <__adddf3>
 8003c9e:	f7fc fe55 	bl	800094c <__aeabi_d2iz>
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	f7fc fd60 	bl	8000768 <__aeabi_i2d>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cb0:	a363      	add	r3, pc, #396	@ (adr r3, 8003e40 <__ieee754_rem_pio2+0x2e8>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fadb 	bl	8000270 <__aeabi_dmul>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	4639      	mov	r1, r7
 8003cc2:	f7fc fc03 	bl	80004cc <__aeabi_dsub>
 8003cc6:	a360      	add	r3, pc, #384	@ (adr r3, 8003e48 <__ieee754_rem_pio2+0x2f0>)
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	4682      	mov	sl, r0
 8003cce:	468b      	mov	fp, r1
 8003cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cd4:	f7fc facc 	bl	8000270 <__aeabi_dmul>
 8003cd8:	2d1f      	cmp	r5, #31
 8003cda:	4606      	mov	r6, r0
 8003cdc:	460f      	mov	r7, r1
 8003cde:	dc0c      	bgt.n	8003cfa <__ieee754_rem_pio2+0x1a2>
 8003ce0:	4b6a      	ldr	r3, [pc, #424]	@ (8003e8c <__ieee754_rem_pio2+0x334>)
 8003ce2:	1e6a      	subs	r2, r5, #1
 8003ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce8:	4543      	cmp	r3, r8
 8003cea:	d006      	beq.n	8003cfa <__ieee754_rem_pio2+0x1a2>
 8003cec:	4632      	mov	r2, r6
 8003cee:	463b      	mov	r3, r7
 8003cf0:	4650      	mov	r0, sl
 8003cf2:	4659      	mov	r1, fp
 8003cf4:	f7fc fbea 	bl	80004cc <__aeabi_dsub>
 8003cf8:	e00e      	b.n	8003d18 <__ieee754_rem_pio2+0x1c0>
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	4632      	mov	r2, r6
 8003cfe:	4650      	mov	r0, sl
 8003d00:	4659      	mov	r1, fp
 8003d02:	f7fc fbe3 	bl	80004cc <__aeabi_dsub>
 8003d06:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003d0a:	9305      	str	r3, [sp, #20]
 8003d0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003d10:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	dc02      	bgt.n	8003d1e <__ieee754_rem_pio2+0x1c6>
 8003d18:	e9c4 0100 	strd	r0, r1, [r4]
 8003d1c:	e039      	b.n	8003d92 <__ieee754_rem_pio2+0x23a>
 8003d1e:	a34c      	add	r3, pc, #304	@ (adr r3, 8003e50 <__ieee754_rem_pio2+0x2f8>)
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d28:	f7fc faa2 	bl	8000270 <__aeabi_dmul>
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	460f      	mov	r7, r1
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4650      	mov	r0, sl
 8003d36:	4659      	mov	r1, fp
 8003d38:	f7fc fbc8 	bl	80004cc <__aeabi_dsub>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4680      	mov	r8, r0
 8003d42:	4689      	mov	r9, r1
 8003d44:	4650      	mov	r0, sl
 8003d46:	4659      	mov	r1, fp
 8003d48:	f7fc fbc0 	bl	80004cc <__aeabi_dsub>
 8003d4c:	4632      	mov	r2, r6
 8003d4e:	463b      	mov	r3, r7
 8003d50:	f7fc fbbc 	bl	80004cc <__aeabi_dsub>
 8003d54:	a340      	add	r3, pc, #256	@ (adr r3, 8003e58 <__ieee754_rem_pio2+0x300>)
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	460f      	mov	r7, r1
 8003d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d62:	f7fc fa85 	bl	8000270 <__aeabi_dmul>
 8003d66:	4632      	mov	r2, r6
 8003d68:	463b      	mov	r3, r7
 8003d6a:	f7fc fbaf 	bl	80004cc <__aeabi_dsub>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4606      	mov	r6, r0
 8003d74:	460f      	mov	r7, r1
 8003d76:	4640      	mov	r0, r8
 8003d78:	4649      	mov	r1, r9
 8003d7a:	f7fc fba7 	bl	80004cc <__aeabi_dsub>
 8003d7e:	9a05      	ldr	r2, [sp, #20]
 8003d80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b31      	cmp	r3, #49	@ 0x31
 8003d88:	dc20      	bgt.n	8003dcc <__ieee754_rem_pio2+0x274>
 8003d8a:	e9c4 0100 	strd	r0, r1, [r4]
 8003d8e:	46c2      	mov	sl, r8
 8003d90:	46cb      	mov	fp, r9
 8003d92:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003d96:	4650      	mov	r0, sl
 8003d98:	4642      	mov	r2, r8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	f7fc fb95 	bl	80004cc <__aeabi_dsub>
 8003da2:	463b      	mov	r3, r7
 8003da4:	4632      	mov	r2, r6
 8003da6:	f7fc fb91 	bl	80004cc <__aeabi_dsub>
 8003daa:	9b04      	ldr	r3, [sp, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003db2:	f6bf af0e 	bge.w	8003bd2 <__ieee754_rem_pio2+0x7a>
 8003db6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003dba:	6063      	str	r3, [r4, #4]
 8003dbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003dc0:	f8c4 8000 	str.w	r8, [r4]
 8003dc4:	60a0      	str	r0, [r4, #8]
 8003dc6:	60e3      	str	r3, [r4, #12]
 8003dc8:	426d      	negs	r5, r5
 8003dca:	e702      	b.n	8003bd2 <__ieee754_rem_pio2+0x7a>
 8003dcc:	a326      	add	r3, pc, #152	@ (adr r3, 8003e68 <__ieee754_rem_pio2+0x310>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dd6:	f7fc fa4b 	bl	8000270 <__aeabi_dmul>
 8003dda:	4606      	mov	r6, r0
 8003ddc:	460f      	mov	r7, r1
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4640      	mov	r0, r8
 8003de4:	4649      	mov	r1, r9
 8003de6:	f7fc fb71 	bl	80004cc <__aeabi_dsub>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4682      	mov	sl, r0
 8003df0:	468b      	mov	fp, r1
 8003df2:	4640      	mov	r0, r8
 8003df4:	4649      	mov	r1, r9
 8003df6:	f7fc fb69 	bl	80004cc <__aeabi_dsub>
 8003dfa:	4632      	mov	r2, r6
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	f7fc fb65 	bl	80004cc <__aeabi_dsub>
 8003e02:	a31b      	add	r3, pc, #108	@ (adr r3, 8003e70 <__ieee754_rem_pio2+0x318>)
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	4606      	mov	r6, r0
 8003e0a:	460f      	mov	r7, r1
 8003e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e10:	f7fc fa2e 	bl	8000270 <__aeabi_dmul>
 8003e14:	4632      	mov	r2, r6
 8003e16:	463b      	mov	r3, r7
 8003e18:	f7fc fb58 	bl	80004cc <__aeabi_dsub>
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	460f      	mov	r7, r1
 8003e20:	e764      	b.n	8003cec <__ieee754_rem_pio2+0x194>
 8003e22:	4b1b      	ldr	r3, [pc, #108]	@ (8003e90 <__ieee754_rem_pio2+0x338>)
 8003e24:	4598      	cmp	r8, r3
 8003e26:	d935      	bls.n	8003e94 <__ieee754_rem_pio2+0x33c>
 8003e28:	4632      	mov	r2, r6
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	4639      	mov	r1, r7
 8003e30:	f7fc fb4c 	bl	80004cc <__aeabi_dsub>
 8003e34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003e38:	e9c4 0100 	strd	r0, r1, [r4]
 8003e3c:	e69e      	b.n	8003b7c <__ieee754_rem_pio2+0x24>
 8003e3e:	bf00      	nop
 8003e40:	54400000 	.word	0x54400000
 8003e44:	3ff921fb 	.word	0x3ff921fb
 8003e48:	1a626331 	.word	0x1a626331
 8003e4c:	3dd0b461 	.word	0x3dd0b461
 8003e50:	1a600000 	.word	0x1a600000
 8003e54:	3dd0b461 	.word	0x3dd0b461
 8003e58:	2e037073 	.word	0x2e037073
 8003e5c:	3ba3198a 	.word	0x3ba3198a
 8003e60:	6dc9c883 	.word	0x6dc9c883
 8003e64:	3fe45f30 	.word	0x3fe45f30
 8003e68:	2e000000 	.word	0x2e000000
 8003e6c:	3ba3198a 	.word	0x3ba3198a
 8003e70:	252049c1 	.word	0x252049c1
 8003e74:	397b839a 	.word	0x397b839a
 8003e78:	3fe921fb 	.word	0x3fe921fb
 8003e7c:	4002d97b 	.word	0x4002d97b
 8003e80:	3ff921fb 	.word	0x3ff921fb
 8003e84:	413921fb 	.word	0x413921fb
 8003e88:	3fe00000 	.word	0x3fe00000
 8003e8c:	080048c4 	.word	0x080048c4
 8003e90:	7fefffff 	.word	0x7fefffff
 8003e94:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003e98:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003e9c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	460f      	mov	r7, r1
 8003ea4:	f7fc fd52 	bl	800094c <__aeabi_d2iz>
 8003ea8:	f7fc fc5e 	bl	8000768 <__aeabi_i2d>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	4639      	mov	r1, r7
 8003eb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003eb8:	f7fc fb08 	bl	80004cc <__aeabi_dsub>
 8003ebc:	4b22      	ldr	r3, [pc, #136]	@ (8003f48 <__ieee754_rem_pio2+0x3f0>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f7fc f9d6 	bl	8000270 <__aeabi_dmul>
 8003ec4:	460f      	mov	r7, r1
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	f7fc fd40 	bl	800094c <__aeabi_d2iz>
 8003ecc:	f7fc fc4c 	bl	8000768 <__aeabi_i2d>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	4639      	mov	r1, r7
 8003ed8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003edc:	f7fc faf6 	bl	80004cc <__aeabi_dsub>
 8003ee0:	4b19      	ldr	r3, [pc, #100]	@ (8003f48 <__ieee754_rem_pio2+0x3f0>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f7fc f9c4 	bl	8000270 <__aeabi_dmul>
 8003ee8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003eec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003ef0:	f04f 0803 	mov.w	r8, #3
 8003ef4:	2600      	movs	r6, #0
 8003ef6:	2700      	movs	r7, #0
 8003ef8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003efc:	4632      	mov	r2, r6
 8003efe:	463b      	mov	r3, r7
 8003f00:	46c2      	mov	sl, r8
 8003f02:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003f06:	f7fc fcef 	bl	80008e8 <__aeabi_dcmpeq>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d1f4      	bne.n	8003ef8 <__ieee754_rem_pio2+0x3a0>
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f4c <__ieee754_rem_pio2+0x3f4>)
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	2302      	movs	r3, #2
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	462a      	mov	r2, r5
 8003f18:	4653      	mov	r3, sl
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	a806      	add	r0, sp, #24
 8003f1e:	f000 f81f 	bl	8003f60 <__kernel_rem_pio2>
 8003f22:	9b04      	ldr	r3, [sp, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	4605      	mov	r5, r0
 8003f28:	f6bf ae53 	bge.w	8003bd2 <__ieee754_rem_pio2+0x7a>
 8003f2c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003f30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003f34:	e9c4 2300 	strd	r2, r3, [r4]
 8003f38:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003f3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003f40:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003f44:	e740      	b.n	8003dc8 <__ieee754_rem_pio2+0x270>
 8003f46:	bf00      	nop
 8003f48:	41700000 	.word	0x41700000
 8003f4c:	08004944 	.word	0x08004944

08003f50 <fabs>:
 8003f50:	ec51 0b10 	vmov	r0, r1, d0
 8003f54:	4602      	mov	r2, r0
 8003f56:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003f5a:	ec43 2b10 	vmov	d0, r2, r3
 8003f5e:	4770      	bx	lr

08003f60 <__kernel_rem_pio2>:
 8003f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f64:	ed2d 8b02 	vpush	{d8}
 8003f68:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003f6c:	f112 0f14 	cmn.w	r2, #20
 8003f70:	9306      	str	r3, [sp, #24]
 8003f72:	9104      	str	r1, [sp, #16]
 8003f74:	4bbe      	ldr	r3, [pc, #760]	@ (8004270 <__kernel_rem_pio2+0x310>)
 8003f76:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003f78:	9008      	str	r0, [sp, #32]
 8003f7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	9b06      	ldr	r3, [sp, #24]
 8003f82:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003f86:	bfa8      	it	ge
 8003f88:	1ed4      	subge	r4, r2, #3
 8003f8a:	9305      	str	r3, [sp, #20]
 8003f8c:	bfb2      	itee	lt
 8003f8e:	2400      	movlt	r4, #0
 8003f90:	2318      	movge	r3, #24
 8003f92:	fb94 f4f3 	sdivge	r4, r4, r3
 8003f96:	f06f 0317 	mvn.w	r3, #23
 8003f9a:	fb04 3303 	mla	r3, r4, r3, r3
 8003f9e:	eb03 0b02 	add.w	fp, r3, r2
 8003fa2:	9b00      	ldr	r3, [sp, #0]
 8003fa4:	9a05      	ldr	r2, [sp, #20]
 8003fa6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004260 <__kernel_rem_pio2+0x300>
 8003faa:	eb03 0802 	add.w	r8, r3, r2
 8003fae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003fb0:	1aa7      	subs	r7, r4, r2
 8003fb2:	ae20      	add	r6, sp, #128	@ 0x80
 8003fb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003fb8:	2500      	movs	r5, #0
 8003fba:	4545      	cmp	r5, r8
 8003fbc:	dd13      	ble.n	8003fe6 <__kernel_rem_pio2+0x86>
 8003fbe:	9b06      	ldr	r3, [sp, #24]
 8003fc0:	aa20      	add	r2, sp, #128	@ 0x80
 8003fc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003fc6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8003fca:	f04f 0800 	mov.w	r8, #0
 8003fce:	9b00      	ldr	r3, [sp, #0]
 8003fd0:	4598      	cmp	r8, r3
 8003fd2:	dc31      	bgt.n	8004038 <__kernel_rem_pio2+0xd8>
 8003fd4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004260 <__kernel_rem_pio2+0x300>
 8003fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003fe0:	462f      	mov	r7, r5
 8003fe2:	2600      	movs	r6, #0
 8003fe4:	e01b      	b.n	800401e <__kernel_rem_pio2+0xbe>
 8003fe6:	42ef      	cmn	r7, r5
 8003fe8:	d407      	bmi.n	8003ffa <__kernel_rem_pio2+0x9a>
 8003fea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003fee:	f7fc fbbb 	bl	8000768 <__aeabi_i2d>
 8003ff2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003ff6:	3501      	adds	r5, #1
 8003ff8:	e7df      	b.n	8003fba <__kernel_rem_pio2+0x5a>
 8003ffa:	ec51 0b18 	vmov	r0, r1, d8
 8003ffe:	e7f8      	b.n	8003ff2 <__kernel_rem_pio2+0x92>
 8004000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004004:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004008:	f7fc f932 	bl	8000270 <__aeabi_dmul>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004014:	f7fc fa5c 	bl	80004d0 <__adddf3>
 8004018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800401c:	3601      	adds	r6, #1
 800401e:	9b05      	ldr	r3, [sp, #20]
 8004020:	429e      	cmp	r6, r3
 8004022:	f1a7 0708 	sub.w	r7, r7, #8
 8004026:	ddeb      	ble.n	8004000 <__kernel_rem_pio2+0xa0>
 8004028:	ed9d 7b02 	vldr	d7, [sp, #8]
 800402c:	f108 0801 	add.w	r8, r8, #1
 8004030:	ecaa 7b02 	vstmia	sl!, {d7}
 8004034:	3508      	adds	r5, #8
 8004036:	e7ca      	b.n	8003fce <__kernel_rem_pio2+0x6e>
 8004038:	9b00      	ldr	r3, [sp, #0]
 800403a:	f8dd 8000 	ldr.w	r8, [sp]
 800403e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004040:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004044:	930a      	str	r3, [sp, #40]	@ 0x28
 8004046:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004048:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800404c:	9309      	str	r3, [sp, #36]	@ 0x24
 800404e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004052:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004054:	ab98      	add	r3, sp, #608	@ 0x260
 8004056:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800405a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800405e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004062:	ac0c      	add	r4, sp, #48	@ 0x30
 8004064:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004066:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800406a:	46a1      	mov	r9, r4
 800406c:	46c2      	mov	sl, r8
 800406e:	f1ba 0f00 	cmp.w	sl, #0
 8004072:	f1a5 0508 	sub.w	r5, r5, #8
 8004076:	dc77      	bgt.n	8004168 <__kernel_rem_pio2+0x208>
 8004078:	4658      	mov	r0, fp
 800407a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800407e:	f000 fac7 	bl	8004610 <scalbn>
 8004082:	ec57 6b10 	vmov	r6, r7, d0
 8004086:	2200      	movs	r2, #0
 8004088:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800408c:	4630      	mov	r0, r6
 800408e:	4639      	mov	r1, r7
 8004090:	f7fc f8ee 	bl	8000270 <__aeabi_dmul>
 8004094:	ec41 0b10 	vmov	d0, r0, r1
 8004098:	f000 fb3a 	bl	8004710 <floor>
 800409c:	4b75      	ldr	r3, [pc, #468]	@ (8004274 <__kernel_rem_pio2+0x314>)
 800409e:	ec51 0b10 	vmov	r0, r1, d0
 80040a2:	2200      	movs	r2, #0
 80040a4:	f7fc f8e4 	bl	8000270 <__aeabi_dmul>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4630      	mov	r0, r6
 80040ae:	4639      	mov	r1, r7
 80040b0:	f7fc fa0c 	bl	80004cc <__aeabi_dsub>
 80040b4:	460f      	mov	r7, r1
 80040b6:	4606      	mov	r6, r0
 80040b8:	f7fc fc48 	bl	800094c <__aeabi_d2iz>
 80040bc:	9002      	str	r0, [sp, #8]
 80040be:	f7fc fb53 	bl	8000768 <__aeabi_i2d>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4630      	mov	r0, r6
 80040c8:	4639      	mov	r1, r7
 80040ca:	f7fc f9ff 	bl	80004cc <__aeabi_dsub>
 80040ce:	f1bb 0f00 	cmp.w	fp, #0
 80040d2:	4606      	mov	r6, r0
 80040d4:	460f      	mov	r7, r1
 80040d6:	dd6c      	ble.n	80041b2 <__kernel_rem_pio2+0x252>
 80040d8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80040dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80040de:	9d02      	ldr	r5, [sp, #8]
 80040e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040e4:	f1cb 0018 	rsb	r0, fp, #24
 80040e8:	fa43 f200 	asr.w	r2, r3, r0
 80040ec:	4415      	add	r5, r2
 80040ee:	4082      	lsls	r2, r0
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	aa0c      	add	r2, sp, #48	@ 0x30
 80040f4:	9502      	str	r5, [sp, #8]
 80040f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80040fa:	f1cb 0217 	rsb	r2, fp, #23
 80040fe:	fa43 f902 	asr.w	r9, r3, r2
 8004102:	f1b9 0f00 	cmp.w	r9, #0
 8004106:	dd64      	ble.n	80041d2 <__kernel_rem_pio2+0x272>
 8004108:	9b02      	ldr	r3, [sp, #8]
 800410a:	2200      	movs	r2, #0
 800410c:	3301      	adds	r3, #1
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	4615      	mov	r5, r2
 8004112:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004116:	4590      	cmp	r8, r2
 8004118:	f300 80b8 	bgt.w	800428c <__kernel_rem_pio2+0x32c>
 800411c:	f1bb 0f00 	cmp.w	fp, #0
 8004120:	dd07      	ble.n	8004132 <__kernel_rem_pio2+0x1d2>
 8004122:	f1bb 0f01 	cmp.w	fp, #1
 8004126:	f000 80bf 	beq.w	80042a8 <__kernel_rem_pio2+0x348>
 800412a:	f1bb 0f02 	cmp.w	fp, #2
 800412e:	f000 80c6 	beq.w	80042be <__kernel_rem_pio2+0x35e>
 8004132:	f1b9 0f02 	cmp.w	r9, #2
 8004136:	d14c      	bne.n	80041d2 <__kernel_rem_pio2+0x272>
 8004138:	4632      	mov	r2, r6
 800413a:	463b      	mov	r3, r7
 800413c:	494e      	ldr	r1, [pc, #312]	@ (8004278 <__kernel_rem_pio2+0x318>)
 800413e:	2000      	movs	r0, #0
 8004140:	f7fc f9c4 	bl	80004cc <__aeabi_dsub>
 8004144:	4606      	mov	r6, r0
 8004146:	460f      	mov	r7, r1
 8004148:	2d00      	cmp	r5, #0
 800414a:	d042      	beq.n	80041d2 <__kernel_rem_pio2+0x272>
 800414c:	4658      	mov	r0, fp
 800414e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004268 <__kernel_rem_pio2+0x308>
 8004152:	f000 fa5d 	bl	8004610 <scalbn>
 8004156:	4630      	mov	r0, r6
 8004158:	4639      	mov	r1, r7
 800415a:	ec53 2b10 	vmov	r2, r3, d0
 800415e:	f7fc f9b5 	bl	80004cc <__aeabi_dsub>
 8004162:	4606      	mov	r6, r0
 8004164:	460f      	mov	r7, r1
 8004166:	e034      	b.n	80041d2 <__kernel_rem_pio2+0x272>
 8004168:	4b44      	ldr	r3, [pc, #272]	@ (800427c <__kernel_rem_pio2+0x31c>)
 800416a:	2200      	movs	r2, #0
 800416c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004170:	f7fc f87e 	bl	8000270 <__aeabi_dmul>
 8004174:	f7fc fbea 	bl	800094c <__aeabi_d2iz>
 8004178:	f7fc faf6 	bl	8000768 <__aeabi_i2d>
 800417c:	4b40      	ldr	r3, [pc, #256]	@ (8004280 <__kernel_rem_pio2+0x320>)
 800417e:	2200      	movs	r2, #0
 8004180:	4606      	mov	r6, r0
 8004182:	460f      	mov	r7, r1
 8004184:	f7fc f874 	bl	8000270 <__aeabi_dmul>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004190:	f7fc f99c 	bl	80004cc <__aeabi_dsub>
 8004194:	f7fc fbda 	bl	800094c <__aeabi_d2iz>
 8004198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800419c:	f849 0b04 	str.w	r0, [r9], #4
 80041a0:	4639      	mov	r1, r7
 80041a2:	4630      	mov	r0, r6
 80041a4:	f7fc f994 	bl	80004d0 <__adddf3>
 80041a8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80041ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041b0:	e75d      	b.n	800406e <__kernel_rem_pio2+0x10e>
 80041b2:	d107      	bne.n	80041c4 <__kernel_rem_pio2+0x264>
 80041b4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80041b8:	aa0c      	add	r2, sp, #48	@ 0x30
 80041ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041be:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80041c2:	e79e      	b.n	8004102 <__kernel_rem_pio2+0x1a2>
 80041c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004284 <__kernel_rem_pio2+0x324>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	f7fc fbac 	bl	8000924 <__aeabi_dcmpge>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d143      	bne.n	8004258 <__kernel_rem_pio2+0x2f8>
 80041d0:	4681      	mov	r9, r0
 80041d2:	2200      	movs	r2, #0
 80041d4:	2300      	movs	r3, #0
 80041d6:	4630      	mov	r0, r6
 80041d8:	4639      	mov	r1, r7
 80041da:	f7fc fb85 	bl	80008e8 <__aeabi_dcmpeq>
 80041de:	2800      	cmp	r0, #0
 80041e0:	f000 80bf 	beq.w	8004362 <__kernel_rem_pio2+0x402>
 80041e4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80041e8:	2200      	movs	r2, #0
 80041ea:	9900      	ldr	r1, [sp, #0]
 80041ec:	428b      	cmp	r3, r1
 80041ee:	da6e      	bge.n	80042ce <__kernel_rem_pio2+0x36e>
 80041f0:	2a00      	cmp	r2, #0
 80041f2:	f000 8089 	beq.w	8004308 <__kernel_rem_pio2+0x3a8>
 80041f6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80041fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80041fc:	f1ab 0b18 	sub.w	fp, fp, #24
 8004200:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f6      	beq.n	80041f6 <__kernel_rem_pio2+0x296>
 8004208:	4658      	mov	r0, fp
 800420a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004268 <__kernel_rem_pio2+0x308>
 800420e:	f000 f9ff 	bl	8004610 <scalbn>
 8004212:	f108 0301 	add.w	r3, r8, #1
 8004216:	00da      	lsls	r2, r3, #3
 8004218:	9205      	str	r2, [sp, #20]
 800421a:	ec55 4b10 	vmov	r4, r5, d0
 800421e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004220:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800427c <__kernel_rem_pio2+0x31c>
 8004224:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004228:	4646      	mov	r6, r8
 800422a:	f04f 0a00 	mov.w	sl, #0
 800422e:	2e00      	cmp	r6, #0
 8004230:	f280 80cf 	bge.w	80043d2 <__kernel_rem_pio2+0x472>
 8004234:	4644      	mov	r4, r8
 8004236:	2c00      	cmp	r4, #0
 8004238:	f2c0 80fd 	blt.w	8004436 <__kernel_rem_pio2+0x4d6>
 800423c:	4b12      	ldr	r3, [pc, #72]	@ (8004288 <__kernel_rem_pio2+0x328>)
 800423e:	461f      	mov	r7, r3
 8004240:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004242:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004246:	9306      	str	r3, [sp, #24]
 8004248:	f04f 0a00 	mov.w	sl, #0
 800424c:	f04f 0b00 	mov.w	fp, #0
 8004250:	2600      	movs	r6, #0
 8004252:	eba8 0504 	sub.w	r5, r8, r4
 8004256:	e0e2      	b.n	800441e <__kernel_rem_pio2+0x4be>
 8004258:	f04f 0902 	mov.w	r9, #2
 800425c:	e754      	b.n	8004108 <__kernel_rem_pio2+0x1a8>
 800425e:	bf00      	nop
	...
 800426c:	3ff00000 	.word	0x3ff00000
 8004270:	08004a90 	.word	0x08004a90
 8004274:	40200000 	.word	0x40200000
 8004278:	3ff00000 	.word	0x3ff00000
 800427c:	3e700000 	.word	0x3e700000
 8004280:	41700000 	.word	0x41700000
 8004284:	3fe00000 	.word	0x3fe00000
 8004288:	08004a50 	.word	0x08004a50
 800428c:	f854 3b04 	ldr.w	r3, [r4], #4
 8004290:	b945      	cbnz	r5, 80042a4 <__kernel_rem_pio2+0x344>
 8004292:	b123      	cbz	r3, 800429e <__kernel_rem_pio2+0x33e>
 8004294:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004298:	f844 3c04 	str.w	r3, [r4, #-4]
 800429c:	2301      	movs	r3, #1
 800429e:	3201      	adds	r2, #1
 80042a0:	461d      	mov	r5, r3
 80042a2:	e738      	b.n	8004116 <__kernel_rem_pio2+0x1b6>
 80042a4:	1acb      	subs	r3, r1, r3
 80042a6:	e7f7      	b.n	8004298 <__kernel_rem_pio2+0x338>
 80042a8:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80042ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80042ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80042b6:	a90c      	add	r1, sp, #48	@ 0x30
 80042b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80042bc:	e739      	b.n	8004132 <__kernel_rem_pio2+0x1d2>
 80042be:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80042c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80042c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80042cc:	e7f3      	b.n	80042b6 <__kernel_rem_pio2+0x356>
 80042ce:	a90c      	add	r1, sp, #48	@ 0x30
 80042d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	430a      	orrs	r2, r1
 80042d8:	e787      	b.n	80041ea <__kernel_rem_pio2+0x28a>
 80042da:	3401      	adds	r4, #1
 80042dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	d0fa      	beq.n	80042da <__kernel_rem_pio2+0x37a>
 80042e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80042ea:	eb0d 0503 	add.w	r5, sp, r3
 80042ee:	9b06      	ldr	r3, [sp, #24]
 80042f0:	aa20      	add	r2, sp, #128	@ 0x80
 80042f2:	4443      	add	r3, r8
 80042f4:	f108 0701 	add.w	r7, r8, #1
 80042f8:	3d98      	subs	r5, #152	@ 0x98
 80042fa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80042fe:	4444      	add	r4, r8
 8004300:	42bc      	cmp	r4, r7
 8004302:	da04      	bge.n	800430e <__kernel_rem_pio2+0x3ae>
 8004304:	46a0      	mov	r8, r4
 8004306:	e6a2      	b.n	800404e <__kernel_rem_pio2+0xee>
 8004308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800430a:	2401      	movs	r4, #1
 800430c:	e7e6      	b.n	80042dc <__kernel_rem_pio2+0x37c>
 800430e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004310:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004314:	f7fc fa28 	bl	8000768 <__aeabi_i2d>
 8004318:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80045e0 <__kernel_rem_pio2+0x680>
 800431c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004320:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004328:	46b2      	mov	sl, r6
 800432a:	f04f 0800 	mov.w	r8, #0
 800432e:	9b05      	ldr	r3, [sp, #20]
 8004330:	4598      	cmp	r8, r3
 8004332:	dd05      	ble.n	8004340 <__kernel_rem_pio2+0x3e0>
 8004334:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004338:	3701      	adds	r7, #1
 800433a:	eca5 7b02 	vstmia	r5!, {d7}
 800433e:	e7df      	b.n	8004300 <__kernel_rem_pio2+0x3a0>
 8004340:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004344:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004348:	f7fb ff92 	bl	8000270 <__aeabi_dmul>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004354:	f7fc f8bc 	bl	80004d0 <__adddf3>
 8004358:	f108 0801 	add.w	r8, r8, #1
 800435c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004360:	e7e5      	b.n	800432e <__kernel_rem_pio2+0x3ce>
 8004362:	f1cb 0000 	rsb	r0, fp, #0
 8004366:	ec47 6b10 	vmov	d0, r6, r7
 800436a:	f000 f951 	bl	8004610 <scalbn>
 800436e:	ec55 4b10 	vmov	r4, r5, d0
 8004372:	4b9d      	ldr	r3, [pc, #628]	@ (80045e8 <__kernel_rem_pio2+0x688>)
 8004374:	2200      	movs	r2, #0
 8004376:	4620      	mov	r0, r4
 8004378:	4629      	mov	r1, r5
 800437a:	f7fc fad3 	bl	8000924 <__aeabi_dcmpge>
 800437e:	b300      	cbz	r0, 80043c2 <__kernel_rem_pio2+0x462>
 8004380:	4b9a      	ldr	r3, [pc, #616]	@ (80045ec <__kernel_rem_pio2+0x68c>)
 8004382:	2200      	movs	r2, #0
 8004384:	4620      	mov	r0, r4
 8004386:	4629      	mov	r1, r5
 8004388:	f7fb ff72 	bl	8000270 <__aeabi_dmul>
 800438c:	f7fc fade 	bl	800094c <__aeabi_d2iz>
 8004390:	4606      	mov	r6, r0
 8004392:	f7fc f9e9 	bl	8000768 <__aeabi_i2d>
 8004396:	4b94      	ldr	r3, [pc, #592]	@ (80045e8 <__kernel_rem_pio2+0x688>)
 8004398:	2200      	movs	r2, #0
 800439a:	f7fb ff69 	bl	8000270 <__aeabi_dmul>
 800439e:	460b      	mov	r3, r1
 80043a0:	4602      	mov	r2, r0
 80043a2:	4629      	mov	r1, r5
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7fc f891 	bl	80004cc <__aeabi_dsub>
 80043aa:	f7fc facf 	bl	800094c <__aeabi_d2iz>
 80043ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80043b0:	f10b 0b18 	add.w	fp, fp, #24
 80043b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80043b8:	f108 0801 	add.w	r8, r8, #1
 80043bc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80043c0:	e722      	b.n	8004208 <__kernel_rem_pio2+0x2a8>
 80043c2:	4620      	mov	r0, r4
 80043c4:	4629      	mov	r1, r5
 80043c6:	f7fc fac1 	bl	800094c <__aeabi_d2iz>
 80043ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80043cc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80043d0:	e71a      	b.n	8004208 <__kernel_rem_pio2+0x2a8>
 80043d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80043d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80043d8:	f7fc f9c6 	bl	8000768 <__aeabi_i2d>
 80043dc:	4622      	mov	r2, r4
 80043de:	462b      	mov	r3, r5
 80043e0:	f7fb ff46 	bl	8000270 <__aeabi_dmul>
 80043e4:	4652      	mov	r2, sl
 80043e6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80043ea:	465b      	mov	r3, fp
 80043ec:	4620      	mov	r0, r4
 80043ee:	4629      	mov	r1, r5
 80043f0:	f7fb ff3e 	bl	8000270 <__aeabi_dmul>
 80043f4:	3e01      	subs	r6, #1
 80043f6:	4604      	mov	r4, r0
 80043f8:	460d      	mov	r5, r1
 80043fa:	e718      	b.n	800422e <__kernel_rem_pio2+0x2ce>
 80043fc:	9906      	ldr	r1, [sp, #24]
 80043fe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004402:	9106      	str	r1, [sp, #24]
 8004404:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004408:	f7fb ff32 	bl	8000270 <__aeabi_dmul>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4650      	mov	r0, sl
 8004412:	4659      	mov	r1, fp
 8004414:	f7fc f85c 	bl	80004d0 <__adddf3>
 8004418:	3601      	adds	r6, #1
 800441a:	4682      	mov	sl, r0
 800441c:	468b      	mov	fp, r1
 800441e:	9b00      	ldr	r3, [sp, #0]
 8004420:	429e      	cmp	r6, r3
 8004422:	dc01      	bgt.n	8004428 <__kernel_rem_pio2+0x4c8>
 8004424:	42b5      	cmp	r5, r6
 8004426:	dae9      	bge.n	80043fc <__kernel_rem_pio2+0x49c>
 8004428:	ab48      	add	r3, sp, #288	@ 0x120
 800442a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800442e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004432:	3c01      	subs	r4, #1
 8004434:	e6ff      	b.n	8004236 <__kernel_rem_pio2+0x2d6>
 8004436:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004438:	2b02      	cmp	r3, #2
 800443a:	dc0b      	bgt.n	8004454 <__kernel_rem_pio2+0x4f4>
 800443c:	2b00      	cmp	r3, #0
 800443e:	dc39      	bgt.n	80044b4 <__kernel_rem_pio2+0x554>
 8004440:	d05d      	beq.n	80044fe <__kernel_rem_pio2+0x59e>
 8004442:	9b02      	ldr	r3, [sp, #8]
 8004444:	f003 0007 	and.w	r0, r3, #7
 8004448:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800444c:	ecbd 8b02 	vpop	{d8}
 8004450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004454:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004456:	2b03      	cmp	r3, #3
 8004458:	d1f3      	bne.n	8004442 <__kernel_rem_pio2+0x4e2>
 800445a:	9b05      	ldr	r3, [sp, #20]
 800445c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004460:	eb0d 0403 	add.w	r4, sp, r3
 8004464:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004468:	4625      	mov	r5, r4
 800446a:	46c2      	mov	sl, r8
 800446c:	f1ba 0f00 	cmp.w	sl, #0
 8004470:	f1a5 0508 	sub.w	r5, r5, #8
 8004474:	dc6b      	bgt.n	800454e <__kernel_rem_pio2+0x5ee>
 8004476:	4645      	mov	r5, r8
 8004478:	2d01      	cmp	r5, #1
 800447a:	f1a4 0408 	sub.w	r4, r4, #8
 800447e:	f300 8087 	bgt.w	8004590 <__kernel_rem_pio2+0x630>
 8004482:	9c05      	ldr	r4, [sp, #20]
 8004484:	ab48      	add	r3, sp, #288	@ 0x120
 8004486:	441c      	add	r4, r3
 8004488:	2000      	movs	r0, #0
 800448a:	2100      	movs	r1, #0
 800448c:	f1b8 0f01 	cmp.w	r8, #1
 8004490:	f300 809c 	bgt.w	80045cc <__kernel_rem_pio2+0x66c>
 8004494:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004498:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800449c:	f1b9 0f00 	cmp.w	r9, #0
 80044a0:	f040 80a6 	bne.w	80045f0 <__kernel_rem_pio2+0x690>
 80044a4:	9b04      	ldr	r3, [sp, #16]
 80044a6:	e9c3 7800 	strd	r7, r8, [r3]
 80044aa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80044ae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80044b2:	e7c6      	b.n	8004442 <__kernel_rem_pio2+0x4e2>
 80044b4:	9d05      	ldr	r5, [sp, #20]
 80044b6:	ab48      	add	r3, sp, #288	@ 0x120
 80044b8:	441d      	add	r5, r3
 80044ba:	4644      	mov	r4, r8
 80044bc:	2000      	movs	r0, #0
 80044be:	2100      	movs	r1, #0
 80044c0:	2c00      	cmp	r4, #0
 80044c2:	da35      	bge.n	8004530 <__kernel_rem_pio2+0x5d0>
 80044c4:	f1b9 0f00 	cmp.w	r9, #0
 80044c8:	d038      	beq.n	800453c <__kernel_rem_pio2+0x5dc>
 80044ca:	4602      	mov	r2, r0
 80044cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044d0:	9c04      	ldr	r4, [sp, #16]
 80044d2:	e9c4 2300 	strd	r2, r3, [r4]
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80044de:	f7fb fff5 	bl	80004cc <__aeabi_dsub>
 80044e2:	ad4a      	add	r5, sp, #296	@ 0x128
 80044e4:	2401      	movs	r4, #1
 80044e6:	45a0      	cmp	r8, r4
 80044e8:	da2b      	bge.n	8004542 <__kernel_rem_pio2+0x5e2>
 80044ea:	f1b9 0f00 	cmp.w	r9, #0
 80044ee:	d002      	beq.n	80044f6 <__kernel_rem_pio2+0x596>
 80044f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044f4:	4619      	mov	r1, r3
 80044f6:	9b04      	ldr	r3, [sp, #16]
 80044f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80044fc:	e7a1      	b.n	8004442 <__kernel_rem_pio2+0x4e2>
 80044fe:	9c05      	ldr	r4, [sp, #20]
 8004500:	ab48      	add	r3, sp, #288	@ 0x120
 8004502:	441c      	add	r4, r3
 8004504:	2000      	movs	r0, #0
 8004506:	2100      	movs	r1, #0
 8004508:	f1b8 0f00 	cmp.w	r8, #0
 800450c:	da09      	bge.n	8004522 <__kernel_rem_pio2+0x5c2>
 800450e:	f1b9 0f00 	cmp.w	r9, #0
 8004512:	d002      	beq.n	800451a <__kernel_rem_pio2+0x5ba>
 8004514:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004518:	4619      	mov	r1, r3
 800451a:	9b04      	ldr	r3, [sp, #16]
 800451c:	e9c3 0100 	strd	r0, r1, [r3]
 8004520:	e78f      	b.n	8004442 <__kernel_rem_pio2+0x4e2>
 8004522:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004526:	f7fb ffd3 	bl	80004d0 <__adddf3>
 800452a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800452e:	e7eb      	b.n	8004508 <__kernel_rem_pio2+0x5a8>
 8004530:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004534:	f7fb ffcc 	bl	80004d0 <__adddf3>
 8004538:	3c01      	subs	r4, #1
 800453a:	e7c1      	b.n	80044c0 <__kernel_rem_pio2+0x560>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	e7c6      	b.n	80044d0 <__kernel_rem_pio2+0x570>
 8004542:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004546:	f7fb ffc3 	bl	80004d0 <__adddf3>
 800454a:	3401      	adds	r4, #1
 800454c:	e7cb      	b.n	80044e6 <__kernel_rem_pio2+0x586>
 800454e:	ed95 7b00 	vldr	d7, [r5]
 8004552:	ed8d 7b00 	vstr	d7, [sp]
 8004556:	ed95 7b02 	vldr	d7, [r5, #8]
 800455a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800455e:	ec53 2b17 	vmov	r2, r3, d7
 8004562:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004566:	f7fb ffb3 	bl	80004d0 <__adddf3>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4606      	mov	r6, r0
 8004570:	460f      	mov	r7, r1
 8004572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004576:	f7fb ffa9 	bl	80004cc <__aeabi_dsub>
 800457a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800457e:	f7fb ffa7 	bl	80004d0 <__adddf3>
 8004582:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004586:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800458a:	e9c5 6700 	strd	r6, r7, [r5]
 800458e:	e76d      	b.n	800446c <__kernel_rem_pio2+0x50c>
 8004590:	ed94 7b00 	vldr	d7, [r4]
 8004594:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004598:	ec51 0b17 	vmov	r0, r1, d7
 800459c:	4652      	mov	r2, sl
 800459e:	465b      	mov	r3, fp
 80045a0:	ed8d 7b00 	vstr	d7, [sp]
 80045a4:	f7fb ff94 	bl	80004d0 <__adddf3>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4606      	mov	r6, r0
 80045ae:	460f      	mov	r7, r1
 80045b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045b4:	f7fb ff8a 	bl	80004cc <__aeabi_dsub>
 80045b8:	4652      	mov	r2, sl
 80045ba:	465b      	mov	r3, fp
 80045bc:	f7fb ff88 	bl	80004d0 <__adddf3>
 80045c0:	3d01      	subs	r5, #1
 80045c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045c6:	e9c4 6700 	strd	r6, r7, [r4]
 80045ca:	e755      	b.n	8004478 <__kernel_rem_pio2+0x518>
 80045cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80045d0:	f7fb ff7e 	bl	80004d0 <__adddf3>
 80045d4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80045d8:	e758      	b.n	800448c <__kernel_rem_pio2+0x52c>
 80045da:	bf00      	nop
 80045dc:	f3af 8000 	nop.w
	...
 80045e8:	41700000 	.word	0x41700000
 80045ec:	3e700000 	.word	0x3e700000
 80045f0:	9b04      	ldr	r3, [sp, #16]
 80045f2:	9a04      	ldr	r2, [sp, #16]
 80045f4:	601f      	str	r7, [r3, #0]
 80045f6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80045fa:	605c      	str	r4, [r3, #4]
 80045fc:	609d      	str	r5, [r3, #8]
 80045fe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004602:	60d3      	str	r3, [r2, #12]
 8004604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004608:	6110      	str	r0, [r2, #16]
 800460a:	6153      	str	r3, [r2, #20]
 800460c:	e719      	b.n	8004442 <__kernel_rem_pio2+0x4e2>
 800460e:	bf00      	nop

08004610 <scalbn>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	ec55 4b10 	vmov	r4, r5, d0
 8004616:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800461a:	4606      	mov	r6, r0
 800461c:	462b      	mov	r3, r5
 800461e:	b991      	cbnz	r1, 8004646 <scalbn+0x36>
 8004620:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004624:	4323      	orrs	r3, r4
 8004626:	d03d      	beq.n	80046a4 <scalbn+0x94>
 8004628:	4b35      	ldr	r3, [pc, #212]	@ (8004700 <scalbn+0xf0>)
 800462a:	4620      	mov	r0, r4
 800462c:	4629      	mov	r1, r5
 800462e:	2200      	movs	r2, #0
 8004630:	f7fb fe1e 	bl	8000270 <__aeabi_dmul>
 8004634:	4b33      	ldr	r3, [pc, #204]	@ (8004704 <scalbn+0xf4>)
 8004636:	429e      	cmp	r6, r3
 8004638:	4604      	mov	r4, r0
 800463a:	460d      	mov	r5, r1
 800463c:	da0f      	bge.n	800465e <scalbn+0x4e>
 800463e:	a328      	add	r3, pc, #160	@ (adr r3, 80046e0 <scalbn+0xd0>)
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	e01e      	b.n	8004684 <scalbn+0x74>
 8004646:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800464a:	4291      	cmp	r1, r2
 800464c:	d10b      	bne.n	8004666 <scalbn+0x56>
 800464e:	4622      	mov	r2, r4
 8004650:	4620      	mov	r0, r4
 8004652:	4629      	mov	r1, r5
 8004654:	f7fb ff3c 	bl	80004d0 <__adddf3>
 8004658:	4604      	mov	r4, r0
 800465a:	460d      	mov	r5, r1
 800465c:	e022      	b.n	80046a4 <scalbn+0x94>
 800465e:	460b      	mov	r3, r1
 8004660:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004664:	3936      	subs	r1, #54	@ 0x36
 8004666:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800466a:	4296      	cmp	r6, r2
 800466c:	dd0d      	ble.n	800468a <scalbn+0x7a>
 800466e:	2d00      	cmp	r5, #0
 8004670:	a11d      	add	r1, pc, #116	@ (adr r1, 80046e8 <scalbn+0xd8>)
 8004672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004676:	da02      	bge.n	800467e <scalbn+0x6e>
 8004678:	a11d      	add	r1, pc, #116	@ (adr r1, 80046f0 <scalbn+0xe0>)
 800467a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800467e:	a31a      	add	r3, pc, #104	@ (adr r3, 80046e8 <scalbn+0xd8>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fb fdf4 	bl	8000270 <__aeabi_dmul>
 8004688:	e7e6      	b.n	8004658 <scalbn+0x48>
 800468a:	1872      	adds	r2, r6, r1
 800468c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004690:	428a      	cmp	r2, r1
 8004692:	dcec      	bgt.n	800466e <scalbn+0x5e>
 8004694:	2a00      	cmp	r2, #0
 8004696:	dd08      	ble.n	80046aa <scalbn+0x9a>
 8004698:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800469c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80046a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80046a4:	ec45 4b10 	vmov	d0, r4, r5
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
 80046aa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80046ae:	da08      	bge.n	80046c2 <scalbn+0xb2>
 80046b0:	2d00      	cmp	r5, #0
 80046b2:	a10b      	add	r1, pc, #44	@ (adr r1, 80046e0 <scalbn+0xd0>)
 80046b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046b8:	dac1      	bge.n	800463e <scalbn+0x2e>
 80046ba:	a10f      	add	r1, pc, #60	@ (adr r1, 80046f8 <scalbn+0xe8>)
 80046bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046c0:	e7bd      	b.n	800463e <scalbn+0x2e>
 80046c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80046c6:	3236      	adds	r2, #54	@ 0x36
 80046c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80046cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80046d0:	4620      	mov	r0, r4
 80046d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004708 <scalbn+0xf8>)
 80046d4:	4629      	mov	r1, r5
 80046d6:	2200      	movs	r2, #0
 80046d8:	e7d4      	b.n	8004684 <scalbn+0x74>
 80046da:	bf00      	nop
 80046dc:	f3af 8000 	nop.w
 80046e0:	c2f8f359 	.word	0xc2f8f359
 80046e4:	01a56e1f 	.word	0x01a56e1f
 80046e8:	8800759c 	.word	0x8800759c
 80046ec:	7e37e43c 	.word	0x7e37e43c
 80046f0:	8800759c 	.word	0x8800759c
 80046f4:	fe37e43c 	.word	0xfe37e43c
 80046f8:	c2f8f359 	.word	0xc2f8f359
 80046fc:	81a56e1f 	.word	0x81a56e1f
 8004700:	43500000 	.word	0x43500000
 8004704:	ffff3cb0 	.word	0xffff3cb0
 8004708:	3c900000 	.word	0x3c900000
 800470c:	00000000 	.word	0x00000000

08004710 <floor>:
 8004710:	ec51 0b10 	vmov	r0, r1, d0
 8004714:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800471c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004720:	2e13      	cmp	r6, #19
 8004722:	460c      	mov	r4, r1
 8004724:	4605      	mov	r5, r0
 8004726:	4680      	mov	r8, r0
 8004728:	dc34      	bgt.n	8004794 <floor+0x84>
 800472a:	2e00      	cmp	r6, #0
 800472c:	da17      	bge.n	800475e <floor+0x4e>
 800472e:	a332      	add	r3, pc, #200	@ (adr r3, 80047f8 <floor+0xe8>)
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f7fb fecc 	bl	80004d0 <__adddf3>
 8004738:	2200      	movs	r2, #0
 800473a:	2300      	movs	r3, #0
 800473c:	f7fc f8fc 	bl	8000938 <__aeabi_dcmpgt>
 8004740:	b150      	cbz	r0, 8004758 <floor+0x48>
 8004742:	2c00      	cmp	r4, #0
 8004744:	da55      	bge.n	80047f2 <floor+0xe2>
 8004746:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800474a:	432c      	orrs	r4, r5
 800474c:	2500      	movs	r5, #0
 800474e:	42ac      	cmp	r4, r5
 8004750:	4c2b      	ldr	r4, [pc, #172]	@ (8004800 <floor+0xf0>)
 8004752:	bf08      	it	eq
 8004754:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004758:	4621      	mov	r1, r4
 800475a:	4628      	mov	r0, r5
 800475c:	e023      	b.n	80047a6 <floor+0x96>
 800475e:	4f29      	ldr	r7, [pc, #164]	@ (8004804 <floor+0xf4>)
 8004760:	4137      	asrs	r7, r6
 8004762:	ea01 0307 	and.w	r3, r1, r7
 8004766:	4303      	orrs	r3, r0
 8004768:	d01d      	beq.n	80047a6 <floor+0x96>
 800476a:	a323      	add	r3, pc, #140	@ (adr r3, 80047f8 <floor+0xe8>)
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f7fb feae 	bl	80004d0 <__adddf3>
 8004774:	2200      	movs	r2, #0
 8004776:	2300      	movs	r3, #0
 8004778:	f7fc f8de 	bl	8000938 <__aeabi_dcmpgt>
 800477c:	2800      	cmp	r0, #0
 800477e:	d0eb      	beq.n	8004758 <floor+0x48>
 8004780:	2c00      	cmp	r4, #0
 8004782:	bfbe      	ittt	lt
 8004784:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004788:	4133      	asrlt	r3, r6
 800478a:	18e4      	addlt	r4, r4, r3
 800478c:	ea24 0407 	bic.w	r4, r4, r7
 8004790:	2500      	movs	r5, #0
 8004792:	e7e1      	b.n	8004758 <floor+0x48>
 8004794:	2e33      	cmp	r6, #51	@ 0x33
 8004796:	dd0a      	ble.n	80047ae <floor+0x9e>
 8004798:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800479c:	d103      	bne.n	80047a6 <floor+0x96>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	f7fb fe95 	bl	80004d0 <__adddf3>
 80047a6:	ec41 0b10 	vmov	d0, r0, r1
 80047aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80047b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80047b6:	40df      	lsrs	r7, r3
 80047b8:	4207      	tst	r7, r0
 80047ba:	d0f4      	beq.n	80047a6 <floor+0x96>
 80047bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80047f8 <floor+0xe8>)
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f7fb fe85 	bl	80004d0 <__adddf3>
 80047c6:	2200      	movs	r2, #0
 80047c8:	2300      	movs	r3, #0
 80047ca:	f7fc f8b5 	bl	8000938 <__aeabi_dcmpgt>
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d0c2      	beq.n	8004758 <floor+0x48>
 80047d2:	2c00      	cmp	r4, #0
 80047d4:	da0a      	bge.n	80047ec <floor+0xdc>
 80047d6:	2e14      	cmp	r6, #20
 80047d8:	d101      	bne.n	80047de <floor+0xce>
 80047da:	3401      	adds	r4, #1
 80047dc:	e006      	b.n	80047ec <floor+0xdc>
 80047de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80047e2:	2301      	movs	r3, #1
 80047e4:	40b3      	lsls	r3, r6
 80047e6:	441d      	add	r5, r3
 80047e8:	4545      	cmp	r5, r8
 80047ea:	d3f6      	bcc.n	80047da <floor+0xca>
 80047ec:	ea25 0507 	bic.w	r5, r5, r7
 80047f0:	e7b2      	b.n	8004758 <floor+0x48>
 80047f2:	2500      	movs	r5, #0
 80047f4:	462c      	mov	r4, r5
 80047f6:	e7af      	b.n	8004758 <floor+0x48>
 80047f8:	8800759c 	.word	0x8800759c
 80047fc:	7e37e43c 	.word	0x7e37e43c
 8004800:	bff00000 	.word	0xbff00000
 8004804:	000fffff 	.word	0x000fffff

08004808 <_init>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr

08004814 <_fini>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	bf00      	nop
 8004818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481a:	bc08      	pop	{r3}
 800481c:	469e      	mov	lr, r3
 800481e:	4770      	bx	lr
