
stm32world_dac1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  08003114  08003114  00004114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b4  080039b4  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  080039b4  080039b4  000049b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039bc  080039bc  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039bc  080039bc  000049bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039c0  080039c0  000049c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080039c4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005070  2**0
                  CONTENTS
 10 .bss          00000388  20000070  20000070  00005070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003f8  200003f8  00005070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c49  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a2  00000000  00000000  00019ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00009069  00000000  00000000  0001c58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e60  00000000  00000000  000255f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ac7  00000000  00000000  00026458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020abb  00000000  00000000  00026f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014fae  00000000  00000000  000479da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5a46  00000000  00000000  0005c988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000b8  00000000  00000000  001223ce  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002d34  00000000  00000000  00122488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  001251bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    000000fa  00000000  00000000  00125211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00000010  00000000  00000000  0012530b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080030fc 	.word	0x080030fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080030fc 	.word	0x080030fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <do_dac>:
        ++cb_cnt;
    }

}

static inline void do_dac(uint16_t *buffer) {
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	4606      	mov	r6, r0
    for (int i = 0; i < DMA_BUFFER_SIZE; ++i) {
 8000564:	2400      	movs	r4, #0
 8000566:	e000      	b.n	800056a <do_dac+0xa>
 8000568:	3401      	adds	r4, #1
 800056a:	2c3f      	cmp	r4, #63	@ 0x3f
 800056c:	dc2a      	bgt.n	80005c4 <do_dac+0x64>
        buffer[i] = OUTPUT_MID - (amplifier * (OUTPUT_MID * arm_cos_f32(angle)));
 800056e:	4d16      	ldr	r5, [pc, #88]	@ (80005c8 <do_dac+0x68>)
 8000570:	ed95 0a00 	vldr	s0, [r5]
 8000574:	f001 fdea 	bl	800214c <arm_cos_f32>
 8000578:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80005cc <do_dac+0x6c>
 800057c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <do_dac+0x70>)
 8000582:	ed93 7a00 	vldr	s14, [r3]
 8000586:	ee20 0a07 	vmul.f32	s0, s0, s14
 800058a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800058e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000592:	ee17 3a90 	vmov	r3, s15
 8000596:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
        angle += angle_change;
 800059a:	edd5 7a00 	vldr	s15, [r5]
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <do_dac+0x74>)
 80005a0:	ed93 7a00 	vldr	s14, [r3]
 80005a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005a8:	edc5 7a00 	vstr	s15, [r5]
        if (angle >= two_pi) {
 80005ac:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80005d8 <do_dac+0x78>
 80005b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b8:	dbd6      	blt.n	8000568 <do_dac+0x8>
            angle -= two_pi;
 80005ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005be:	edc5 7a00 	vstr	s15, [r5]
 80005c2:	e7d1      	b.n	8000568 <do_dac+0x8>
        }
    }
}
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
 80005c6:	bf00      	nop
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	45000000 	.word	0x45000000
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004
 80005d8:	40c90fdb 	.word	0x40c90fdb

080005dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	b08b      	sub	sp, #44	@ 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005e0:	2400      	movs	r4, #0
 80005e2:	9405      	str	r4, [sp, #20]
 80005e4:	9406      	str	r4, [sp, #24]
 80005e6:	9407      	str	r4, [sp, #28]
 80005e8:	9408      	str	r4, [sp, #32]
 80005ea:	9409      	str	r4, [sp, #36]	@ 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	9401      	str	r4, [sp, #4]
 80005ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f2:	f042 0204 	orr.w	r2, r2, #4
 80005f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005fa:	f002 0204 	and.w	r2, r2, #4
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	9402      	str	r4, [sp, #8]
 8000604:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000606:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800060a:	631a      	str	r2, [r3, #48]	@ 0x30
 800060c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800060e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000612:	9202      	str	r2, [sp, #8]
 8000614:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	9403      	str	r4, [sp, #12]
 8000618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800061a:	f042 0201 	orr.w	r2, r2, #1
 800061e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000622:	f002 0201 	and.w	r2, r2, #1
 8000626:	9203      	str	r2, [sp, #12]
 8000628:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	9404      	str	r4, [sp, #16]
 800062c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800062e:	f042 0202 	orr.w	r2, r2, #2
 8000632:	631a      	str	r2, [r3, #48]	@ 0x30
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	9304      	str	r3, [sp, #16]
 800063c:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800063e:	4d0b      	ldr	r5, [pc, #44]	@ (800066c <MX_GPIO_Init+0x90>)
 8000640:	4622      	mov	r2, r4
 8000642:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000646:	4628      	mov	r0, r5
 8000648:	f000 ff84 	bl	8001554 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 800064c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000650:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800065a:	a905      	add	r1, sp, #20
 800065c:	4628      	mov	r0, r5
 800065e:	f000 fe83 	bl	8001368 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000662:	b00b      	add	sp, #44	@ 0x2c
 8000664:	bd30      	pop	{r4, r5, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40020800 	.word	0x40020800

08000670 <MX_DMA_Init>:
{
 8000670:	b500      	push	{lr}
 8000672:	b083      	sub	sp, #12
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000674:	2100      	movs	r1, #0
 8000676:	9101      	str	r1, [sp, #4]
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_DMA_Init+0x30>)
 800067a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800067c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000680:	631a      	str	r2, [r3, #48]	@ 0x30
 8000682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800068c:	460a      	mov	r2, r1
 800068e:	2010      	movs	r0, #16
 8000690:	f000 fb46 	bl	8000d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000694:	2010      	movs	r0, #16
 8000696:	f000 fb53 	bl	8000d40 <HAL_NVIC_EnableIRQ>
}
 800069a:	b003      	add	sp, #12
 800069c:	f85d fb04 	ldr.w	pc, [sp], #4
 80006a0:	40023800 	.word	0x40023800

080006a4 <_write>:
    if (fd == 1 || fd == 2) {
 80006a4:	3801      	subs	r0, #1
 80006a6:	2801      	cmp	r0, #1
 80006a8:	d80a      	bhi.n	80006c0 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 80006aa:	b510      	push	{r4, lr}
 80006ac:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b2:	b292      	uxth	r2, r2
 80006b4:	4805      	ldr	r0, [pc, #20]	@ (80006cc <_write+0x28>)
 80006b6:	f001 fce2 	bl	800207e <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 80006ba:	b920      	cbnz	r0, 80006c6 <_write+0x22>
            return len;
 80006bc:	4620      	mov	r0, r4
}
 80006be:	bd10      	pop	{r4, pc}
    return -1;
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80006c4:	4770      	bx	lr
            return -1;
 80006c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006ca:	e7f8      	b.n	80006be <_write+0x1a>
 80006cc:	200001a0 	.word	0x200001a0

080006d0 <HAL_DAC_ConvCpltCallbackCh1>:
inline void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 80006d0:	b508      	push	{r3, lr}
    ++cb_full;
 80006d2:	4a04      	ldr	r2, [pc, #16]	@ (80006e4 <HAL_DAC_ConvCpltCallbackCh1+0x14>)
 80006d4:	6813      	ldr	r3, [r2, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	6013      	str	r3, [r2, #0]
    do_dac(&dma_buffer[DMA_BUFFER_SIZE]);
 80006da:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 80006dc:	f7ff ff40 	bl	8000560 <do_dac>
}
 80006e0:	bd08      	pop	{r3, pc}
 80006e2:	bf00      	nop
 80006e4:	20000194 	.word	0x20000194
 80006e8:	20000110 	.word	0x20000110

080006ec <HAL_DAC_ConvHalfCpltCallbackCh1>:
inline void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 80006ec:	b508      	push	{r3, lr}
    ++cb_half;
 80006ee:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <HAL_DAC_ConvHalfCpltCallbackCh1+0x14>)
 80006f0:	6813      	ldr	r3, [r2, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	6013      	str	r3, [r2, #0]
    do_dac(&dma_buffer[0]);
 80006f6:	4803      	ldr	r0, [pc, #12]	@ (8000704 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 80006f8:	f7ff ff32 	bl	8000560 <do_dac>
}
 80006fc:	bd08      	pop	{r3, pc}
 80006fe:	bf00      	nop
 8000700:	20000190 	.word	0x20000190
 8000704:	20000090 	.word	0x20000090

08000708 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800070a:	e7fe      	b.n	800070a <Error_Handler+0x2>

0800070c <MX_USART1_UART_Init>:
{
 800070c:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800070e:	480a      	ldr	r0, [pc, #40]	@ (8000738 <MX_USART1_UART_Init+0x2c>)
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_USART1_UART_Init+0x30>)
 8000712:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8000714:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000718:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	2300      	movs	r3, #0
 800071c:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800071e:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000720:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000722:	220c      	movs	r2, #12
 8000724:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800072a:	f001 fc78 	bl	800201e <HAL_UART_Init>
 800072e:	b900      	cbnz	r0, 8000732 <MX_USART1_UART_Init+0x26>
}
 8000730:	bd08      	pop	{r3, pc}
        Error_Handler();
 8000732:	f7ff ffe9 	bl	8000708 <Error_Handler>
 8000736:	bf00      	nop
 8000738:	200001a0 	.word	0x200001a0
 800073c:	40011000 	.word	0x40011000

08000740 <MX_DAC_Init>:
{
 8000740:	b500      	push	{lr}
 8000742:	b083      	sub	sp, #12
    DAC_ChannelConfTypeDef sConfig = { 0 };
 8000744:	2300      	movs	r3, #0
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	9301      	str	r3, [sp, #4]
    hdac.Instance = DAC;
 800074a:	480b      	ldr	r0, [pc, #44]	@ (8000778 <MX_DAC_Init+0x38>)
 800074c:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_DAC_Init+0x3c>)
 800074e:	6003      	str	r3, [r0, #0]
    if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000750:	f000 fb0e 	bl	8000d70 <HAL_DAC_Init>
 8000754:	b958      	cbnz	r0, 800076e <MX_DAC_Init+0x2e>
    sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000756:	2304      	movs	r3, #4
 8000758:	9300      	str	r3, [sp, #0]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800075a:	2200      	movs	r2, #0
 800075c:	9201      	str	r2, [sp, #4]
    if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800075e:	4669      	mov	r1, sp
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_DAC_Init+0x38>)
 8000762:	f000 fba9 	bl	8000eb8 <HAL_DAC_ConfigChannel>
 8000766:	b920      	cbnz	r0, 8000772 <MX_DAC_Init+0x32>
}
 8000768:	b003      	add	sp, #12
 800076a:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 800076e:	f7ff ffcb 	bl	8000708 <Error_Handler>
        Error_Handler();
 8000772:	f7ff ffc9 	bl	8000708 <Error_Handler>
 8000776:	bf00      	nop
 8000778:	20000290 	.word	0x20000290
 800077c:	40007400 	.word	0x40007400

08000780 <MX_TIM6_Init>:
{
 8000780:	b500      	push	{lr}
 8000782:	b083      	sub	sp, #12
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000784:	2300      	movs	r3, #0
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	9301      	str	r3, [sp, #4]
    htim6.Instance = TIM6;
 800078a:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <MX_TIM6_Init+0x44>)
 800078c:	4a0e      	ldr	r2, [pc, #56]	@ (80007c8 <MX_TIM6_Init+0x48>)
 800078e:	6002      	str	r2, [r0, #0]
    htim6.Init.Prescaler = 84 - 1;
 8000790:	2253      	movs	r2, #83	@ 0x53
 8000792:	6042      	str	r2, [r0, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	6083      	str	r3, [r0, #8]
    htim6.Init.Period = 10 - 1;
 8000796:	2209      	movs	r2, #9
 8000798:	60c2      	str	r2, [r0, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800079c:	f001 fad4 	bl	8001d48 <HAL_TIM_Base_Init>
 80007a0:	b958      	cbnz	r0, 80007ba <MX_TIM6_Init+0x3a>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007a2:	2320      	movs	r3, #32
 80007a4:	9300      	str	r3, [sp, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	9301      	str	r3, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007aa:	4669      	mov	r1, sp
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_TIM6_Init+0x44>)
 80007ae:	f001 faf7 	bl	8001da0 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	b920      	cbnz	r0, 80007be <MX_TIM6_Init+0x3e>
}
 80007b4:	b003      	add	sp, #12
 80007b6:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80007ba:	f7ff ffa5 	bl	8000708 <Error_Handler>
        Error_Handler();
 80007be:	f7ff ffa3 	bl	8000708 <Error_Handler>
 80007c2:	bf00      	nop
 80007c4:	200001e8 	.word	0x200001e8
 80007c8:	40001000 	.word	0x40001000

080007cc <SystemClock_Config>:
{
 80007cc:	b500      	push	{lr}
 80007ce:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007d0:	2230      	movs	r2, #48	@ 0x30
 80007d2:	2100      	movs	r1, #0
 80007d4:	a808      	add	r0, sp, #32
 80007d6:	f001 ff0d 	bl	80025f4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007da:	2300      	movs	r3, #0
 80007dc:	9303      	str	r3, [sp, #12]
 80007de:	9304      	str	r3, [sp, #16]
 80007e0:	9305      	str	r3, [sp, #20]
 80007e2:	9306      	str	r3, [sp, #24]
 80007e4:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	4a20      	ldr	r2, [pc, #128]	@ (800086c <SystemClock_Config+0xa0>)
 80007ea:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80007ec:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80007f0:	6411      	str	r1, [r2, #64]	@ 0x40
 80007f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80007f4:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80007f8:	9201      	str	r2, [sp, #4]
 80007fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <SystemClock_Config+0xa4>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000812:	2301      	movs	r3, #1
 8000814:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000816:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800081a:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081c:	2302      	movs	r3, #2
 800081e:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000820:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000824:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000826:	2208      	movs	r2, #8
 8000828:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 800082a:	22a8      	movs	r2, #168	@ 0xa8
 800082c:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	a808      	add	r0, sp, #32
 8000836:	f000 fe9d 	bl	8001574 <HAL_RCC_OscConfig>
 800083a:	b998      	cbnz	r0, 8000864 <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000848:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800084c:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800084e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000852:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000854:	2105      	movs	r1, #5
 8000856:	a803      	add	r0, sp, #12
 8000858:	f001 f8f0 	bl	8001a3c <HAL_RCC_ClockConfig>
 800085c:	b920      	cbnz	r0, 8000868 <SystemClock_Config+0x9c>
}
 800085e:	b015      	add	sp, #84	@ 0x54
 8000860:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000864:	f7ff ff50 	bl	8000708 <Error_Handler>
        Error_Handler();
 8000868:	f7ff ff4e 	bl	8000708 <Error_Handler>
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <main>:
{
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	b082      	sub	sp, #8
    HAL_Init();
 8000878:	f000 f9d2 	bl	8000c20 <HAL_Init>
    SystemClock_Config();
 800087c:	f7ff ffa6 	bl	80007cc <SystemClock_Config>
    MX_GPIO_Init();
 8000880:	f7ff feac 	bl	80005dc <MX_GPIO_Init>
    MX_DMA_Init();
 8000884:	f7ff fef4 	bl	8000670 <MX_DMA_Init>
    MX_USART1_UART_Init();
 8000888:	f7ff ff40 	bl	800070c <MX_USART1_UART_Init>
    MX_DAC_Init();
 800088c:	f7ff ff58 	bl	8000740 <MX_DAC_Init>
    MX_TIM6_Init();
 8000890:	f7ff ff76 	bl	8000780 <MX_TIM6_Init>
    printf("\n\n\n\n--------\nStarting\n");
 8000894:	481c      	ldr	r0, [pc, #112]	@ (8000908 <main+0x94>)
 8000896:	f001 fdcd 	bl	8002434 <puts>
    HAL_TIM_Base_Start_IT(&htim6);
 800089a:	481c      	ldr	r0, [pc, #112]	@ (800090c <main+0x98>)
 800089c:	f001 f9a4 	bl	8001be8 <HAL_TIM_Base_Start_IT>
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) &dma_buffer, 2 * DMA_BUFFER_SIZE, DAC_ALIGN_12B_R);
 80008a0:	2100      	movs	r1, #0
 80008a2:	9100      	str	r1, [sp, #0]
 80008a4:	2380      	movs	r3, #128	@ 0x80
 80008a6:	4a1a      	ldr	r2, [pc, #104]	@ (8000910 <main+0x9c>)
 80008a8:	481a      	ldr	r0, [pc, #104]	@ (8000914 <main+0xa0>)
 80008aa:	f000 fa73 	bl	8000d94 <HAL_DAC_Start_DMA>
    uint32_t now = 0, next_blink = 500, next_tick = 1000;
 80008ae:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 80008b2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80008b6:	e020      	b.n	80008fa <main+0x86>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008bc:	4816      	ldr	r0, [pc, #88]	@ (8000918 <main+0xa4>)
 80008be:	f000 fe4f 	bl	8001560 <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 80008c2:	f504 75fa 	add.w	r5, r4, #500	@ 0x1f4
 80008c6:	e01c      	b.n	8000902 <main+0x8e>
            printf("Tick %lu (loop=%lu cb=%lu half=%lu full=%lu)\n", now / 1000, loop_cnt, cb_cnt, cb_half, cb_full);
 80008c8:	4e14      	ldr	r6, [pc, #80]	@ (800091c <main+0xa8>)
 80008ca:	4915      	ldr	r1, [pc, #84]	@ (8000920 <main+0xac>)
 80008cc:	fba1 3104 	umull	r3, r1, r1, r4
 80008d0:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <main+0xb0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <main+0xb4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <main+0xb8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6832      	ldr	r2, [r6, #0]
 80008e2:	0989      	lsrs	r1, r1, #6
 80008e4:	4812      	ldr	r0, [pc, #72]	@ (8000930 <main+0xbc>)
 80008e6:	f001 fd3d 	bl	8002364 <iprintf>
            loop_cnt = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	6033      	str	r3, [r6, #0]
            next_tick = now + 1000;
 80008ee:	f504 767a 	add.w	r6, r4, #1000	@ 0x3e8
        ++loop_cnt;
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <main+0xa8>)
 80008f4:	6813      	ldr	r3, [r2, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	6013      	str	r3, [r2, #0]
        now = uwTick;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <main+0xc0>)
 80008fc:	681c      	ldr	r4, [r3, #0]
        if (now >= next_blink) {
 80008fe:	42a5      	cmp	r5, r4
 8000900:	d9da      	bls.n	80008b8 <main+0x44>
        if (now >= next_tick) {
 8000902:	42a6      	cmp	r6, r4
 8000904:	d8f5      	bhi.n	80008f2 <main+0x7e>
 8000906:	e7df      	b.n	80008c8 <main+0x54>
 8000908:	08003114 	.word	0x08003114
 800090c:	200001e8 	.word	0x200001e8
 8000910:	20000090 	.word	0x20000090
 8000914:	20000290 	.word	0x20000290
 8000918:	40020800 	.word	0x40020800
 800091c:	2000019c 	.word	0x2000019c
 8000920:	10624dd3 	.word	0x10624dd3
 8000924:	20000194 	.word	0x20000194
 8000928:	20000190 	.word	0x20000190
 800092c:	20000198 	.word	0x20000198
 8000930:	0800312c 	.word	0x0800312c
 8000934:	200002a8 	.word	0x200002a8

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2100      	movs	r1, #0
 800093c:	9100      	str	r1, [sp, #0]
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <HAL_MspInit+0x34>)
 8000940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000946:	645a      	str	r2, [r3, #68]	@ 0x44
 8000948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800094a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	9101      	str	r1, [sp, #4]
 8000954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000956:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800095a:	641a      	str	r2, [r3, #64]	@ 0x40
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	b002      	add	sp, #8
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000970:	b530      	push	{r4, r5, lr}
 8000972:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	2300      	movs	r3, #0
 8000976:	9303      	str	r3, [sp, #12]
 8000978:	9304      	str	r3, [sp, #16]
 800097a:	9305      	str	r3, [sp, #20]
 800097c:	9306      	str	r3, [sp, #24]
 800097e:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 8000980:	6802      	ldr	r2, [r0, #0]
 8000982:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <HAL_DAC_MspInit+0xa0>)
 8000984:	429a      	cmp	r2, r3
 8000986:	d001      	beq.n	800098c <HAL_DAC_MspInit+0x1c>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000988:	b009      	add	sp, #36	@ 0x24
 800098a:	bd30      	pop	{r4, r5, pc}
 800098c:	4604      	mov	r4, r0
    __HAL_RCC_DAC_CLK_ENABLE();
 800098e:	2500      	movs	r5, #0
 8000990:	9501      	str	r5, [sp, #4]
 8000992:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 8000996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000998:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800099c:	641a      	str	r2, [r3, #64]	@ 0x40
 800099e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009a0:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80009a4:	9201      	str	r2, [sp, #4]
 80009a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	9502      	str	r5, [sp, #8]
 80009aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009ac:	f042 0201 	orr.w	r2, r2, #1
 80009b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80009b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	9302      	str	r3, [sp, #8]
 80009ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009bc:	2310      	movs	r3, #16
 80009be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c0:	2303      	movs	r3, #3
 80009c2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	a903      	add	r1, sp, #12
 80009c6:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <HAL_DAC_MspInit+0xa4>)
 80009c8:	f000 fcce 	bl	8001368 <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 80009cc:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <HAL_DAC_MspInit+0xa8>)
 80009ce:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <HAL_DAC_MspInit+0xac>)
 80009d0:	6003      	str	r3, [r0, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80009d2:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 80009d6:	6043      	str	r3, [r0, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	6083      	str	r3, [r0, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009dc:	60c5      	str	r5, [r0, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80009de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e2:	6103      	str	r3, [r0, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009e8:	6143      	str	r3, [r0, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ee:	6183      	str	r3, [r0, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80009f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f4:	61c3      	str	r3, [r0, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80009f6:	6205      	str	r5, [r0, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009f8:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80009fa:	f000 fb2b 	bl	8001054 <HAL_DMA_Init>
 80009fe:	b918      	cbnz	r0, 8000a08 <HAL_DAC_MspInit+0x98>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_DAC_MspInit+0xa8>)
 8000a02:	60a3      	str	r3, [r4, #8]
 8000a04:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000a06:	e7bf      	b.n	8000988 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 8000a08:	f7ff fe7e 	bl	8000708 <Error_Handler>
 8000a0c:	e7f8      	b.n	8000a00 <HAL_DAC_MspInit+0x90>
 8000a0e:	bf00      	nop
 8000a10:	40007400 	.word	0x40007400
 8000a14:	40020000 	.word	0x40020000
 8000a18:	20000230 	.word	0x20000230
 8000a1c:	40026088 	.word	0x40026088

08000a20 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8000a20:	6802      	ldr	r2, [r0, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <HAL_TIM_Base_MspInit+0x28>)
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d000      	beq.n	8000a2a <HAL_TIM_Base_MspInit+0xa>
 8000a28:	4770      	bx	lr
{
 8000a2a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_TIM_Base_MspInit+0x2c>)
 8000a32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a34:	f042 0210 	orr.w	r2, r2, #16
 8000a38:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000a44:	b002      	add	sp, #8
 8000a46:	4770      	bx	lr
 8000a48:	40001000 	.word	0x40001000
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b500      	push	{lr}
 8000a52:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	2300      	movs	r3, #0
 8000a56:	9303      	str	r3, [sp, #12]
 8000a58:	9304      	str	r3, [sp, #16]
 8000a5a:	9305      	str	r3, [sp, #20]
 8000a5c:	9306      	str	r3, [sp, #24]
 8000a5e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000a60:	6802      	ldr	r2, [r0, #0]
 8000a62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000a66:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d002      	beq.n	8000a74 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a6e:	b009      	add	sp, #36	@ 0x24
 8000a70:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a74:	2100      	movs	r1, #0
 8000a76:	9101      	str	r1, [sp, #4]
 8000a78:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a7e:	f042 0210 	orr.w	r2, r2, #16
 8000a82:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a86:	f002 0210 	and.w	r2, r2, #16
 8000a8a:	9201      	str	r2, [sp, #4]
 8000a8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	9102      	str	r1, [sp, #8]
 8000a90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a92:	f042 0201 	orr.w	r2, r2, #1
 8000a96:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aa2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000aa6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	a903      	add	r1, sp, #12
 8000ab6:	4802      	ldr	r0, [pc, #8]	@ (8000ac0 <HAL_UART_MspInit+0x70>)
 8000ab8:	f000 fc56 	bl	8001368 <HAL_GPIO_Init>
}
 8000abc:	e7d7      	b.n	8000a6e <HAL_UART_MspInit+0x1e>
 8000abe:	bf00      	nop
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler>

08000ac6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler>

08000ac8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler>

08000aca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler>

08000acc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler>

08000ace <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad6:	f000 f8bd 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ada:	bd08      	pop	{r3, pc}

08000adc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000adc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000ade:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <DMA1_Stream5_IRQHandler+0xc>)
 8000ae0:	f000 fb54 	bl	800118c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ae4:	bd08      	pop	{r3, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000230 	.word	0x20000230

08000aec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	460c      	mov	r4, r1
 8000af0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	2500      	movs	r5, #0
 8000af4:	e006      	b.n	8000b04 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000af6:	f3af 8000 	nop.w
 8000afa:	4621      	mov	r1, r4
 8000afc:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000b02:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	42b5      	cmp	r5, r6
 8000b06:	dbf6      	blt.n	8000af6 <_read+0xa>
  }

  return len;
}
 8000b08:	4630      	mov	r0, r6
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}

08000b0c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b16:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000b18:	2000      	movs	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000b20:	2000      	movs	r0, #0
 8000b22:	4770      	bx	lr

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b510      	push	{r4, lr}
 8000b26:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a0c      	ldr	r2, [pc, #48]	@ (8000b5c <_sbrk+0x38>)
 8000b2a:	490d      	ldr	r1, [pc, #52]	@ (8000b60 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <_sbrk+0x40>)
 8000b2e:	6800      	ldr	r0, [r0, #0]
 8000b30:	b140      	cbz	r0, 8000b44 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <_sbrk+0x40>)
 8000b34:	6800      	ldr	r0, [r0, #0]
 8000b36:	4403      	add	r3, r0
 8000b38:	1a52      	subs	r2, r2, r1
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d806      	bhi.n	8000b4c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000b3e:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <_sbrk+0x40>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000b42:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000b44:	4807      	ldr	r0, [pc, #28]	@ (8000b64 <_sbrk+0x40>)
 8000b46:	4c08      	ldr	r4, [pc, #32]	@ (8000b68 <_sbrk+0x44>)
 8000b48:	6004      	str	r4, [r0, #0]
 8000b4a:	e7f2      	b.n	8000b32 <_sbrk+0xe>
    errno = ENOMEM;
 8000b4c:	f001 fda0 	bl	8002690 <__errno>
 8000b50:	230c      	movs	r3, #12
 8000b52:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b58:	e7f3      	b.n	8000b42 <_sbrk+0x1e>
 8000b5a:	bf00      	nop
 8000b5c:	20020000 	.word	0x20020000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	200002a4 	.word	0x200002a4
 8000b68:	200003f8 	.word	0x200003f8

08000b6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4a03      	ldr	r2, [pc, #12]	@ (8000b7c <SystemInit+0x10>)
 8000b6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000b72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b84:	f7ff fff2 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	@ (8000bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f001 fd75 	bl	800269c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb2:	f7ff fe5f 	bl	8000874 <main>
  bx  lr    
 8000bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bc4:	080039c4 	.word	0x080039c4
  ldr r2, =_sbss
 8000bc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bcc:	200003f8 	.word	0x200003f8

08000bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC_IRQHandler>
	...

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b510      	push	{r4, lr}
 8000bd6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <HAL_InitTick+0x40>)
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000be4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c18 <HAL_InitTick+0x44>)
 8000be6:	6810      	ldr	r0, [r2, #0]
 8000be8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bec:	f000 f8ac 	bl	8000d48 <HAL_SYSTICK_Config>
 8000bf0:	b968      	cbnz	r0, 8000c0e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	2c0f      	cmp	r4, #15
 8000bf4:	d901      	bls.n	8000bfa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	e00a      	b.n	8000c10 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c02:	f000 f88d 	bl	8000d20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c06:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_InitTick+0x48>)
 8000c08:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c0e:	2001      	movs	r0, #1
}
 8000c10:	bd10      	pop	{r4, pc}
 8000c12:	bf00      	nop
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000010 	.word	0x20000010

08000c20 <HAL_Init>:
{
 8000c20:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <HAL_Init+0x30>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c2a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c32:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c3a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f85d 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	200f      	movs	r0, #15
 8000c44:	f7ff ffc6 	bl	8000bd4 <HAL_InitTick>
  HAL_MspInit();
 8000c48:	f7ff fe76 	bl	8000938 <HAL_MspInit>
}
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	bd08      	pop	{r3, pc}
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c54:	4a03      	ldr	r2, [pc, #12]	@ (8000c64 <HAL_IncTick+0x10>)
 8000c56:	6811      	ldr	r1, [r2, #0]
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_IncTick+0x14>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	440b      	add	r3, r1
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200002a8 	.word	0x200002a8
 8000c68:	2000000c 	.word	0x2000000c

08000c6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c6c:	4b01      	ldr	r3, [pc, #4]	@ (8000c74 <HAL_GetTick+0x8>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200002a8 	.word	0x200002a8

08000c78 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	db07      	blt.n	8000c8c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7c:	f000 021f 	and.w	r2, r0, #31
 8000c80:	0940      	lsrs	r0, r0, #5
 8000c82:	2301      	movs	r3, #1
 8000c84:	4093      	lsls	r3, r2
 8000c86:	4a02      	ldr	r2, [pc, #8]	@ (8000c90 <__NVIC_EnableIRQ+0x18>)
 8000c88:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000c94:	2800      	cmp	r0, #0
 8000c96:	db08      	blt.n	8000caa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	0109      	lsls	r1, r1, #4
 8000c9a:	b2c9      	uxtb	r1, r1
 8000c9c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000ca0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000ca4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000ca8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	f000 000f 	and.w	r0, r0, #15
 8000cae:	0109      	lsls	r1, r1, #4
 8000cb0:	b2c9      	uxtb	r1, r1
 8000cb2:	4b01      	ldr	r3, [pc, #4]	@ (8000cb8 <__NVIC_SetPriority+0x24>)
 8000cb4:	5419      	strb	r1, [r3, r0]
  }
}
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed14 	.word	0xe000ed14

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbe:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc2:	f1c0 0c07 	rsb	ip, r0, #7
 8000cc6:	f1bc 0f04 	cmp.w	ip, #4
 8000cca:	bf28      	it	cs
 8000ccc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd0:	1d03      	adds	r3, r0, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d90f      	bls.n	8000cf6 <NVIC_EncodePriority+0x3a>
 8000cd6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000cdc:	fa0e f00c 	lsl.w	r0, lr, ip
 8000ce0:	ea21 0100 	bic.w	r1, r1, r0
 8000ce4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce6:	fa0e fe03 	lsl.w	lr, lr, r3
 8000cea:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000cee:	ea41 0002 	orr.w	r0, r1, r2
 8000cf2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e7ee      	b.n	8000cd8 <NVIC_EncodePriority+0x1c>
	...

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cfe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d00:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000d04:	041b      	lsls	r3, r3, #16
 8000d06:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	0200      	lsls	r0, r0, #8
 8000d0a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000d18:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b510      	push	{r4, lr}
 8000d22:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <HAL_NVIC_SetPriority+0x1c>)
 8000d26:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d28:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000d2c:	f7ff ffc6 	bl	8000cbc <NVIC_EncodePriority>
 8000d30:	4601      	mov	r1, r0
 8000d32:	4620      	mov	r0, r4
 8000d34:	f7ff ffae 	bl	8000c94 <__NVIC_SetPriority>
}
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d42:	f7ff ff99 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000d46:	bd08      	pop	{r3, pc}

08000d48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	3801      	subs	r0, #1
 8000d4a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d4e:	d20b      	bcs.n	8000d68 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000d54:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <HAL_SYSTICK_Config+0x24>)
 8000d58:	21f0      	movs	r1, #240	@ 0xf0
 8000d5a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5e:	2000      	movs	r0, #0
 8000d60:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	2207      	movs	r2, #7
 8000d64:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d66:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d68:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000d70:	b170      	cbz	r0, 8000d90 <HAL_DAC_Init+0x20>
{
 8000d72:	b510      	push	{r4, lr}
 8000d74:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000d76:	7903      	ldrb	r3, [r0, #4]
 8000d78:	b133      	cbz	r3, 8000d88 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d7e:	2000      	movs	r0, #0
 8000d80:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d82:	2301      	movs	r3, #1
 8000d84:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8000d86:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8000d88:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8000d8a:	f7ff fdf1 	bl	8000970 <HAL_DAC_MspInit>
 8000d8e:	e7f4      	b.n	8000d7a <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8000d90:	2001      	movs	r0, #1
}
 8000d92:	4770      	bx	lr

08000d94 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	460d      	mov	r5, r1
 8000d98:	4611      	mov	r1, r2
 8000d9a:	9a04      	ldr	r2, [sp, #16]
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	d061      	beq.n	8000e64 <HAL_DAC_Start_DMA+0xd0>
 8000da0:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000da2:	7940      	ldrb	r0, [r0, #5]
 8000da4:	2801      	cmp	r0, #1
 8000da6:	d05f      	beq.n	8000e68 <HAL_DAC_Start_DMA+0xd4>
 8000da8:	2001      	movs	r0, #1
 8000daa:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dac:	2002      	movs	r0, #2
 8000dae:	7120      	strb	r0, [r4, #4]

  if (Channel == DAC_CHANNEL_1)
 8000db0:	2d00      	cmp	r5, #0
 8000db2:	d12f      	bne.n	8000e14 <HAL_DAC_Start_DMA+0x80>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000db4:	68a0      	ldr	r0, [r4, #8]
 8000db6:	4e2d      	ldr	r6, [pc, #180]	@ (8000e6c <HAL_DAC_Start_DMA+0xd8>)
 8000db8:	63c6      	str	r6, [r0, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000dba:	68a0      	ldr	r0, [r4, #8]
 8000dbc:	4e2c      	ldr	r6, [pc, #176]	@ (8000e70 <HAL_DAC_Start_DMA+0xdc>)
 8000dbe:	6406      	str	r6, [r0, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000dc0:	68a0      	ldr	r0, [r4, #8]
 8000dc2:	4e2c      	ldr	r6, [pc, #176]	@ (8000e74 <HAL_DAC_Start_DMA+0xe0>)
 8000dc4:	64c6      	str	r6, [r0, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000dc6:	6826      	ldr	r6, [r4, #0]
 8000dc8:	6830      	ldr	r0, [r6, #0]
 8000dca:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8000dce:	6030      	str	r0, [r6, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000dd0:	b122      	cbz	r2, 8000ddc <HAL_DAC_Start_DMA+0x48>
 8000dd2:	2a04      	cmp	r2, #4
 8000dd4:	d01b      	beq.n	8000e0e <HAL_DAC_Start_DMA+0x7a>
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
        break;
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000dd6:	6822      	ldr	r2, [r4, #0]
 8000dd8:	3210      	adds	r2, #16
        break;
 8000dda:	e001      	b.n	8000de0 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000ddc:	6822      	ldr	r2, [r4, #0]
 8000dde:	3208      	adds	r2, #8
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d131      	bne.n	8000e48 <HAL_DAC_Start_DMA+0xb4>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000de4:	6826      	ldr	r6, [r4, #0]
 8000de6:	6830      	ldr	r0, [r6, #0]
 8000de8:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8000dec:	6030      	str	r0, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000dee:	68a0      	ldr	r0, [r4, #8]
 8000df0:	f000 f996 	bl	8001120 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000df4:	2300      	movs	r3, #0
 8000df6:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	d12e      	bne.n	8000e5a <HAL_DAC_Start_DMA+0xc6>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000dfc:	6821      	ldr	r1, [r4, #0]
 8000dfe:	680b      	ldr	r3, [r1, #0]
 8000e00:	f005 0510 	and.w	r5, r5, #16
 8000e04:	2201      	movs	r2, #1
 8000e06:	40aa      	lsls	r2, r5
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000e0e:	6822      	ldr	r2, [r4, #0]
 8000e10:	320c      	adds	r2, #12
        break;
 8000e12:	e7e5      	b.n	8000de0 <HAL_DAC_Start_DMA+0x4c>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000e14:	68e0      	ldr	r0, [r4, #12]
 8000e16:	4e18      	ldr	r6, [pc, #96]	@ (8000e78 <HAL_DAC_Start_DMA+0xe4>)
 8000e18:	63c6      	str	r6, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000e1a:	68e0      	ldr	r0, [r4, #12]
 8000e1c:	4e17      	ldr	r6, [pc, #92]	@ (8000e7c <HAL_DAC_Start_DMA+0xe8>)
 8000e1e:	6406      	str	r6, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000e20:	68e0      	ldr	r0, [r4, #12]
 8000e22:	4e17      	ldr	r6, [pc, #92]	@ (8000e80 <HAL_DAC_Start_DMA+0xec>)
 8000e24:	64c6      	str	r6, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000e26:	6826      	ldr	r6, [r4, #0]
 8000e28:	6830      	ldr	r0, [r6, #0]
 8000e2a:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000e2e:	6030      	str	r0, [r6, #0]
    switch (Alignment)
 8000e30:	b122      	cbz	r2, 8000e3c <HAL_DAC_Start_DMA+0xa8>
 8000e32:	2a04      	cmp	r2, #4
 8000e34:	d005      	beq.n	8000e42 <HAL_DAC_Start_DMA+0xae>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000e36:	6822      	ldr	r2, [r4, #0]
 8000e38:	321c      	adds	r2, #28
        break;
 8000e3a:	e7d1      	b.n	8000de0 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000e3c:	6822      	ldr	r2, [r4, #0]
 8000e3e:	3214      	adds	r2, #20
        break;
 8000e40:	e7ce      	b.n	8000de0 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	3218      	adds	r2, #24
        break;
 8000e46:	e7cb      	b.n	8000de0 <HAL_DAC_Start_DMA+0x4c>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000e48:	6826      	ldr	r6, [r4, #0]
 8000e4a:	6830      	ldr	r0, [r6, #0]
 8000e4c:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
 8000e50:	6030      	str	r0, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000e52:	68e0      	ldr	r0, [r4, #12]
 8000e54:	f000 f964 	bl	8001120 <HAL_DMA_Start_IT>
 8000e58:	e7cc      	b.n	8000df4 <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e5a:	6923      	ldr	r3, [r4, #16]
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6123      	str	r3, [r4, #16]
 8000e62:	e7d3      	b.n	8000e0c <HAL_DAC_Start_DMA+0x78>
    return HAL_ERROR;
 8000e64:	2001      	movs	r0, #1
 8000e66:	e7d1      	b.n	8000e0c <HAL_DAC_Start_DMA+0x78>
  __HAL_LOCK(hdac);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	e7cf      	b.n	8000e0c <HAL_DAC_Start_DMA+0x78>
 8000e6c:	08000e85 	.word	0x08000e85
 8000e70:	08000e95 	.word	0x08000e95
 8000e74:	08000ea1 	.word	0x08000ea1
 8000e78:	08000f21 	.word	0x08000f21
 8000e7c:	08000f31 	.word	0x08000f31
 8000e80:	08000f3b 	.word	0x08000f3b

08000e84 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e84:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e86:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff fc21 	bl	80006d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	7123      	strb	r3, [r4, #4]
}
 8000e92:	bd10      	pop	{r4, pc}

08000e94 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e94:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000e96:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8000e98:	f7ff fc28 	bl	80006ec <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e9c:	bd08      	pop	{r3, pc}

08000e9e <HAL_DAC_ErrorCallbackCh1>:
}
 8000e9e:	4770      	bx	lr

08000ea0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ea2:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ea4:	6923      	ldr	r3, [r4, #16]
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000eac:	4620      	mov	r0, r4
 8000eae:	f7ff fff6 	bl	8000e9e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	7123      	strb	r3, [r4, #4]
}
 8000eb6:	bd10      	pop	{r4, pc}

08000eb8 <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 8000eb8:	b348      	cbz	r0, 8000f0e <HAL_DAC_ConfigChannel+0x56>
 8000eba:	4684      	mov	ip, r0
 8000ebc:	b349      	cbz	r1, 8000f12 <HAL_DAC_ConfigChannel+0x5a>
  __HAL_LOCK(hdac);
 8000ebe:	7943      	ldrb	r3, [r0, #5]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d028      	beq.n	8000f16 <HAL_DAC_ConfigChannel+0x5e>
{
 8000ec4:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 8000ec6:	f04f 0e01 	mov.w	lr, #1
 8000eca:	f880 e005 	strb.w	lr, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8000ed2:	6804      	ldr	r4, [r0, #0]
 8000ed4:	6820      	ldr	r0, [r4, #0]
               << (Channel & 0x10UL));
 8000ed6:	f002 0210 	and.w	r2, r2, #16
 8000eda:	f640 73fe 	movw	r3, #4094	@ 0xffe
 8000ede:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8000ee0:	ea20 0003 	bic.w	r0, r0, r3
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000ee4:	680b      	ldr	r3, [r1, #0]
 8000ee6:	6849      	ldr	r1, [r1, #4]
 8000ee8:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000eea:	4093      	lsls	r3, r2
 8000eec:	4303      	orrs	r3, r0
  hdac->Instance->CR = tmpreg1;
 8000eee:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000ef0:	f8dc 0000 	ldr.w	r0, [ip]
 8000ef4:	6803      	ldr	r3, [r0, #0]
 8000ef6:	21c0      	movs	r1, #192	@ 0xc0
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	ea23 0302 	bic.w	r3, r3, r2
 8000f00:	6003      	str	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000f02:	f88c e004 	strb.w	lr, [ip, #4]
  __HAL_UNLOCK(hdac);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f88c 0005 	strb.w	r0, [ip, #5]
}
 8000f0c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f0e:	2001      	movs	r0, #1
 8000f10:	4770      	bx	lr
 8000f12:	2001      	movs	r0, #1
 8000f14:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8000f16:	2002      	movs	r0, #2
}
 8000f18:	4770      	bx	lr

08000f1a <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000f1c:	4770      	bx	lr

08000f1e <HAL_DACEx_ErrorCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000f1e:	4770      	bx	lr

08000f20 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000f20:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f22:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000f24:	4620      	mov	r0, r4
 8000f26:	f7ff fff8 	bl	8000f1a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	7123      	strb	r3, [r4, #4]
}
 8000f2e:	bd10      	pop	{r4, pc}

08000f30 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000f30:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000f32:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8000f34:	f7ff fff2 	bl	8000f1c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000f38:	bd08      	pop	{r3, pc}

08000f3a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000f3a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f3c:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f3e:	6923      	ldr	r3, [r4, #16]
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000f46:	4620      	mov	r0, r4
 8000f48:	f7ff ffe9 	bl	8000f1e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	7123      	strb	r3, [r4, #4]
}
 8000f50:	bd10      	pop	{r4, pc}

08000f52 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f52:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000f54:	6805      	ldr	r5, [r0, #0]
 8000f56:	682c      	ldr	r4, [r5, #0]
 8000f58:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8000f5c:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000f5e:	6804      	ldr	r4, [r0, #0]
 8000f60:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f62:	6883      	ldr	r3, [r0, #8]
 8000f64:	2b40      	cmp	r3, #64	@ 0x40
 8000f66:	d005      	beq.n	8000f74 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000f68:	6803      	ldr	r3, [r0, #0]
 8000f6a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000f6c:	6803      	ldr	r3, [r0, #0]
 8000f6e:	60da      	str	r2, [r3, #12]
  }
}
 8000f70:	bc30      	pop	{r4, r5}
 8000f72:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000f74:	6803      	ldr	r3, [r0, #0]
 8000f76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000f78:	6803      	ldr	r3, [r0, #0]
 8000f7a:	60d9      	str	r1, [r3, #12]
 8000f7c:	e7f8      	b.n	8000f70 <DMA_SetConfig+0x1e>
	...

08000f80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f80:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f82:	6803      	ldr	r3, [r0, #0]
 8000f84:	b2d9      	uxtb	r1, r3
 8000f86:	3910      	subs	r1, #16
 8000f88:	4a0c      	ldr	r2, [pc, #48]	@ (8000fbc <DMA_CalcBaseAndBitshift+0x3c>)
 8000f8a:	fba2 4201 	umull	r4, r2, r2, r1
 8000f8e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f90:	4c0b      	ldr	r4, [pc, #44]	@ (8000fc0 <DMA_CalcBaseAndBitshift+0x40>)
 8000f92:	5ca2      	ldrb	r2, [r4, r2]
 8000f94:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000f96:	295f      	cmp	r1, #95	@ 0x5f
 8000f98:	d909      	bls.n	8000fae <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000f9e:	f023 0303 	bic.w	r3, r3, #3
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000fa6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fac:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000fae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000fb2:	f023 0303 	bic.w	r3, r3, #3
 8000fb6:	6583      	str	r3, [r0, #88]	@ 0x58
 8000fb8:	e7f5      	b.n	8000fa6 <DMA_CalcBaseAndBitshift+0x26>
 8000fba:	bf00      	nop
 8000fbc:	aaaaaaab 	.word	0xaaaaaaab
 8000fc0:	08003174 	.word	0x08003174

08000fc4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000fc4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000fc6:	6982      	ldr	r2, [r0, #24]
 8000fc8:	b992      	cbnz	r2, 8000ff0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d00a      	beq.n	8000fe4 <DMA_CheckFifoParam+0x20>
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d002      	beq.n	8000fd8 <DMA_CheckFifoParam+0x14>
 8000fd2:	b10b      	cbz	r3, 8000fd8 <DMA_CheckFifoParam+0x14>
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fd8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000fda:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000fde:	d128      	bne.n	8001032 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000fe4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000fe6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000fea:	d024      	beq.n	8001036 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000fec:	2000      	movs	r0, #0
 8000fee:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ff0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000ff4:	d009      	beq.n	800100a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d925      	bls.n	8001046 <DMA_CheckFifoParam+0x82>
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d125      	bne.n	800104a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ffe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001000:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001004:	d123      	bne.n	800104e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001006:	2000      	movs	r0, #0
 8001008:	4770      	bx	lr
    switch (tmp)
 800100a:	2b03      	cmp	r3, #3
 800100c:	d803      	bhi.n	8001016 <DMA_CheckFifoParam+0x52>
 800100e:	e8df f003 	tbb	[pc, r3]
 8001012:	0414      	.short	0x0414
 8001014:	0a14      	.short	0x0a14
 8001016:	2000      	movs	r0, #0
 8001018:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800101a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800101c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001020:	d10d      	bne.n	800103e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001022:	2000      	movs	r0, #0
 8001024:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001026:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001028:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800102c:	d009      	beq.n	8001042 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800102e:	2000      	movs	r0, #0
 8001030:	4770      	bx	lr
        status = HAL_ERROR;
 8001032:	2001      	movs	r0, #1
 8001034:	4770      	bx	lr
        status = HAL_ERROR;
 8001036:	2001      	movs	r0, #1
 8001038:	4770      	bx	lr
      status = HAL_ERROR;
 800103a:	2001      	movs	r0, #1
 800103c:	4770      	bx	lr
        status = HAL_ERROR;
 800103e:	2001      	movs	r0, #1
 8001040:	4770      	bx	lr
        status = HAL_ERROR;
 8001042:	2001      	movs	r0, #1
 8001044:	4770      	bx	lr
      status = HAL_ERROR;
 8001046:	2001      	movs	r0, #1
 8001048:	4770      	bx	lr
    switch (tmp)
 800104a:	2000      	movs	r0, #0
 800104c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800104e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001050:	4770      	bx	lr
	...

08001054 <HAL_DMA_Init>:
{
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff fe08 	bl	8000c6c <HAL_GetTick>
  if(hdma == NULL)
 800105c:	2c00      	cmp	r4, #0
 800105e:	d05b      	beq.n	8001118 <HAL_DMA_Init+0xc4>
 8001060:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001062:	2302      	movs	r3, #2
 8001064:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001068:	2300      	movs	r3, #0
 800106a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800106e:	6822      	ldr	r2, [r4, #0]
 8001070:	6813      	ldr	r3, [r2, #0]
 8001072:	f023 0301 	bic.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	f012 0f01 	tst.w	r2, #1
 8001080:	d00a      	beq.n	8001098 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001082:	f7ff fdf3 	bl	8000c6c <HAL_GetTick>
 8001086:	1b43      	subs	r3, r0, r5
 8001088:	2b05      	cmp	r3, #5
 800108a:	d9f5      	bls.n	8001078 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800108c:	2320      	movs	r3, #32
 800108e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001090:	2003      	movs	r0, #3
 8001092:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001096:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001098:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800109a:	4920      	ldr	r1, [pc, #128]	@ (800111c <HAL_DMA_Init+0xc8>)
 800109c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800109e:	6862      	ldr	r2, [r4, #4]
 80010a0:	68a0      	ldr	r0, [r4, #8]
 80010a2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a4:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a8:	6920      	ldr	r0, [r4, #16]
 80010aa:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ac:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ae:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b0:	69a0      	ldr	r0, [r4, #24]
 80010b2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b8:	6a20      	ldr	r0, [r4, #32]
 80010ba:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010bc:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80010c0:	2904      	cmp	r1, #4
 80010c2:	d01e      	beq.n	8001102 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80010c4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80010c6:	6826      	ldr	r6, [r4, #0]
 80010c8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010ca:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80010ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80010d0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d107      	bne.n	80010e6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80010d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80010d8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80010dc:	b11b      	cbz	r3, 80010e6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010de:	4620      	mov	r0, r4
 80010e0:	f7ff ff70 	bl	8000fc4 <DMA_CheckFifoParam>
 80010e4:	b990      	cbnz	r0, 800110c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80010e6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010e8:	4620      	mov	r0, r4
 80010ea:	f7ff ff49 	bl	8000f80 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ee:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80010f0:	233f      	movs	r3, #63	@ 0x3f
 80010f2:	4093      	lsls	r3, r2
 80010f4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010f6:	2000      	movs	r0, #0
 80010f8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001100:	e7c9      	b.n	8001096 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001102:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001104:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001106:	4301      	orrs	r1, r0
 8001108:	430a      	orrs	r2, r1
 800110a:	e7db      	b.n	80010c4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800110c:	2340      	movs	r3, #64	@ 0x40
 800110e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001110:	2001      	movs	r0, #1
 8001112:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001116:	e7be      	b.n	8001096 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001118:	2001      	movs	r0, #1
 800111a:	e7bc      	b.n	8001096 <HAL_DMA_Init+0x42>
 800111c:	f010803f 	.word	0xf010803f

08001120 <HAL_DMA_Start_IT>:
{
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001124:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001126:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800112a:	2801      	cmp	r0, #1
 800112c:	d02b      	beq.n	8001186 <HAL_DMA_Start_IT+0x66>
 800112e:	2001      	movs	r0, #1
 8001130:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001134:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001138:	b2c0      	uxtb	r0, r0
 800113a:	2801      	cmp	r0, #1
 800113c:	d004      	beq.n	8001148 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800113e:	2300      	movs	r3, #0
 8001140:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001144:	2002      	movs	r0, #2
}
 8001146:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001148:	2002      	movs	r0, #2
 800114a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800114e:	2000      	movs	r0, #0
 8001150:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001152:	4620      	mov	r0, r4
 8001154:	f7ff fefd 	bl	8000f52 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001158:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800115a:	233f      	movs	r3, #63	@ 0x3f
 800115c:	4093      	lsls	r3, r2
 800115e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	6813      	ldr	r3, [r2, #0]
 8001164:	f043 0316 	orr.w	r3, r3, #22
 8001168:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800116a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800116c:	b123      	cbz	r3, 8001178 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800116e:	6822      	ldr	r2, [r4, #0]
 8001170:	6813      	ldr	r3, [r2, #0]
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001178:	6822      	ldr	r2, [r4, #0]
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001182:	2000      	movs	r0, #0
 8001184:	e7df      	b.n	8001146 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001186:	2002      	movs	r0, #2
 8001188:	e7dd      	b.n	8001146 <HAL_DMA_Start_IT+0x26>
	...

0800118c <HAL_DMA_IRQHandler>:
{
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	b083      	sub	sp, #12
 8001190:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001196:	4b72      	ldr	r3, [pc, #456]	@ (8001360 <HAL_DMA_IRQHandler+0x1d4>)
 8001198:	681d      	ldr	r5, [r3, #0]
 800119a:	4b72      	ldr	r3, [pc, #456]	@ (8001364 <HAL_DMA_IRQHandler+0x1d8>)
 800119c:	fba3 3505 	umull	r3, r5, r3, r5
 80011a0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a2:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80011a4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80011a8:	2308      	movs	r3, #8
 80011aa:	4093      	lsls	r3, r2
 80011ac:	4233      	tst	r3, r6
 80011ae:	d010      	beq.n	80011d2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011b0:	6803      	ldr	r3, [r0, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f012 0f04 	tst.w	r2, #4
 80011b8:	d00b      	beq.n	80011d2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f022 0204 	bic.w	r2, r2, #4
 80011c0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011c2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80011c4:	2308      	movs	r3, #8
 80011c6:	4093      	lsls	r3, r2
 80011c8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011ca:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011d2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011d4:	2301      	movs	r3, #1
 80011d6:	4093      	lsls	r3, r2
 80011d8:	4233      	tst	r3, r6
 80011da:	d009      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011dc:	6822      	ldr	r2, [r4, #0]
 80011de:	6952      	ldr	r2, [r2, #20]
 80011e0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80011e4:	d004      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011e6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011f2:	2304      	movs	r3, #4
 80011f4:	4093      	lsls	r3, r2
 80011f6:	4233      	tst	r3, r6
 80011f8:	d009      	beq.n	800120e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011fa:	6822      	ldr	r2, [r4, #0]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	f012 0f02 	tst.w	r2, #2
 8001202:	d004      	beq.n	800120e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001204:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001206:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800120e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001210:	2310      	movs	r3, #16
 8001212:	4093      	lsls	r3, r2
 8001214:	4233      	tst	r3, r6
 8001216:	d024      	beq.n	8001262 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001218:	6822      	ldr	r2, [r4, #0]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	f012 0f08 	tst.w	r2, #8
 8001220:	d01f      	beq.n	8001262 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001222:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800122c:	d00d      	beq.n	800124a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001234:	d104      	bne.n	8001240 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001236:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001238:	b19b      	cbz	r3, 8001262 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800123a:	4620      	mov	r0, r4
 800123c:	4798      	blx	r3
 800123e:	e010      	b.n	8001262 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001240:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001242:	b173      	cbz	r3, 8001262 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001244:	4620      	mov	r0, r4
 8001246:	4798      	blx	r3
 8001248:	e00b      	b.n	8001262 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001250:	d103      	bne.n	800125a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f022 0208 	bic.w	r2, r2, #8
 8001258:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800125a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800125c:	b10b      	cbz	r3, 8001262 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800125e:	4620      	mov	r0, r4
 8001260:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001262:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001264:	2320      	movs	r3, #32
 8001266:	4093      	lsls	r3, r2
 8001268:	4233      	tst	r3, r6
 800126a:	d055      	beq.n	8001318 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	f012 0f10 	tst.w	r2, #16
 8001274:	d050      	beq.n	8001318 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001276:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001278:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b05      	cmp	r3, #5
 8001280:	d00e      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800128a:	d033      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001292:	d12a      	bne.n	80012ea <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001294:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001296:	2b00      	cmp	r3, #0
 8001298:	d03e      	beq.n	8001318 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800129a:	4620      	mov	r0, r4
 800129c:	4798      	blx	r3
 800129e:	e03b      	b.n	8001318 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a0:	6822      	ldr	r2, [r4, #0]
 80012a2:	6813      	ldr	r3, [r2, #0]
 80012a4:	f023 0316 	bic.w	r3, r3, #22
 80012a8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012aa:	6822      	ldr	r2, [r4, #0]
 80012ac:	6953      	ldr	r3, [r2, #20]
 80012ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012b2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012b6:	b1a3      	cbz	r3, 80012e2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012b8:	6822      	ldr	r2, [r4, #0]
 80012ba:	6813      	ldr	r3, [r2, #0]
 80012bc:	f023 0308 	bic.w	r3, r3, #8
 80012c0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80012c4:	233f      	movs	r3, #63	@ 0x3f
 80012c6:	4093      	lsls	r3, r2
 80012c8:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80012d0:	2300      	movs	r3, #0
 80012d2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80012d6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d03f      	beq.n	800135c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80012dc:	4620      	mov	r0, r4
 80012de:	4798      	blx	r3
        return;
 80012e0:	e03c      	b.n	800135c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e7      	bne.n	80012b8 <HAL_DMA_IRQHandler+0x12c>
 80012e8:	e7eb      	b.n	80012c2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80012ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80012ec:	b1a3      	cbz	r3, 8001318 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80012ee:	4620      	mov	r0, r4
 80012f0:	4798      	blx	r3
 80012f2:	e011      	b.n	8001318 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80012fa:	d109      	bne.n	8001310 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	f022 0210 	bic.w	r2, r2, #16
 8001302:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001304:	2301      	movs	r3, #1
 8001306:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800130a:	2300      	movs	r3, #0
 800130c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001310:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001312:	b10b      	cbz	r3, 8001318 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001314:	4620      	mov	r0, r4
 8001316:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001318:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800131a:	b1fb      	cbz	r3, 800135c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800131c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800131e:	f013 0f01 	tst.w	r3, #1
 8001322:	d017      	beq.n	8001354 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001324:	2305      	movs	r3, #5
 8001326:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800132a:	6822      	ldr	r2, [r4, #0]
 800132c:	6813      	ldr	r3, [r2, #0]
 800132e:	f023 0301 	bic.w	r3, r3, #1
 8001332:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001334:	9b01      	ldr	r3, [sp, #4]
 8001336:	3301      	adds	r3, #1
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	42ab      	cmp	r3, r5
 800133c:	d804      	bhi.n	8001348 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f013 0f01 	tst.w	r3, #1
 8001346:	d1f5      	bne.n	8001334 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001348:	2301      	movs	r3, #1
 800134a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800134e:	2300      	movs	r3, #0
 8001350:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001354:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001356:	b10b      	cbz	r3, 800135c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001358:	4620      	mov	r0, r4
 800135a:	4798      	blx	r3
}
 800135c:	b003      	add	sp, #12
 800135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001360:	20000008 	.word	0x20000008
 8001364:	1b4e81b5 	.word	0x1b4e81b5

08001368 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001368:	2300      	movs	r3, #0
 800136a:	2b0f      	cmp	r3, #15
 800136c:	f200 80e9 	bhi.w	8001542 <HAL_GPIO_Init+0x1da>
{
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	e065      	b.n	8001442 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001376:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001378:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800137c:	2403      	movs	r4, #3
 800137e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001382:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001386:	68cc      	ldr	r4, [r1, #12]
 8001388:	fa04 f40e 	lsl.w	r4, r4, lr
 800138c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800138e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001390:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001392:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001396:	684a      	ldr	r2, [r1, #4]
 8001398:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800139c:	409a      	lsls	r2, r3
 800139e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80013a0:	6042      	str	r2, [r0, #4]
 80013a2:	e05c      	b.n	800145e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a4:	08dc      	lsrs	r4, r3, #3
 80013a6:	3408      	adds	r4, #8
 80013a8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ac:	f003 0507 	and.w	r5, r3, #7
 80013b0:	00ad      	lsls	r5, r5, #2
 80013b2:	f04f 0e0f 	mov.w	lr, #15
 80013b6:	fa0e fe05 	lsl.w	lr, lr, r5
 80013ba:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013be:	690a      	ldr	r2, [r1, #16]
 80013c0:	40aa      	lsls	r2, r5
 80013c2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80013c6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80013ca:	e05c      	b.n	8001486 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013cc:	2207      	movs	r2, #7
 80013ce:	e000      	b.n	80013d2 <HAL_GPIO_Init+0x6a>
 80013d0:	2200      	movs	r2, #0
 80013d2:	fa02 f20e 	lsl.w	r2, r2, lr
 80013d6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d8:	3402      	adds	r4, #2
 80013da:	4d5a      	ldr	r5, [pc, #360]	@ (8001544 <HAL_GPIO_Init+0x1dc>)
 80013dc:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e0:	4a59      	ldr	r2, [pc, #356]	@ (8001548 <HAL_GPIO_Init+0x1e0>)
 80013e2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	ea6f 020c 	mvn.w	r2, ip
 80013e8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ec:	684e      	ldr	r6, [r1, #4]
 80013ee:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80013f2:	d001      	beq.n	80013f8 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80013f4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80013f8:	4c53      	ldr	r4, [pc, #332]	@ (8001548 <HAL_GPIO_Init+0x1e0>)
 80013fa:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80013fc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001402:	684e      	ldr	r6, [r1, #4]
 8001404:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001408:	d001      	beq.n	800140e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800140a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800140e:	4c4e      	ldr	r4, [pc, #312]	@ (8001548 <HAL_GPIO_Init+0x1e0>)
 8001410:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001412:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001414:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001418:	684e      	ldr	r6, [r1, #4]
 800141a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800141e:	d001      	beq.n	8001424 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001420:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001424:	4c48      	ldr	r4, [pc, #288]	@ (8001548 <HAL_GPIO_Init+0x1e0>)
 8001426:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001428:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800142a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142c:	684d      	ldr	r5, [r1, #4]
 800142e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001432:	d001      	beq.n	8001438 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001434:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001438:	4c43      	ldr	r4, [pc, #268]	@ (8001548 <HAL_GPIO_Init+0x1e0>)
 800143a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143c:	3301      	adds	r3, #1
 800143e:	2b0f      	cmp	r3, #15
 8001440:	d87d      	bhi.n	800153e <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001442:	2201      	movs	r2, #1
 8001444:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001446:	680c      	ldr	r4, [r1, #0]
 8001448:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800144c:	ea32 0404 	bics.w	r4, r2, r4
 8001450:	d1f4      	bne.n	800143c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	684c      	ldr	r4, [r1, #4]
 8001454:	f004 0403 	and.w	r4, r4, #3
 8001458:	3c01      	subs	r4, #1
 800145a:	2c01      	cmp	r4, #1
 800145c:	d98b      	bls.n	8001376 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145e:	684a      	ldr	r2, [r1, #4]
 8001460:	f002 0203 	and.w	r2, r2, #3
 8001464:	2a03      	cmp	r2, #3
 8001466:	d009      	beq.n	800147c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001468:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800146a:	005d      	lsls	r5, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	40aa      	lsls	r2, r5
 8001470:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001474:	688a      	ldr	r2, [r1, #8]
 8001476:	40aa      	lsls	r2, r5
 8001478:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800147a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147c:	684a      	ldr	r2, [r1, #4]
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	2a02      	cmp	r2, #2
 8001484:	d08e      	beq.n	80013a4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001486:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001488:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001492:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001496:	684a      	ldr	r2, [r1, #4]
 8001498:	f002 0203 	and.w	r2, r2, #3
 800149c:	fa02 f20e 	lsl.w	r2, r2, lr
 80014a0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80014a2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a4:	684a      	ldr	r2, [r1, #4]
 80014a6:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80014aa:	d0c7      	beq.n	800143c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ac:	2200      	movs	r2, #0
 80014ae:	9201      	str	r2, [sp, #4]
 80014b0:	4a26      	ldr	r2, [pc, #152]	@ (800154c <HAL_GPIO_Init+0x1e4>)
 80014b2:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80014b4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80014b8:	6454      	str	r4, [r2, #68]	@ 0x44
 80014ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014bc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80014c0:	9201      	str	r2, [sp, #4]
 80014c2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80014c4:	089c      	lsrs	r4, r3, #2
 80014c6:	1ca5      	adds	r5, r4, #2
 80014c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001544 <HAL_GPIO_Init+0x1dc>)
 80014ca:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ce:	f003 0e03 	and.w	lr, r3, #3
 80014d2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f20e 	lsl.w	r2, r2, lr
 80014dc:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <HAL_GPIO_Init+0x1e8>)
 80014e2:	4290      	cmp	r0, r2
 80014e4:	f43f af74 	beq.w	80013d0 <HAL_GPIO_Init+0x68>
 80014e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014ec:	4290      	cmp	r0, r2
 80014ee:	d01a      	beq.n	8001526 <HAL_GPIO_Init+0x1be>
 80014f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014f4:	4290      	cmp	r0, r2
 80014f6:	d018      	beq.n	800152a <HAL_GPIO_Init+0x1c2>
 80014f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014fc:	4290      	cmp	r0, r2
 80014fe:	d016      	beq.n	800152e <HAL_GPIO_Init+0x1c6>
 8001500:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001504:	4290      	cmp	r0, r2
 8001506:	d014      	beq.n	8001532 <HAL_GPIO_Init+0x1ca>
 8001508:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800150c:	4290      	cmp	r0, r2
 800150e:	d012      	beq.n	8001536 <HAL_GPIO_Init+0x1ce>
 8001510:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001514:	4290      	cmp	r0, r2
 8001516:	d010      	beq.n	800153a <HAL_GPIO_Init+0x1d2>
 8001518:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800151c:	4290      	cmp	r0, r2
 800151e:	f43f af55 	beq.w	80013cc <HAL_GPIO_Init+0x64>
 8001522:	2208      	movs	r2, #8
 8001524:	e755      	b.n	80013d2 <HAL_GPIO_Init+0x6a>
 8001526:	2201      	movs	r2, #1
 8001528:	e753      	b.n	80013d2 <HAL_GPIO_Init+0x6a>
 800152a:	2202      	movs	r2, #2
 800152c:	e751      	b.n	80013d2 <HAL_GPIO_Init+0x6a>
 800152e:	2203      	movs	r2, #3
 8001530:	e74f      	b.n	80013d2 <HAL_GPIO_Init+0x6a>
 8001532:	2204      	movs	r2, #4
 8001534:	e74d      	b.n	80013d2 <HAL_GPIO_Init+0x6a>
 8001536:	2205      	movs	r2, #5
 8001538:	e74b      	b.n	80013d2 <HAL_GPIO_Init+0x6a>
 800153a:	2206      	movs	r2, #6
 800153c:	e749      	b.n	80013d2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800153e:	b002      	add	sp, #8
 8001540:	bd70      	pop	{r4, r5, r6, pc}
 8001542:	4770      	bx	lr
 8001544:	40013800 	.word	0x40013800
 8001548:	40013c00 	.word	0x40013c00
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000

08001554 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	b10a      	cbz	r2, 800155a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	6181      	str	r1, [r0, #24]
 8001558:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155a:	0409      	lsls	r1, r1, #16
 800155c:	6181      	str	r1, [r0, #24]
  }
}
 800155e:	4770      	bx	lr

08001560 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001560:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001562:	ea01 0203 	and.w	r2, r1, r3
 8001566:	ea21 0103 	bic.w	r1, r1, r3
 800156a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800156e:	6181      	str	r1, [r0, #24]
}
 8001570:	4770      	bx	lr
	...

08001574 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001574:	2800      	cmp	r0, #0
 8001576:	f000 81e0 	beq.w	800193a <HAL_RCC_OscConfig+0x3c6>
{
 800157a:	b570      	push	{r4, r5, r6, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001580:	6803      	ldr	r3, [r0, #0]
 8001582:	f013 0f01 	tst.w	r3, #1
 8001586:	d03b      	beq.n	8001600 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001588:	4b9f      	ldr	r3, [pc, #636]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b04      	cmp	r3, #4
 8001592:	d02c      	beq.n	80015ee <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001594:	4b9c      	ldr	r3, [pc, #624]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800159c:	2b08      	cmp	r3, #8
 800159e:	d021      	beq.n	80015e4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a0:	6863      	ldr	r3, [r4, #4]
 80015a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a6:	d04f      	beq.n	8001648 <HAL_RCC_OscConfig+0xd4>
 80015a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015ac:	d052      	beq.n	8001654 <HAL_RCC_OscConfig+0xe0>
 80015ae:	4b96      	ldr	r3, [pc, #600]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80015be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c0:	6863      	ldr	r3, [r4, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d050      	beq.n	8001668 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb51 	bl	8000c6c <HAL_GetTick>
 80015ca:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015cc:	4b8e      	ldr	r3, [pc, #568]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80015d4:	d114      	bne.n	8001600 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d6:	f7ff fb49 	bl	8000c6c <HAL_GetTick>
 80015da:	1b40      	subs	r0, r0, r5
 80015dc:	2864      	cmp	r0, #100	@ 0x64
 80015de:	d9f5      	bls.n	80015cc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80015e0:	2003      	movs	r0, #3
 80015e2:	e1b1      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e4:	4b88      	ldr	r3, [pc, #544]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80015ec:	d0d8      	beq.n	80015a0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ee:	4b86      	ldr	r3, [pc, #536]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80015f6:	d003      	beq.n	8001600 <HAL_RCC_OscConfig+0x8c>
 80015f8:	6863      	ldr	r3, [r4, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 819f 	beq.w	800193e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	f013 0f02 	tst.w	r3, #2
 8001606:	d054      	beq.n	80016b2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001608:	4b7f      	ldr	r3, [pc, #508]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f013 0f0c 	tst.w	r3, #12
 8001610:	d03e      	beq.n	8001690 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001612:	4b7d      	ldr	r3, [pc, #500]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800161a:	2b08      	cmp	r3, #8
 800161c:	d033      	beq.n	8001686 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800161e:	68e3      	ldr	r3, [r4, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d068      	beq.n	80016f6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b79      	ldr	r3, [pc, #484]	@ (800180c <HAL_RCC_OscConfig+0x298>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fb1f 	bl	8000c6c <HAL_GetTick>
 800162e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	4b75      	ldr	r3, [pc, #468]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f013 0f02 	tst.w	r3, #2
 8001638:	d154      	bne.n	80016e4 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fb17 	bl	8000c6c <HAL_GetTick>
 800163e:	1b40      	subs	r0, r0, r5
 8001640:	2802      	cmp	r0, #2
 8001642:	d9f5      	bls.n	8001630 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001644:	2003      	movs	r0, #3
 8001646:	e17f      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	4a6f      	ldr	r2, [pc, #444]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e7b5      	b.n	80015c0 <HAL_RCC_OscConfig+0x4c>
 8001654:	4b6c      	ldr	r3, [pc, #432]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e7ab      	b.n	80015c0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001668:	f7ff fb00 	bl	8000c6c <HAL_GetTick>
 800166c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	4b66      	ldr	r3, [pc, #408]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001676:	d0c3      	beq.n	8001600 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff faf8 	bl	8000c6c <HAL_GetTick>
 800167c:	1b40      	subs	r0, r0, r5
 800167e:	2864      	cmp	r0, #100	@ 0x64
 8001680:	d9f5      	bls.n	800166e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001682:	2003      	movs	r0, #3
 8001684:	e160      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001686:	4b60      	ldr	r3, [pc, #384]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800168e:	d1c6      	bne.n	800161e <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001690:	4b5d      	ldr	r3, [pc, #372]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f013 0f02 	tst.w	r3, #2
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_OscConfig+0x12e>
 800169a:	68e3      	ldr	r3, [r4, #12]
 800169c:	2b01      	cmp	r3, #1
 800169e:	f040 8150 	bne.w	8001942 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a2:	4a59      	ldr	r2, [pc, #356]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80016aa:	6921      	ldr	r1, [r4, #16]
 80016ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016b0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	f013 0f08 	tst.w	r3, #8
 80016b8:	d042      	beq.n	8001740 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016ba:	6963      	ldr	r3, [r4, #20]
 80016bc:	b36b      	cbz	r3, 800171a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b53      	ldr	r3, [pc, #332]	@ (800180c <HAL_RCC_OscConfig+0x298>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff fad1 	bl	8000c6c <HAL_GetTick>
 80016ca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 80016ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d0:	f013 0f02 	tst.w	r3, #2
 80016d4:	d134      	bne.n	8001740 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d6:	f7ff fac9 	bl	8000c6c <HAL_GetTick>
 80016da:	1b40      	subs	r0, r0, r5
 80016dc:	2802      	cmp	r0, #2
 80016de:	d9f5      	bls.n	80016cc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80016e0:	2003      	movs	r0, #3
 80016e2:	e131      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4a48      	ldr	r2, [pc, #288]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80016ec:	6921      	ldr	r1, [r4, #16]
 80016ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e7dd      	b.n	80016b2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80016f6:	4b45      	ldr	r3, [pc, #276]	@ (800180c <HAL_RCC_OscConfig+0x298>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016fc:	f7ff fab6 	bl	8000c6c <HAL_GetTick>
 8001700:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	4b41      	ldr	r3, [pc, #260]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f013 0f02 	tst.w	r3, #2
 800170a:	d0d2      	beq.n	80016b2 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff faae 	bl	8000c6c <HAL_GetTick>
 8001710:	1b40      	subs	r0, r0, r5
 8001712:	2802      	cmp	r0, #2
 8001714:	d9f5      	bls.n	8001702 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001716:	2003      	movs	r0, #3
 8001718:	e116      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171a:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <HAL_RCC_OscConfig+0x298>)
 800171c:	2200      	movs	r2, #0
 800171e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff faa3 	bl	8000c6c <HAL_GetTick>
 8001726:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	4b37      	ldr	r3, [pc, #220]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 800172a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800172c:	f013 0f02 	tst.w	r3, #2
 8001730:	d006      	beq.n	8001740 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff fa9b 	bl	8000c6c <HAL_GetTick>
 8001736:	1b40      	subs	r0, r0, r5
 8001738:	2802      	cmp	r0, #2
 800173a:	d9f5      	bls.n	8001728 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 800173c:	2003      	movs	r0, #3
 800173e:	e103      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	f013 0f04 	tst.w	r3, #4
 8001746:	d077      	beq.n	8001838 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001748:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001750:	d133      	bne.n	80017ba <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	4b2c      	ldr	r3, [pc, #176]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 8001758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800175a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800175e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800176a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4b28      	ldr	r3, [pc, #160]	@ (8001810 <HAL_RCC_OscConfig+0x29c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001774:	d023      	beq.n	80017be <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001776:	68a3      	ldr	r3, [r4, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d034      	beq.n	80017e6 <HAL_RCC_OscConfig+0x272>
 800177c:	2b05      	cmp	r3, #5
 800177e:	d038      	beq.n	80017f2 <HAL_RCC_OscConfig+0x27e>
 8001780:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 8001782:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	671a      	str	r2, [r3, #112]	@ 0x70
 800178a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800178c:	f022 0204 	bic.w	r2, r2, #4
 8001790:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001792:	68a3      	ldr	r3, [r4, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d03d      	beq.n	8001814 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff fa68 	bl	8000c6c <HAL_GetTick>
 800179c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179e:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	f013 0f02 	tst.w	r3, #2
 80017a6:	d146      	bne.n	8001836 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff fa60 	bl	8000c6c <HAL_GetTick>
 80017ac:	1b80      	subs	r0, r0, r6
 80017ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017b2:	4298      	cmp	r0, r3
 80017b4:	d9f3      	bls.n	800179e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80017b6:	2003      	movs	r0, #3
 80017b8:	e0c6      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80017ba:	2500      	movs	r5, #0
 80017bc:	e7d6      	b.n	800176c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017be:	4a14      	ldr	r2, [pc, #80]	@ (8001810 <HAL_RCC_OscConfig+0x29c>)
 80017c0:	6813      	ldr	r3, [r2, #0]
 80017c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80017c8:	f7ff fa50 	bl	8000c6c <HAL_GetTick>
 80017cc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <HAL_RCC_OscConfig+0x29c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80017d6:	d1ce      	bne.n	8001776 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d8:	f7ff fa48 	bl	8000c6c <HAL_GetTick>
 80017dc:	1b80      	subs	r0, r0, r6
 80017de:	2802      	cmp	r0, #2
 80017e0:	d9f5      	bls.n	80017ce <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80017e2:	2003      	movs	r0, #3
 80017e4:	e0b0      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e6:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 80017e8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f0:	e7cf      	b.n	8001792 <HAL_RCC_OscConfig+0x21e>
 80017f2:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_RCC_OscConfig+0x294>)
 80017f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017f6:	f042 0204 	orr.w	r2, r2, #4
 80017fa:	671a      	str	r2, [r3, #112]	@ 0x70
 80017fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	671a      	str	r2, [r3, #112]	@ 0x70
 8001804:	e7c5      	b.n	8001792 <HAL_RCC_OscConfig+0x21e>
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	42470000 	.word	0x42470000
 8001810:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff fa2a 	bl	8000c6c <HAL_GetTick>
 8001818:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	4b52      	ldr	r3, [pc, #328]	@ (8001964 <HAL_RCC_OscConfig+0x3f0>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181e:	f013 0f02 	tst.w	r3, #2
 8001822:	d008      	beq.n	8001836 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff fa22 	bl	8000c6c <HAL_GetTick>
 8001828:	1b80      	subs	r0, r0, r6
 800182a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800182e:	4298      	cmp	r0, r3
 8001830:	d9f3      	bls.n	800181a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001832:	2003      	movs	r0, #3
 8001834:	e088      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001836:	b9ed      	cbnz	r5, 8001874 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001838:	69a3      	ldr	r3, [r4, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8083 	beq.w	8001946 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001840:	4a48      	ldr	r2, [pc, #288]	@ (8001964 <HAL_RCC_OscConfig+0x3f0>)
 8001842:	6892      	ldr	r2, [r2, #8]
 8001844:	f002 020c 	and.w	r2, r2, #12
 8001848:	2a08      	cmp	r2, #8
 800184a:	d051      	beq.n	80018f0 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184c:	2b02      	cmp	r3, #2
 800184e:	d017      	beq.n	8001880 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001850:	4b45      	ldr	r3, [pc, #276]	@ (8001968 <HAL_RCC_OscConfig+0x3f4>)
 8001852:	2200      	movs	r2, #0
 8001854:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fa09 	bl	8000c6c <HAL_GetTick>
 800185a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185c:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <HAL_RCC_OscConfig+0x3f0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001864:	d042      	beq.n	80018ec <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff fa01 	bl	8000c6c <HAL_GetTick>
 800186a:	1b00      	subs	r0, r0, r4
 800186c:	2802      	cmp	r0, #2
 800186e:	d9f5      	bls.n	800185c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001870:	2003      	movs	r0, #3
 8001872:	e069      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001874:	4a3b      	ldr	r2, [pc, #236]	@ (8001964 <HAL_RCC_OscConfig+0x3f0>)
 8001876:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	e7db      	b.n	8001838 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001880:	4b39      	ldr	r3, [pc, #228]	@ (8001968 <HAL_RCC_OscConfig+0x3f4>)
 8001882:	2200      	movs	r2, #0
 8001884:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001886:	f7ff f9f1 	bl	8000c6c <HAL_GetTick>
 800188a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188c:	4b35      	ldr	r3, [pc, #212]	@ (8001964 <HAL_RCC_OscConfig+0x3f0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001894:	d006      	beq.n	80018a4 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff f9e9 	bl	8000c6c <HAL_GetTick>
 800189a:	1b40      	subs	r0, r0, r5
 800189c:	2802      	cmp	r0, #2
 800189e:	d9f5      	bls.n	800188c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80018a0:	2003      	movs	r0, #3
 80018a2:	e051      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018a4:	69e3      	ldr	r3, [r4, #28]
 80018a6:	6a22      	ldr	r2, [r4, #32]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80018ac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018b0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80018b2:	0852      	lsrs	r2, r2, #1
 80018b4:	3a01      	subs	r2, #1
 80018b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80018bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018c0:	4a28      	ldr	r2, [pc, #160]	@ (8001964 <HAL_RCC_OscConfig+0x3f0>)
 80018c2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <HAL_RCC_OscConfig+0x3f4>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80018ca:	f7ff f9cf 	bl	8000c6c <HAL_GetTick>
 80018ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d0:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_RCC_OscConfig+0x3f0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80018d8:	d106      	bne.n	80018e8 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff f9c7 	bl	8000c6c <HAL_GetTick>
 80018de:	1b00      	subs	r0, r0, r4
 80018e0:	2802      	cmp	r0, #2
 80018e2:	d9f5      	bls.n	80018d0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80018e4:	2003      	movs	r0, #3
 80018e6:	e02f      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80018e8:	2000      	movs	r0, #0
 80018ea:	e02d      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
 80018ec:	2000      	movs	r0, #0
 80018ee:	e02b      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d02b      	beq.n	800194c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HAL_RCC_OscConfig+0x3f0>)
 80018f6:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80018fc:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018fe:	4291      	cmp	r1, r2
 8001900:	d126      	bne.n	8001950 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001902:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001906:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001908:	428a      	cmp	r2, r1
 800190a:	d123      	bne.n	8001954 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800190c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001912:	401a      	ands	r2, r3
 8001914:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001918:	d11e      	bne.n	8001958 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800191a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800191e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001920:	0852      	lsrs	r2, r2, #1
 8001922:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001924:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001928:	d118      	bne.n	800195c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800192a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800192e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001930:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001934:	d114      	bne.n	8001960 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001936:	2000      	movs	r0, #0
 8001938:	e006      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
}
 800193c:	4770      	bx	lr
        return HAL_ERROR;
 800193e:	2001      	movs	r0, #1
 8001940:	e002      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001942:	2001      	movs	r0, #1
 8001944:	e000      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001946:	2000      	movs	r0, #0
}
 8001948:	b002      	add	sp, #8
 800194a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800194c:	2001      	movs	r0, #1
 800194e:	e7fb      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001950:	2001      	movs	r0, #1
 8001952:	e7f9      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
 8001954:	2001      	movs	r0, #1
 8001956:	e7f7      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
 8001958:	2001      	movs	r0, #1
 800195a:	e7f5      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
 800195c:	2001      	movs	r0, #1
 800195e:	e7f3      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
 8001960:	2001      	movs	r0, #1
 8001962:	e7f1      	b.n	8001948 <HAL_RCC_OscConfig+0x3d4>
 8001964:	40023800 	.word	0x40023800
 8001968:	42470000 	.word	0x42470000

0800196c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800196c:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800196e:	4b31      	ldr	r3, [pc, #196]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b08      	cmp	r3, #8
 8001978:	d001      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800197a:	482f      	ldr	r0, [pc, #188]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800197c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800197e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800198c:	d02c      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b29      	ldr	r3, [pc, #164]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001990:	6858      	ldr	r0, [r3, #4]
 8001992:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001996:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800199a:	ebbc 0c00 	subs.w	ip, ip, r0
 800199e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80019a2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80019a6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80019aa:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80019ae:	ebb1 010c 	subs.w	r1, r1, ip
 80019b2:	eb63 030e 	sbc.w	r3, r3, lr
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019bc:	00c9      	lsls	r1, r1, #3
 80019be:	eb11 0c00 	adds.w	ip, r1, r0
 80019c2:	f143 0300 	adc.w	r3, r3, #0
 80019c6:	0299      	lsls	r1, r3, #10
 80019c8:	2300      	movs	r3, #0
 80019ca:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80019ce:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80019d2:	f7fe fc4d 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019d6:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019de:	3301      	adds	r3, #1
 80019e0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80019e2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80019e6:	e7c9      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019ea:	6858      	ldr	r0, [r3, #4]
 80019ec:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80019f0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80019f4:	ebbc 0c00 	subs.w	ip, ip, r0
 80019f8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80019fc:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001a00:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001a04:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001a08:	ebb1 010c 	subs.w	r1, r1, ip
 8001a0c:	eb63 030e 	sbc.w	r3, r3, lr
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a16:	00c9      	lsls	r1, r1, #3
 8001a18:	eb11 0c00 	adds.w	ip, r1, r0
 8001a1c:	f143 0300 	adc.w	r3, r3, #0
 8001a20:	0299      	lsls	r1, r3, #10
 8001a22:	2300      	movs	r3, #0
 8001a24:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001a28:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001a2c:	f7fe fc20 	bl	8000270 <__aeabi_uldivmod>
 8001a30:	e7d1      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x6a>
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	00f42400 	.word	0x00f42400

08001a3c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	f000 809b 	beq.w	8001b78 <HAL_RCC_ClockConfig+0x13c>
{
 8001a42:	b570      	push	{r4, r5, r6, lr}
 8001a44:	460d      	mov	r5, r1
 8001a46:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a48:	4b4f      	ldr	r3, [pc, #316]	@ (8001b88 <HAL_RCC_ClockConfig+0x14c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	428b      	cmp	r3, r1
 8001a52:	d208      	bcs.n	8001a66 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a54:	b2cb      	uxtb	r3, r1
 8001a56:	4a4c      	ldr	r2, [pc, #304]	@ (8001b88 <HAL_RCC_ClockConfig+0x14c>)
 8001a58:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	6813      	ldr	r3, [r2, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	428b      	cmp	r3, r1
 8001a62:	f040 808b 	bne.w	8001b7c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	f013 0f02 	tst.w	r3, #2
 8001a6c:	d017      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6e:	f013 0f04 	tst.w	r3, #4
 8001a72:	d004      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a74:	4a45      	ldr	r2, [pc, #276]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001a76:	6893      	ldr	r3, [r2, #8]
 8001a78:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a7c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	f013 0f08 	tst.w	r3, #8
 8001a84:	d004      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a86:	4a41      	ldr	r2, [pc, #260]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001a88:	6893      	ldr	r3, [r2, #8]
 8001a8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a8e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4a3e      	ldr	r2, [pc, #248]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001a92:	6893      	ldr	r3, [r2, #8]
 8001a94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a98:	68a1      	ldr	r1, [r4, #8]
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	f013 0f01 	tst.w	r3, #1
 8001aa4:	d032      	beq.n	8001b0c <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	6863      	ldr	r3, [r4, #4]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d021      	beq.n	8001af0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aac:	1e9a      	subs	r2, r3, #2
 8001aae:	2a01      	cmp	r2, #1
 8001ab0:	d925      	bls.n	8001afe <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab2:	4a36      	ldr	r2, [pc, #216]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	f012 0f02 	tst.w	r2, #2
 8001aba:	d061      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001abc:	4933      	ldr	r1, [pc, #204]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001abe:	688a      	ldr	r2, [r1, #8]
 8001ac0:	f022 0203 	bic.w	r2, r2, #3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001ac8:	f7ff f8d0 	bl	8000c6c <HAL_GetTick>
 8001acc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b2f      	ldr	r3, [pc, #188]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	6862      	ldr	r2, [r4, #4]
 8001ad8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001adc:	d016      	beq.n	8001b0c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ade:	f7ff f8c5 	bl	8000c6c <HAL_GetTick>
 8001ae2:	1b80      	subs	r0, r0, r6
 8001ae4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ae8:	4298      	cmp	r0, r3
 8001aea:	d9f0      	bls.n	8001ace <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001aec:	2003      	movs	r0, #3
 8001aee:	e042      	b.n	8001b76 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af0:	4a26      	ldr	r2, [pc, #152]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001af8:	d1e0      	bne.n	8001abc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001afa:	2001      	movs	r0, #1
 8001afc:	e03b      	b.n	8001b76 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4a23      	ldr	r2, [pc, #140]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001b06:	d1d9      	bne.n	8001abc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001b08:	2001      	movs	r0, #1
 8001b0a:	e034      	b.n	8001b76 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b88 <HAL_RCC_ClockConfig+0x14c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	42ab      	cmp	r3, r5
 8001b16:	d907      	bls.n	8001b28 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b18:	b2ea      	uxtb	r2, r5
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_RCC_ClockConfig+0x14c>)
 8001b1c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	42ab      	cmp	r3, r5
 8001b26:	d12d      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	f013 0f04 	tst.w	r3, #4
 8001b2e:	d006      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001b32:	6893      	ldr	r3, [r2, #8]
 8001b34:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001b38:	68e1      	ldr	r1, [r4, #12]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	f013 0f08 	tst.w	r3, #8
 8001b44:	d007      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b46:	4a11      	ldr	r2, [pc, #68]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001b48:	6893      	ldr	r3, [r2, #8]
 8001b4a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001b4e:	6921      	ldr	r1, [r4, #16]
 8001b50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b54:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b56:	f7ff ff09 	bl	800196c <HAL_RCC_GetSysClockFreq>
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_RCC_ClockConfig+0x150>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b62:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <HAL_RCC_ClockConfig+0x154>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	40d8      	lsrs	r0, r3
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_RCC_ClockConfig+0x158>)
 8001b6a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <HAL_RCC_ClockConfig+0x15c>)
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	f7ff f830 	bl	8000bd4 <HAL_InitTick>
  return HAL_OK;
 8001b74:	2000      	movs	r0, #0
}
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b78:	2001      	movs	r0, #1
}
 8001b7a:	4770      	bx	lr
      return HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	e7fa      	b.n	8001b76 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001b80:	2001      	movs	r0, #1
 8001b82:	e7f8      	b.n	8001b76 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001b84:	2001      	movs	r0, #1
 8001b86:	e7f6      	b.n	8001b76 <HAL_RCC_ClockConfig+0x13a>
 8001b88:	40023c00 	.word	0x40023c00
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	08003164 	.word	0x08003164
 8001b94:	20000008 	.word	0x20000008
 8001b98:	20000010 	.word	0x20000010

08001b9c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b9c:	4b01      	ldr	r3, [pc, #4]	@ (8001ba4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001baa:	f7ff fff7 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001bae:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001bb6:	4a03      	ldr	r2, [pc, #12]	@ (8001bc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bba:	40d8      	lsrs	r0, r3
 8001bbc:	bd08      	pop	{r3, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	0800315c 	.word	0x0800315c

08001bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bca:	f7ff ffe7 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001bce:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001bd6:	4a03      	ldr	r2, [pc, #12]	@ (8001be4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bda:	40d8      	lsrs	r0, r3
 8001bdc:	bd08      	pop	{r3, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	0800315c 	.word	0x0800315c

08001be8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d137      	bne.n	8001c62 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf8:	6802      	ldr	r2, [r0, #0]
 8001bfa:	68d3      	ldr	r3, [r2, #12]
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c02:	6803      	ldr	r3, [r0, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	@ (8001c6c <HAL_TIM_Base_Start_IT+0x84>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d020      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x64>
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0e:	d01d      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x64>
 8001c10:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d019      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x64>
 8001c18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d015      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x64>
 8001c20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d011      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x64>
 8001c28:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00d      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x64>
 8001c30:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d009      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x64>
 8001c38:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d005      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c48:	2000      	movs	r0, #0
 8001c4a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c52:	2a06      	cmp	r2, #6
 8001c54:	d007      	beq.n	8001c66 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001c5e:	2000      	movs	r0, #0
 8001c60:	4770      	bx	lr
    return HAL_ERROR;
 8001c62:	2001      	movs	r0, #1
 8001c64:	4770      	bx	lr
  return HAL_OK;
 8001c66:	2000      	movs	r0, #0
}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40010000 	.word	0x40010000

08001c70 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c70:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c72:	4a34      	ldr	r2, [pc, #208]	@ (8001d44 <TIM_Base_SetConfig+0xd4>)
 8001c74:	4290      	cmp	r0, r2
 8001c76:	d012      	beq.n	8001c9e <TIM_Base_SetConfig+0x2e>
 8001c78:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001c7c:	d00f      	beq.n	8001c9e <TIM_Base_SetConfig+0x2e>
 8001c7e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001c82:	4290      	cmp	r0, r2
 8001c84:	d00b      	beq.n	8001c9e <TIM_Base_SetConfig+0x2e>
 8001c86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c8a:	4290      	cmp	r0, r2
 8001c8c:	d007      	beq.n	8001c9e <TIM_Base_SetConfig+0x2e>
 8001c8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c92:	4290      	cmp	r0, r2
 8001c94:	d003      	beq.n	8001c9e <TIM_Base_SetConfig+0x2e>
 8001c96:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001c9a:	4290      	cmp	r0, r2
 8001c9c:	d103      	bne.n	8001ca6 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ca2:	684a      	ldr	r2, [r1, #4]
 8001ca4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ca6:	4a27      	ldr	r2, [pc, #156]	@ (8001d44 <TIM_Base_SetConfig+0xd4>)
 8001ca8:	4290      	cmp	r0, r2
 8001caa:	d02a      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001cac:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001cb0:	d027      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001cb2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001cb6:	4290      	cmp	r0, r2
 8001cb8:	d023      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001cba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cbe:	4290      	cmp	r0, r2
 8001cc0:	d01f      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001cc2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cc6:	4290      	cmp	r0, r2
 8001cc8:	d01b      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001cca:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	d017      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001cd2:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001cd6:	4290      	cmp	r0, r2
 8001cd8:	d013      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001cda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cde:	4290      	cmp	r0, r2
 8001ce0:	d00f      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001ce2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ce6:	4290      	cmp	r0, r2
 8001ce8:	d00b      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001cea:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001cee:	4290      	cmp	r0, r2
 8001cf0:	d007      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001cf2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cf6:	4290      	cmp	r0, r2
 8001cf8:	d003      	beq.n	8001d02 <TIM_Base_SetConfig+0x92>
 8001cfa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cfe:	4290      	cmp	r0, r2
 8001d00:	d103      	bne.n	8001d0a <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d06:	68ca      	ldr	r2, [r1, #12]
 8001d08:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d0e:	694a      	ldr	r2, [r1, #20]
 8001d10:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001d12:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d14:	688b      	ldr	r3, [r1, #8]
 8001d16:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d18:	680b      	ldr	r3, [r1, #0]
 8001d1a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <TIM_Base_SetConfig+0xd4>)
 8001d1e:	4298      	cmp	r0, r3
 8001d20:	d003      	beq.n	8001d2a <TIM_Base_SetConfig+0xba>
 8001d22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d26:	4298      	cmp	r0, r3
 8001d28:	d101      	bne.n	8001d2e <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d2a:	690b      	ldr	r3, [r1, #16]
 8001d2c:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d32:	6903      	ldr	r3, [r0, #16]
 8001d34:	f013 0f01 	tst.w	r3, #1
 8001d38:	d003      	beq.n	8001d42 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d3a:	6903      	ldr	r3, [r0, #16]
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6103      	str	r3, [r0, #16]
  }
}
 8001d42:	4770      	bx	lr
 8001d44:	40010000 	.word	0x40010000

08001d48 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001d48:	b340      	cbz	r0, 8001d9c <HAL_TIM_Base_Init+0x54>
{
 8001d4a:	b510      	push	{r4, lr}
 8001d4c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001d52:	b1f3      	cbz	r3, 8001d92 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	f851 0b04 	ldr.w	r0, [r1], #4
 8001d60:	f7ff ff86 	bl	8001c70 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001d6e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001d72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001d76:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d82:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001d86:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001d8a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001d8e:	2000      	movs	r0, #0
}
 8001d90:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001d92:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001d96:	f7fe fe43 	bl	8000a20 <HAL_TIM_Base_MspInit>
 8001d9a:	e7db      	b.n	8001d54 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001d9c:	2001      	movs	r0, #1
}
 8001d9e:	4770      	bx	lr

08001da0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001da0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001da4:	2a01      	cmp	r2, #1
 8001da6:	d03d      	beq.n	8001e24 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8001da8:	b410      	push	{r4}
 8001daa:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db2:	2202      	movs	r2, #2
 8001db4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001db8:	6802      	ldr	r2, [r0, #0]
 8001dba:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dbc:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dbe:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dc2:	6808      	ldr	r0, [r1, #0]
 8001dc4:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dc8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4816      	ldr	r0, [pc, #88]	@ (8001e28 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8001dce:	4282      	cmp	r2, r0
 8001dd0:	d01a      	beq.n	8001e08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001dd2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001dd6:	d017      	beq.n	8001e08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001dd8:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8001ddc:	4282      	cmp	r2, r0
 8001dde:	d013      	beq.n	8001e08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001de0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001de4:	4282      	cmp	r2, r0
 8001de6:	d00f      	beq.n	8001e08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001de8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001dec:	4282      	cmp	r2, r0
 8001dee:	d00b      	beq.n	8001e08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001df0:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8001df4:	4282      	cmp	r2, r0
 8001df6:	d007      	beq.n	8001e08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001df8:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8001dfc:	4282      	cmp	r2, r0
 8001dfe:	d003      	beq.n	8001e08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001e00:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8001e04:	4282      	cmp	r2, r0
 8001e06:	d104      	bne.n	8001e12 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e08:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e0c:	6849      	ldr	r1, [r1, #4]
 8001e0e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e10:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e22:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001e24:	2002      	movs	r0, #2
}
 8001e26:	4770      	bx	lr
 8001e28:	40010000 	.word	0x40010000

08001e2c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e2c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2e:	f102 030c 	add.w	r3, r2, #12
 8001e32:	e853 3f00 	ldrex	r3, [r3]
 8001e36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e3a:	320c      	adds	r2, #12
 8001e3c:	e842 3100 	strex	r1, r3, [r2]
 8001e40:	2900      	cmp	r1, #0
 8001e42:	d1f3      	bne.n	8001e2c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e44:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e46:	f102 0314 	add.w	r3, r2, #20
 8001e4a:	e853 3f00 	ldrex	r3, [r3]
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e52:	3214      	adds	r2, #20
 8001e54:	e842 3100 	strex	r1, r3, [r2]
 8001e58:	2900      	cmp	r1, #0
 8001e5a:	d1f3      	bne.n	8001e44 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e5c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e62:	2320      	movs	r3, #32
 8001e64:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001e6c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e70:	f102 030c 	add.w	r3, r2, #12
 8001e74:	e853 3f00 	ldrex	r3, [r3]
 8001e78:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e7c:	320c      	adds	r2, #12
 8001e7e:	e842 3100 	strex	r1, r3, [r2]
 8001e82:	2900      	cmp	r1, #0
 8001e84:	d1f3      	bne.n	8001e6e <UART_EndRxTransfer+0x42>
 8001e86:	e7ec      	b.n	8001e62 <UART_EndRxTransfer+0x36>

08001e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e8c:	6802      	ldr	r2, [r0, #0]
 8001e8e:	6913      	ldr	r3, [r2, #16]
 8001e90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e94:	68c1      	ldr	r1, [r0, #12]
 8001e96:	430b      	orrs	r3, r1
 8001e98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e9a:	6883      	ldr	r3, [r0, #8]
 8001e9c:	6902      	ldr	r2, [r0, #16]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	6943      	ldr	r3, [r0, #20]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	69c3      	ldr	r3, [r0, #28]
 8001ea6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001ea8:	6801      	ldr	r1, [r0, #0]
 8001eaa:	68cb      	ldr	r3, [r1, #12]
 8001eac:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001eb0:	f023 030c 	bic.w	r3, r3, #12
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eb8:	6802      	ldr	r2, [r0, #0]
 8001eba:	6953      	ldr	r3, [r2, #20]
 8001ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ec0:	6981      	ldr	r1, [r0, #24]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ec6:	6803      	ldr	r3, [r0, #0]
 8001ec8:	4a31      	ldr	r2, [pc, #196]	@ (8001f90 <UART_SetConfig+0x108>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d006      	beq.n	8001edc <UART_SetConfig+0x54>
 8001ece:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d002      	beq.n	8001edc <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ed6:	f7ff fe67 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8001eda:	e001      	b.n	8001ee0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001edc:	f7ff fe74 	bl	8001bc8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ee0:	69e3      	ldr	r3, [r4, #28]
 8001ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ee6:	d029      	beq.n	8001f3c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ee8:	2100      	movs	r1, #0
 8001eea:	1803      	adds	r3, r0, r0
 8001eec:	4149      	adcs	r1, r1
 8001eee:	181b      	adds	r3, r3, r0
 8001ef0:	f141 0100 	adc.w	r1, r1, #0
 8001ef4:	00c9      	lsls	r1, r1, #3
 8001ef6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	1818      	adds	r0, r3, r0
 8001efe:	6863      	ldr	r3, [r4, #4]
 8001f00:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001f04:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001f08:	f141 0100 	adc.w	r1, r1, #0
 8001f0c:	f7fe f9b0 	bl	8000270 <__aeabi_uldivmod>
 8001f10:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <UART_SetConfig+0x10c>)
 8001f12:	fba2 3100 	umull	r3, r1, r2, r0
 8001f16:	0949      	lsrs	r1, r1, #5
 8001f18:	2364      	movs	r3, #100	@ 0x64
 8001f1a:	fb03 0311 	mls	r3, r3, r1, r0
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	3332      	adds	r3, #50	@ 0x32
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f2c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	6821      	ldr	r1, [r4, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }
}
 8001f3a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	1802      	adds	r2, r0, r0
 8001f40:	eb43 0103 	adc.w	r1, r3, r3
 8001f44:	1812      	adds	r2, r2, r0
 8001f46:	f141 0100 	adc.w	r1, r1, #0
 8001f4a:	00c9      	lsls	r1, r1, #3
 8001f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f50:	00d2      	lsls	r2, r2, #3
 8001f52:	1810      	adds	r0, r2, r0
 8001f54:	f141 0100 	adc.w	r1, r1, #0
 8001f58:	6862      	ldr	r2, [r4, #4]
 8001f5a:	1892      	adds	r2, r2, r2
 8001f5c:	415b      	adcs	r3, r3
 8001f5e:	f7fe f987 	bl	8000270 <__aeabi_uldivmod>
 8001f62:	4a0c      	ldr	r2, [pc, #48]	@ (8001f94 <UART_SetConfig+0x10c>)
 8001f64:	fba2 3100 	umull	r3, r1, r2, r0
 8001f68:	0949      	lsrs	r1, r1, #5
 8001f6a:	2364      	movs	r3, #100	@ 0x64
 8001f6c:	fb03 0311 	mls	r3, r3, r1, r0
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	3332      	adds	r3, #50	@ 0x32
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	005a      	lsls	r2, r3, #1
 8001f7c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001f80:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	6821      	ldr	r1, [r4, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
 8001f8e:	e7d4      	b.n	8001f3a <UART_SetConfig+0xb2>
 8001f90:	40011000 	.word	0x40011000
 8001f94:	51eb851f 	.word	0x51eb851f

08001f98 <UART_WaitOnFlagUntilTimeout>:
{
 8001f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	4605      	mov	r5, r0
 8001fa0:	460e      	mov	r6, r1
 8001fa2:	4617      	mov	r7, r2
 8001fa4:	4699      	mov	r9, r3
 8001fa6:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001faa:	682b      	ldr	r3, [r5, #0]
 8001fac:	681c      	ldr	r4, [r3, #0]
 8001fae:	ea36 0404 	bics.w	r4, r6, r4
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2401      	moveq	r4, #1
 8001fb6:	2400      	movne	r4, #0
 8001fb8:	42bc      	cmp	r4, r7
 8001fba:	d128      	bne.n	800200e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001fbc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001fc0:	d0f3      	beq.n	8001faa <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc2:	f7fe fe53 	bl	8000c6c <HAL_GetTick>
 8001fc6:	eba0 0009 	sub.w	r0, r0, r9
 8001fca:	4540      	cmp	r0, r8
 8001fcc:	d823      	bhi.n	8002016 <UART_WaitOnFlagUntilTimeout+0x7e>
 8001fce:	f1b8 0f00 	cmp.w	r8, #0
 8001fd2:	d022      	beq.n	800201a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	f012 0f04 	tst.w	r2, #4
 8001fdc:	d0e5      	beq.n	8001faa <UART_WaitOnFlagUntilTimeout+0x12>
 8001fde:	2e80      	cmp	r6, #128	@ 0x80
 8001fe0:	d0e3      	beq.n	8001faa <UART_WaitOnFlagUntilTimeout+0x12>
 8001fe2:	2e40      	cmp	r6, #64	@ 0x40
 8001fe4:	d0e1      	beq.n	8001faa <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	f012 0f08 	tst.w	r2, #8
 8001fec:	d0dd      	beq.n	8001faa <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001fee:	2400      	movs	r4, #0
 8001ff0:	9401      	str	r4, [sp, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	9201      	str	r2, [sp, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	f7ff ff15 	bl	8001e2c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002002:	2308      	movs	r3, #8
 8002004:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002006:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800200a:	2001      	movs	r0, #1
 800200c:	e000      	b.n	8002010 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800200e:	2000      	movs	r0, #0
}
 8002010:	b003      	add	sp, #12
 8002012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002016:	2003      	movs	r0, #3
 8002018:	e7fa      	b.n	8002010 <UART_WaitOnFlagUntilTimeout+0x78>
 800201a:	2003      	movs	r0, #3
 800201c:	e7f8      	b.n	8002010 <UART_WaitOnFlagUntilTimeout+0x78>

0800201e <HAL_UART_Init>:
  if (huart == NULL)
 800201e:	b360      	cbz	r0, 800207a <HAL_UART_Init+0x5c>
{
 8002020:	b510      	push	{r4, lr}
 8002022:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002024:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002028:	b313      	cbz	r3, 8002070 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800202a:	2324      	movs	r3, #36	@ 0x24
 800202c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002030:	6822      	ldr	r2, [r4, #0]
 8002032:	68d3      	ldr	r3, [r2, #12]
 8002034:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002038:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800203a:	4620      	mov	r0, r4
 800203c:	f7ff ff24 	bl	8001e88 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002040:	6822      	ldr	r2, [r4, #0]
 8002042:	6913      	ldr	r3, [r2, #16]
 8002044:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002048:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204a:	6822      	ldr	r2, [r4, #0]
 800204c:	6953      	ldr	r3, [r2, #20]
 800204e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002052:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002054:	6822      	ldr	r2, [r4, #0]
 8002056:	68d3      	ldr	r3, [r2, #12]
 8002058:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800205c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205e:	2000      	movs	r0, #0
 8002060:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002062:	2320      	movs	r3, #32
 8002064:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002068:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800206c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800206e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002070:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002074:	f7fe fcec 	bl	8000a50 <HAL_UART_MspInit>
 8002078:	e7d7      	b.n	800202a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800207a:	2001      	movs	r0, #1
}
 800207c:	4770      	bx	lr

0800207e <HAL_UART_Transmit>:
{
 800207e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002086:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b20      	cmp	r3, #32
 800208e:	d156      	bne.n	800213e <HAL_UART_Transmit+0xc0>
 8002090:	4604      	mov	r4, r0
 8002092:	460d      	mov	r5, r1
 8002094:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002096:	2900      	cmp	r1, #0
 8002098:	d055      	beq.n	8002146 <HAL_UART_Transmit+0xc8>
 800209a:	b90a      	cbnz	r2, 80020a0 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800209c:	2001      	movs	r0, #1
 800209e:	e04f      	b.n	8002140 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020a4:	2321      	movs	r3, #33	@ 0x21
 80020a6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80020aa:	f7fe fddf 	bl	8000c6c <HAL_GetTick>
 80020ae:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80020b0:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020b4:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b8:	68a3      	ldr	r3, [r4, #8]
 80020ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020be:	d002      	beq.n	80020c6 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80020c0:	f04f 0800 	mov.w	r8, #0
 80020c4:	e014      	b.n	80020f0 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c6:	6923      	ldr	r3, [r4, #16]
 80020c8:	b32b      	cbz	r3, 8002116 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80020ca:	f04f 0800 	mov.w	r8, #0
 80020ce:	e00f      	b.n	80020f0 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80020d0:	2320      	movs	r3, #32
 80020d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80020d6:	2003      	movs	r0, #3
 80020d8:	e032      	b.n	8002140 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020da:	f838 3b02 	ldrh.w	r3, [r8], #2
 80020de:	6822      	ldr	r2, [r4, #0]
 80020e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80020e6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80020e8:	b292      	uxth	r2, r2
 80020ea:	3a01      	subs	r2, #1
 80020ec:	b292      	uxth	r2, r2
 80020ee:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80020f0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b193      	cbz	r3, 800211c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f6:	9600      	str	r6, [sp, #0]
 80020f8:	463b      	mov	r3, r7
 80020fa:	2200      	movs	r2, #0
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	4620      	mov	r0, r4
 8002100:	f7ff ff4a 	bl	8001f98 <UART_WaitOnFlagUntilTimeout>
 8002104:	2800      	cmp	r0, #0
 8002106:	d1e3      	bne.n	80020d0 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002108:	2d00      	cmp	r5, #0
 800210a:	d0e6      	beq.n	80020da <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800210c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002114:	e7e7      	b.n	80020e6 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002116:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002118:	2500      	movs	r5, #0
 800211a:	e7e9      	b.n	80020f0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800211c:	9600      	str	r6, [sp, #0]
 800211e:	463b      	mov	r3, r7
 8002120:	2200      	movs	r2, #0
 8002122:	2140      	movs	r1, #64	@ 0x40
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff ff37 	bl	8001f98 <UART_WaitOnFlagUntilTimeout>
 800212a:	b918      	cbnz	r0, 8002134 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800212c:	2320      	movs	r3, #32
 800212e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002132:	e005      	b.n	8002140 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002134:	2320      	movs	r3, #32
 8002136:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800213a:	2003      	movs	r0, #3
 800213c:	e000      	b.n	8002140 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800213e:	2002      	movs	r0, #2
}
 8002140:	b002      	add	sp, #8
 8002142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002146:	2001      	movs	r0, #1
 8002148:	e7fa      	b.n	8002140 <HAL_UART_Transmit+0xc2>
	...

0800214c <arm_cos_f32>:
 800214c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80021d4 <arm_cos_f32+0x88>
 8002150:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002154:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8002158:	ee30 0a27 	vadd.f32	s0, s0, s15
 800215c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002168:	d504      	bpl.n	8002174 <arm_cos_f32+0x28>
 800216a:	ee17 3a90 	vmov	r3, s15
 800216e:	3b01      	subs	r3, #1
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002178:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80021d8 <arm_cos_f32+0x8c>
 800217c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002180:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002184:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002188:	ee17 3a90 	vmov	r3, s15
 800218c:	b29b      	uxth	r3, r3
 800218e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002192:	d21a      	bcs.n	80021ca <arm_cos_f32+0x7e>
 8002194:	ee07 3a90 	vmov	s15, r3
 8002198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219c:	1c59      	adds	r1, r3, #1
 800219e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80021a2:	4a0e      	ldr	r2, [pc, #56]	@ (80021dc <arm_cos_f32+0x90>)
 80021a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80021a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80021ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80021b0:	ed93 7a00 	vldr	s14, [r3]
 80021b4:	edd2 6a00 	vldr	s13, [r2]
 80021b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80021bc:	ee20 0a26 	vmul.f32	s0, s0, s13
 80021c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80021c8:	4770      	bx	lr
 80021ca:	ee30 0a47 	vsub.f32	s0, s0, s14
 80021ce:	2101      	movs	r1, #1
 80021d0:	2300      	movs	r3, #0
 80021d2:	e7e6      	b.n	80021a2 <arm_cos_f32+0x56>
 80021d4:	3e22f983 	.word	0x3e22f983
 80021d8:	44000000 	.word	0x44000000
 80021dc:	0800317c 	.word	0x0800317c

080021e0 <std>:
 80021e0:	2300      	movs	r3, #0
 80021e2:	b510      	push	{r4, lr}
 80021e4:	4604      	mov	r4, r0
 80021e6:	e9c0 3300 	strd	r3, r3, [r0]
 80021ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021ee:	6083      	str	r3, [r0, #8]
 80021f0:	8181      	strh	r1, [r0, #12]
 80021f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80021f4:	81c2      	strh	r2, [r0, #14]
 80021f6:	6183      	str	r3, [r0, #24]
 80021f8:	4619      	mov	r1, r3
 80021fa:	2208      	movs	r2, #8
 80021fc:	305c      	adds	r0, #92	@ 0x5c
 80021fe:	f000 f9f9 	bl	80025f4 <memset>
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <std+0x58>)
 8002204:	6263      	str	r3, [r4, #36]	@ 0x24
 8002206:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <std+0x5c>)
 8002208:	62a3      	str	r3, [r4, #40]	@ 0x28
 800220a:	4b0d      	ldr	r3, [pc, #52]	@ (8002240 <std+0x60>)
 800220c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <std+0x64>)
 8002210:	6323      	str	r3, [r4, #48]	@ 0x30
 8002212:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <std+0x68>)
 8002214:	6224      	str	r4, [r4, #32]
 8002216:	429c      	cmp	r4, r3
 8002218:	d006      	beq.n	8002228 <std+0x48>
 800221a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800221e:	4294      	cmp	r4, r2
 8002220:	d002      	beq.n	8002228 <std+0x48>
 8002222:	33d0      	adds	r3, #208	@ 0xd0
 8002224:	429c      	cmp	r4, r3
 8002226:	d105      	bne.n	8002234 <std+0x54>
 8002228:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800222c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002230:	f000 ba58 	b.w	80026e4 <__retarget_lock_init_recursive>
 8002234:	bd10      	pop	{r4, pc}
 8002236:	bf00      	nop
 8002238:	08002445 	.word	0x08002445
 800223c:	08002467 	.word	0x08002467
 8002240:	0800249f 	.word	0x0800249f
 8002244:	080024c3 	.word	0x080024c3
 8002248:	200002ac 	.word	0x200002ac

0800224c <stdio_exit_handler>:
 800224c:	4a02      	ldr	r2, [pc, #8]	@ (8002258 <stdio_exit_handler+0xc>)
 800224e:	4903      	ldr	r1, [pc, #12]	@ (800225c <stdio_exit_handler+0x10>)
 8002250:	4803      	ldr	r0, [pc, #12]	@ (8002260 <stdio_exit_handler+0x14>)
 8002252:	f000 b869 	b.w	8002328 <_fwalk_sglue>
 8002256:	bf00      	nop
 8002258:	20000014 	.word	0x20000014
 800225c:	08002f85 	.word	0x08002f85
 8002260:	20000024 	.word	0x20000024

08002264 <cleanup_stdio>:
 8002264:	6841      	ldr	r1, [r0, #4]
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <cleanup_stdio+0x34>)
 8002268:	4299      	cmp	r1, r3
 800226a:	b510      	push	{r4, lr}
 800226c:	4604      	mov	r4, r0
 800226e:	d001      	beq.n	8002274 <cleanup_stdio+0x10>
 8002270:	f000 fe88 	bl	8002f84 <_fflush_r>
 8002274:	68a1      	ldr	r1, [r4, #8]
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <cleanup_stdio+0x38>)
 8002278:	4299      	cmp	r1, r3
 800227a:	d002      	beq.n	8002282 <cleanup_stdio+0x1e>
 800227c:	4620      	mov	r0, r4
 800227e:	f000 fe81 	bl	8002f84 <_fflush_r>
 8002282:	68e1      	ldr	r1, [r4, #12]
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <cleanup_stdio+0x3c>)
 8002286:	4299      	cmp	r1, r3
 8002288:	d004      	beq.n	8002294 <cleanup_stdio+0x30>
 800228a:	4620      	mov	r0, r4
 800228c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002290:	f000 be78 	b.w	8002f84 <_fflush_r>
 8002294:	bd10      	pop	{r4, pc}
 8002296:	bf00      	nop
 8002298:	200002ac 	.word	0x200002ac
 800229c:	20000314 	.word	0x20000314
 80022a0:	2000037c 	.word	0x2000037c

080022a4 <global_stdio_init.part.0>:
 80022a4:	b510      	push	{r4, lr}
 80022a6:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <global_stdio_init.part.0+0x30>)
 80022a8:	4c0b      	ldr	r4, [pc, #44]	@ (80022d8 <global_stdio_init.part.0+0x34>)
 80022aa:	4a0c      	ldr	r2, [pc, #48]	@ (80022dc <global_stdio_init.part.0+0x38>)
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	4620      	mov	r0, r4
 80022b0:	2200      	movs	r2, #0
 80022b2:	2104      	movs	r1, #4
 80022b4:	f7ff ff94 	bl	80021e0 <std>
 80022b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80022bc:	2201      	movs	r2, #1
 80022be:	2109      	movs	r1, #9
 80022c0:	f7ff ff8e 	bl	80021e0 <std>
 80022c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80022c8:	2202      	movs	r2, #2
 80022ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022ce:	2112      	movs	r1, #18
 80022d0:	f7ff bf86 	b.w	80021e0 <std>
 80022d4:	200003e4 	.word	0x200003e4
 80022d8:	200002ac 	.word	0x200002ac
 80022dc:	0800224d 	.word	0x0800224d

080022e0 <__sfp_lock_acquire>:
 80022e0:	4801      	ldr	r0, [pc, #4]	@ (80022e8 <__sfp_lock_acquire+0x8>)
 80022e2:	f000 ba00 	b.w	80026e6 <__retarget_lock_acquire_recursive>
 80022e6:	bf00      	nop
 80022e8:	200003ed 	.word	0x200003ed

080022ec <__sfp_lock_release>:
 80022ec:	4801      	ldr	r0, [pc, #4]	@ (80022f4 <__sfp_lock_release+0x8>)
 80022ee:	f000 b9fb 	b.w	80026e8 <__retarget_lock_release_recursive>
 80022f2:	bf00      	nop
 80022f4:	200003ed 	.word	0x200003ed

080022f8 <__sinit>:
 80022f8:	b510      	push	{r4, lr}
 80022fa:	4604      	mov	r4, r0
 80022fc:	f7ff fff0 	bl	80022e0 <__sfp_lock_acquire>
 8002300:	6a23      	ldr	r3, [r4, #32]
 8002302:	b11b      	cbz	r3, 800230c <__sinit+0x14>
 8002304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002308:	f7ff bff0 	b.w	80022ec <__sfp_lock_release>
 800230c:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <__sinit+0x28>)
 800230e:	6223      	str	r3, [r4, #32]
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__sinit+0x2c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f5      	bne.n	8002304 <__sinit+0xc>
 8002318:	f7ff ffc4 	bl	80022a4 <global_stdio_init.part.0>
 800231c:	e7f2      	b.n	8002304 <__sinit+0xc>
 800231e:	bf00      	nop
 8002320:	08002265 	.word	0x08002265
 8002324:	200003e4 	.word	0x200003e4

08002328 <_fwalk_sglue>:
 8002328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800232c:	4607      	mov	r7, r0
 800232e:	4688      	mov	r8, r1
 8002330:	4614      	mov	r4, r2
 8002332:	2600      	movs	r6, #0
 8002334:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002338:	f1b9 0901 	subs.w	r9, r9, #1
 800233c:	d505      	bpl.n	800234a <_fwalk_sglue+0x22>
 800233e:	6824      	ldr	r4, [r4, #0]
 8002340:	2c00      	cmp	r4, #0
 8002342:	d1f7      	bne.n	8002334 <_fwalk_sglue+0xc>
 8002344:	4630      	mov	r0, r6
 8002346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800234a:	89ab      	ldrh	r3, [r5, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d907      	bls.n	8002360 <_fwalk_sglue+0x38>
 8002350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002354:	3301      	adds	r3, #1
 8002356:	d003      	beq.n	8002360 <_fwalk_sglue+0x38>
 8002358:	4629      	mov	r1, r5
 800235a:	4638      	mov	r0, r7
 800235c:	47c0      	blx	r8
 800235e:	4306      	orrs	r6, r0
 8002360:	3568      	adds	r5, #104	@ 0x68
 8002362:	e7e9      	b.n	8002338 <_fwalk_sglue+0x10>

08002364 <iprintf>:
 8002364:	b40f      	push	{r0, r1, r2, r3}
 8002366:	b507      	push	{r0, r1, r2, lr}
 8002368:	4906      	ldr	r1, [pc, #24]	@ (8002384 <iprintf+0x20>)
 800236a:	ab04      	add	r3, sp, #16
 800236c:	6808      	ldr	r0, [r1, #0]
 800236e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002372:	6881      	ldr	r1, [r0, #8]
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	f000 fadb 	bl	8002930 <_vfiprintf_r>
 800237a:	b003      	add	sp, #12
 800237c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002380:	b004      	add	sp, #16
 8002382:	4770      	bx	lr
 8002384:	20000020 	.word	0x20000020

08002388 <_puts_r>:
 8002388:	6a03      	ldr	r3, [r0, #32]
 800238a:	b570      	push	{r4, r5, r6, lr}
 800238c:	6884      	ldr	r4, [r0, #8]
 800238e:	4605      	mov	r5, r0
 8002390:	460e      	mov	r6, r1
 8002392:	b90b      	cbnz	r3, 8002398 <_puts_r+0x10>
 8002394:	f7ff ffb0 	bl	80022f8 <__sinit>
 8002398:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800239a:	07db      	lsls	r3, r3, #31
 800239c:	d405      	bmi.n	80023aa <_puts_r+0x22>
 800239e:	89a3      	ldrh	r3, [r4, #12]
 80023a0:	0598      	lsls	r0, r3, #22
 80023a2:	d402      	bmi.n	80023aa <_puts_r+0x22>
 80023a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023a6:	f000 f99e 	bl	80026e6 <__retarget_lock_acquire_recursive>
 80023aa:	89a3      	ldrh	r3, [r4, #12]
 80023ac:	0719      	lsls	r1, r3, #28
 80023ae:	d502      	bpl.n	80023b6 <_puts_r+0x2e>
 80023b0:	6923      	ldr	r3, [r4, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d135      	bne.n	8002422 <_puts_r+0x9a>
 80023b6:	4621      	mov	r1, r4
 80023b8:	4628      	mov	r0, r5
 80023ba:	f000 f8c5 	bl	8002548 <__swsetup_r>
 80023be:	b380      	cbz	r0, 8002422 <_puts_r+0x9a>
 80023c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80023c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023c6:	07da      	lsls	r2, r3, #31
 80023c8:	d405      	bmi.n	80023d6 <_puts_r+0x4e>
 80023ca:	89a3      	ldrh	r3, [r4, #12]
 80023cc:	059b      	lsls	r3, r3, #22
 80023ce:	d402      	bmi.n	80023d6 <_puts_r+0x4e>
 80023d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023d2:	f000 f989 	bl	80026e8 <__retarget_lock_release_recursive>
 80023d6:	4628      	mov	r0, r5
 80023d8:	bd70      	pop	{r4, r5, r6, pc}
 80023da:	2b00      	cmp	r3, #0
 80023dc:	da04      	bge.n	80023e8 <_puts_r+0x60>
 80023de:	69a2      	ldr	r2, [r4, #24]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	dc17      	bgt.n	8002414 <_puts_r+0x8c>
 80023e4:	290a      	cmp	r1, #10
 80023e6:	d015      	beq.n	8002414 <_puts_r+0x8c>
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	6022      	str	r2, [r4, #0]
 80023ee:	7019      	strb	r1, [r3, #0]
 80023f0:	68a3      	ldr	r3, [r4, #8]
 80023f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80023f6:	3b01      	subs	r3, #1
 80023f8:	60a3      	str	r3, [r4, #8]
 80023fa:	2900      	cmp	r1, #0
 80023fc:	d1ed      	bne.n	80023da <_puts_r+0x52>
 80023fe:	2b00      	cmp	r3, #0
 8002400:	da11      	bge.n	8002426 <_puts_r+0x9e>
 8002402:	4622      	mov	r2, r4
 8002404:	210a      	movs	r1, #10
 8002406:	4628      	mov	r0, r5
 8002408:	f000 f85f 	bl	80024ca <__swbuf_r>
 800240c:	3001      	adds	r0, #1
 800240e:	d0d7      	beq.n	80023c0 <_puts_r+0x38>
 8002410:	250a      	movs	r5, #10
 8002412:	e7d7      	b.n	80023c4 <_puts_r+0x3c>
 8002414:	4622      	mov	r2, r4
 8002416:	4628      	mov	r0, r5
 8002418:	f000 f857 	bl	80024ca <__swbuf_r>
 800241c:	3001      	adds	r0, #1
 800241e:	d1e7      	bne.n	80023f0 <_puts_r+0x68>
 8002420:	e7ce      	b.n	80023c0 <_puts_r+0x38>
 8002422:	3e01      	subs	r6, #1
 8002424:	e7e4      	b.n	80023f0 <_puts_r+0x68>
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	6022      	str	r2, [r4, #0]
 800242c:	220a      	movs	r2, #10
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e7ee      	b.n	8002410 <_puts_r+0x88>
	...

08002434 <puts>:
 8002434:	4b02      	ldr	r3, [pc, #8]	@ (8002440 <puts+0xc>)
 8002436:	4601      	mov	r1, r0
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	f7ff bfa5 	b.w	8002388 <_puts_r>
 800243e:	bf00      	nop
 8002440:	20000020 	.word	0x20000020

08002444 <__sread>:
 8002444:	b510      	push	{r4, lr}
 8002446:	460c      	mov	r4, r1
 8002448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800244c:	f000 f8fc 	bl	8002648 <_read_r>
 8002450:	2800      	cmp	r0, #0
 8002452:	bfab      	itete	ge
 8002454:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002456:	89a3      	ldrhlt	r3, [r4, #12]
 8002458:	181b      	addge	r3, r3, r0
 800245a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800245e:	bfac      	ite	ge
 8002460:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002462:	81a3      	strhlt	r3, [r4, #12]
 8002464:	bd10      	pop	{r4, pc}

08002466 <__swrite>:
 8002466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800246a:	461f      	mov	r7, r3
 800246c:	898b      	ldrh	r3, [r1, #12]
 800246e:	05db      	lsls	r3, r3, #23
 8002470:	4605      	mov	r5, r0
 8002472:	460c      	mov	r4, r1
 8002474:	4616      	mov	r6, r2
 8002476:	d505      	bpl.n	8002484 <__swrite+0x1e>
 8002478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800247c:	2302      	movs	r3, #2
 800247e:	2200      	movs	r2, #0
 8002480:	f000 f8d0 	bl	8002624 <_lseek_r>
 8002484:	89a3      	ldrh	r3, [r4, #12]
 8002486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800248a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800248e:	81a3      	strh	r3, [r4, #12]
 8002490:	4632      	mov	r2, r6
 8002492:	463b      	mov	r3, r7
 8002494:	4628      	mov	r0, r5
 8002496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800249a:	f000 b8e7 	b.w	800266c <_write_r>

0800249e <__sseek>:
 800249e:	b510      	push	{r4, lr}
 80024a0:	460c      	mov	r4, r1
 80024a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024a6:	f000 f8bd 	bl	8002624 <_lseek_r>
 80024aa:	1c43      	adds	r3, r0, #1
 80024ac:	89a3      	ldrh	r3, [r4, #12]
 80024ae:	bf15      	itete	ne
 80024b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80024b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80024b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80024ba:	81a3      	strheq	r3, [r4, #12]
 80024bc:	bf18      	it	ne
 80024be:	81a3      	strhne	r3, [r4, #12]
 80024c0:	bd10      	pop	{r4, pc}

080024c2 <__sclose>:
 80024c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024c6:	f000 b89d 	b.w	8002604 <_close_r>

080024ca <__swbuf_r>:
 80024ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024cc:	460e      	mov	r6, r1
 80024ce:	4614      	mov	r4, r2
 80024d0:	4605      	mov	r5, r0
 80024d2:	b118      	cbz	r0, 80024dc <__swbuf_r+0x12>
 80024d4:	6a03      	ldr	r3, [r0, #32]
 80024d6:	b90b      	cbnz	r3, 80024dc <__swbuf_r+0x12>
 80024d8:	f7ff ff0e 	bl	80022f8 <__sinit>
 80024dc:	69a3      	ldr	r3, [r4, #24]
 80024de:	60a3      	str	r3, [r4, #8]
 80024e0:	89a3      	ldrh	r3, [r4, #12]
 80024e2:	071a      	lsls	r2, r3, #28
 80024e4:	d501      	bpl.n	80024ea <__swbuf_r+0x20>
 80024e6:	6923      	ldr	r3, [r4, #16]
 80024e8:	b943      	cbnz	r3, 80024fc <__swbuf_r+0x32>
 80024ea:	4621      	mov	r1, r4
 80024ec:	4628      	mov	r0, r5
 80024ee:	f000 f82b 	bl	8002548 <__swsetup_r>
 80024f2:	b118      	cbz	r0, 80024fc <__swbuf_r+0x32>
 80024f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80024f8:	4638      	mov	r0, r7
 80024fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	6922      	ldr	r2, [r4, #16]
 8002500:	1a98      	subs	r0, r3, r2
 8002502:	6963      	ldr	r3, [r4, #20]
 8002504:	b2f6      	uxtb	r6, r6
 8002506:	4283      	cmp	r3, r0
 8002508:	4637      	mov	r7, r6
 800250a:	dc05      	bgt.n	8002518 <__swbuf_r+0x4e>
 800250c:	4621      	mov	r1, r4
 800250e:	4628      	mov	r0, r5
 8002510:	f000 fd38 	bl	8002f84 <_fflush_r>
 8002514:	2800      	cmp	r0, #0
 8002516:	d1ed      	bne.n	80024f4 <__swbuf_r+0x2a>
 8002518:	68a3      	ldr	r3, [r4, #8]
 800251a:	3b01      	subs	r3, #1
 800251c:	60a3      	str	r3, [r4, #8]
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	6022      	str	r2, [r4, #0]
 8002524:	701e      	strb	r6, [r3, #0]
 8002526:	6962      	ldr	r2, [r4, #20]
 8002528:	1c43      	adds	r3, r0, #1
 800252a:	429a      	cmp	r2, r3
 800252c:	d004      	beq.n	8002538 <__swbuf_r+0x6e>
 800252e:	89a3      	ldrh	r3, [r4, #12]
 8002530:	07db      	lsls	r3, r3, #31
 8002532:	d5e1      	bpl.n	80024f8 <__swbuf_r+0x2e>
 8002534:	2e0a      	cmp	r6, #10
 8002536:	d1df      	bne.n	80024f8 <__swbuf_r+0x2e>
 8002538:	4621      	mov	r1, r4
 800253a:	4628      	mov	r0, r5
 800253c:	f000 fd22 	bl	8002f84 <_fflush_r>
 8002540:	2800      	cmp	r0, #0
 8002542:	d0d9      	beq.n	80024f8 <__swbuf_r+0x2e>
 8002544:	e7d6      	b.n	80024f4 <__swbuf_r+0x2a>
	...

08002548 <__swsetup_r>:
 8002548:	b538      	push	{r3, r4, r5, lr}
 800254a:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <__swsetup_r+0xa8>)
 800254c:	4605      	mov	r5, r0
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	460c      	mov	r4, r1
 8002552:	b118      	cbz	r0, 800255c <__swsetup_r+0x14>
 8002554:	6a03      	ldr	r3, [r0, #32]
 8002556:	b90b      	cbnz	r3, 800255c <__swsetup_r+0x14>
 8002558:	f7ff fece 	bl	80022f8 <__sinit>
 800255c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002560:	0719      	lsls	r1, r3, #28
 8002562:	d422      	bmi.n	80025aa <__swsetup_r+0x62>
 8002564:	06da      	lsls	r2, r3, #27
 8002566:	d407      	bmi.n	8002578 <__swsetup_r+0x30>
 8002568:	2209      	movs	r2, #9
 800256a:	602a      	str	r2, [r5, #0]
 800256c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002570:	81a3      	strh	r3, [r4, #12]
 8002572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002576:	e033      	b.n	80025e0 <__swsetup_r+0x98>
 8002578:	0758      	lsls	r0, r3, #29
 800257a:	d512      	bpl.n	80025a2 <__swsetup_r+0x5a>
 800257c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800257e:	b141      	cbz	r1, 8002592 <__swsetup_r+0x4a>
 8002580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002584:	4299      	cmp	r1, r3
 8002586:	d002      	beq.n	800258e <__swsetup_r+0x46>
 8002588:	4628      	mov	r0, r5
 800258a:	f000 f8af 	bl	80026ec <_free_r>
 800258e:	2300      	movs	r3, #0
 8002590:	6363      	str	r3, [r4, #52]	@ 0x34
 8002592:	89a3      	ldrh	r3, [r4, #12]
 8002594:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002598:	81a3      	strh	r3, [r4, #12]
 800259a:	2300      	movs	r3, #0
 800259c:	6063      	str	r3, [r4, #4]
 800259e:	6923      	ldr	r3, [r4, #16]
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	89a3      	ldrh	r3, [r4, #12]
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	81a3      	strh	r3, [r4, #12]
 80025aa:	6923      	ldr	r3, [r4, #16]
 80025ac:	b94b      	cbnz	r3, 80025c2 <__swsetup_r+0x7a>
 80025ae:	89a3      	ldrh	r3, [r4, #12]
 80025b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80025b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025b8:	d003      	beq.n	80025c2 <__swsetup_r+0x7a>
 80025ba:	4621      	mov	r1, r4
 80025bc:	4628      	mov	r0, r5
 80025be:	f000 fd2f 	bl	8003020 <__smakebuf_r>
 80025c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025c6:	f013 0201 	ands.w	r2, r3, #1
 80025ca:	d00a      	beq.n	80025e2 <__swsetup_r+0x9a>
 80025cc:	2200      	movs	r2, #0
 80025ce:	60a2      	str	r2, [r4, #8]
 80025d0:	6962      	ldr	r2, [r4, #20]
 80025d2:	4252      	negs	r2, r2
 80025d4:	61a2      	str	r2, [r4, #24]
 80025d6:	6922      	ldr	r2, [r4, #16]
 80025d8:	b942      	cbnz	r2, 80025ec <__swsetup_r+0xa4>
 80025da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80025de:	d1c5      	bne.n	800256c <__swsetup_r+0x24>
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
 80025e2:	0799      	lsls	r1, r3, #30
 80025e4:	bf58      	it	pl
 80025e6:	6962      	ldrpl	r2, [r4, #20]
 80025e8:	60a2      	str	r2, [r4, #8]
 80025ea:	e7f4      	b.n	80025d6 <__swsetup_r+0x8e>
 80025ec:	2000      	movs	r0, #0
 80025ee:	e7f7      	b.n	80025e0 <__swsetup_r+0x98>
 80025f0:	20000020 	.word	0x20000020

080025f4 <memset>:
 80025f4:	4402      	add	r2, r0
 80025f6:	4603      	mov	r3, r0
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d100      	bne.n	80025fe <memset+0xa>
 80025fc:	4770      	bx	lr
 80025fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002602:	e7f9      	b.n	80025f8 <memset+0x4>

08002604 <_close_r>:
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4d06      	ldr	r5, [pc, #24]	@ (8002620 <_close_r+0x1c>)
 8002608:	2300      	movs	r3, #0
 800260a:	4604      	mov	r4, r0
 800260c:	4608      	mov	r0, r1
 800260e:	602b      	str	r3, [r5, #0]
 8002610:	f7fe fa7c 	bl	8000b0c <_close>
 8002614:	1c43      	adds	r3, r0, #1
 8002616:	d102      	bne.n	800261e <_close_r+0x1a>
 8002618:	682b      	ldr	r3, [r5, #0]
 800261a:	b103      	cbz	r3, 800261e <_close_r+0x1a>
 800261c:	6023      	str	r3, [r4, #0]
 800261e:	bd38      	pop	{r3, r4, r5, pc}
 8002620:	200003e8 	.word	0x200003e8

08002624 <_lseek_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4d07      	ldr	r5, [pc, #28]	@ (8002644 <_lseek_r+0x20>)
 8002628:	4604      	mov	r4, r0
 800262a:	4608      	mov	r0, r1
 800262c:	4611      	mov	r1, r2
 800262e:	2200      	movs	r2, #0
 8002630:	602a      	str	r2, [r5, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	f7fe fa74 	bl	8000b20 <_lseek>
 8002638:	1c43      	adds	r3, r0, #1
 800263a:	d102      	bne.n	8002642 <_lseek_r+0x1e>
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	b103      	cbz	r3, 8002642 <_lseek_r+0x1e>
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	bd38      	pop	{r3, r4, r5, pc}
 8002644:	200003e8 	.word	0x200003e8

08002648 <_read_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4d07      	ldr	r5, [pc, #28]	@ (8002668 <_read_r+0x20>)
 800264c:	4604      	mov	r4, r0
 800264e:	4608      	mov	r0, r1
 8002650:	4611      	mov	r1, r2
 8002652:	2200      	movs	r2, #0
 8002654:	602a      	str	r2, [r5, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	f7fe fa48 	bl	8000aec <_read>
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	d102      	bne.n	8002666 <_read_r+0x1e>
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	b103      	cbz	r3, 8002666 <_read_r+0x1e>
 8002664:	6023      	str	r3, [r4, #0]
 8002666:	bd38      	pop	{r3, r4, r5, pc}
 8002668:	200003e8 	.word	0x200003e8

0800266c <_write_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4d07      	ldr	r5, [pc, #28]	@ (800268c <_write_r+0x20>)
 8002670:	4604      	mov	r4, r0
 8002672:	4608      	mov	r0, r1
 8002674:	4611      	mov	r1, r2
 8002676:	2200      	movs	r2, #0
 8002678:	602a      	str	r2, [r5, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	f7fe f812 	bl	80006a4 <_write>
 8002680:	1c43      	adds	r3, r0, #1
 8002682:	d102      	bne.n	800268a <_write_r+0x1e>
 8002684:	682b      	ldr	r3, [r5, #0]
 8002686:	b103      	cbz	r3, 800268a <_write_r+0x1e>
 8002688:	6023      	str	r3, [r4, #0]
 800268a:	bd38      	pop	{r3, r4, r5, pc}
 800268c:	200003e8 	.word	0x200003e8

08002690 <__errno>:
 8002690:	4b01      	ldr	r3, [pc, #4]	@ (8002698 <__errno+0x8>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000020 	.word	0x20000020

0800269c <__libc_init_array>:
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	4d0d      	ldr	r5, [pc, #52]	@ (80026d4 <__libc_init_array+0x38>)
 80026a0:	4c0d      	ldr	r4, [pc, #52]	@ (80026d8 <__libc_init_array+0x3c>)
 80026a2:	1b64      	subs	r4, r4, r5
 80026a4:	10a4      	asrs	r4, r4, #2
 80026a6:	2600      	movs	r6, #0
 80026a8:	42a6      	cmp	r6, r4
 80026aa:	d109      	bne.n	80026c0 <__libc_init_array+0x24>
 80026ac:	4d0b      	ldr	r5, [pc, #44]	@ (80026dc <__libc_init_array+0x40>)
 80026ae:	4c0c      	ldr	r4, [pc, #48]	@ (80026e0 <__libc_init_array+0x44>)
 80026b0:	f000 fd24 	bl	80030fc <_init>
 80026b4:	1b64      	subs	r4, r4, r5
 80026b6:	10a4      	asrs	r4, r4, #2
 80026b8:	2600      	movs	r6, #0
 80026ba:	42a6      	cmp	r6, r4
 80026bc:	d105      	bne.n	80026ca <__libc_init_array+0x2e>
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c4:	4798      	blx	r3
 80026c6:	3601      	adds	r6, #1
 80026c8:	e7ee      	b.n	80026a8 <__libc_init_array+0xc>
 80026ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ce:	4798      	blx	r3
 80026d0:	3601      	adds	r6, #1
 80026d2:	e7f2      	b.n	80026ba <__libc_init_array+0x1e>
 80026d4:	080039bc 	.word	0x080039bc
 80026d8:	080039bc 	.word	0x080039bc
 80026dc:	080039bc 	.word	0x080039bc
 80026e0:	080039c0 	.word	0x080039c0

080026e4 <__retarget_lock_init_recursive>:
 80026e4:	4770      	bx	lr

080026e6 <__retarget_lock_acquire_recursive>:
 80026e6:	4770      	bx	lr

080026e8 <__retarget_lock_release_recursive>:
 80026e8:	4770      	bx	lr
	...

080026ec <_free_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	4605      	mov	r5, r0
 80026f0:	2900      	cmp	r1, #0
 80026f2:	d041      	beq.n	8002778 <_free_r+0x8c>
 80026f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026f8:	1f0c      	subs	r4, r1, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bfb8      	it	lt
 80026fe:	18e4      	addlt	r4, r4, r3
 8002700:	f000 f8e0 	bl	80028c4 <__malloc_lock>
 8002704:	4a1d      	ldr	r2, [pc, #116]	@ (800277c <_free_r+0x90>)
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	b933      	cbnz	r3, 8002718 <_free_r+0x2c>
 800270a:	6063      	str	r3, [r4, #4]
 800270c:	6014      	str	r4, [r2, #0]
 800270e:	4628      	mov	r0, r5
 8002710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002714:	f000 b8dc 	b.w	80028d0 <__malloc_unlock>
 8002718:	42a3      	cmp	r3, r4
 800271a:	d908      	bls.n	800272e <_free_r+0x42>
 800271c:	6820      	ldr	r0, [r4, #0]
 800271e:	1821      	adds	r1, r4, r0
 8002720:	428b      	cmp	r3, r1
 8002722:	bf01      	itttt	eq
 8002724:	6819      	ldreq	r1, [r3, #0]
 8002726:	685b      	ldreq	r3, [r3, #4]
 8002728:	1809      	addeq	r1, r1, r0
 800272a:	6021      	streq	r1, [r4, #0]
 800272c:	e7ed      	b.n	800270a <_free_r+0x1e>
 800272e:	461a      	mov	r2, r3
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	b10b      	cbz	r3, 8002738 <_free_r+0x4c>
 8002734:	42a3      	cmp	r3, r4
 8002736:	d9fa      	bls.n	800272e <_free_r+0x42>
 8002738:	6811      	ldr	r1, [r2, #0]
 800273a:	1850      	adds	r0, r2, r1
 800273c:	42a0      	cmp	r0, r4
 800273e:	d10b      	bne.n	8002758 <_free_r+0x6c>
 8002740:	6820      	ldr	r0, [r4, #0]
 8002742:	4401      	add	r1, r0
 8002744:	1850      	adds	r0, r2, r1
 8002746:	4283      	cmp	r3, r0
 8002748:	6011      	str	r1, [r2, #0]
 800274a:	d1e0      	bne.n	800270e <_free_r+0x22>
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	6053      	str	r3, [r2, #4]
 8002752:	4408      	add	r0, r1
 8002754:	6010      	str	r0, [r2, #0]
 8002756:	e7da      	b.n	800270e <_free_r+0x22>
 8002758:	d902      	bls.n	8002760 <_free_r+0x74>
 800275a:	230c      	movs	r3, #12
 800275c:	602b      	str	r3, [r5, #0]
 800275e:	e7d6      	b.n	800270e <_free_r+0x22>
 8002760:	6820      	ldr	r0, [r4, #0]
 8002762:	1821      	adds	r1, r4, r0
 8002764:	428b      	cmp	r3, r1
 8002766:	bf04      	itt	eq
 8002768:	6819      	ldreq	r1, [r3, #0]
 800276a:	685b      	ldreq	r3, [r3, #4]
 800276c:	6063      	str	r3, [r4, #4]
 800276e:	bf04      	itt	eq
 8002770:	1809      	addeq	r1, r1, r0
 8002772:	6021      	streq	r1, [r4, #0]
 8002774:	6054      	str	r4, [r2, #4]
 8002776:	e7ca      	b.n	800270e <_free_r+0x22>
 8002778:	bd38      	pop	{r3, r4, r5, pc}
 800277a:	bf00      	nop
 800277c:	200003f4 	.word	0x200003f4

08002780 <sbrk_aligned>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	4e0f      	ldr	r6, [pc, #60]	@ (80027c0 <sbrk_aligned+0x40>)
 8002784:	460c      	mov	r4, r1
 8002786:	6831      	ldr	r1, [r6, #0]
 8002788:	4605      	mov	r5, r0
 800278a:	b911      	cbnz	r1, 8002792 <sbrk_aligned+0x12>
 800278c:	f000 fca6 	bl	80030dc <_sbrk_r>
 8002790:	6030      	str	r0, [r6, #0]
 8002792:	4621      	mov	r1, r4
 8002794:	4628      	mov	r0, r5
 8002796:	f000 fca1 	bl	80030dc <_sbrk_r>
 800279a:	1c43      	adds	r3, r0, #1
 800279c:	d103      	bne.n	80027a6 <sbrk_aligned+0x26>
 800279e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80027a2:	4620      	mov	r0, r4
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	1cc4      	adds	r4, r0, #3
 80027a8:	f024 0403 	bic.w	r4, r4, #3
 80027ac:	42a0      	cmp	r0, r4
 80027ae:	d0f8      	beq.n	80027a2 <sbrk_aligned+0x22>
 80027b0:	1a21      	subs	r1, r4, r0
 80027b2:	4628      	mov	r0, r5
 80027b4:	f000 fc92 	bl	80030dc <_sbrk_r>
 80027b8:	3001      	adds	r0, #1
 80027ba:	d1f2      	bne.n	80027a2 <sbrk_aligned+0x22>
 80027bc:	e7ef      	b.n	800279e <sbrk_aligned+0x1e>
 80027be:	bf00      	nop
 80027c0:	200003f0 	.word	0x200003f0

080027c4 <_malloc_r>:
 80027c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027c8:	1ccd      	adds	r5, r1, #3
 80027ca:	f025 0503 	bic.w	r5, r5, #3
 80027ce:	3508      	adds	r5, #8
 80027d0:	2d0c      	cmp	r5, #12
 80027d2:	bf38      	it	cc
 80027d4:	250c      	movcc	r5, #12
 80027d6:	2d00      	cmp	r5, #0
 80027d8:	4606      	mov	r6, r0
 80027da:	db01      	blt.n	80027e0 <_malloc_r+0x1c>
 80027dc:	42a9      	cmp	r1, r5
 80027de:	d904      	bls.n	80027ea <_malloc_r+0x26>
 80027e0:	230c      	movs	r3, #12
 80027e2:	6033      	str	r3, [r6, #0]
 80027e4:	2000      	movs	r0, #0
 80027e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028c0 <_malloc_r+0xfc>
 80027ee:	f000 f869 	bl	80028c4 <__malloc_lock>
 80027f2:	f8d8 3000 	ldr.w	r3, [r8]
 80027f6:	461c      	mov	r4, r3
 80027f8:	bb44      	cbnz	r4, 800284c <_malloc_r+0x88>
 80027fa:	4629      	mov	r1, r5
 80027fc:	4630      	mov	r0, r6
 80027fe:	f7ff ffbf 	bl	8002780 <sbrk_aligned>
 8002802:	1c43      	adds	r3, r0, #1
 8002804:	4604      	mov	r4, r0
 8002806:	d158      	bne.n	80028ba <_malloc_r+0xf6>
 8002808:	f8d8 4000 	ldr.w	r4, [r8]
 800280c:	4627      	mov	r7, r4
 800280e:	2f00      	cmp	r7, #0
 8002810:	d143      	bne.n	800289a <_malloc_r+0xd6>
 8002812:	2c00      	cmp	r4, #0
 8002814:	d04b      	beq.n	80028ae <_malloc_r+0xea>
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	4639      	mov	r1, r7
 800281a:	4630      	mov	r0, r6
 800281c:	eb04 0903 	add.w	r9, r4, r3
 8002820:	f000 fc5c 	bl	80030dc <_sbrk_r>
 8002824:	4581      	cmp	r9, r0
 8002826:	d142      	bne.n	80028ae <_malloc_r+0xea>
 8002828:	6821      	ldr	r1, [r4, #0]
 800282a:	1a6d      	subs	r5, r5, r1
 800282c:	4629      	mov	r1, r5
 800282e:	4630      	mov	r0, r6
 8002830:	f7ff ffa6 	bl	8002780 <sbrk_aligned>
 8002834:	3001      	adds	r0, #1
 8002836:	d03a      	beq.n	80028ae <_malloc_r+0xea>
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	442b      	add	r3, r5
 800283c:	6023      	str	r3, [r4, #0]
 800283e:	f8d8 3000 	ldr.w	r3, [r8]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	bb62      	cbnz	r2, 80028a0 <_malloc_r+0xdc>
 8002846:	f8c8 7000 	str.w	r7, [r8]
 800284a:	e00f      	b.n	800286c <_malloc_r+0xa8>
 800284c:	6822      	ldr	r2, [r4, #0]
 800284e:	1b52      	subs	r2, r2, r5
 8002850:	d420      	bmi.n	8002894 <_malloc_r+0xd0>
 8002852:	2a0b      	cmp	r2, #11
 8002854:	d917      	bls.n	8002886 <_malloc_r+0xc2>
 8002856:	1961      	adds	r1, r4, r5
 8002858:	42a3      	cmp	r3, r4
 800285a:	6025      	str	r5, [r4, #0]
 800285c:	bf18      	it	ne
 800285e:	6059      	strne	r1, [r3, #4]
 8002860:	6863      	ldr	r3, [r4, #4]
 8002862:	bf08      	it	eq
 8002864:	f8c8 1000 	streq.w	r1, [r8]
 8002868:	5162      	str	r2, [r4, r5]
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	4630      	mov	r0, r6
 800286e:	f000 f82f 	bl	80028d0 <__malloc_unlock>
 8002872:	f104 000b 	add.w	r0, r4, #11
 8002876:	1d23      	adds	r3, r4, #4
 8002878:	f020 0007 	bic.w	r0, r0, #7
 800287c:	1ac2      	subs	r2, r0, r3
 800287e:	bf1c      	itt	ne
 8002880:	1a1b      	subne	r3, r3, r0
 8002882:	50a3      	strne	r3, [r4, r2]
 8002884:	e7af      	b.n	80027e6 <_malloc_r+0x22>
 8002886:	6862      	ldr	r2, [r4, #4]
 8002888:	42a3      	cmp	r3, r4
 800288a:	bf0c      	ite	eq
 800288c:	f8c8 2000 	streq.w	r2, [r8]
 8002890:	605a      	strne	r2, [r3, #4]
 8002892:	e7eb      	b.n	800286c <_malloc_r+0xa8>
 8002894:	4623      	mov	r3, r4
 8002896:	6864      	ldr	r4, [r4, #4]
 8002898:	e7ae      	b.n	80027f8 <_malloc_r+0x34>
 800289a:	463c      	mov	r4, r7
 800289c:	687f      	ldr	r7, [r7, #4]
 800289e:	e7b6      	b.n	800280e <_malloc_r+0x4a>
 80028a0:	461a      	mov	r2, r3
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	42a3      	cmp	r3, r4
 80028a6:	d1fb      	bne.n	80028a0 <_malloc_r+0xdc>
 80028a8:	2300      	movs	r3, #0
 80028aa:	6053      	str	r3, [r2, #4]
 80028ac:	e7de      	b.n	800286c <_malloc_r+0xa8>
 80028ae:	230c      	movs	r3, #12
 80028b0:	6033      	str	r3, [r6, #0]
 80028b2:	4630      	mov	r0, r6
 80028b4:	f000 f80c 	bl	80028d0 <__malloc_unlock>
 80028b8:	e794      	b.n	80027e4 <_malloc_r+0x20>
 80028ba:	6005      	str	r5, [r0, #0]
 80028bc:	e7d6      	b.n	800286c <_malloc_r+0xa8>
 80028be:	bf00      	nop
 80028c0:	200003f4 	.word	0x200003f4

080028c4 <__malloc_lock>:
 80028c4:	4801      	ldr	r0, [pc, #4]	@ (80028cc <__malloc_lock+0x8>)
 80028c6:	f7ff bf0e 	b.w	80026e6 <__retarget_lock_acquire_recursive>
 80028ca:	bf00      	nop
 80028cc:	200003ec 	.word	0x200003ec

080028d0 <__malloc_unlock>:
 80028d0:	4801      	ldr	r0, [pc, #4]	@ (80028d8 <__malloc_unlock+0x8>)
 80028d2:	f7ff bf09 	b.w	80026e8 <__retarget_lock_release_recursive>
 80028d6:	bf00      	nop
 80028d8:	200003ec 	.word	0x200003ec

080028dc <__sfputc_r>:
 80028dc:	6893      	ldr	r3, [r2, #8]
 80028de:	3b01      	subs	r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	b410      	push	{r4}
 80028e4:	6093      	str	r3, [r2, #8]
 80028e6:	da08      	bge.n	80028fa <__sfputc_r+0x1e>
 80028e8:	6994      	ldr	r4, [r2, #24]
 80028ea:	42a3      	cmp	r3, r4
 80028ec:	db01      	blt.n	80028f2 <__sfputc_r+0x16>
 80028ee:	290a      	cmp	r1, #10
 80028f0:	d103      	bne.n	80028fa <__sfputc_r+0x1e>
 80028f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028f6:	f7ff bde8 	b.w	80024ca <__swbuf_r>
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	1c58      	adds	r0, r3, #1
 80028fe:	6010      	str	r0, [r2, #0]
 8002900:	7019      	strb	r1, [r3, #0]
 8002902:	4608      	mov	r0, r1
 8002904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002908:	4770      	bx	lr

0800290a <__sfputs_r>:
 800290a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290c:	4606      	mov	r6, r0
 800290e:	460f      	mov	r7, r1
 8002910:	4614      	mov	r4, r2
 8002912:	18d5      	adds	r5, r2, r3
 8002914:	42ac      	cmp	r4, r5
 8002916:	d101      	bne.n	800291c <__sfputs_r+0x12>
 8002918:	2000      	movs	r0, #0
 800291a:	e007      	b.n	800292c <__sfputs_r+0x22>
 800291c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002920:	463a      	mov	r2, r7
 8002922:	4630      	mov	r0, r6
 8002924:	f7ff ffda 	bl	80028dc <__sfputc_r>
 8002928:	1c43      	adds	r3, r0, #1
 800292a:	d1f3      	bne.n	8002914 <__sfputs_r+0xa>
 800292c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002930 <_vfiprintf_r>:
 8002930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002934:	460d      	mov	r5, r1
 8002936:	b09d      	sub	sp, #116	@ 0x74
 8002938:	4614      	mov	r4, r2
 800293a:	4698      	mov	r8, r3
 800293c:	4606      	mov	r6, r0
 800293e:	b118      	cbz	r0, 8002948 <_vfiprintf_r+0x18>
 8002940:	6a03      	ldr	r3, [r0, #32]
 8002942:	b90b      	cbnz	r3, 8002948 <_vfiprintf_r+0x18>
 8002944:	f7ff fcd8 	bl	80022f8 <__sinit>
 8002948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800294a:	07d9      	lsls	r1, r3, #31
 800294c:	d405      	bmi.n	800295a <_vfiprintf_r+0x2a>
 800294e:	89ab      	ldrh	r3, [r5, #12]
 8002950:	059a      	lsls	r2, r3, #22
 8002952:	d402      	bmi.n	800295a <_vfiprintf_r+0x2a>
 8002954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002956:	f7ff fec6 	bl	80026e6 <__retarget_lock_acquire_recursive>
 800295a:	89ab      	ldrh	r3, [r5, #12]
 800295c:	071b      	lsls	r3, r3, #28
 800295e:	d501      	bpl.n	8002964 <_vfiprintf_r+0x34>
 8002960:	692b      	ldr	r3, [r5, #16]
 8002962:	b99b      	cbnz	r3, 800298c <_vfiprintf_r+0x5c>
 8002964:	4629      	mov	r1, r5
 8002966:	4630      	mov	r0, r6
 8002968:	f7ff fdee 	bl	8002548 <__swsetup_r>
 800296c:	b170      	cbz	r0, 800298c <_vfiprintf_r+0x5c>
 800296e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002970:	07dc      	lsls	r4, r3, #31
 8002972:	d504      	bpl.n	800297e <_vfiprintf_r+0x4e>
 8002974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002978:	b01d      	add	sp, #116	@ 0x74
 800297a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800297e:	89ab      	ldrh	r3, [r5, #12]
 8002980:	0598      	lsls	r0, r3, #22
 8002982:	d4f7      	bmi.n	8002974 <_vfiprintf_r+0x44>
 8002984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002986:	f7ff feaf 	bl	80026e8 <__retarget_lock_release_recursive>
 800298a:	e7f3      	b.n	8002974 <_vfiprintf_r+0x44>
 800298c:	2300      	movs	r3, #0
 800298e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002990:	2320      	movs	r3, #32
 8002992:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002996:	f8cd 800c 	str.w	r8, [sp, #12]
 800299a:	2330      	movs	r3, #48	@ 0x30
 800299c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002b4c <_vfiprintf_r+0x21c>
 80029a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80029a4:	f04f 0901 	mov.w	r9, #1
 80029a8:	4623      	mov	r3, r4
 80029aa:	469a      	mov	sl, r3
 80029ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029b0:	b10a      	cbz	r2, 80029b6 <_vfiprintf_r+0x86>
 80029b2:	2a25      	cmp	r2, #37	@ 0x25
 80029b4:	d1f9      	bne.n	80029aa <_vfiprintf_r+0x7a>
 80029b6:	ebba 0b04 	subs.w	fp, sl, r4
 80029ba:	d00b      	beq.n	80029d4 <_vfiprintf_r+0xa4>
 80029bc:	465b      	mov	r3, fp
 80029be:	4622      	mov	r2, r4
 80029c0:	4629      	mov	r1, r5
 80029c2:	4630      	mov	r0, r6
 80029c4:	f7ff ffa1 	bl	800290a <__sfputs_r>
 80029c8:	3001      	adds	r0, #1
 80029ca:	f000 80a7 	beq.w	8002b1c <_vfiprintf_r+0x1ec>
 80029ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029d0:	445a      	add	r2, fp
 80029d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80029d4:	f89a 3000 	ldrb.w	r3, [sl]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 809f 	beq.w	8002b1c <_vfiprintf_r+0x1ec>
 80029de:	2300      	movs	r3, #0
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029e8:	f10a 0a01 	add.w	sl, sl, #1
 80029ec:	9304      	str	r3, [sp, #16]
 80029ee:	9307      	str	r3, [sp, #28]
 80029f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80029f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80029f6:	4654      	mov	r4, sl
 80029f8:	2205      	movs	r2, #5
 80029fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029fe:	4853      	ldr	r0, [pc, #332]	@ (8002b4c <_vfiprintf_r+0x21c>)
 8002a00:	f7fd fbe6 	bl	80001d0 <memchr>
 8002a04:	9a04      	ldr	r2, [sp, #16]
 8002a06:	b9d8      	cbnz	r0, 8002a40 <_vfiprintf_r+0x110>
 8002a08:	06d1      	lsls	r1, r2, #27
 8002a0a:	bf44      	itt	mi
 8002a0c:	2320      	movmi	r3, #32
 8002a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a12:	0713      	lsls	r3, r2, #28
 8002a14:	bf44      	itt	mi
 8002a16:	232b      	movmi	r3, #43	@ 0x2b
 8002a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8002a20:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a22:	d015      	beq.n	8002a50 <_vfiprintf_r+0x120>
 8002a24:	9a07      	ldr	r2, [sp, #28]
 8002a26:	4654      	mov	r4, sl
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f04f 0c0a 	mov.w	ip, #10
 8002a2e:	4621      	mov	r1, r4
 8002a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a34:	3b30      	subs	r3, #48	@ 0x30
 8002a36:	2b09      	cmp	r3, #9
 8002a38:	d94b      	bls.n	8002ad2 <_vfiprintf_r+0x1a2>
 8002a3a:	b1b0      	cbz	r0, 8002a6a <_vfiprintf_r+0x13a>
 8002a3c:	9207      	str	r2, [sp, #28]
 8002a3e:	e014      	b.n	8002a6a <_vfiprintf_r+0x13a>
 8002a40:	eba0 0308 	sub.w	r3, r0, r8
 8002a44:	fa09 f303 	lsl.w	r3, r9, r3
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	9304      	str	r3, [sp, #16]
 8002a4c:	46a2      	mov	sl, r4
 8002a4e:	e7d2      	b.n	80029f6 <_vfiprintf_r+0xc6>
 8002a50:	9b03      	ldr	r3, [sp, #12]
 8002a52:	1d19      	adds	r1, r3, #4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	9103      	str	r1, [sp, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bfbb      	ittet	lt
 8002a5c:	425b      	neglt	r3, r3
 8002a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8002a62:	9307      	strge	r3, [sp, #28]
 8002a64:	9307      	strlt	r3, [sp, #28]
 8002a66:	bfb8      	it	lt
 8002a68:	9204      	strlt	r2, [sp, #16]
 8002a6a:	7823      	ldrb	r3, [r4, #0]
 8002a6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a6e:	d10a      	bne.n	8002a86 <_vfiprintf_r+0x156>
 8002a70:	7863      	ldrb	r3, [r4, #1]
 8002a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a74:	d132      	bne.n	8002adc <_vfiprintf_r+0x1ac>
 8002a76:	9b03      	ldr	r3, [sp, #12]
 8002a78:	1d1a      	adds	r2, r3, #4
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	9203      	str	r2, [sp, #12]
 8002a7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a82:	3402      	adds	r4, #2
 8002a84:	9305      	str	r3, [sp, #20]
 8002a86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002b5c <_vfiprintf_r+0x22c>
 8002a8a:	7821      	ldrb	r1, [r4, #0]
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	4650      	mov	r0, sl
 8002a90:	f7fd fb9e 	bl	80001d0 <memchr>
 8002a94:	b138      	cbz	r0, 8002aa6 <_vfiprintf_r+0x176>
 8002a96:	9b04      	ldr	r3, [sp, #16]
 8002a98:	eba0 000a 	sub.w	r0, r0, sl
 8002a9c:	2240      	movs	r2, #64	@ 0x40
 8002a9e:	4082      	lsls	r2, r0
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	3401      	adds	r4, #1
 8002aa4:	9304      	str	r3, [sp, #16]
 8002aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aaa:	4829      	ldr	r0, [pc, #164]	@ (8002b50 <_vfiprintf_r+0x220>)
 8002aac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ab0:	2206      	movs	r2, #6
 8002ab2:	f7fd fb8d 	bl	80001d0 <memchr>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d03f      	beq.n	8002b3a <_vfiprintf_r+0x20a>
 8002aba:	4b26      	ldr	r3, [pc, #152]	@ (8002b54 <_vfiprintf_r+0x224>)
 8002abc:	bb1b      	cbnz	r3, 8002b06 <_vfiprintf_r+0x1d6>
 8002abe:	9b03      	ldr	r3, [sp, #12]
 8002ac0:	3307      	adds	r3, #7
 8002ac2:	f023 0307 	bic.w	r3, r3, #7
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	9303      	str	r3, [sp, #12]
 8002aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002acc:	443b      	add	r3, r7
 8002ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ad0:	e76a      	b.n	80029a8 <_vfiprintf_r+0x78>
 8002ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	2001      	movs	r0, #1
 8002ada:	e7a8      	b.n	8002a2e <_vfiprintf_r+0xfe>
 8002adc:	2300      	movs	r3, #0
 8002ade:	3401      	adds	r4, #1
 8002ae0:	9305      	str	r3, [sp, #20]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f04f 0c0a 	mov.w	ip, #10
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002aee:	3a30      	subs	r2, #48	@ 0x30
 8002af0:	2a09      	cmp	r2, #9
 8002af2:	d903      	bls.n	8002afc <_vfiprintf_r+0x1cc>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0c6      	beq.n	8002a86 <_vfiprintf_r+0x156>
 8002af8:	9105      	str	r1, [sp, #20]
 8002afa:	e7c4      	b.n	8002a86 <_vfiprintf_r+0x156>
 8002afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b00:	4604      	mov	r4, r0
 8002b02:	2301      	movs	r3, #1
 8002b04:	e7f0      	b.n	8002ae8 <_vfiprintf_r+0x1b8>
 8002b06:	ab03      	add	r3, sp, #12
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	462a      	mov	r2, r5
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <_vfiprintf_r+0x228>)
 8002b0e:	a904      	add	r1, sp, #16
 8002b10:	4630      	mov	r0, r6
 8002b12:	f3af 8000 	nop.w
 8002b16:	4607      	mov	r7, r0
 8002b18:	1c78      	adds	r0, r7, #1
 8002b1a:	d1d6      	bne.n	8002aca <_vfiprintf_r+0x19a>
 8002b1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b1e:	07d9      	lsls	r1, r3, #31
 8002b20:	d405      	bmi.n	8002b2e <_vfiprintf_r+0x1fe>
 8002b22:	89ab      	ldrh	r3, [r5, #12]
 8002b24:	059a      	lsls	r2, r3, #22
 8002b26:	d402      	bmi.n	8002b2e <_vfiprintf_r+0x1fe>
 8002b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b2a:	f7ff fddd 	bl	80026e8 <__retarget_lock_release_recursive>
 8002b2e:	89ab      	ldrh	r3, [r5, #12]
 8002b30:	065b      	lsls	r3, r3, #25
 8002b32:	f53f af1f 	bmi.w	8002974 <_vfiprintf_r+0x44>
 8002b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b38:	e71e      	b.n	8002978 <_vfiprintf_r+0x48>
 8002b3a:	ab03      	add	r3, sp, #12
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	462a      	mov	r2, r5
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <_vfiprintf_r+0x228>)
 8002b42:	a904      	add	r1, sp, #16
 8002b44:	4630      	mov	r0, r6
 8002b46:	f000 f879 	bl	8002c3c <_printf_i>
 8002b4a:	e7e4      	b.n	8002b16 <_vfiprintf_r+0x1e6>
 8002b4c:	08003980 	.word	0x08003980
 8002b50:	0800398a 	.word	0x0800398a
 8002b54:	00000000 	.word	0x00000000
 8002b58:	0800290b 	.word	0x0800290b
 8002b5c:	08003986 	.word	0x08003986

08002b60 <_printf_common>:
 8002b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b64:	4616      	mov	r6, r2
 8002b66:	4698      	mov	r8, r3
 8002b68:	688a      	ldr	r2, [r1, #8]
 8002b6a:	690b      	ldr	r3, [r1, #16]
 8002b6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b70:	4293      	cmp	r3, r2
 8002b72:	bfb8      	it	lt
 8002b74:	4613      	movlt	r3, r2
 8002b76:	6033      	str	r3, [r6, #0]
 8002b78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b7c:	4607      	mov	r7, r0
 8002b7e:	460c      	mov	r4, r1
 8002b80:	b10a      	cbz	r2, 8002b86 <_printf_common+0x26>
 8002b82:	3301      	adds	r3, #1
 8002b84:	6033      	str	r3, [r6, #0]
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	0699      	lsls	r1, r3, #26
 8002b8a:	bf42      	ittt	mi
 8002b8c:	6833      	ldrmi	r3, [r6, #0]
 8002b8e:	3302      	addmi	r3, #2
 8002b90:	6033      	strmi	r3, [r6, #0]
 8002b92:	6825      	ldr	r5, [r4, #0]
 8002b94:	f015 0506 	ands.w	r5, r5, #6
 8002b98:	d106      	bne.n	8002ba8 <_printf_common+0x48>
 8002b9a:	f104 0a19 	add.w	sl, r4, #25
 8002b9e:	68e3      	ldr	r3, [r4, #12]
 8002ba0:	6832      	ldr	r2, [r6, #0]
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	42ab      	cmp	r3, r5
 8002ba6:	dc26      	bgt.n	8002bf6 <_printf_common+0x96>
 8002ba8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002bac:	6822      	ldr	r2, [r4, #0]
 8002bae:	3b00      	subs	r3, #0
 8002bb0:	bf18      	it	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	0692      	lsls	r2, r2, #26
 8002bb6:	d42b      	bmi.n	8002c10 <_printf_common+0xb0>
 8002bb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bbc:	4641      	mov	r1, r8
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	47c8      	blx	r9
 8002bc2:	3001      	adds	r0, #1
 8002bc4:	d01e      	beq.n	8002c04 <_printf_common+0xa4>
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	6922      	ldr	r2, [r4, #16]
 8002bca:	f003 0306 	and.w	r3, r3, #6
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf02      	ittt	eq
 8002bd2:	68e5      	ldreq	r5, [r4, #12]
 8002bd4:	6833      	ldreq	r3, [r6, #0]
 8002bd6:	1aed      	subeq	r5, r5, r3
 8002bd8:	68a3      	ldr	r3, [r4, #8]
 8002bda:	bf0c      	ite	eq
 8002bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002be0:	2500      	movne	r5, #0
 8002be2:	4293      	cmp	r3, r2
 8002be4:	bfc4      	itt	gt
 8002be6:	1a9b      	subgt	r3, r3, r2
 8002be8:	18ed      	addgt	r5, r5, r3
 8002bea:	2600      	movs	r6, #0
 8002bec:	341a      	adds	r4, #26
 8002bee:	42b5      	cmp	r5, r6
 8002bf0:	d11a      	bne.n	8002c28 <_printf_common+0xc8>
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	e008      	b.n	8002c08 <_printf_common+0xa8>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	4652      	mov	r2, sl
 8002bfa:	4641      	mov	r1, r8
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	47c8      	blx	r9
 8002c00:	3001      	adds	r0, #1
 8002c02:	d103      	bne.n	8002c0c <_printf_common+0xac>
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c0c:	3501      	adds	r5, #1
 8002c0e:	e7c6      	b.n	8002b9e <_printf_common+0x3e>
 8002c10:	18e1      	adds	r1, r4, r3
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	2030      	movs	r0, #48	@ 0x30
 8002c16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c1a:	4422      	add	r2, r4
 8002c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c24:	3302      	adds	r3, #2
 8002c26:	e7c7      	b.n	8002bb8 <_printf_common+0x58>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	4638      	mov	r0, r7
 8002c30:	47c8      	blx	r9
 8002c32:	3001      	adds	r0, #1
 8002c34:	d0e6      	beq.n	8002c04 <_printf_common+0xa4>
 8002c36:	3601      	adds	r6, #1
 8002c38:	e7d9      	b.n	8002bee <_printf_common+0x8e>
	...

08002c3c <_printf_i>:
 8002c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c40:	7e0f      	ldrb	r7, [r1, #24]
 8002c42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c44:	2f78      	cmp	r7, #120	@ 0x78
 8002c46:	4691      	mov	r9, r2
 8002c48:	4680      	mov	r8, r0
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	469a      	mov	sl, r3
 8002c4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c52:	d807      	bhi.n	8002c64 <_printf_i+0x28>
 8002c54:	2f62      	cmp	r7, #98	@ 0x62
 8002c56:	d80a      	bhi.n	8002c6e <_printf_i+0x32>
 8002c58:	2f00      	cmp	r7, #0
 8002c5a:	f000 80d2 	beq.w	8002e02 <_printf_i+0x1c6>
 8002c5e:	2f58      	cmp	r7, #88	@ 0x58
 8002c60:	f000 80b9 	beq.w	8002dd6 <_printf_i+0x19a>
 8002c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c6c:	e03a      	b.n	8002ce4 <_printf_i+0xa8>
 8002c6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c72:	2b15      	cmp	r3, #21
 8002c74:	d8f6      	bhi.n	8002c64 <_printf_i+0x28>
 8002c76:	a101      	add	r1, pc, #4	@ (adr r1, 8002c7c <_printf_i+0x40>)
 8002c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c7c:	08002cd5 	.word	0x08002cd5
 8002c80:	08002ce9 	.word	0x08002ce9
 8002c84:	08002c65 	.word	0x08002c65
 8002c88:	08002c65 	.word	0x08002c65
 8002c8c:	08002c65 	.word	0x08002c65
 8002c90:	08002c65 	.word	0x08002c65
 8002c94:	08002ce9 	.word	0x08002ce9
 8002c98:	08002c65 	.word	0x08002c65
 8002c9c:	08002c65 	.word	0x08002c65
 8002ca0:	08002c65 	.word	0x08002c65
 8002ca4:	08002c65 	.word	0x08002c65
 8002ca8:	08002de9 	.word	0x08002de9
 8002cac:	08002d13 	.word	0x08002d13
 8002cb0:	08002da3 	.word	0x08002da3
 8002cb4:	08002c65 	.word	0x08002c65
 8002cb8:	08002c65 	.word	0x08002c65
 8002cbc:	08002e0b 	.word	0x08002e0b
 8002cc0:	08002c65 	.word	0x08002c65
 8002cc4:	08002d13 	.word	0x08002d13
 8002cc8:	08002c65 	.word	0x08002c65
 8002ccc:	08002c65 	.word	0x08002c65
 8002cd0:	08002dab 	.word	0x08002dab
 8002cd4:	6833      	ldr	r3, [r6, #0]
 8002cd6:	1d1a      	adds	r2, r3, #4
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6032      	str	r2, [r6, #0]
 8002cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ce0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e09d      	b.n	8002e24 <_printf_i+0x1e8>
 8002ce8:	6833      	ldr	r3, [r6, #0]
 8002cea:	6820      	ldr	r0, [r4, #0]
 8002cec:	1d19      	adds	r1, r3, #4
 8002cee:	6031      	str	r1, [r6, #0]
 8002cf0:	0606      	lsls	r6, r0, #24
 8002cf2:	d501      	bpl.n	8002cf8 <_printf_i+0xbc>
 8002cf4:	681d      	ldr	r5, [r3, #0]
 8002cf6:	e003      	b.n	8002d00 <_printf_i+0xc4>
 8002cf8:	0645      	lsls	r5, r0, #25
 8002cfa:	d5fb      	bpl.n	8002cf4 <_printf_i+0xb8>
 8002cfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d00:	2d00      	cmp	r5, #0
 8002d02:	da03      	bge.n	8002d0c <_printf_i+0xd0>
 8002d04:	232d      	movs	r3, #45	@ 0x2d
 8002d06:	426d      	negs	r5, r5
 8002d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d0c:	4859      	ldr	r0, [pc, #356]	@ (8002e74 <_printf_i+0x238>)
 8002d0e:	230a      	movs	r3, #10
 8002d10:	e011      	b.n	8002d36 <_printf_i+0xfa>
 8002d12:	6821      	ldr	r1, [r4, #0]
 8002d14:	6833      	ldr	r3, [r6, #0]
 8002d16:	0608      	lsls	r0, r1, #24
 8002d18:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d1c:	d402      	bmi.n	8002d24 <_printf_i+0xe8>
 8002d1e:	0649      	lsls	r1, r1, #25
 8002d20:	bf48      	it	mi
 8002d22:	b2ad      	uxthmi	r5, r5
 8002d24:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d26:	4853      	ldr	r0, [pc, #332]	@ (8002e74 <_printf_i+0x238>)
 8002d28:	6033      	str	r3, [r6, #0]
 8002d2a:	bf14      	ite	ne
 8002d2c:	230a      	movne	r3, #10
 8002d2e:	2308      	moveq	r3, #8
 8002d30:	2100      	movs	r1, #0
 8002d32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d36:	6866      	ldr	r6, [r4, #4]
 8002d38:	60a6      	str	r6, [r4, #8]
 8002d3a:	2e00      	cmp	r6, #0
 8002d3c:	bfa2      	ittt	ge
 8002d3e:	6821      	ldrge	r1, [r4, #0]
 8002d40:	f021 0104 	bicge.w	r1, r1, #4
 8002d44:	6021      	strge	r1, [r4, #0]
 8002d46:	b90d      	cbnz	r5, 8002d4c <_printf_i+0x110>
 8002d48:	2e00      	cmp	r6, #0
 8002d4a:	d04b      	beq.n	8002de4 <_printf_i+0x1a8>
 8002d4c:	4616      	mov	r6, r2
 8002d4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d52:	fb03 5711 	mls	r7, r3, r1, r5
 8002d56:	5dc7      	ldrb	r7, [r0, r7]
 8002d58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d5c:	462f      	mov	r7, r5
 8002d5e:	42bb      	cmp	r3, r7
 8002d60:	460d      	mov	r5, r1
 8002d62:	d9f4      	bls.n	8002d4e <_printf_i+0x112>
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d10b      	bne.n	8002d80 <_printf_i+0x144>
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	07df      	lsls	r7, r3, #31
 8002d6c:	d508      	bpl.n	8002d80 <_printf_i+0x144>
 8002d6e:	6923      	ldr	r3, [r4, #16]
 8002d70:	6861      	ldr	r1, [r4, #4]
 8002d72:	4299      	cmp	r1, r3
 8002d74:	bfde      	ittt	le
 8002d76:	2330      	movle	r3, #48	@ 0x30
 8002d78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d7c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002d80:	1b92      	subs	r2, r2, r6
 8002d82:	6122      	str	r2, [r4, #16]
 8002d84:	f8cd a000 	str.w	sl, [sp]
 8002d88:	464b      	mov	r3, r9
 8002d8a:	aa03      	add	r2, sp, #12
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	4640      	mov	r0, r8
 8002d90:	f7ff fee6 	bl	8002b60 <_printf_common>
 8002d94:	3001      	adds	r0, #1
 8002d96:	d14a      	bne.n	8002e2e <_printf_i+0x1f2>
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d9c:	b004      	add	sp, #16
 8002d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	f043 0320 	orr.w	r3, r3, #32
 8002da8:	6023      	str	r3, [r4, #0]
 8002daa:	4833      	ldr	r0, [pc, #204]	@ (8002e78 <_printf_i+0x23c>)
 8002dac:	2778      	movs	r7, #120	@ 0x78
 8002dae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	6831      	ldr	r1, [r6, #0]
 8002db6:	061f      	lsls	r7, r3, #24
 8002db8:	f851 5b04 	ldr.w	r5, [r1], #4
 8002dbc:	d402      	bmi.n	8002dc4 <_printf_i+0x188>
 8002dbe:	065f      	lsls	r7, r3, #25
 8002dc0:	bf48      	it	mi
 8002dc2:	b2ad      	uxthmi	r5, r5
 8002dc4:	6031      	str	r1, [r6, #0]
 8002dc6:	07d9      	lsls	r1, r3, #31
 8002dc8:	bf44      	itt	mi
 8002dca:	f043 0320 	orrmi.w	r3, r3, #32
 8002dce:	6023      	strmi	r3, [r4, #0]
 8002dd0:	b11d      	cbz	r5, 8002dda <_printf_i+0x19e>
 8002dd2:	2310      	movs	r3, #16
 8002dd4:	e7ac      	b.n	8002d30 <_printf_i+0xf4>
 8002dd6:	4827      	ldr	r0, [pc, #156]	@ (8002e74 <_printf_i+0x238>)
 8002dd8:	e7e9      	b.n	8002dae <_printf_i+0x172>
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	f023 0320 	bic.w	r3, r3, #32
 8002de0:	6023      	str	r3, [r4, #0]
 8002de2:	e7f6      	b.n	8002dd2 <_printf_i+0x196>
 8002de4:	4616      	mov	r6, r2
 8002de6:	e7bd      	b.n	8002d64 <_printf_i+0x128>
 8002de8:	6833      	ldr	r3, [r6, #0]
 8002dea:	6825      	ldr	r5, [r4, #0]
 8002dec:	6961      	ldr	r1, [r4, #20]
 8002dee:	1d18      	adds	r0, r3, #4
 8002df0:	6030      	str	r0, [r6, #0]
 8002df2:	062e      	lsls	r6, r5, #24
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	d501      	bpl.n	8002dfc <_printf_i+0x1c0>
 8002df8:	6019      	str	r1, [r3, #0]
 8002dfa:	e002      	b.n	8002e02 <_printf_i+0x1c6>
 8002dfc:	0668      	lsls	r0, r5, #25
 8002dfe:	d5fb      	bpl.n	8002df8 <_printf_i+0x1bc>
 8002e00:	8019      	strh	r1, [r3, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	6123      	str	r3, [r4, #16]
 8002e06:	4616      	mov	r6, r2
 8002e08:	e7bc      	b.n	8002d84 <_printf_i+0x148>
 8002e0a:	6833      	ldr	r3, [r6, #0]
 8002e0c:	1d1a      	adds	r2, r3, #4
 8002e0e:	6032      	str	r2, [r6, #0]
 8002e10:	681e      	ldr	r6, [r3, #0]
 8002e12:	6862      	ldr	r2, [r4, #4]
 8002e14:	2100      	movs	r1, #0
 8002e16:	4630      	mov	r0, r6
 8002e18:	f7fd f9da 	bl	80001d0 <memchr>
 8002e1c:	b108      	cbz	r0, 8002e22 <_printf_i+0x1e6>
 8002e1e:	1b80      	subs	r0, r0, r6
 8002e20:	6060      	str	r0, [r4, #4]
 8002e22:	6863      	ldr	r3, [r4, #4]
 8002e24:	6123      	str	r3, [r4, #16]
 8002e26:	2300      	movs	r3, #0
 8002e28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e2c:	e7aa      	b.n	8002d84 <_printf_i+0x148>
 8002e2e:	6923      	ldr	r3, [r4, #16]
 8002e30:	4632      	mov	r2, r6
 8002e32:	4649      	mov	r1, r9
 8002e34:	4640      	mov	r0, r8
 8002e36:	47d0      	blx	sl
 8002e38:	3001      	adds	r0, #1
 8002e3a:	d0ad      	beq.n	8002d98 <_printf_i+0x15c>
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	079b      	lsls	r3, r3, #30
 8002e40:	d413      	bmi.n	8002e6a <_printf_i+0x22e>
 8002e42:	68e0      	ldr	r0, [r4, #12]
 8002e44:	9b03      	ldr	r3, [sp, #12]
 8002e46:	4298      	cmp	r0, r3
 8002e48:	bfb8      	it	lt
 8002e4a:	4618      	movlt	r0, r3
 8002e4c:	e7a6      	b.n	8002d9c <_printf_i+0x160>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4632      	mov	r2, r6
 8002e52:	4649      	mov	r1, r9
 8002e54:	4640      	mov	r0, r8
 8002e56:	47d0      	blx	sl
 8002e58:	3001      	adds	r0, #1
 8002e5a:	d09d      	beq.n	8002d98 <_printf_i+0x15c>
 8002e5c:	3501      	adds	r5, #1
 8002e5e:	68e3      	ldr	r3, [r4, #12]
 8002e60:	9903      	ldr	r1, [sp, #12]
 8002e62:	1a5b      	subs	r3, r3, r1
 8002e64:	42ab      	cmp	r3, r5
 8002e66:	dcf2      	bgt.n	8002e4e <_printf_i+0x212>
 8002e68:	e7eb      	b.n	8002e42 <_printf_i+0x206>
 8002e6a:	2500      	movs	r5, #0
 8002e6c:	f104 0619 	add.w	r6, r4, #25
 8002e70:	e7f5      	b.n	8002e5e <_printf_i+0x222>
 8002e72:	bf00      	nop
 8002e74:	08003991 	.word	0x08003991
 8002e78:	080039a2 	.word	0x080039a2

08002e7c <__sflush_r>:
 8002e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e84:	0716      	lsls	r6, r2, #28
 8002e86:	4605      	mov	r5, r0
 8002e88:	460c      	mov	r4, r1
 8002e8a:	d454      	bmi.n	8002f36 <__sflush_r+0xba>
 8002e8c:	684b      	ldr	r3, [r1, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	dc02      	bgt.n	8002e98 <__sflush_r+0x1c>
 8002e92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	dd48      	ble.n	8002f2a <__sflush_r+0xae>
 8002e98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e9a:	2e00      	cmp	r6, #0
 8002e9c:	d045      	beq.n	8002f2a <__sflush_r+0xae>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002ea4:	682f      	ldr	r7, [r5, #0]
 8002ea6:	6a21      	ldr	r1, [r4, #32]
 8002ea8:	602b      	str	r3, [r5, #0]
 8002eaa:	d030      	beq.n	8002f0e <__sflush_r+0x92>
 8002eac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	0759      	lsls	r1, r3, #29
 8002eb2:	d505      	bpl.n	8002ec0 <__sflush_r+0x44>
 8002eb4:	6863      	ldr	r3, [r4, #4]
 8002eb6:	1ad2      	subs	r2, r2, r3
 8002eb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002eba:	b10b      	cbz	r3, 8002ec0 <__sflush_r+0x44>
 8002ebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ebe:	1ad2      	subs	r2, r2, r3
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ec4:	6a21      	ldr	r1, [r4, #32]
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	47b0      	blx	r6
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	d106      	bne.n	8002ede <__sflush_r+0x62>
 8002ed0:	6829      	ldr	r1, [r5, #0]
 8002ed2:	291d      	cmp	r1, #29
 8002ed4:	d82b      	bhi.n	8002f2e <__sflush_r+0xb2>
 8002ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8002f80 <__sflush_r+0x104>)
 8002ed8:	410a      	asrs	r2, r1
 8002eda:	07d6      	lsls	r6, r2, #31
 8002edc:	d427      	bmi.n	8002f2e <__sflush_r+0xb2>
 8002ede:	2200      	movs	r2, #0
 8002ee0:	6062      	str	r2, [r4, #4]
 8002ee2:	04d9      	lsls	r1, r3, #19
 8002ee4:	6922      	ldr	r2, [r4, #16]
 8002ee6:	6022      	str	r2, [r4, #0]
 8002ee8:	d504      	bpl.n	8002ef4 <__sflush_r+0x78>
 8002eea:	1c42      	adds	r2, r0, #1
 8002eec:	d101      	bne.n	8002ef2 <__sflush_r+0x76>
 8002eee:	682b      	ldr	r3, [r5, #0]
 8002ef0:	b903      	cbnz	r3, 8002ef4 <__sflush_r+0x78>
 8002ef2:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ef6:	602f      	str	r7, [r5, #0]
 8002ef8:	b1b9      	cbz	r1, 8002f2a <__sflush_r+0xae>
 8002efa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002efe:	4299      	cmp	r1, r3
 8002f00:	d002      	beq.n	8002f08 <__sflush_r+0x8c>
 8002f02:	4628      	mov	r0, r5
 8002f04:	f7ff fbf2 	bl	80026ec <_free_r>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f0c:	e00d      	b.n	8002f2a <__sflush_r+0xae>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	4628      	mov	r0, r5
 8002f12:	47b0      	blx	r6
 8002f14:	4602      	mov	r2, r0
 8002f16:	1c50      	adds	r0, r2, #1
 8002f18:	d1c9      	bne.n	8002eae <__sflush_r+0x32>
 8002f1a:	682b      	ldr	r3, [r5, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0c6      	beq.n	8002eae <__sflush_r+0x32>
 8002f20:	2b1d      	cmp	r3, #29
 8002f22:	d001      	beq.n	8002f28 <__sflush_r+0xac>
 8002f24:	2b16      	cmp	r3, #22
 8002f26:	d11e      	bne.n	8002f66 <__sflush_r+0xea>
 8002f28:	602f      	str	r7, [r5, #0]
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	e022      	b.n	8002f74 <__sflush_r+0xf8>
 8002f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	e01b      	b.n	8002f6e <__sflush_r+0xf2>
 8002f36:	690f      	ldr	r7, [r1, #16]
 8002f38:	2f00      	cmp	r7, #0
 8002f3a:	d0f6      	beq.n	8002f2a <__sflush_r+0xae>
 8002f3c:	0793      	lsls	r3, r2, #30
 8002f3e:	680e      	ldr	r6, [r1, #0]
 8002f40:	bf08      	it	eq
 8002f42:	694b      	ldreq	r3, [r1, #20]
 8002f44:	600f      	str	r7, [r1, #0]
 8002f46:	bf18      	it	ne
 8002f48:	2300      	movne	r3, #0
 8002f4a:	eba6 0807 	sub.w	r8, r6, r7
 8002f4e:	608b      	str	r3, [r1, #8]
 8002f50:	f1b8 0f00 	cmp.w	r8, #0
 8002f54:	dde9      	ble.n	8002f2a <__sflush_r+0xae>
 8002f56:	6a21      	ldr	r1, [r4, #32]
 8002f58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002f5a:	4643      	mov	r3, r8
 8002f5c:	463a      	mov	r2, r7
 8002f5e:	4628      	mov	r0, r5
 8002f60:	47b0      	blx	r6
 8002f62:	2800      	cmp	r0, #0
 8002f64:	dc08      	bgt.n	8002f78 <__sflush_r+0xfc>
 8002f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f6e:	81a3      	strh	r3, [r4, #12]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f78:	4407      	add	r7, r0
 8002f7a:	eba8 0800 	sub.w	r8, r8, r0
 8002f7e:	e7e7      	b.n	8002f50 <__sflush_r+0xd4>
 8002f80:	dfbffffe 	.word	0xdfbffffe

08002f84 <_fflush_r>:
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	690b      	ldr	r3, [r1, #16]
 8002f88:	4605      	mov	r5, r0
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	b913      	cbnz	r3, 8002f94 <_fflush_r+0x10>
 8002f8e:	2500      	movs	r5, #0
 8002f90:	4628      	mov	r0, r5
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	b118      	cbz	r0, 8002f9e <_fflush_r+0x1a>
 8002f96:	6a03      	ldr	r3, [r0, #32]
 8002f98:	b90b      	cbnz	r3, 8002f9e <_fflush_r+0x1a>
 8002f9a:	f7ff f9ad 	bl	80022f8 <__sinit>
 8002f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f3      	beq.n	8002f8e <_fflush_r+0xa>
 8002fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002fa8:	07d0      	lsls	r0, r2, #31
 8002faa:	d404      	bmi.n	8002fb6 <_fflush_r+0x32>
 8002fac:	0599      	lsls	r1, r3, #22
 8002fae:	d402      	bmi.n	8002fb6 <_fflush_r+0x32>
 8002fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fb2:	f7ff fb98 	bl	80026e6 <__retarget_lock_acquire_recursive>
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	4621      	mov	r1, r4
 8002fba:	f7ff ff5f 	bl	8002e7c <__sflush_r>
 8002fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fc0:	07da      	lsls	r2, r3, #31
 8002fc2:	4605      	mov	r5, r0
 8002fc4:	d4e4      	bmi.n	8002f90 <_fflush_r+0xc>
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	059b      	lsls	r3, r3, #22
 8002fca:	d4e1      	bmi.n	8002f90 <_fflush_r+0xc>
 8002fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fce:	f7ff fb8b 	bl	80026e8 <__retarget_lock_release_recursive>
 8002fd2:	e7dd      	b.n	8002f90 <_fflush_r+0xc>

08002fd4 <__swhatbuf_r>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	460c      	mov	r4, r1
 8002fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fdc:	2900      	cmp	r1, #0
 8002fde:	b096      	sub	sp, #88	@ 0x58
 8002fe0:	4615      	mov	r5, r2
 8002fe2:	461e      	mov	r6, r3
 8002fe4:	da0d      	bge.n	8003002 <__swhatbuf_r+0x2e>
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2340      	movne	r3, #64	@ 0x40
 8002ff4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	6031      	str	r1, [r6, #0]
 8002ffc:	602b      	str	r3, [r5, #0]
 8002ffe:	b016      	add	sp, #88	@ 0x58
 8003000:	bd70      	pop	{r4, r5, r6, pc}
 8003002:	466a      	mov	r2, sp
 8003004:	f000 f848 	bl	8003098 <_fstat_r>
 8003008:	2800      	cmp	r0, #0
 800300a:	dbec      	blt.n	8002fe6 <__swhatbuf_r+0x12>
 800300c:	9901      	ldr	r1, [sp, #4]
 800300e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003012:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003016:	4259      	negs	r1, r3
 8003018:	4159      	adcs	r1, r3
 800301a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800301e:	e7eb      	b.n	8002ff8 <__swhatbuf_r+0x24>

08003020 <__smakebuf_r>:
 8003020:	898b      	ldrh	r3, [r1, #12]
 8003022:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003024:	079d      	lsls	r5, r3, #30
 8003026:	4606      	mov	r6, r0
 8003028:	460c      	mov	r4, r1
 800302a:	d507      	bpl.n	800303c <__smakebuf_r+0x1c>
 800302c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	6123      	str	r3, [r4, #16]
 8003034:	2301      	movs	r3, #1
 8003036:	6163      	str	r3, [r4, #20]
 8003038:	b003      	add	sp, #12
 800303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303c:	ab01      	add	r3, sp, #4
 800303e:	466a      	mov	r2, sp
 8003040:	f7ff ffc8 	bl	8002fd4 <__swhatbuf_r>
 8003044:	9f00      	ldr	r7, [sp, #0]
 8003046:	4605      	mov	r5, r0
 8003048:	4639      	mov	r1, r7
 800304a:	4630      	mov	r0, r6
 800304c:	f7ff fbba 	bl	80027c4 <_malloc_r>
 8003050:	b948      	cbnz	r0, 8003066 <__smakebuf_r+0x46>
 8003052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003056:	059a      	lsls	r2, r3, #22
 8003058:	d4ee      	bmi.n	8003038 <__smakebuf_r+0x18>
 800305a:	f023 0303 	bic.w	r3, r3, #3
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	81a3      	strh	r3, [r4, #12]
 8003064:	e7e2      	b.n	800302c <__smakebuf_r+0xc>
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	6020      	str	r0, [r4, #0]
 800306a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800306e:	81a3      	strh	r3, [r4, #12]
 8003070:	9b01      	ldr	r3, [sp, #4]
 8003072:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003076:	b15b      	cbz	r3, 8003090 <__smakebuf_r+0x70>
 8003078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800307c:	4630      	mov	r0, r6
 800307e:	f000 f81d 	bl	80030bc <_isatty_r>
 8003082:	b128      	cbz	r0, 8003090 <__smakebuf_r+0x70>
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	81a3      	strh	r3, [r4, #12]
 8003090:	89a3      	ldrh	r3, [r4, #12]
 8003092:	431d      	orrs	r5, r3
 8003094:	81a5      	strh	r5, [r4, #12]
 8003096:	e7cf      	b.n	8003038 <__smakebuf_r+0x18>

08003098 <_fstat_r>:
 8003098:	b538      	push	{r3, r4, r5, lr}
 800309a:	4d07      	ldr	r5, [pc, #28]	@ (80030b8 <_fstat_r+0x20>)
 800309c:	2300      	movs	r3, #0
 800309e:	4604      	mov	r4, r0
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	602b      	str	r3, [r5, #0]
 80030a6:	f7fd fd34 	bl	8000b12 <_fstat>
 80030aa:	1c43      	adds	r3, r0, #1
 80030ac:	d102      	bne.n	80030b4 <_fstat_r+0x1c>
 80030ae:	682b      	ldr	r3, [r5, #0]
 80030b0:	b103      	cbz	r3, 80030b4 <_fstat_r+0x1c>
 80030b2:	6023      	str	r3, [r4, #0]
 80030b4:	bd38      	pop	{r3, r4, r5, pc}
 80030b6:	bf00      	nop
 80030b8:	200003e8 	.word	0x200003e8

080030bc <_isatty_r>:
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	4d06      	ldr	r5, [pc, #24]	@ (80030d8 <_isatty_r+0x1c>)
 80030c0:	2300      	movs	r3, #0
 80030c2:	4604      	mov	r4, r0
 80030c4:	4608      	mov	r0, r1
 80030c6:	602b      	str	r3, [r5, #0]
 80030c8:	f7fd fd28 	bl	8000b1c <_isatty>
 80030cc:	1c43      	adds	r3, r0, #1
 80030ce:	d102      	bne.n	80030d6 <_isatty_r+0x1a>
 80030d0:	682b      	ldr	r3, [r5, #0]
 80030d2:	b103      	cbz	r3, 80030d6 <_isatty_r+0x1a>
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	bd38      	pop	{r3, r4, r5, pc}
 80030d8:	200003e8 	.word	0x200003e8

080030dc <_sbrk_r>:
 80030dc:	b538      	push	{r3, r4, r5, lr}
 80030de:	4d06      	ldr	r5, [pc, #24]	@ (80030f8 <_sbrk_r+0x1c>)
 80030e0:	2300      	movs	r3, #0
 80030e2:	4604      	mov	r4, r0
 80030e4:	4608      	mov	r0, r1
 80030e6:	602b      	str	r3, [r5, #0]
 80030e8:	f7fd fd1c 	bl	8000b24 <_sbrk>
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	d102      	bne.n	80030f6 <_sbrk_r+0x1a>
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	b103      	cbz	r3, 80030f6 <_sbrk_r+0x1a>
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
 80030f8:	200003e8 	.word	0x200003e8

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
